
Sensor_Board_Dataset.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000140fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  08014290  08014290  00015290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080147d0  080147d0  00016288  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080147d0  080147d0  000157d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080147d8  080147d8  00016288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080147d8  080147d8  000157d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080147dc  080147dc  000157dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000288  20000000  080147e0  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b8  20000288  08014a68  00016288  2**2
                  ALLOC
 10 ._user_heap_stack 00001a00  20000b40  08014a68  00016b40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016288  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040980  00000000  00000000  000162b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006295  00000000  00000000  00056c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003828  00000000  00000000  0005ced0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002b9a  00000000  00000000  000606f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ef59  00000000  00000000  00063292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000370b9  00000000  00000000  000921eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ab20  00000000  00000000  000c92a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e3dc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001008c  00000000  00000000  001e3e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  001f3e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000288 	.word	0x20000288
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014274 	.word	0x08014274

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000028c 	.word	0x2000028c
 80001cc:	08014274 	.word	0x08014274

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b988 	b.w	8000f60 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	468e      	mov	lr, r1
 8000c70:	4604      	mov	r4, r0
 8000c72:	4688      	mov	r8, r1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d14a      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4617      	mov	r7, r2
 8000c7c:	d962      	bls.n	8000d44 <__udivmoddi4+0xdc>
 8000c7e:	fab2 f682 	clz	r6, r2
 8000c82:	b14e      	cbz	r6, 8000c98 <__udivmoddi4+0x30>
 8000c84:	f1c6 0320 	rsb	r3, r6, #32
 8000c88:	fa01 f806 	lsl.w	r8, r1, r6
 8000c8c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c90:	40b7      	lsls	r7, r6
 8000c92:	ea43 0808 	orr.w	r8, r3, r8
 8000c96:	40b4      	lsls	r4, r6
 8000c98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c9c:	fa1f fc87 	uxth.w	ip, r7
 8000ca0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ca4:	0c23      	lsrs	r3, r4, #16
 8000ca6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000caa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cae:	fb01 f20c 	mul.w	r2, r1, ip
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0x62>
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cbc:	f080 80ea 	bcs.w	8000e94 <__udivmoddi4+0x22c>
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	f240 80e7 	bls.w	8000e94 <__udivmoddi4+0x22c>
 8000cc6:	3902      	subs	r1, #2
 8000cc8:	443b      	add	r3, r7
 8000cca:	1a9a      	subs	r2, r3, r2
 8000ccc:	b2a3      	uxth	r3, r4
 8000cce:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cd2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cda:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cde:	459c      	cmp	ip, r3
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0x8e>
 8000ce2:	18fb      	adds	r3, r7, r3
 8000ce4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ce8:	f080 80d6 	bcs.w	8000e98 <__udivmoddi4+0x230>
 8000cec:	459c      	cmp	ip, r3
 8000cee:	f240 80d3 	bls.w	8000e98 <__udivmoddi4+0x230>
 8000cf2:	443b      	add	r3, r7
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cfa:	eba3 030c 	sub.w	r3, r3, ip
 8000cfe:	2100      	movs	r1, #0
 8000d00:	b11d      	cbz	r5, 8000d0a <__udivmoddi4+0xa2>
 8000d02:	40f3      	lsrs	r3, r6
 8000d04:	2200      	movs	r2, #0
 8000d06:	e9c5 3200 	strd	r3, r2, [r5]
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d905      	bls.n	8000d1e <__udivmoddi4+0xb6>
 8000d12:	b10d      	cbz	r5, 8000d18 <__udivmoddi4+0xb0>
 8000d14:	e9c5 0100 	strd	r0, r1, [r5]
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4608      	mov	r0, r1
 8000d1c:	e7f5      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000d1e:	fab3 f183 	clz	r1, r3
 8000d22:	2900      	cmp	r1, #0
 8000d24:	d146      	bne.n	8000db4 <__udivmoddi4+0x14c>
 8000d26:	4573      	cmp	r3, lr
 8000d28:	d302      	bcc.n	8000d30 <__udivmoddi4+0xc8>
 8000d2a:	4282      	cmp	r2, r0
 8000d2c:	f200 8105 	bhi.w	8000f3a <__udivmoddi4+0x2d2>
 8000d30:	1a84      	subs	r4, r0, r2
 8000d32:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d36:	2001      	movs	r0, #1
 8000d38:	4690      	mov	r8, r2
 8000d3a:	2d00      	cmp	r5, #0
 8000d3c:	d0e5      	beq.n	8000d0a <__udivmoddi4+0xa2>
 8000d3e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d42:	e7e2      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	f000 8090 	beq.w	8000e6a <__udivmoddi4+0x202>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	f040 80a4 	bne.w	8000e9c <__udivmoddi4+0x234>
 8000d54:	1a8a      	subs	r2, r1, r2
 8000d56:	0c03      	lsrs	r3, r0, #16
 8000d58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5c:	b280      	uxth	r0, r0
 8000d5e:	b2bc      	uxth	r4, r7
 8000d60:	2101      	movs	r1, #1
 8000d62:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d66:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d6e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x11e>
 8000d76:	18fb      	adds	r3, r7, r3
 8000d78:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d7c:	d202      	bcs.n	8000d84 <__udivmoddi4+0x11c>
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	f200 80e0 	bhi.w	8000f44 <__udivmoddi4+0x2dc>
 8000d84:	46c4      	mov	ip, r8
 8000d86:	1a9b      	subs	r3, r3, r2
 8000d88:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d8c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d90:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d94:	fb02 f404 	mul.w	r4, r2, r4
 8000d98:	429c      	cmp	r4, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x144>
 8000d9c:	18fb      	adds	r3, r7, r3
 8000d9e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x142>
 8000da4:	429c      	cmp	r4, r3
 8000da6:	f200 80ca 	bhi.w	8000f3e <__udivmoddi4+0x2d6>
 8000daa:	4602      	mov	r2, r0
 8000dac:	1b1b      	subs	r3, r3, r4
 8000dae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000db2:	e7a5      	b.n	8000d00 <__udivmoddi4+0x98>
 8000db4:	f1c1 0620 	rsb	r6, r1, #32
 8000db8:	408b      	lsls	r3, r1
 8000dba:	fa22 f706 	lsr.w	r7, r2, r6
 8000dbe:	431f      	orrs	r7, r3
 8000dc0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dc4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dc8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dcc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000dd0:	4323      	orrs	r3, r4
 8000dd2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dd6:	fa1f fc87 	uxth.w	ip, r7
 8000dda:	fbbe f0f9 	udiv	r0, lr, r9
 8000dde:	0c1c      	lsrs	r4, r3, #16
 8000de0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000de4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000de8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	fa02 f201 	lsl.w	r2, r2, r1
 8000df2:	d909      	bls.n	8000e08 <__udivmoddi4+0x1a0>
 8000df4:	193c      	adds	r4, r7, r4
 8000df6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dfa:	f080 809c 	bcs.w	8000f36 <__udivmoddi4+0x2ce>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f240 8099 	bls.w	8000f36 <__udivmoddi4+0x2ce>
 8000e04:	3802      	subs	r0, #2
 8000e06:	443c      	add	r4, r7
 8000e08:	eba4 040e 	sub.w	r4, r4, lr
 8000e0c:	fa1f fe83 	uxth.w	lr, r3
 8000e10:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e14:	fb09 4413 	mls	r4, r9, r3, r4
 8000e18:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e1c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e20:	45a4      	cmp	ip, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x1ce>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e2a:	f080 8082 	bcs.w	8000f32 <__udivmoddi4+0x2ca>
 8000e2e:	45a4      	cmp	ip, r4
 8000e30:	d97f      	bls.n	8000f32 <__udivmoddi4+0x2ca>
 8000e32:	3b02      	subs	r3, #2
 8000e34:	443c      	add	r4, r7
 8000e36:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e3a:	eba4 040c 	sub.w	r4, r4, ip
 8000e3e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e42:	4564      	cmp	r4, ip
 8000e44:	4673      	mov	r3, lr
 8000e46:	46e1      	mov	r9, ip
 8000e48:	d362      	bcc.n	8000f10 <__udivmoddi4+0x2a8>
 8000e4a:	d05f      	beq.n	8000f0c <__udivmoddi4+0x2a4>
 8000e4c:	b15d      	cbz	r5, 8000e66 <__udivmoddi4+0x1fe>
 8000e4e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e52:	eb64 0409 	sbc.w	r4, r4, r9
 8000e56:	fa04 f606 	lsl.w	r6, r4, r6
 8000e5a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e5e:	431e      	orrs	r6, r3
 8000e60:	40cc      	lsrs	r4, r1
 8000e62:	e9c5 6400 	strd	r6, r4, [r5]
 8000e66:	2100      	movs	r1, #0
 8000e68:	e74f      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000e6a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e6e:	0c01      	lsrs	r1, r0, #16
 8000e70:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e74:	b280      	uxth	r0, r0
 8000e76:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	4638      	mov	r0, r7
 8000e7e:	463c      	mov	r4, r7
 8000e80:	46b8      	mov	r8, r7
 8000e82:	46be      	mov	lr, r7
 8000e84:	2620      	movs	r6, #32
 8000e86:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e8a:	eba2 0208 	sub.w	r2, r2, r8
 8000e8e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e92:	e766      	b.n	8000d62 <__udivmoddi4+0xfa>
 8000e94:	4601      	mov	r1, r0
 8000e96:	e718      	b.n	8000cca <__udivmoddi4+0x62>
 8000e98:	4610      	mov	r0, r2
 8000e9a:	e72c      	b.n	8000cf6 <__udivmoddi4+0x8e>
 8000e9c:	f1c6 0220 	rsb	r2, r6, #32
 8000ea0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ea4:	40b7      	lsls	r7, r6
 8000ea6:	40b1      	lsls	r1, r6
 8000ea8:	fa20 f202 	lsr.w	r2, r0, r2
 8000eac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000eb6:	b2bc      	uxth	r4, r7
 8000eb8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb08 f904 	mul.w	r9, r8, r4
 8000ec6:	40b0      	lsls	r0, r6
 8000ec8:	4589      	cmp	r9, r1
 8000eca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ece:	b280      	uxth	r0, r0
 8000ed0:	d93e      	bls.n	8000f50 <__udivmoddi4+0x2e8>
 8000ed2:	1879      	adds	r1, r7, r1
 8000ed4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ed8:	d201      	bcs.n	8000ede <__udivmoddi4+0x276>
 8000eda:	4589      	cmp	r9, r1
 8000edc:	d81f      	bhi.n	8000f1e <__udivmoddi4+0x2b6>
 8000ede:	eba1 0109 	sub.w	r1, r1, r9
 8000ee2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee6:	fb09 f804 	mul.w	r8, r9, r4
 8000eea:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eee:	b292      	uxth	r2, r2
 8000ef0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef4:	4542      	cmp	r2, r8
 8000ef6:	d229      	bcs.n	8000f4c <__udivmoddi4+0x2e4>
 8000ef8:	18ba      	adds	r2, r7, r2
 8000efa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000efe:	d2c4      	bcs.n	8000e8a <__udivmoddi4+0x222>
 8000f00:	4542      	cmp	r2, r8
 8000f02:	d2c2      	bcs.n	8000e8a <__udivmoddi4+0x222>
 8000f04:	f1a9 0102 	sub.w	r1, r9, #2
 8000f08:	443a      	add	r2, r7
 8000f0a:	e7be      	b.n	8000e8a <__udivmoddi4+0x222>
 8000f0c:	45f0      	cmp	r8, lr
 8000f0e:	d29d      	bcs.n	8000e4c <__udivmoddi4+0x1e4>
 8000f10:	ebbe 0302 	subs.w	r3, lr, r2
 8000f14:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f18:	3801      	subs	r0, #1
 8000f1a:	46e1      	mov	r9, ip
 8000f1c:	e796      	b.n	8000e4c <__udivmoddi4+0x1e4>
 8000f1e:	eba7 0909 	sub.w	r9, r7, r9
 8000f22:	4449      	add	r1, r9
 8000f24:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f28:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f2c:	fb09 f804 	mul.w	r8, r9, r4
 8000f30:	e7db      	b.n	8000eea <__udivmoddi4+0x282>
 8000f32:	4673      	mov	r3, lr
 8000f34:	e77f      	b.n	8000e36 <__udivmoddi4+0x1ce>
 8000f36:	4650      	mov	r0, sl
 8000f38:	e766      	b.n	8000e08 <__udivmoddi4+0x1a0>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e6fd      	b.n	8000d3a <__udivmoddi4+0xd2>
 8000f3e:	443b      	add	r3, r7
 8000f40:	3a02      	subs	r2, #2
 8000f42:	e733      	b.n	8000dac <__udivmoddi4+0x144>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	443b      	add	r3, r7
 8000f4a:	e71c      	b.n	8000d86 <__udivmoddi4+0x11e>
 8000f4c:	4649      	mov	r1, r9
 8000f4e:	e79c      	b.n	8000e8a <__udivmoddi4+0x222>
 8000f50:	eba1 0109 	sub.w	r1, r1, r9
 8000f54:	46c4      	mov	ip, r8
 8000f56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f5a:	fb09 f804 	mul.w	r8, r9, r4
 8000f5e:	e7c4      	b.n	8000eea <__udivmoddi4+0x282>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f68:	f00b fb90 	bl	800c68c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6c:	f000 f819 	bl	8000fa2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f70:	f000 fa14 	bl	800139c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f74:	f000 f9ec 	bl	8001350 <MX_DMA_Init>
  MX_CRC_Init();
 8000f78:	f000 f866 	bl	8001048 <MX_CRC_Init>
  MX_RTC_Init();
 8000f7c:	f000 f886 	bl	800108c <MX_RTC_Init>
  MX_TIM3_Init();
 8000f80:	f000 f968 	bl	8001254 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000f84:	f000 f9b4 	bl	80012f0 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000f88:	f000 f8dc 	bl	8001144 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000f8c:	f000 f914 	bl	80011b8 <MX_TIM2_Init>
  MX_MEMS_Init();
 8000f90:	f000 fea0 	bl	8001cd4 <MX_MEMS_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(10);
 8000f94:	200a      	movs	r0, #10
 8000f96:	f00b fbf5 	bl	800c784 <HAL_Delay>
	  MX_MEMS_Process();
 8000f9a:	f000 fea1 	bl	8001ce0 <MX_MEMS_Process>
	  HAL_Delay(10);
 8000f9e:	bf00      	nop
 8000fa0:	e7f8      	b.n	8000f94 <main+0x30>

08000fa2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b096      	sub	sp, #88	@ 0x58
 8000fa6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2244      	movs	r2, #68	@ 0x44
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f011 f9f8 	bl	80123a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fc4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fc8:	f00d fc0e 	bl	800e7e8 <HAL_PWREx_ControlVoltageScaling>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fd2:	f000 fa1f 	bl	8001414 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000fd6:	230a      	movs	r3, #10
 8000fd8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe0:	2310      	movs	r3, #16
 8000fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fec:	2302      	movs	r3, #2
 8000fee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ff4:	230a      	movs	r3, #10
 8000ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ff8:	2307      	movs	r3, #7
 8000ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001000:	2302      	movs	r3, #2
 8001002:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4618      	mov	r0, r3
 800100a:	f00d fc43 	bl	800e894 <HAL_RCC_OscConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001014:	f000 f9fe 	bl	8001414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001018:	230f      	movs	r3, #15
 800101a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800101c:	2303      	movs	r3, #3
 800101e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001020:	2300      	movs	r3, #0
 8001022:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800102c:	463b      	mov	r3, r7
 800102e:	2104      	movs	r1, #4
 8001030:	4618      	mov	r0, r3
 8001032:	f00e f80b 	bl	800f04c <HAL_RCC_ClockConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800103c:	f000 f9ea 	bl	8001414 <Error_Handler>
  }
}
 8001040:	bf00      	nop
 8001042:	3758      	adds	r7, #88	@ 0x58
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800104c:	4b0d      	ldr	r3, [pc, #52]	@ (8001084 <MX_CRC_Init+0x3c>)
 800104e:	4a0e      	ldr	r2, [pc, #56]	@ (8001088 <MX_CRC_Init+0x40>)
 8001050:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001052:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <MX_CRC_Init+0x3c>)
 8001054:	2200      	movs	r2, #0
 8001056:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001058:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <MX_CRC_Init+0x3c>)
 800105a:	2200      	movs	r2, #0
 800105c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800105e:	4b09      	ldr	r3, [pc, #36]	@ (8001084 <MX_CRC_Init+0x3c>)
 8001060:	2200      	movs	r2, #0
 8001062:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001064:	4b07      	ldr	r3, [pc, #28]	@ (8001084 <MX_CRC_Init+0x3c>)
 8001066:	2200      	movs	r2, #0
 8001068:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800106a:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <MX_CRC_Init+0x3c>)
 800106c:	2201      	movs	r2, #1
 800106e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001070:	4804      	ldr	r0, [pc, #16]	@ (8001084 <MX_CRC_Init+0x3c>)
 8001072:	f00b fcbd 	bl	800c9f0 <HAL_CRC_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800107c:	f000 f9ca 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	200002a4 	.word	0x200002a4
 8001088:	40023000 	.word	0x40023000

0800108c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80010a0:	2300      	movs	r3, #0
 80010a2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010a4:	4b25      	ldr	r3, [pc, #148]	@ (800113c <MX_RTC_Init+0xb0>)
 80010a6:	4a26      	ldr	r2, [pc, #152]	@ (8001140 <MX_RTC_Init+0xb4>)
 80010a8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010aa:	4b24      	ldr	r3, [pc, #144]	@ (800113c <MX_RTC_Init+0xb0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010b0:	4b22      	ldr	r3, [pc, #136]	@ (800113c <MX_RTC_Init+0xb0>)
 80010b2:	227f      	movs	r2, #127	@ 0x7f
 80010b4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010b6:	4b21      	ldr	r3, [pc, #132]	@ (800113c <MX_RTC_Init+0xb0>)
 80010b8:	22ff      	movs	r2, #255	@ 0xff
 80010ba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010bc:	4b1f      	ldr	r3, [pc, #124]	@ (800113c <MX_RTC_Init+0xb0>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80010c2:	4b1e      	ldr	r3, [pc, #120]	@ (800113c <MX_RTC_Init+0xb0>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010c8:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <MX_RTC_Init+0xb0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010ce:	4b1b      	ldr	r3, [pc, #108]	@ (800113c <MX_RTC_Init+0xb0>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010d4:	4819      	ldr	r0, [pc, #100]	@ (800113c <MX_RTC_Init+0xb0>)
 80010d6:	f00e fe99 	bl	800fe0c <HAL_RTC_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80010e0:	f000 f998 	bl	8001414 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2201      	movs	r2, #1
 80010fc:	4619      	mov	r1, r3
 80010fe:	480f      	ldr	r0, [pc, #60]	@ (800113c <MX_RTC_Init+0xb0>)
 8001100:	f00e ff0c 	bl	800ff1c <HAL_RTC_SetTime>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800110a:	f000 f983 	bl	8001414 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800110e:	2301      	movs	r3, #1
 8001110:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001112:	2301      	movs	r3, #1
 8001114:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001116:	2301      	movs	r3, #1
 8001118:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800111a:	2300      	movs	r3, #0
 800111c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800111e:	463b      	mov	r3, r7
 8001120:	2201      	movs	r2, #1
 8001122:	4619      	mov	r1, r3
 8001124:	4805      	ldr	r0, [pc, #20]	@ (800113c <MX_RTC_Init+0xb0>)
 8001126:	f00e ff96 	bl	8010056 <HAL_RTC_SetDate>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001130:	f000 f970 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001134:	bf00      	nop
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200002c8 	.word	0x200002c8
 8001140:	40002800 	.word	0x40002800

08001144 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001148:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <MX_SPI2_Init+0x6c>)
 800114a:	4a1a      	ldr	r2, [pc, #104]	@ (80011b4 <MX_SPI2_Init+0x70>)
 800114c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800114e:	4b18      	ldr	r3, [pc, #96]	@ (80011b0 <MX_SPI2_Init+0x6c>)
 8001150:	2200      	movs	r2, #0
 8001152:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001154:	4b16      	ldr	r3, [pc, #88]	@ (80011b0 <MX_SPI2_Init+0x6c>)
 8001156:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800115a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800115c:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <MX_SPI2_Init+0x6c>)
 800115e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001162:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001164:	4b12      	ldr	r3, [pc, #72]	@ (80011b0 <MX_SPI2_Init+0x6c>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800116a:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <MX_SPI2_Init+0x6c>)
 800116c:	2200      	movs	r2, #0
 800116e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001170:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <MX_SPI2_Init+0x6c>)
 8001172:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001176:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001178:	4b0d      	ldr	r3, [pc, #52]	@ (80011b0 <MX_SPI2_Init+0x6c>)
 800117a:	2200      	movs	r2, #0
 800117c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800117e:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <MX_SPI2_Init+0x6c>)
 8001180:	2200      	movs	r2, #0
 8001182:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001184:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <MX_SPI2_Init+0x6c>)
 8001186:	2200      	movs	r2, #0
 8001188:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800118a:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <MX_SPI2_Init+0x6c>)
 800118c:	2207      	movs	r2, #7
 800118e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001190:	4b07      	ldr	r3, [pc, #28]	@ (80011b0 <MX_SPI2_Init+0x6c>)
 8001192:	2200      	movs	r2, #0
 8001194:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001196:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <MX_SPI2_Init+0x6c>)
 8001198:	2200      	movs	r2, #0
 800119a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800119c:	4804      	ldr	r0, [pc, #16]	@ (80011b0 <MX_SPI2_Init+0x6c>)
 800119e:	f00f f897 	bl	80102d0 <HAL_SPI_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_SPI2_Init+0x68>
  {
    Error_Handler();
 80011a8:	f000 f934 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200002ec 	.word	0x200002ec
 80011b4:	40003800 	.word	0x40003800

080011b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001250 <MX_TIM2_Init+0x98>)
 80011d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 19999;
 80011de:	4b1c      	ldr	r3, [pc, #112]	@ (8001250 <MX_TIM2_Init+0x98>)
 80011e0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80011e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001250 <MX_TIM2_Init+0x98>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80011ec:	4b18      	ldr	r3, [pc, #96]	@ (8001250 <MX_TIM2_Init+0x98>)
 80011ee:	f04f 32ff 	mov.w	r2, #4294967295
 80011f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f4:	4b16      	ldr	r3, [pc, #88]	@ (8001250 <MX_TIM2_Init+0x98>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fa:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <MX_TIM2_Init+0x98>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001200:	4813      	ldr	r0, [pc, #76]	@ (8001250 <MX_TIM2_Init+0x98>)
 8001202:	f00f fa28 	bl	8010656 <HAL_TIM_Base_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800120c:	f000 f902 	bl	8001414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001210:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001214:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001216:	f107 0310 	add.w	r3, r7, #16
 800121a:	4619      	mov	r1, r3
 800121c:	480c      	ldr	r0, [pc, #48]	@ (8001250 <MX_TIM2_Init+0x98>)
 800121e:	f00f fb78 	bl	8010912 <HAL_TIM_ConfigClockSource>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001228:	f000 f8f4 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122c:	2300      	movs	r3, #0
 800122e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	4619      	mov	r1, r3
 8001238:	4805      	ldr	r0, [pc, #20]	@ (8001250 <MX_TIM2_Init+0x98>)
 800123a:	f00f fda5 	bl	8010d88 <HAL_TIMEx_MasterConfigSynchronization>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001244:	f000 f8e6 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	3720      	adds	r7, #32
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000350 	.word	0x20000350

08001254 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800125a:	f107 0310 	add.w	r3, r7, #16
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001272:	4b1d      	ldr	r3, [pc, #116]	@ (80012e8 <MX_TIM3_Init+0x94>)
 8001274:	4a1d      	ldr	r2, [pc, #116]	@ (80012ec <MX_TIM3_Init+0x98>)
 8001276:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001278:	4b1b      	ldr	r3, [pc, #108]	@ (80012e8 <MX_TIM3_Init+0x94>)
 800127a:	2200      	movs	r2, #0
 800127c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127e:	4b1a      	ldr	r3, [pc, #104]	@ (80012e8 <MX_TIM3_Init+0x94>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001284:	4b18      	ldr	r3, [pc, #96]	@ (80012e8 <MX_TIM3_Init+0x94>)
 8001286:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800128a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128c:	4b16      	ldr	r3, [pc, #88]	@ (80012e8 <MX_TIM3_Init+0x94>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001292:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <MX_TIM3_Init+0x94>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001298:	4813      	ldr	r0, [pc, #76]	@ (80012e8 <MX_TIM3_Init+0x94>)
 800129a:	f00f f9dc 	bl	8010656 <HAL_TIM_Base_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80012a4:	f000 f8b6 	bl	8001414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012ae:	f107 0310 	add.w	r3, r7, #16
 80012b2:	4619      	mov	r1, r3
 80012b4:	480c      	ldr	r0, [pc, #48]	@ (80012e8 <MX_TIM3_Init+0x94>)
 80012b6:	f00f fb2c 	bl	8010912 <HAL_TIM_ConfigClockSource>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80012c0:	f000 f8a8 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c4:	2300      	movs	r3, #0
 80012c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <MX_TIM3_Init+0x94>)
 80012d2:	f00f fd59 	bl	8010d88 <HAL_TIMEx_MasterConfigSynchronization>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80012dc:	f000 f89a 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012e0:	bf00      	nop
 80012e2:	3720      	adds	r7, #32
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	2000039c 	.word	0x2000039c
 80012ec:	40000400 	.word	0x40000400

080012f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012f4:	4b14      	ldr	r3, [pc, #80]	@ (8001348 <MX_USART1_UART_Init+0x58>)
 80012f6:	4a15      	ldr	r2, [pc, #84]	@ (800134c <MX_USART1_UART_Init+0x5c>)
 80012f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80012fa:	4b13      	ldr	r3, [pc, #76]	@ (8001348 <MX_USART1_UART_Init+0x58>)
 80012fc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001300:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001302:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <MX_USART1_UART_Init+0x58>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001308:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <MX_USART1_UART_Init+0x58>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <MX_USART1_UART_Init+0x58>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001314:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <MX_USART1_UART_Init+0x58>)
 8001316:	220c      	movs	r2, #12
 8001318:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131a:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <MX_USART1_UART_Init+0x58>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001320:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <MX_USART1_UART_Init+0x58>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001326:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <MX_USART1_UART_Init+0x58>)
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <MX_USART1_UART_Init+0x58>)
 800132e:	2200      	movs	r2, #0
 8001330:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	@ (8001348 <MX_USART1_UART_Init+0x58>)
 8001334:	f00f fdce 	bl	8010ed4 <HAL_UART_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800133e:	f000 f869 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200003e8 	.word	0x200003e8
 800134c:	40013800 	.word	0x40013800

08001350 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <MX_DMA_Init+0x48>)
 8001358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800135a:	4a0f      	ldr	r2, [pc, #60]	@ (8001398 <MX_DMA_Init+0x48>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6493      	str	r3, [r2, #72]	@ 0x48
 8001362:	4b0d      	ldr	r3, [pc, #52]	@ (8001398 <MX_DMA_Init+0x48>)
 8001364:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2100      	movs	r1, #0
 8001372:	2010      	movs	r0, #16
 8001374:	f00b fb05 	bl	800c982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001378:	2010      	movs	r0, #16
 800137a:	f00b fb1e 	bl	800c9ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	2011      	movs	r0, #17
 8001384:	f00b fafd 	bl	800c982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001388:	2011      	movs	r0, #17
 800138a:	f00b fb16 	bl	800c9ba <HAL_NVIC_EnableIRQ>

}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000

0800139c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001410 <MX_GPIO_Init+0x74>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a6:	4a1a      	ldr	r2, [pc, #104]	@ (8001410 <MX_GPIO_Init+0x74>)
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ae:	4b18      	ldr	r3, [pc, #96]	@ (8001410 <MX_GPIO_Init+0x74>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ba:	4b15      	ldr	r3, [pc, #84]	@ (8001410 <MX_GPIO_Init+0x74>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013be:	4a14      	ldr	r2, [pc, #80]	@ (8001410 <MX_GPIO_Init+0x74>)
 80013c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c6:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <MX_GPIO_Init+0x74>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001410 <MX_GPIO_Init+0x74>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001410 <MX_GPIO_Init+0x74>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013de:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <MX_GPIO_Init+0x74>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <MX_GPIO_Init+0x74>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ee:	4a08      	ldr	r2, [pc, #32]	@ (8001410 <MX_GPIO_Init+0x74>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f6:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <MX_GPIO_Init+0x74>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001402:	bf00      	nop
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40021000 	.word	0x40021000

08001414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
}
 800141a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <Error_Handler+0x8>

08001420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <HAL_MspInit+0x44>)
 8001428:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800142a:	4a0e      	ldr	r2, [pc, #56]	@ (8001464 <HAL_MspInit+0x44>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6613      	str	r3, [r2, #96]	@ 0x60
 8001432:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <HAL_MspInit+0x44>)
 8001434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <HAL_MspInit+0x44>)
 8001440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001442:	4a08      	ldr	r2, [pc, #32]	@ (8001464 <HAL_MspInit+0x44>)
 8001444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001448:	6593      	str	r3, [r2, #88]	@ 0x58
 800144a:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <HAL_MspInit+0x44>)
 800144c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800144e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40021000 	.word	0x40021000

08001468 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a0a      	ldr	r2, [pc, #40]	@ (80014a0 <HAL_CRC_MspInit+0x38>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d10b      	bne.n	8001492 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800147a:	4b0a      	ldr	r3, [pc, #40]	@ (80014a4 <HAL_CRC_MspInit+0x3c>)
 800147c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800147e:	4a09      	ldr	r2, [pc, #36]	@ (80014a4 <HAL_CRC_MspInit+0x3c>)
 8001480:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001484:	6493      	str	r3, [r2, #72]	@ 0x48
 8001486:	4b07      	ldr	r3, [pc, #28]	@ (80014a4 <HAL_CRC_MspInit+0x3c>)
 8001488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800148a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001492:	bf00      	nop
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40023000 	.word	0x40023000
 80014a4:	40021000 	.word	0x40021000

080014a8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b0a4      	sub	sp, #144	@ 0x90
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b0:	f107 0308 	add.w	r3, r7, #8
 80014b4:	2288      	movs	r2, #136	@ 0x88
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f010 ff74 	bl	80123a6 <memset>
  if(hrtc->Instance==RTC)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a10      	ldr	r2, [pc, #64]	@ (8001504 <HAL_RTC_MspInit+0x5c>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d118      	bne.n	80014fa <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014cc:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80014ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d6:	f107 0308 	add.w	r3, r7, #8
 80014da:	4618      	mov	r0, r3
 80014dc:	f00d ffda 	bl	800f494 <HAL_RCCEx_PeriphCLKConfig>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80014e6:	f7ff ff95 	bl	8001414 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014ea:	4b07      	ldr	r3, [pc, #28]	@ (8001508 <HAL_RTC_MspInit+0x60>)
 80014ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014f0:	4a05      	ldr	r2, [pc, #20]	@ (8001508 <HAL_RTC_MspInit+0x60>)
 80014f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80014fa:	bf00      	nop
 80014fc:	3790      	adds	r7, #144	@ 0x90
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40002800 	.word	0x40002800
 8001508:	40021000 	.word	0x40021000

0800150c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	@ 0x28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a1b      	ldr	r2, [pc, #108]	@ (8001598 <HAL_SPI_MspInit+0x8c>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d130      	bne.n	8001590 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800152e:	4b1b      	ldr	r3, [pc, #108]	@ (800159c <HAL_SPI_MspInit+0x90>)
 8001530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001532:	4a1a      	ldr	r2, [pc, #104]	@ (800159c <HAL_SPI_MspInit+0x90>)
 8001534:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001538:	6593      	str	r3, [r2, #88]	@ 0x58
 800153a:	4b18      	ldr	r3, [pc, #96]	@ (800159c <HAL_SPI_MspInit+0x90>)
 800153c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	4b15      	ldr	r3, [pc, #84]	@ (800159c <HAL_SPI_MspInit+0x90>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154a:	4a14      	ldr	r2, [pc, #80]	@ (800159c <HAL_SPI_MspInit+0x90>)
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001552:	4b12      	ldr	r3, [pc, #72]	@ (800159c <HAL_SPI_MspInit+0x90>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800155e:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001570:	2305      	movs	r3, #5
 8001572:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4619      	mov	r1, r3
 800157a:	4809      	ldr	r0, [pc, #36]	@ (80015a0 <HAL_SPI_MspInit+0x94>)
 800157c:	f00b fd3e 	bl	800cffc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001580:	2200      	movs	r2, #0
 8001582:	2100      	movs	r1, #0
 8001584:	2024      	movs	r0, #36	@ 0x24
 8001586:	f00b f9fc 	bl	800c982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800158a:	2024      	movs	r0, #36	@ 0x24
 800158c:	f00b fa15 	bl	800c9ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001590:	bf00      	nop
 8001592:	3728      	adds	r7, #40	@ 0x28
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40003800 	.word	0x40003800
 800159c:	40021000 	.word	0x40021000
 80015a0:	48000400 	.word	0x48000400

080015a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015b4:	d10c      	bne.n	80015d0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015b6:	4b15      	ldr	r3, [pc, #84]	@ (800160c <HAL_TIM_Base_MspInit+0x68>)
 80015b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ba:	4a14      	ldr	r2, [pc, #80]	@ (800160c <HAL_TIM_Base_MspInit+0x68>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80015c2:	4b12      	ldr	r3, [pc, #72]	@ (800160c <HAL_TIM_Base_MspInit+0x68>)
 80015c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015ce:	e018      	b.n	8001602 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0e      	ldr	r2, [pc, #56]	@ (8001610 <HAL_TIM_Base_MspInit+0x6c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d113      	bne.n	8001602 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015da:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <HAL_TIM_Base_MspInit+0x68>)
 80015dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015de:	4a0b      	ldr	r2, [pc, #44]	@ (800160c <HAL_TIM_Base_MspInit+0x68>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80015e6:	4b09      	ldr	r3, [pc, #36]	@ (800160c <HAL_TIM_Base_MspInit+0x68>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2100      	movs	r1, #0
 80015f6:	201d      	movs	r0, #29
 80015f8:	f00b f9c3 	bl	800c982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015fc:	201d      	movs	r0, #29
 80015fe:	f00b f9dc 	bl	800c9ba <HAL_NVIC_EnableIRQ>
}
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000
 8001610:	40000400 	.word	0x40000400

08001614 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b0ac      	sub	sp, #176	@ 0xb0
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	2288      	movs	r2, #136	@ 0x88
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f010 feb6 	bl	80123a6 <memset>
  if(huart->Instance==USART1)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a26      	ldr	r2, [pc, #152]	@ (80016d8 <HAL_UART_MspInit+0xc4>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d144      	bne.n	80016ce <HAL_UART_MspInit+0xba>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001644:	2301      	movs	r3, #1
 8001646:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001648:	2300      	movs	r3, #0
 800164a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4618      	mov	r0, r3
 8001652:	f00d ff1f 	bl	800f494 <HAL_RCCEx_PeriphCLKConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800165c:	f7ff feda 	bl	8001414 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001660:	4b1e      	ldr	r3, [pc, #120]	@ (80016dc <HAL_UART_MspInit+0xc8>)
 8001662:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001664:	4a1d      	ldr	r2, [pc, #116]	@ (80016dc <HAL_UART_MspInit+0xc8>)
 8001666:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800166a:	6613      	str	r3, [r2, #96]	@ 0x60
 800166c:	4b1b      	ldr	r3, [pc, #108]	@ (80016dc <HAL_UART_MspInit+0xc8>)
 800166e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001670:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001678:	4b18      	ldr	r3, [pc, #96]	@ (80016dc <HAL_UART_MspInit+0xc8>)
 800167a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167c:	4a17      	ldr	r2, [pc, #92]	@ (80016dc <HAL_UART_MspInit+0xc8>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001684:	4b15      	ldr	r3, [pc, #84]	@ (80016dc <HAL_UART_MspInit+0xc8>)
 8001686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001690:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001694:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001698:	2302      	movs	r3, #2
 800169a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016aa:	2307      	movs	r3, #7
 80016ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016b4:	4619      	mov	r1, r3
 80016b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ba:	f00b fc9f 	bl	800cffc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	2025      	movs	r0, #37	@ 0x25
 80016c4:	f00b f95d 	bl	800c982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016c8:	2025      	movs	r0, #37	@ 0x25
 80016ca:	f00b f976 	bl	800c9ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80016ce:	bf00      	nop
 80016d0:	37b0      	adds	r7, #176	@ 0xb0
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40013800 	.word	0x40013800
 80016dc:	40021000 	.word	0x40021000

080016e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <NMI_Handler+0x4>

080016e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <HardFault_Handler+0x4>

080016f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <MemManage_Handler+0x4>

080016f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <BusFault_Handler+0x4>

08001700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <UsageFault_Handler+0x4>

08001708 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001736:	f00b f805 	bl	800c744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001744:	4802      	ldr	r0, [pc, #8]	@ (8001750 <DMA1_Channel6_IRQHandler+0x10>)
 8001746:	f00b fb7c 	bl	800ce42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000960 	.word	0x20000960

08001754 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001758:	4802      	ldr	r0, [pc, #8]	@ (8001764 <DMA1_Channel7_IRQHandler+0x10>)
 800175a:	f00b fb72 	bl	800ce42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200009a8 	.word	0x200009a8

08001768 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800176c:	4802      	ldr	r0, [pc, #8]	@ (8001778 <TIM3_IRQHandler+0x10>)
 800176e:	f00e ffc9 	bl	8010704 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	2000039c 	.word	0x2000039c

0800177c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001780:	4802      	ldr	r0, [pc, #8]	@ (800178c <SPI2_IRQHandler+0x10>)
 8001782:	f00e fe49 	bl	8010418 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200002ec 	.word	0x200002ec

08001790 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001794:	4802      	ldr	r0, [pc, #8]	@ (80017a0 <USART1_IRQHandler+0x10>)
 8001796:	f00f fc75 	bl	8011084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200003e8 	.word	0x200003e8

080017a4 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80017ae:	4b19      	ldr	r3, [pc, #100]	@ (8001814 <BSP_I2C1_Init+0x70>)
 80017b0:	4a19      	ldr	r2, [pc, #100]	@ (8001818 <BSP_I2C1_Init+0x74>)
 80017b2:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80017b4:	4b19      	ldr	r3, [pc, #100]	@ (800181c <BSP_I2C1_Init+0x78>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	4918      	ldr	r1, [pc, #96]	@ (800181c <BSP_I2C1_Init+0x78>)
 80017bc:	600a      	str	r2, [r1, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d122      	bne.n	8001808 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80017c2:	4814      	ldr	r0, [pc, #80]	@ (8001814 <BSP_I2C1_Init+0x70>)
 80017c4:	f00c fc02 	bl	800dfcc <HAL_I2C_GetState>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d11c      	bne.n	8001808 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80017ce:	4811      	ldr	r0, [pc, #68]	@ (8001814 <BSP_I2C1_Init+0x70>)
 80017d0:	f000 f952 	bl	8001a78 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d116      	bne.n	8001808 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80017da:	480e      	ldr	r0, [pc, #56]	@ (8001814 <BSP_I2C1_Init+0x70>)
 80017dc:	f000 f908 	bl	80019f0 <MX_I2C1_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80017e6:	f06f 0307 	mvn.w	r3, #7
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	e00c      	b.n	8001808 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017ee:	2100      	movs	r1, #0
 80017f0:	4808      	ldr	r0, [pc, #32]	@ (8001814 <BSP_I2C1_Init+0x70>)
 80017f2:	f00c ff53 	bl	800e69c <HAL_I2CEx_ConfigAnalogFilter>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80017fc:	f06f 0307 	mvn.w	r3, #7
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	e001      	b.n	8001808 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001804:	2300      	movs	r3, #0
 8001806:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001808:	687b      	ldr	r3, [r7, #4]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000470 	.word	0x20000470
 8001818:	40005400 	.word	0x40005400
 800181c:	200004c4 	.word	0x200004c4

08001820 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800182a:	4b0f      	ldr	r3, [pc, #60]	@ (8001868 <BSP_I2C1_DeInit+0x48>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d014      	beq.n	800185c <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001832:	4b0d      	ldr	r3, [pc, #52]	@ (8001868 <BSP_I2C1_DeInit+0x48>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	3b01      	subs	r3, #1
 8001838:	4a0b      	ldr	r2, [pc, #44]	@ (8001868 <BSP_I2C1_DeInit+0x48>)
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <BSP_I2C1_DeInit+0x48>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d10b      	bne.n	800185c <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001844:	4809      	ldr	r0, [pc, #36]	@ (800186c <BSP_I2C1_DeInit+0x4c>)
 8001846:	f000 f985 	bl	8001b54 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800184a:	4808      	ldr	r0, [pc, #32]	@ (800186c <BSP_I2C1_DeInit+0x4c>)
 800184c:	f00b ff3f 	bl	800d6ce <HAL_I2C_DeInit>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d002      	beq.n	800185c <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001856:	f06f 0307 	mvn.w	r3, #7
 800185a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 800185c:	687b      	ldr	r3, [r7, #4]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200004c4 	.word	0x200004c4
 800186c:	20000470 	.word	0x20000470

08001870 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	@ 0x28
 8001874:	af04      	add	r7, sp, #16
 8001876:	60ba      	str	r2, [r7, #8]
 8001878:	461a      	mov	r2, r3
 800187a:	4603      	mov	r3, r0
 800187c:	81fb      	strh	r3, [r7, #14]
 800187e:	460b      	mov	r3, r1
 8001880:	81bb      	strh	r3, [r7, #12]
 8001882:	4613      	mov	r3, r2
 8001884:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800188a:	89ba      	ldrh	r2, [r7, #12]
 800188c:	89f9      	ldrh	r1, [r7, #14]
 800188e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001892:	9302      	str	r3, [sp, #8]
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	9301      	str	r3, [sp, #4]
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	2301      	movs	r3, #1
 800189e:	480c      	ldr	r0, [pc, #48]	@ (80018d0 <BSP_I2C1_WriteReg+0x60>)
 80018a0:	f00c f966 	bl	800db70 <HAL_I2C_Mem_Write>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00c      	beq.n	80018c4 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80018aa:	4809      	ldr	r0, [pc, #36]	@ (80018d0 <BSP_I2C1_WriteReg+0x60>)
 80018ac:	f00c fb9c 	bl	800dfe8 <HAL_I2C_GetError>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d103      	bne.n	80018be <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80018b6:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	e002      	b.n	80018c4 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80018be:	f06f 0303 	mvn.w	r3, #3
 80018c2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80018c4:	697b      	ldr	r3, [r7, #20]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000470 	.word	0x20000470

080018d4 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	@ 0x28
 80018d8:	af04      	add	r7, sp, #16
 80018da:	60ba      	str	r2, [r7, #8]
 80018dc:	461a      	mov	r2, r3
 80018de:	4603      	mov	r3, r0
 80018e0:	81fb      	strh	r3, [r7, #14]
 80018e2:	460b      	mov	r3, r1
 80018e4:	81bb      	strh	r3, [r7, #12]
 80018e6:	4613      	mov	r3, r2
 80018e8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80018ee:	89ba      	ldrh	r2, [r7, #12]
 80018f0:	89f9      	ldrh	r1, [r7, #14]
 80018f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018f6:	9302      	str	r3, [sp, #8]
 80018f8:	88fb      	ldrh	r3, [r7, #6]
 80018fa:	9301      	str	r3, [sp, #4]
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2301      	movs	r3, #1
 8001902:	480c      	ldr	r0, [pc, #48]	@ (8001934 <BSP_I2C1_ReadReg+0x60>)
 8001904:	f00c fa48 	bl	800dd98 <HAL_I2C_Mem_Read>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00c      	beq.n	8001928 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800190e:	4809      	ldr	r0, [pc, #36]	@ (8001934 <BSP_I2C1_ReadReg+0x60>)
 8001910:	f00c fb6a 	bl	800dfe8 <HAL_I2C_GetError>
 8001914:	4603      	mov	r3, r0
 8001916:	2b04      	cmp	r3, #4
 8001918:	d103      	bne.n	8001922 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800191a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	e002      	b.n	8001928 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001922:	f06f 0303 	mvn.w	r3, #3
 8001926:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001928:	697b      	ldr	r3, [r7, #20]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000470 	.word	0x20000470

08001938 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af02      	add	r7, sp, #8
 800193e:	4603      	mov	r3, r0
 8001940:	6039      	str	r1, [r7, #0]
 8001942:	80fb      	strh	r3, [r7, #6]
 8001944:	4613      	mov	r3, r2
 8001946:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800194c:	88bb      	ldrh	r3, [r7, #4]
 800194e:	88f9      	ldrh	r1, [r7, #6]
 8001950:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001954:	9200      	str	r2, [sp, #0]
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	480b      	ldr	r0, [pc, #44]	@ (8001988 <BSP_I2C1_Send+0x50>)
 800195a:	f00b fefb 	bl	800d754 <HAL_I2C_Master_Transmit>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00c      	beq.n	800197e <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8001964:	4808      	ldr	r0, [pc, #32]	@ (8001988 <BSP_I2C1_Send+0x50>)
 8001966:	f00c fb3f 	bl	800dfe8 <HAL_I2C_GetError>
 800196a:	4603      	mov	r3, r0
 800196c:	2b04      	cmp	r3, #4
 800196e:	d003      	beq.n	8001978 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001970:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	e002      	b.n	800197e <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001978:	f06f 0303 	mvn.w	r3, #3
 800197c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800197e:	68fb      	ldr	r3, [r7, #12]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000470 	.word	0x20000470

0800198c <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af02      	add	r7, sp, #8
 8001992:	4603      	mov	r3, r0
 8001994:	6039      	str	r1, [r7, #0]
 8001996:	80fb      	strh	r3, [r7, #6]
 8001998:	4613      	mov	r3, r2
 800199a:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80019a0:	88bb      	ldrh	r3, [r7, #4]
 80019a2:	88f9      	ldrh	r1, [r7, #6]
 80019a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019a8:	9200      	str	r2, [sp, #0]
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	480b      	ldr	r0, [pc, #44]	@ (80019dc <BSP_I2C1_Recv+0x50>)
 80019ae:	f00b ffe9 	bl	800d984 <HAL_I2C_Master_Receive>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00c      	beq.n	80019d2 <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80019b8:	4808      	ldr	r0, [pc, #32]	@ (80019dc <BSP_I2C1_Recv+0x50>)
 80019ba:	f00c fb15 	bl	800dfe8 <HAL_I2C_GetError>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d003      	beq.n	80019cc <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80019c4:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	e002      	b.n	80019d2 <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80019cc:	f06f 0303 	mvn.w	r3, #3
 80019d0:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 80019d2:	68fb      	ldr	r3, [r7, #12]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000470 	.word	0x20000470

080019e0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80019e4:	f00a fec2 	bl	800c76c <HAL_GetTick>
 80019e8:	4603      	mov	r3, r0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001a70 <MX_I2C1_Init+0x80>)
 8001a00:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00F12981;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a1b      	ldr	r2, [pc, #108]	@ (8001a74 <MX_I2C1_Init+0x84>)
 8001a06:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f00b fdb0 	bl	800d598 <HAL_I2C_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a42:	2100      	movs	r1, #0
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f00c fe29 	bl	800e69c <HAL_I2CEx_ConfigAnalogFilter>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001a54:	2100      	movs	r1, #0
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f00c fe6b 	bl	800e732 <HAL_I2CEx_ConfigDigitalFilter>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40005400 	.word	0x40005400
 8001a74:	00f12981 	.word	0x00f12981

08001a78 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b0ac      	sub	sp, #176	@ 0xb0
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	2288      	movs	r2, #136	@ 0x88
 8001a86:	2100      	movs	r1, #0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f010 fc8c 	bl	80123a6 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a8e:	2340      	movs	r3, #64	@ 0x40
 8001a90:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a92:	2300      	movs	r3, #0
 8001a94:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8001a96:	f107 0314 	add.w	r3, r7, #20
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f00d fcfa 	bl	800f494 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa0:	4b29      	ldr	r3, [pc, #164]	@ (8001b48 <I2C1_MspInit+0xd0>)
 8001aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa4:	4a28      	ldr	r2, [pc, #160]	@ (8001b48 <I2C1_MspInit+0xd0>)
 8001aa6:	f043 0302 	orr.w	r3, r3, #2
 8001aaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aac:	4b26      	ldr	r3, [pc, #152]	@ (8001b48 <I2C1_MspInit+0xd0>)
 8001aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001ab8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001abc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ac0:	2312      	movs	r3, #18
 8001ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001ad8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001adc:	4619      	mov	r1, r3
 8001ade:	481b      	ldr	r0, [pc, #108]	@ (8001b4c <I2C1_MspInit+0xd4>)
 8001ae0:	f00b fa8c 	bl	800cffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001ae4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ae8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aec:	2312      	movs	r3, #18
 8001aee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001afe:	2304      	movs	r3, #4
 8001b00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001b04:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4810      	ldr	r0, [pc, #64]	@ (8001b4c <I2C1_MspInit+0xd4>)
 8001b0c:	f00b fa76 	bl	800cffc <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB8);
 8001b10:	4b0f      	ldr	r3, [pc, #60]	@ (8001b50 <I2C1_MspInit+0xd8>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	4a0e      	ldr	r2, [pc, #56]	@ (8001b50 <I2C1_MspInit+0xd8>)
 8001b16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b1a:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <I2C1_MspInit+0xd8>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	4a0b      	ldr	r2, [pc, #44]	@ (8001b50 <I2C1_MspInit+0xd8>)
 8001b22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001b26:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b28:	4b07      	ldr	r3, [pc, #28]	@ (8001b48 <I2C1_MspInit+0xd0>)
 8001b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2c:	4a06      	ldr	r2, [pc, #24]	@ (8001b48 <I2C1_MspInit+0xd0>)
 8001b2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b32:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b34:	4b04      	ldr	r3, [pc, #16]	@ (8001b48 <I2C1_MspInit+0xd0>)
 8001b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001b40:	bf00      	nop
 8001b42:	37b0      	adds	r7, #176	@ 0xb0
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	48000400 	.word	0x48000400
 8001b50:	40010000 	.word	0x40010000

08001b54 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001b5c:	4b09      	ldr	r3, [pc, #36]	@ (8001b84 <I2C1_MspDeInit+0x30>)
 8001b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b60:	4a08      	ldr	r2, [pc, #32]	@ (8001b84 <I2C1_MspDeInit+0x30>)
 8001b62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001b66:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001b68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b6c:	4806      	ldr	r0, [pc, #24]	@ (8001b88 <I2C1_MspDeInit+0x34>)
 8001b6e:	f00b fbef 	bl	800d350 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001b72:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b76:	4804      	ldr	r0, [pc, #16]	@ (8001b88 <I2C1_MspDeInit+0x34>)
 8001b78:	f00b fbea 	bl	800d350 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40021000 	.word	0x40021000
 8001b88:	48000400 	.word	0x48000400

08001b8c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	e00a      	b.n	8001bb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b9e:	f3af 8000 	nop.w
 8001ba2:	4601      	mov	r1, r0
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	60ba      	str	r2, [r7, #8]
 8001baa:	b2ca      	uxtb	r2, r1
 8001bac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	dbf0      	blt.n	8001b9e <_read+0x12>
  }

  return len;
 8001bbc:	687b      	ldr	r3, [r7, #4]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	e009      	b.n	8001bec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	60ba      	str	r2, [r7, #8]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f00a fc77 	bl	800c4d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	3301      	adds	r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	dbf1      	blt.n	8001bd8 <_write+0x12>
  }
  return len;
 8001bf4:	687b      	ldr	r3, [r7, #4]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <_close>:

int _close(int file)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c26:	605a      	str	r2, [r3, #4]
  return 0;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <_isatty>:

int _isatty(int file)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c70:	4a14      	ldr	r2, [pc, #80]	@ (8001cc4 <_sbrk+0x5c>)
 8001c72:	4b15      	ldr	r3, [pc, #84]	@ (8001cc8 <_sbrk+0x60>)
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c7c:	4b13      	ldr	r3, [pc, #76]	@ (8001ccc <_sbrk+0x64>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c84:	4b11      	ldr	r3, [pc, #68]	@ (8001ccc <_sbrk+0x64>)
 8001c86:	4a12      	ldr	r2, [pc, #72]	@ (8001cd0 <_sbrk+0x68>)
 8001c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c8a:	4b10      	ldr	r3, [pc, #64]	@ (8001ccc <_sbrk+0x64>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d207      	bcs.n	8001ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c98:	f010 fbd4 	bl	8012444 <__errno>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca6:	e009      	b.n	8001cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca8:	4b08      	ldr	r3, [pc, #32]	@ (8001ccc <_sbrk+0x64>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cae:	4b07      	ldr	r3, [pc, #28]	@ (8001ccc <_sbrk+0x64>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4a05      	ldr	r2, [pc, #20]	@ (8001ccc <_sbrk+0x64>)
 8001cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cba:	68fb      	ldr	r3, [r7, #12]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20018000 	.word	0x20018000
 8001cc8:	00001200 	.word	0x00001200
 8001ccc:	200004c8 	.word	0x200004c8
 8001cd0:	20000b40 	.word	0x20000b40

08001cd4 <MX_MEMS_Init>:
static void Press_Sensor_Handler(uint32_t Instance);
static void MX_IKS4A1_DataLogTerminal_Init(void);
static void MX_IKS4A1_DataLogTerminal_Process(void);

void MX_MEMS_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_IKS4A1_DataLogTerminal_Init();
 8001cd8:	f000 f808 	bl	8001cec <MX_IKS4A1_DataLogTerminal_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_IKS4A1_DataLogTerminal_Process();
 8001ce4:	f000 fa0a 	bl	80020fc <MX_IKS4A1_DataLogTerminal_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}

08001cec <MX_IKS4A1_DataLogTerminal_Init>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_IKS4A1_DataLogTerminal_Init(void)
{
 8001cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cee:	b089      	sub	sp, #36	@ 0x24
 8001cf0:	af04      	add	r7, sp, #16
  displayFloatToInt_t out_value_odr;
  int16_t i;

  /* Initialize LED */
  BSP_LED_Init(LED2);
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f00a fa7a 	bl	800c1ec <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f00a fac6 	bl	800c28c <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 8001d00:	2000      	movs	r0, #0
 8001d02:	f00a fb17 	bl	800c334 <BSP_PB_GetState>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	bf0c      	ite	eq
 8001d0c:	2301      	moveq	r3, #1
 8001d0e:	2300      	movne	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	4b84      	ldr	r3, [pc, #528]	@ (8001f28 <MX_IKS4A1_DataLogTerminal_Init+0x23c>)
 8001d16:	601a      	str	r2, [r3, #0]

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f00a fb69 	bl	800c3f0 <BSP_COM_Init>

  snprintf(dataOut, MAX_BUF_SIZE, "\r\n__________________________________________________________________________\r\n");
 8001d1e:	4a83      	ldr	r2, [pc, #524]	@ (8001f2c <MX_IKS4A1_DataLogTerminal_Init+0x240>)
 8001d20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d24:	4882      	ldr	r0, [pc, #520]	@ (8001f30 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8001d26:	f010 fac5 	bl	80122b4 <sniprintf>
  printf("%s", dataOut);
 8001d2a:	4981      	ldr	r1, [pc, #516]	@ (8001f30 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8001d2c:	4881      	ldr	r0, [pc, #516]	@ (8001f34 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 8001d2e:	f010 faaf 	bl	8012290 <iprintf>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LSM6DSV16X_0, MOTION_ACCELERO | MOTION_GYRO);
 8001d32:	2103      	movs	r1, #3
 8001d34:	2001      	movs	r0, #1
 8001d36:	f009 fd11 	bl	800b75c <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LSM6DSO16IS_0, MOTION_ACCELERO | MOTION_GYRO);
 8001d3a:	2103      	movs	r1, #3
 8001d3c:	2003      	movs	r0, #3
 8001d3e:	f009 fd0d 	bl	800b75c <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LIS2DUXS12_0, MOTION_ACCELERO);
 8001d42:	2102      	movs	r1, #2
 8001d44:	2002      	movs	r0, #2
 8001d46:	f009 fd09 	bl	800b75c <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LIS2MDL_0, MOTION_MAGNETO);
 8001d4a:	2104      	movs	r1, #4
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f009 fd05 	bl	800b75c <IKS4A1_MOTION_SENSOR_Init>

  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	81fb      	strh	r3, [r7, #14]
 8001d56:	e0d4      	b.n	8001f02 <MX_IKS4A1_DataLogTerminal_Init+0x216>
  {
    IKS4A1_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 8001d58:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001d5c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001d60:	4613      	mov	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	1a9b      	subs	r3, r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4a73      	ldr	r2, [pc, #460]	@ (8001f38 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8001d6a:	4413      	add	r3, r2
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f009 fe27 	bl	800b9c0 <IKS4A1_MOTION_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
 8001d72:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
             "\r\nMotion Sensor Instance %d capabilities: \r\n ACCELEROMETER: %d\r\n GYROSCOPE: %d\r\n MAGNETOMETER: %d\r\n LOW POWER: %d\r\n",
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8001d76:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001d7a:	486f      	ldr	r0, [pc, #444]	@ (8001f38 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	1a9b      	subs	r3, r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4403      	add	r3, r0
 8001d86:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8001d88:	461c      	mov	r4, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8001d8a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001d8e:	486a      	ldr	r0, [pc, #424]	@ (8001f38 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8001d90:	4613      	mov	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4403      	add	r3, r0
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8001d9e:	461d      	mov	r5, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8001da0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001da4:	4864      	ldr	r0, [pc, #400]	@ (8001f38 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	1a9b      	subs	r3, r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4403      	add	r3, r0
 8001db0:	3302      	adds	r3, #2
 8001db2:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8001db4:	461e      	mov	r6, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8001db6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001dba:	485f      	ldr	r0, [pc, #380]	@ (8001f38 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	1a9b      	subs	r3, r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4403      	add	r3, r0
 8001dc6:	3303      	adds	r3, #3
 8001dc8:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8001dca:	9303      	str	r3, [sp, #12]
 8001dcc:	9602      	str	r6, [sp, #8]
 8001dce:	9501      	str	r5, [sp, #4]
 8001dd0:	9400      	str	r4, [sp, #0]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4a59      	ldr	r2, [pc, #356]	@ (8001f3c <MX_IKS4A1_DataLogTerminal_Init+0x250>)
 8001dd6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dda:	4855      	ldr	r0, [pc, #340]	@ (8001f30 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8001ddc:	f010 fa6a 	bl	80122b4 <sniprintf>
    printf("%s", dataOut);
 8001de0:	4953      	ldr	r1, [pc, #332]	@ (8001f30 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8001de2:	4854      	ldr	r0, [pc, #336]	@ (8001f34 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 8001de4:	f010 fa54 	bl	8012290 <iprintf>
    floatToInt(MotionCapabilities[i].AccMaxOdr, &out_value_odr, 3);
 8001de8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001dec:	4952      	ldr	r1, [pc, #328]	@ (8001f38 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8001dee:	4613      	mov	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	1a9b      	subs	r3, r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	440b      	add	r3, r1
 8001df8:	3314      	adds	r3, #20
 8001dfa:	edd3 7a00 	vldr	s15, [r3]
 8001dfe:	463b      	mov	r3, r7
 8001e00:	2103      	movs	r1, #3
 8001e02:	4618      	mov	r0, r3
 8001e04:	eeb0 0a67 	vmov.f32	s0, s15
 8001e08:	f000 fa16 	bl	8002238 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 8001e10:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 8001e12:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 8001e14:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001e18:	4947      	ldr	r1, [pc, #284]	@ (8001f38 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	1a9b      	subs	r3, r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	440b      	add	r3, r1
 8001e24:	3308      	adds	r3, #8
 8001e26:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 8001e28:	9301      	str	r3, [sp, #4]
 8001e2a:	9000      	str	r0, [sp, #0]
 8001e2c:	4623      	mov	r3, r4
 8001e2e:	4a44      	ldr	r2, [pc, #272]	@ (8001f40 <MX_IKS4A1_DataLogTerminal_Init+0x254>)
 8001e30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e34:	483e      	ldr	r0, [pc, #248]	@ (8001f30 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8001e36:	f010 fa3d 	bl	80122b4 <sniprintf>
    printf("%s", dataOut);
 8001e3a:	493d      	ldr	r1, [pc, #244]	@ (8001f30 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8001e3c:	483d      	ldr	r0, [pc, #244]	@ (8001f34 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 8001e3e:	f010 fa27 	bl	8012290 <iprintf>
    floatToInt(MotionCapabilities[i].GyroMaxOdr, &out_value_odr, 3);
 8001e42:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001e46:	493c      	ldr	r1, [pc, #240]	@ (8001f38 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	1a9b      	subs	r3, r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	3310      	adds	r3, #16
 8001e54:	edd3 7a00 	vldr	s15, [r3]
 8001e58:	463b      	mov	r3, r7
 8001e5a:	2103      	movs	r1, #3
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e62:	f000 f9e9 	bl	8002238 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 8001e6a:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 8001e6c:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 8001e6e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001e72:	4931      	ldr	r1, [pc, #196]	@ (8001f38 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	1a9b      	subs	r3, r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	3304      	adds	r3, #4
 8001e80:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 8001e82:	9301      	str	r3, [sp, #4]
 8001e84:	9000      	str	r0, [sp, #0]
 8001e86:	4623      	mov	r3, r4
 8001e88:	4a2e      	ldr	r2, [pc, #184]	@ (8001f44 <MX_IKS4A1_DataLogTerminal_Init+0x258>)
 8001e8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e8e:	4828      	ldr	r0, [pc, #160]	@ (8001f30 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8001e90:	f010 fa10 	bl	80122b4 <sniprintf>
    printf("%s", dataOut);
 8001e94:	4926      	ldr	r1, [pc, #152]	@ (8001f30 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8001e96:	4827      	ldr	r0, [pc, #156]	@ (8001f34 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 8001e98:	f010 f9fa 	bl	8012290 <iprintf>
    floatToInt(MotionCapabilities[i].MagMaxOdr, &out_value_odr, 3);
 8001e9c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001ea0:	4925      	ldr	r1, [pc, #148]	@ (8001f38 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	1a9b      	subs	r3, r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	3318      	adds	r3, #24
 8001eae:	edd3 7a00 	vldr	s15, [r3]
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	2103      	movs	r1, #3
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ebc:	f000 f9bc 	bl	8002238 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 8001ec4:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8001ec6:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 8001ec8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001ecc:	491a      	ldr	r1, [pc, #104]	@ (8001f38 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8001ece:	4613      	mov	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	1a9b      	subs	r3, r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	440b      	add	r3, r1
 8001ed8:	330c      	adds	r3, #12
 8001eda:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8001edc:	9301      	str	r3, [sp, #4]
 8001ede:	9000      	str	r0, [sp, #0]
 8001ee0:	4623      	mov	r3, r4
 8001ee2:	4a19      	ldr	r2, [pc, #100]	@ (8001f48 <MX_IKS4A1_DataLogTerminal_Init+0x25c>)
 8001ee4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ee8:	4811      	ldr	r0, [pc, #68]	@ (8001f30 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8001eea:	f010 f9e3 	bl	80122b4 <sniprintf>
    printf("%s", dataOut);
 8001eee:	4910      	ldr	r1, [pc, #64]	@ (8001f30 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8001ef0:	4810      	ldr	r0, [pc, #64]	@ (8001f34 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 8001ef2:	f010 f9cd 	bl	8012290 <iprintf>
  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 8001ef6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	3301      	adds	r3, #1
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	81fb      	strh	r3, [r7, #14]
 8001f02:	89fb      	ldrh	r3, [r7, #14]
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	f67f af27 	bls.w	8001d58 <MX_IKS4A1_DataLogTerminal_Init+0x6c>
  }

  IKS4A1_ENV_SENSOR_Init(IKS4A1_SHT40AD1B_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 8001f0a:	2105      	movs	r1, #5
 8001f0c:	2002      	movs	r0, #2
 8001f0e:	f008 ffe9 	bl	800aee4 <IKS4A1_ENV_SENSOR_Init>

  IKS4A1_ENV_SENSOR_Init(IKS4A1_LPS22DF_0, ENV_TEMPERATURE | ENV_PRESSURE);
 8001f12:	2103      	movs	r1, #3
 8001f14:	2001      	movs	r0, #1
 8001f16:	f008 ffe5 	bl	800aee4 <IKS4A1_ENV_SENSOR_Init>

  IKS4A1_ENV_SENSOR_Init(IKS4A1_STTS22H_0, ENV_TEMPERATURE);
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f008 ffe1 	bl	800aee4 <IKS4A1_ENV_SENSOR_Init>

  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	81fb      	strh	r3, [r7, #14]
 8001f26:	e0c2      	b.n	80020ae <MX_IKS4A1_DataLogTerminal_Init+0x3c2>
 8001f28:	20000688 	.word	0x20000688
 8001f2c:	08014290 	.word	0x08014290
 8001f30:	20000588 	.word	0x20000588
 8001f34:	080142e0 	.word	0x080142e0
 8001f38:	200004d0 	.word	0x200004d0
 8001f3c:	080142e4 	.word	0x080142e4
 8001f40:	08014358 	.word	0x08014358
 8001f44:	08014384 	.word	0x08014384
 8001f48:	080143b4 	.word	0x080143b4
  {
    IKS4A1_ENV_SENSOR_GetCapabilities(i, &EnvCapabilities[i]);
 8001f4c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001f50:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001f54:	4613      	mov	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4a58      	ldr	r2, [pc, #352]	@ (80020c0 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8001f5e:	4413      	add	r3, r2
 8001f60:	4619      	mov	r1, r3
 8001f62:	f009 f8cd 	bl	800b100 <IKS4A1_ENV_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
 8001f66:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
             "\r\nEnvironmental Sensor Instance %d capabilities: \r\n TEMPERATURE: %d\r\n PRESSURE: %d\r\n HUMIDITY: %d\r\n LOW POWER: %d\r\n",
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 8001f6a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001f6e:	4854      	ldr	r0, [pc, #336]	@ (80020c0 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8001f70:	4613      	mov	r3, r2
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4413      	add	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4403      	add	r3, r0
 8001f7a:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8001f7c:	461c      	mov	r4, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 8001f7e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001f82:	484f      	ldr	r0, [pc, #316]	@ (80020c0 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8001f84:	4613      	mov	r3, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4403      	add	r3, r0
 8001f8e:	3301      	adds	r3, #1
 8001f90:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8001f92:	461d      	mov	r5, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 8001f94:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001f98:	4849      	ldr	r0, [pc, #292]	@ (80020c0 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	4413      	add	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4403      	add	r3, r0
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8001fa8:	461e      	mov	r6, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 8001faa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001fae:	4844      	ldr	r0, [pc, #272]	@ (80020c0 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4413      	add	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4403      	add	r3, r0
 8001fba:	3304      	adds	r3, #4
 8001fbc:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8001fbe:	9303      	str	r3, [sp, #12]
 8001fc0:	9602      	str	r6, [sp, #8]
 8001fc2:	9501      	str	r5, [sp, #4]
 8001fc4:	9400      	str	r4, [sp, #0]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4a3e      	ldr	r2, [pc, #248]	@ (80020c4 <MX_IKS4A1_DataLogTerminal_Init+0x3d8>)
 8001fca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fce:	483e      	ldr	r0, [pc, #248]	@ (80020c8 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8001fd0:	f010 f970 	bl	80122b4 <sniprintf>
    printf("%s", dataOut);
 8001fd4:	493c      	ldr	r1, [pc, #240]	@ (80020c8 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8001fd6:	483d      	ldr	r0, [pc, #244]	@ (80020cc <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 8001fd8:	f010 f95a 	bl	8012290 <iprintf>
    floatToInt(EnvCapabilities[i].TempMaxOdr, &out_value_odr, 3);
 8001fdc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001fe0:	4937      	ldr	r1, [pc, #220]	@ (80020c0 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	440b      	add	r3, r1
 8001fec:	330c      	adds	r3, #12
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	463b      	mov	r3, r7
 8001ff4:	2103      	movs	r1, #3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ffc:	f000 f91c 	bl	8002238 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 8002004:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	4613      	mov	r3, r2
 800200a:	4a31      	ldr	r2, [pc, #196]	@ (80020d0 <MX_IKS4A1_DataLogTerminal_Init+0x3e4>)
 800200c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002010:	482d      	ldr	r0, [pc, #180]	@ (80020c8 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8002012:	f010 f94f 	bl	80122b4 <sniprintf>
    printf("%s", dataOut);
 8002016:	492c      	ldr	r1, [pc, #176]	@ (80020c8 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8002018:	482c      	ldr	r0, [pc, #176]	@ (80020cc <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 800201a:	f010 f939 	bl	8012290 <iprintf>
    floatToInt(EnvCapabilities[i].PressMaxOdr, &out_value_odr, 3);
 800201e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002022:	4927      	ldr	r1, [pc, #156]	@ (80020c0 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8002024:	4613      	mov	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4413      	add	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	440b      	add	r3, r1
 800202e:	3310      	adds	r3, #16
 8002030:	edd3 7a00 	vldr	s15, [r3]
 8002034:	463b      	mov	r3, r7
 8002036:	2103      	movs	r1, #3
 8002038:	4618      	mov	r0, r3
 800203a:	eeb0 0a67 	vmov.f32	s0, s15
 800203e:	f000 f8fb 	bl	8002238 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 8002046:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	4613      	mov	r3, r2
 800204c:	4a21      	ldr	r2, [pc, #132]	@ (80020d4 <MX_IKS4A1_DataLogTerminal_Init+0x3e8>)
 800204e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002052:	481d      	ldr	r0, [pc, #116]	@ (80020c8 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8002054:	f010 f92e 	bl	80122b4 <sniprintf>
    printf("%s", dataOut);
 8002058:	491b      	ldr	r1, [pc, #108]	@ (80020c8 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 800205a:	481c      	ldr	r0, [pc, #112]	@ (80020cc <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 800205c:	f010 f918 	bl	8012290 <iprintf>
    floatToInt(EnvCapabilities[i].HumMaxOdr, &out_value_odr, 3);
 8002060:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002064:	4916      	ldr	r1, [pc, #88]	@ (80020c0 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8002066:	4613      	mov	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4413      	add	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	440b      	add	r3, r1
 8002070:	3308      	adds	r3, #8
 8002072:	edd3 7a00 	vldr	s15, [r3]
 8002076:	463b      	mov	r3, r7
 8002078:	2103      	movs	r1, #3
 800207a:	4618      	mov	r0, r3
 800207c:	eeb0 0a67 	vmov.f32	s0, s15
 8002080:	f000 f8da 	bl	8002238 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int, (int)out_value_odr.out_dec);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	461a      	mov	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	4613      	mov	r3, r2
 800208e:	4a12      	ldr	r2, [pc, #72]	@ (80020d8 <MX_IKS4A1_DataLogTerminal_Init+0x3ec>)
 8002090:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002094:	480c      	ldr	r0, [pc, #48]	@ (80020c8 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8002096:	f010 f90d 	bl	80122b4 <sniprintf>
    printf("%s", dataOut);
 800209a:	490b      	ldr	r1, [pc, #44]	@ (80020c8 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 800209c:	480b      	ldr	r0, [pc, #44]	@ (80020cc <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 800209e:	f010 f8f7 	bl	8012290 <iprintf>
  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 80020a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	3301      	adds	r3, #1
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	81fb      	strh	r3, [r7, #14]
 80020ae:	89fb      	ldrh	r3, [r7, #14]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	f67f af4b 	bls.w	8001f4c <MX_IKS4A1_DataLogTerminal_Init+0x260>
  }
}
 80020b6:	bf00      	nop
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c0:	20000540 	.word	0x20000540
 80020c4:	080143e0 	.word	0x080143e0
 80020c8:	20000588 	.word	0x20000588
 80020cc:	080142e0 	.word	0x080142e0
 80020d0:	08014454 	.word	0x08014454
 80020d4:	08014470 	.word	0x08014470
 80020d8:	08014490 	.word	0x08014490

080020dc <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 80020e6:	4b04      	ldr	r3, [pc, #16]	@ (80020f8 <BSP_PB_Callback+0x1c>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	701a      	strb	r2, [r3, #0]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	200004cc 	.word	0x200004cc

080020fc <MX_IKS4A1_DataLogTerminal_Process>:
/**
  * @brief  Process of the DataLogTerminal application
  * @retval None
  */
void MX_IKS4A1_DataLogTerminal_Process(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
  int32_t i;

  if (PushButtonDetected != 0U)
 8002102:	4b46      	ldr	r3, [pc, #280]	@ (800221c <MX_IKS4A1_DataLogTerminal_Process+0x120>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00d      	beq.n	8002128 <MX_IKS4A1_DataLogTerminal_Process+0x2c>
  {
    /* Debouncing */
//    HAL_Delay(50);

    /* Wait until the button is released */
    while ((BSP_PB_GetState(BUTTON_KEY) == PushButtonState));
 800210c:	bf00      	nop
 800210e:	2000      	movs	r0, #0
 8002110:	f00a f910 	bl	800c334 <BSP_PB_GetState>
 8002114:	4602      	mov	r2, r0
 8002116:	4b42      	ldr	r3, [pc, #264]	@ (8002220 <MX_IKS4A1_DataLogTerminal_Process+0x124>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d0f7      	beq.n	800210e <MX_IKS4A1_DataLogTerminal_Process+0x12>

    /* Debouncing */
//    HAL_Delay(50);

    /* Reset Interrupt flag */
    PushButtonDetected = 0;
 800211e:	4b3f      	ldr	r3, [pc, #252]	@ (800221c <MX_IKS4A1_DataLogTerminal_Process+0x120>)
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]

    MX_IKS4A1_DataLogTerminal_Init();
 8002124:	f7ff fde2 	bl	8001cec <MX_IKS4A1_DataLogTerminal_Init>
  }

  snprintf(dataOut, MAX_BUF_SIZE, "\r\n__________________________________________________________________________\r\n");
 8002128:	4a3e      	ldr	r2, [pc, #248]	@ (8002224 <MX_IKS4A1_DataLogTerminal_Process+0x128>)
 800212a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800212e:	483e      	ldr	r0, [pc, #248]	@ (8002228 <MX_IKS4A1_DataLogTerminal_Process+0x12c>)
 8002130:	f010 f8c0 	bl	80122b4 <sniprintf>
  printf("%s", dataOut);
 8002134:	493c      	ldr	r1, [pc, #240]	@ (8002228 <MX_IKS4A1_DataLogTerminal_Process+0x12c>)
 8002136:	483d      	ldr	r0, [pc, #244]	@ (800222c <MX_IKS4A1_DataLogTerminal_Process+0x130>)
 8002138:	f010 f8aa 	bl	8012290 <iprintf>

  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 800213c:	2300      	movs	r3, #0
 800213e:	607b      	str	r3, [r7, #4]
 8002140:	e02e      	b.n	80021a0 <MX_IKS4A1_DataLogTerminal_Process+0xa4>
  {
    if(MotionCapabilities[i].Acc)
 8002142:	493b      	ldr	r1, [pc, #236]	@ (8002230 <MX_IKS4A1_DataLogTerminal_Process+0x134>)
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	1a9b      	subs	r3, r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <MX_IKS4A1_DataLogTerminal_Process+0x62>
    {
      Accelero_Sensor_Handler(i);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4618      	mov	r0, r3
 800215a:	f000 f8f7 	bl	800234c <Accelero_Sensor_Handler>
    }
    if(MotionCapabilities[i].Gyro)
 800215e:	4934      	ldr	r1, [pc, #208]	@ (8002230 <MX_IKS4A1_DataLogTerminal_Process+0x134>)
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	3301      	adds	r3, #1
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <MX_IKS4A1_DataLogTerminal_Process+0x80>
    {
      Gyro_Sensor_Handler(i);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f9a8 	bl	80024cc <Gyro_Sensor_Handler>
    }
    if(MotionCapabilities[i].Magneto)
 800217c:	492c      	ldr	r1, [pc, #176]	@ (8002230 <MX_IKS4A1_DataLogTerminal_Process+0x134>)
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	1a9b      	subs	r3, r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	3302      	adds	r3, #2
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <MX_IKS4A1_DataLogTerminal_Process+0x9e>
    {
      Magneto_Sensor_Handler(i);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4618      	mov	r0, r3
 8002196:	f000 fa59 	bl	800264c <Magneto_Sensor_Handler>
  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3301      	adds	r3, #1
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d9cd      	bls.n	8002142 <MX_IKS4A1_DataLogTerminal_Process+0x46>
    }
  }

  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	e02e      	b.n	800220a <MX_IKS4A1_DataLogTerminal_Process+0x10e>
  {
    if(EnvCapabilities[i].Humidity)
 80021ac:	4921      	ldr	r1, [pc, #132]	@ (8002234 <MX_IKS4A1_DataLogTerminal_Process+0x138>)
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	4413      	add	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	440b      	add	r3, r1
 80021ba:	3302      	adds	r3, #2
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <MX_IKS4A1_DataLogTerminal_Process+0xce>
    {
      Hum_Sensor_Handler(i);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 fc49 	bl	8002a5c <Hum_Sensor_Handler>
    }
    if(EnvCapabilities[i].Temperature)
 80021ca:	491a      	ldr	r1, [pc, #104]	@ (8002234 <MX_IKS4A1_DataLogTerminal_Process+0x138>)
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	4413      	add	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	440b      	add	r3, r1
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <MX_IKS4A1_DataLogTerminal_Process+0xea>
    {
      Temp_Sensor_Handler(i);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 faf3 	bl	80027cc <Temp_Sensor_Handler>
    }
    if(EnvCapabilities[i].Pressure)
 80021e6:	4913      	ldr	r1, [pc, #76]	@ (8002234 <MX_IKS4A1_DataLogTerminal_Process+0x138>)
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	4413      	add	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	440b      	add	r3, r1
 80021f4:	3301      	adds	r3, #1
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <MX_IKS4A1_DataLogTerminal_Process+0x108>
    {
      Press_Sensor_Handler(i);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 fb8c 	bl	800291c <Press_Sensor_Handler>
  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3301      	adds	r3, #1
 8002208:	607b      	str	r3, [r7, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d9cd      	bls.n	80021ac <MX_IKS4A1_DataLogTerminal_Process+0xb0>
    }
  }

//  HAL_Delay( 1000 );
}
 8002210:	bf00      	nop
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200004cc 	.word	0x200004cc
 8002220:	20000688 	.word	0x20000688
 8002224:	08014290 	.word	0x08014290
 8002228:	20000588 	.word	0x20000588
 800222c:	080142e0 	.word	0x080142e0
 8002230:	200004d0 	.word	0x200004d0
 8002234:	20000540 	.word	0x20000540

08002238 <floatToInt>:
  * @param  out_value the pointer to the output integer structure
  * @param  dec_prec the decimal precision to be used
  * @retval None
  */
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 8002238:	b5b0      	push	{r4, r5, r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002242:	60b8      	str	r0, [r7, #8]
 8002244:	6079      	str	r1, [r7, #4]
  if(in >= 0.0f)
 8002246:	edd7 7a03 	vldr	s15, [r7, #12]
 800224a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800224e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002252:	db03      	blt.n	800225c <floatToInt+0x24>
  {
    out_value->sign = 0;
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]
 800225a:	e008      	b.n	800226e <floatToInt+0x36>
  }else
  {
    out_value->sign = 1;
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2201      	movs	r2, #1
 8002260:	701a      	strb	r2, [r3, #0]
    in = -in;
 8002262:	edd7 7a03 	vldr	s15, [r7, #12]
 8002266:	eef1 7a67 	vneg.f32	s15, s15
 800226a:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  in = in + (0.5f / pow(10, dec_prec));
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f7fe f962 	bl	8000538 <__aeabi_f2d>
 8002274:	4604      	mov	r4, r0
 8002276:	460d      	mov	r5, r1
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7fe f94b 	bl	8000514 <__aeabi_i2d>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	ec43 2b11 	vmov	d1, r2, r3
 8002286:	ed9f 0b2e 	vldr	d0, [pc, #184]	@ 8002340 <floatToInt+0x108>
 800228a:	f011 f859 	bl	8013340 <pow>
 800228e:	ec53 2b10 	vmov	r2, r3, d0
 8002292:	f04f 0000 	mov.w	r0, #0
 8002296:	492c      	ldr	r1, [pc, #176]	@ (8002348 <floatToInt+0x110>)
 8002298:	f7fe fad0 	bl	800083c <__aeabi_ddiv>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4620      	mov	r0, r4
 80022a2:	4629      	mov	r1, r5
 80022a4:	f7fd ffea 	bl	800027c <__adddf3>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4610      	mov	r0, r2
 80022ae:	4619      	mov	r1, r3
 80022b0:	f7fe fc72 	bl	8000b98 <__aeabi_d2f>
 80022b4:	4603      	mov	r3, r0
 80022b6:	60fb      	str	r3, [r7, #12]
  out_value->out_int = (int32_t)in;
 80022b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80022bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022c0:	ee17 2a90 	vmov	r2, s15
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	ee07 3a90 	vmov	s15, r3
 80022d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022d4:	ed97 7a03 	vldr	s14, [r7, #12]
 80022d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022dc:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_dec = (int32_t)trunc(in * pow(10, dec_prec));
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f7fe f929 	bl	8000538 <__aeabi_f2d>
 80022e6:	4604      	mov	r4, r0
 80022e8:	460d      	mov	r5, r1
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe f912 	bl	8000514 <__aeabi_i2d>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	ec43 2b11 	vmov	d1, r2, r3
 80022f8:	ed9f 0b11 	vldr	d0, [pc, #68]	@ 8002340 <floatToInt+0x108>
 80022fc:	f011 f820 	bl	8013340 <pow>
 8002300:	ec53 2b10 	vmov	r2, r3, d0
 8002304:	4620      	mov	r0, r4
 8002306:	4629      	mov	r1, r5
 8002308:	f7fe f96e 	bl	80005e8 <__aeabi_dmul>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	ec43 2b17 	vmov	d7, r2, r3
 8002314:	eeb0 0a47 	vmov.f32	s0, s14
 8002318:	eef0 0a67 	vmov.f32	s1, s15
 800231c:	f011 f88c 	bl	8013438 <trunc>
 8002320:	ec53 2b10 	vmov	r2, r3, d0
 8002324:	4610      	mov	r0, r2
 8002326:	4619      	mov	r1, r3
 8002328:	f7fe fc0e 	bl	8000b48 <__aeabi_d2iz>
 800232c:	4603      	mov	r3, r0
 800232e:	461a      	mov	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	609a      	str	r2, [r3, #8]
}
 8002334:	bf00      	nop
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bdb0      	pop	{r4, r5, r7, pc}
 800233c:	f3af 8000 	nop.w
 8002340:	00000000 	.word	0x00000000
 8002344:	40240000 	.word	0x40240000
 8002348:	3fe00000 	.word	0x3fe00000

0800234c <Accelero_Sensor_Handler>:
  * @brief  Handles the accelerometer axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Accelero_Sensor_Handler(uint32_t Instance)
{
 800234c:	b5b0      	push	{r4, r5, r7, lr}
 800234e:	b092      	sub	sp, #72	@ 0x48
 8002350:	af06      	add	r7, sp, #24
 8002352:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS4A1_MOTION_SENSOR_Axes_t acceleration;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a51      	ldr	r2, [pc, #324]	@ (800249c <Accelero_Sensor_Handler+0x150>)
 8002358:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800235c:	4850      	ldr	r0, [pc, #320]	@ (80024a0 <Accelero_Sensor_Handler+0x154>)
 800235e:	f00f ffa9 	bl	80122b4 <sniprintf>
  printf("%s", dataOut);
 8002362:	494f      	ldr	r1, [pc, #316]	@ (80024a0 <Accelero_Sensor_Handler+0x154>)
 8002364:	484f      	ldr	r0, [pc, #316]	@ (80024a4 <Accelero_Sensor_Handler+0x158>)
 8002366:	f00f ff93 	bl	8012290 <iprintf>

  if (IKS4A1_MOTION_SENSOR_GetAxes(Instance, MOTION_ACCELERO, &acceleration))
 800236a:	f107 031c 	add.w	r3, r7, #28
 800236e:	461a      	mov	r2, r3
 8002370:	2102      	movs	r1, #2
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f009 fb78 	bl	800ba68 <IKS4A1_MOTION_SENSOR_GetAxes>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d007      	beq.n	800238e <Accelero_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC[%d]: Error\r\n", (int)Instance);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a49      	ldr	r2, [pc, #292]	@ (80024a8 <Accelero_Sensor_Handler+0x15c>)
 8002382:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002386:	4846      	ldr	r0, [pc, #280]	@ (80024a0 <Accelero_Sensor_Handler+0x154>)
 8002388:	f00f ff94 	bl	80122b4 <sniprintf>
 800238c:	e011      	b.n	80023b2 <Accelero_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 800238e:	687d      	ldr	r5, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 8002390:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 8002392:	687a      	ldr	r2, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 8002394:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 8002396:	6878      	ldr	r0, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 8002398:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 800239a:	9404      	str	r4, [sp, #16]
 800239c:	9003      	str	r0, [sp, #12]
 800239e:	9102      	str	r1, [sp, #8]
 80023a0:	9201      	str	r2, [sp, #4]
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	462b      	mov	r3, r5
 80023a6:	4a41      	ldr	r2, [pc, #260]	@ (80024ac <Accelero_Sensor_Handler+0x160>)
 80023a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023ac:	483c      	ldr	r0, [pc, #240]	@ (80024a0 <Accelero_Sensor_Handler+0x154>)
 80023ae:	f00f ff81 	bl	80122b4 <sniprintf>
  }

  printf("%s", dataOut);
 80023b2:	493b      	ldr	r1, [pc, #236]	@ (80024a0 <Accelero_Sensor_Handler+0x154>)
 80023b4:	483b      	ldr	r0, [pc, #236]	@ (80024a4 <Accelero_Sensor_Handler+0x158>)
 80023b6:	f00f ff6b 	bl	8012290 <iprintf>

  if (verbose == 1)
 80023ba:	4b3d      	ldr	r3, [pc, #244]	@ (80024b0 <Accelero_Sensor_Handler+0x164>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d168      	bne.n	8002494 <Accelero_Sensor_Handler+0x148>
  {
    if (IKS4A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 80023c2:	f107 030f 	add.w	r3, r7, #15
 80023c6:	4619      	mov	r1, r3
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f009 fb23 	bl	800ba14 <IKS4A1_MOTION_SENSOR_ReadID>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d007      	beq.n	80023e4 <Accelero_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a37      	ldr	r2, [pc, #220]	@ (80024b4 <Accelero_Sensor_Handler+0x168>)
 80023d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023dc:	4830      	ldr	r0, [pc, #192]	@ (80024a0 <Accelero_Sensor_Handler+0x154>)
 80023de:	f00f ff69 	bl	80122b4 <sniprintf>
 80023e2:	e008      	b.n	80023f6 <Accelero_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	7bfa      	ldrb	r2, [r7, #15]
 80023e8:	9200      	str	r2, [sp, #0]
 80023ea:	4a33      	ldr	r2, [pc, #204]	@ (80024b8 <Accelero_Sensor_Handler+0x16c>)
 80023ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023f0:	482b      	ldr	r0, [pc, #172]	@ (80024a0 <Accelero_Sensor_Handler+0x154>)
 80023f2:	f00f ff5f 	bl	80122b4 <sniprintf>
    }

    printf("%s", dataOut);
 80023f6:	492a      	ldr	r1, [pc, #168]	@ (80024a0 <Accelero_Sensor_Handler+0x154>)
 80023f8:	482a      	ldr	r0, [pc, #168]	@ (80024a4 <Accelero_Sensor_Handler+0x158>)
 80023fa:	f00f ff49 	bl	8012290 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_ACCELERO, &odr))
 80023fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002402:	461a      	mov	r2, r3
 8002404:	2102      	movs	r1, #2
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f009 fb72 	bl	800baf0 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d007      	beq.n	8002422 <Accelero_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a29      	ldr	r2, [pc, #164]	@ (80024bc <Accelero_Sensor_Handler+0x170>)
 8002416:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800241a:	4821      	ldr	r0, [pc, #132]	@ (80024a0 <Accelero_Sensor_Handler+0x154>)
 800241c:	f00f ff4a 	bl	80122b4 <sniprintf>
 8002420:	e014      	b.n	800244c <Accelero_Sensor_Handler+0x100>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8002422:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002426:	f107 0310 	add.w	r3, r7, #16
 800242a:	2103      	movs	r1, #3
 800242c:	4618      	mov	r0, r3
 800242e:	eeb0 0a67 	vmov.f32	s0, s15
 8002432:	f7ff ff01 	bl	8002238 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 800243a:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800243c:	9101      	str	r1, [sp, #4]
 800243e:	9200      	str	r2, [sp, #0]
 8002440:	4a1f      	ldr	r2, [pc, #124]	@ (80024c0 <Accelero_Sensor_Handler+0x174>)
 8002442:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002446:	4816      	ldr	r0, [pc, #88]	@ (80024a0 <Accelero_Sensor_Handler+0x154>)
 8002448:	f00f ff34 	bl	80122b4 <sniprintf>
    }

    printf("%s", dataOut);
 800244c:	4914      	ldr	r1, [pc, #80]	@ (80024a0 <Accelero_Sensor_Handler+0x154>)
 800244e:	4815      	ldr	r0, [pc, #84]	@ (80024a4 <Accelero_Sensor_Handler+0x158>)
 8002450:	f00f ff1e 	bl	8012290 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_ACCELERO, &fullScale))
 8002454:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002458:	461a      	mov	r2, r3
 800245a:	2102      	movs	r1, #2
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f009 fb8b 	bl	800bb78 <IKS4A1_MOTION_SENSOR_GetFullScale>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d007      	beq.n	8002478 <Accelero_Sensor_Handler+0x12c>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a16      	ldr	r2, [pc, #88]	@ (80024c4 <Accelero_Sensor_Handler+0x178>)
 800246c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002470:	480b      	ldr	r0, [pc, #44]	@ (80024a0 <Accelero_Sensor_Handler+0x154>)
 8002472:	f00f ff1f 	bl	80122b4 <sniprintf>
 8002476:	e009      	b.n	800248c <Accelero_Sensor_Handler+0x140>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d g\r\n", (int)Instance, (int)fullScale);
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	4613      	mov	r3, r2
 8002480:	4a11      	ldr	r2, [pc, #68]	@ (80024c8 <Accelero_Sensor_Handler+0x17c>)
 8002482:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002486:	4806      	ldr	r0, [pc, #24]	@ (80024a0 <Accelero_Sensor_Handler+0x154>)
 8002488:	f00f ff14 	bl	80122b4 <sniprintf>
    }

    printf("%s", dataOut);
 800248c:	4904      	ldr	r1, [pc, #16]	@ (80024a0 <Accelero_Sensor_Handler+0x154>)
 800248e:	4805      	ldr	r0, [pc, #20]	@ (80024a4 <Accelero_Sensor_Handler+0x158>)
 8002490:	f00f fefe 	bl	8012290 <iprintf>
  }
}
 8002494:	bf00      	nop
 8002496:	3730      	adds	r7, #48	@ 0x30
 8002498:	46bd      	mov	sp, r7
 800249a:	bdb0      	pop	{r4, r5, r7, pc}
 800249c:	080144ac 	.word	0x080144ac
 80024a0:	20000588 	.word	0x20000588
 80024a4:	080142e0 	.word	0x080142e0
 80024a8:	080144cc 	.word	0x080144cc
 80024ac:	080144e0 	.word	0x080144e0
 80024b0:	20000000 	.word	0x20000000
 80024b4:	08014510 	.word	0x08014510
 80024b8:	08014524 	.word	0x08014524
 80024bc:	08014538 	.word	0x08014538
 80024c0:	0801454c 	.word	0x0801454c
 80024c4:	08014564 	.word	0x08014564
 80024c8:	08014574 	.word	0x08014574

080024cc <Gyro_Sensor_Handler>:
  * @brief  Handles the gyroscope axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Gyro_Sensor_Handler(uint32_t Instance)
{
 80024cc:	b5b0      	push	{r4, r5, r7, lr}
 80024ce:	b092      	sub	sp, #72	@ 0x48
 80024d0:	af06      	add	r7, sp, #24
 80024d2:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS4A1_MOTION_SENSOR_Axes_t angular_velocity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a51      	ldr	r2, [pc, #324]	@ (800261c <Gyro_Sensor_Handler+0x150>)
 80024d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024dc:	4850      	ldr	r0, [pc, #320]	@ (8002620 <Gyro_Sensor_Handler+0x154>)
 80024de:	f00f fee9 	bl	80122b4 <sniprintf>
  printf("%s", dataOut);
 80024e2:	494f      	ldr	r1, [pc, #316]	@ (8002620 <Gyro_Sensor_Handler+0x154>)
 80024e4:	484f      	ldr	r0, [pc, #316]	@ (8002624 <Gyro_Sensor_Handler+0x158>)
 80024e6:	f00f fed3 	bl	8012290 <iprintf>

  if (IKS4A1_MOTION_SENSOR_GetAxes(Instance, MOTION_GYRO, &angular_velocity))
 80024ea:	f107 031c 	add.w	r3, r7, #28
 80024ee:	461a      	mov	r2, r3
 80024f0:	2101      	movs	r1, #1
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f009 fab8 	bl	800ba68 <IKS4A1_MOTION_SENSOR_GetAxes>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d007      	beq.n	800250e <Gyro_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR[%d]: Error\r\n", (int)Instance);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a49      	ldr	r2, [pc, #292]	@ (8002628 <Gyro_Sensor_Handler+0x15c>)
 8002502:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002506:	4846      	ldr	r0, [pc, #280]	@ (8002620 <Gyro_Sensor_Handler+0x154>)
 8002508:	f00f fed4 	bl	80122b4 <sniprintf>
 800250c:	e011      	b.n	8002532 <Gyro_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 800250e:	687d      	ldr	r5, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 8002510:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8002512:	687a      	ldr	r2, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 8002514:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8002516:	6878      	ldr	r0, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 8002518:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 800251a:	9404      	str	r4, [sp, #16]
 800251c:	9003      	str	r0, [sp, #12]
 800251e:	9102      	str	r1, [sp, #8]
 8002520:	9201      	str	r2, [sp, #4]
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	462b      	mov	r3, r5
 8002526:	4a41      	ldr	r2, [pc, #260]	@ (800262c <Gyro_Sensor_Handler+0x160>)
 8002528:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800252c:	483c      	ldr	r0, [pc, #240]	@ (8002620 <Gyro_Sensor_Handler+0x154>)
 800252e:	f00f fec1 	bl	80122b4 <sniprintf>
  }

  printf("%s", dataOut);
 8002532:	493b      	ldr	r1, [pc, #236]	@ (8002620 <Gyro_Sensor_Handler+0x154>)
 8002534:	483b      	ldr	r0, [pc, #236]	@ (8002624 <Gyro_Sensor_Handler+0x158>)
 8002536:	f00f feab 	bl	8012290 <iprintf>

  if (verbose == 1)
 800253a:	4b3d      	ldr	r3, [pc, #244]	@ (8002630 <Gyro_Sensor_Handler+0x164>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d168      	bne.n	8002614 <Gyro_Sensor_Handler+0x148>
  {
    if (IKS4A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 8002542:	f107 030f 	add.w	r3, r7, #15
 8002546:	4619      	mov	r1, r3
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f009 fa63 	bl	800ba14 <IKS4A1_MOTION_SENSOR_ReadID>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d007      	beq.n	8002564 <Gyro_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a37      	ldr	r2, [pc, #220]	@ (8002634 <Gyro_Sensor_Handler+0x168>)
 8002558:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800255c:	4830      	ldr	r0, [pc, #192]	@ (8002620 <Gyro_Sensor_Handler+0x154>)
 800255e:	f00f fea9 	bl	80122b4 <sniprintf>
 8002562:	e008      	b.n	8002576 <Gyro_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	7bfa      	ldrb	r2, [r7, #15]
 8002568:	9200      	str	r2, [sp, #0]
 800256a:	4a33      	ldr	r2, [pc, #204]	@ (8002638 <Gyro_Sensor_Handler+0x16c>)
 800256c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002570:	482b      	ldr	r0, [pc, #172]	@ (8002620 <Gyro_Sensor_Handler+0x154>)
 8002572:	f00f fe9f 	bl	80122b4 <sniprintf>
    }

    printf("%s", dataOut);
 8002576:	492a      	ldr	r1, [pc, #168]	@ (8002620 <Gyro_Sensor_Handler+0x154>)
 8002578:	482a      	ldr	r0, [pc, #168]	@ (8002624 <Gyro_Sensor_Handler+0x158>)
 800257a:	f00f fe89 	bl	8012290 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_GYRO, &odr))
 800257e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002582:	461a      	mov	r2, r3
 8002584:	2101      	movs	r1, #1
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f009 fab2 	bl	800baf0 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d007      	beq.n	80025a2 <Gyro_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a29      	ldr	r2, [pc, #164]	@ (800263c <Gyro_Sensor_Handler+0x170>)
 8002596:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800259a:	4821      	ldr	r0, [pc, #132]	@ (8002620 <Gyro_Sensor_Handler+0x154>)
 800259c:	f00f fe8a 	bl	80122b4 <sniprintf>
 80025a0:	e014      	b.n	80025cc <Gyro_Sensor_Handler+0x100>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 80025a2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80025a6:	f107 0310 	add.w	r3, r7, #16
 80025aa:	2103      	movs	r1, #3
 80025ac:	4618      	mov	r0, r3
 80025ae:	eeb0 0a67 	vmov.f32	s0, s15
 80025b2:	f7ff fe41 	bl	8002238 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 80025ba:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 80025bc:	9101      	str	r1, [sp, #4]
 80025be:	9200      	str	r2, [sp, #0]
 80025c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002640 <Gyro_Sensor_Handler+0x174>)
 80025c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025c6:	4816      	ldr	r0, [pc, #88]	@ (8002620 <Gyro_Sensor_Handler+0x154>)
 80025c8:	f00f fe74 	bl	80122b4 <sniprintf>
    }

    printf("%s", dataOut);
 80025cc:	4914      	ldr	r1, [pc, #80]	@ (8002620 <Gyro_Sensor_Handler+0x154>)
 80025ce:	4815      	ldr	r0, [pc, #84]	@ (8002624 <Gyro_Sensor_Handler+0x158>)
 80025d0:	f00f fe5e 	bl	8012290 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_GYRO, &fullScale))
 80025d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025d8:	461a      	mov	r2, r3
 80025da:	2101      	movs	r1, #1
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f009 facb 	bl	800bb78 <IKS4A1_MOTION_SENSOR_GetFullScale>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d007      	beq.n	80025f8 <Gyro_Sensor_Handler+0x12c>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a16      	ldr	r2, [pc, #88]	@ (8002644 <Gyro_Sensor_Handler+0x178>)
 80025ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025f0:	480b      	ldr	r0, [pc, #44]	@ (8002620 <Gyro_Sensor_Handler+0x154>)
 80025f2:	f00f fe5f 	bl	80122b4 <sniprintf>
 80025f6:	e009      	b.n	800260c <Gyro_Sensor_Handler+0x140>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d dps\r\n", (int)Instance, (int)fullScale);
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	4613      	mov	r3, r2
 8002600:	4a11      	ldr	r2, [pc, #68]	@ (8002648 <Gyro_Sensor_Handler+0x17c>)
 8002602:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002606:	4806      	ldr	r0, [pc, #24]	@ (8002620 <Gyro_Sensor_Handler+0x154>)
 8002608:	f00f fe54 	bl	80122b4 <sniprintf>
    }

    printf("%s", dataOut);
 800260c:	4904      	ldr	r1, [pc, #16]	@ (8002620 <Gyro_Sensor_Handler+0x154>)
 800260e:	4805      	ldr	r0, [pc, #20]	@ (8002624 <Gyro_Sensor_Handler+0x158>)
 8002610:	f00f fe3e 	bl	8012290 <iprintf>
  }
}
 8002614:	bf00      	nop
 8002616:	3730      	adds	r7, #48	@ 0x30
 8002618:	46bd      	mov	sp, r7
 800261a:	bdb0      	pop	{r4, r5, r7, pc}
 800261c:	080144ac 	.word	0x080144ac
 8002620:	20000588 	.word	0x20000588
 8002624:	080142e0 	.word	0x080142e0
 8002628:	08014584 	.word	0x08014584
 800262c:	08014598 	.word	0x08014598
 8002630:	20000000 	.word	0x20000000
 8002634:	08014510 	.word	0x08014510
 8002638:	08014524 	.word	0x08014524
 800263c:	08014538 	.word	0x08014538
 8002640:	0801454c 	.word	0x0801454c
 8002644:	08014564 	.word	0x08014564
 8002648:	080145c8 	.word	0x080145c8

0800264c <Magneto_Sensor_Handler>:
  * @brief  Handles the magneto axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Magneto_Sensor_Handler(uint32_t Instance)
{
 800264c:	b5b0      	push	{r4, r5, r7, lr}
 800264e:	b092      	sub	sp, #72	@ 0x48
 8002650:	af06      	add	r7, sp, #24
 8002652:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS4A1_MOTION_SENSOR_Axes_t magnetic_field;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a51      	ldr	r2, [pc, #324]	@ (800279c <Magneto_Sensor_Handler+0x150>)
 8002658:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800265c:	4850      	ldr	r0, [pc, #320]	@ (80027a0 <Magneto_Sensor_Handler+0x154>)
 800265e:	f00f fe29 	bl	80122b4 <sniprintf>
  printf("%s", dataOut);
 8002662:	494f      	ldr	r1, [pc, #316]	@ (80027a0 <Magneto_Sensor_Handler+0x154>)
 8002664:	484f      	ldr	r0, [pc, #316]	@ (80027a4 <Magneto_Sensor_Handler+0x158>)
 8002666:	f00f fe13 	bl	8012290 <iprintf>

  if (IKS4A1_MOTION_SENSOR_GetAxes(Instance, MOTION_MAGNETO, &magnetic_field))
 800266a:	f107 031c 	add.w	r3, r7, #28
 800266e:	461a      	mov	r2, r3
 8002670:	2104      	movs	r1, #4
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f009 f9f8 	bl	800ba68 <IKS4A1_MOTION_SENSOR_GetAxes>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d007      	beq.n	800268e <Magneto_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG[%d]: Error\r\n", (int)Instance);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a49      	ldr	r2, [pc, #292]	@ (80027a8 <Magneto_Sensor_Handler+0x15c>)
 8002682:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002686:	4846      	ldr	r0, [pc, #280]	@ (80027a0 <Magneto_Sensor_Handler+0x154>)
 8002688:	f00f fe14 	bl	80122b4 <sniprintf>
 800268c:	e011      	b.n	80026b2 <Magneto_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 800268e:	687d      	ldr	r5, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 8002690:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8002692:	687a      	ldr	r2, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 8002694:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8002696:	6878      	ldr	r0, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 8002698:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 800269a:	9404      	str	r4, [sp, #16]
 800269c:	9003      	str	r0, [sp, #12]
 800269e:	9102      	str	r1, [sp, #8]
 80026a0:	9201      	str	r2, [sp, #4]
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	462b      	mov	r3, r5
 80026a6:	4a41      	ldr	r2, [pc, #260]	@ (80027ac <Magneto_Sensor_Handler+0x160>)
 80026a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80026ac:	483c      	ldr	r0, [pc, #240]	@ (80027a0 <Magneto_Sensor_Handler+0x154>)
 80026ae:	f00f fe01 	bl	80122b4 <sniprintf>
  }

  printf("%s", dataOut);
 80026b2:	493b      	ldr	r1, [pc, #236]	@ (80027a0 <Magneto_Sensor_Handler+0x154>)
 80026b4:	483b      	ldr	r0, [pc, #236]	@ (80027a4 <Magneto_Sensor_Handler+0x158>)
 80026b6:	f00f fdeb 	bl	8012290 <iprintf>

  if (verbose == 1)
 80026ba:	4b3d      	ldr	r3, [pc, #244]	@ (80027b0 <Magneto_Sensor_Handler+0x164>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d168      	bne.n	8002794 <Magneto_Sensor_Handler+0x148>
  {
    if (IKS4A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 80026c2:	f107 030f 	add.w	r3, r7, #15
 80026c6:	4619      	mov	r1, r3
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f009 f9a3 	bl	800ba14 <IKS4A1_MOTION_SENSOR_ReadID>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d007      	beq.n	80026e4 <Magneto_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a37      	ldr	r2, [pc, #220]	@ (80027b4 <Magneto_Sensor_Handler+0x168>)
 80026d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80026dc:	4830      	ldr	r0, [pc, #192]	@ (80027a0 <Magneto_Sensor_Handler+0x154>)
 80026de:	f00f fde9 	bl	80122b4 <sniprintf>
 80026e2:	e008      	b.n	80026f6 <Magneto_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	7bfa      	ldrb	r2, [r7, #15]
 80026e8:	9200      	str	r2, [sp, #0]
 80026ea:	4a33      	ldr	r2, [pc, #204]	@ (80027b8 <Magneto_Sensor_Handler+0x16c>)
 80026ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80026f0:	482b      	ldr	r0, [pc, #172]	@ (80027a0 <Magneto_Sensor_Handler+0x154>)
 80026f2:	f00f fddf 	bl	80122b4 <sniprintf>
    }

    printf("%s", dataOut);
 80026f6:	492a      	ldr	r1, [pc, #168]	@ (80027a0 <Magneto_Sensor_Handler+0x154>)
 80026f8:	482a      	ldr	r0, [pc, #168]	@ (80027a4 <Magneto_Sensor_Handler+0x158>)
 80026fa:	f00f fdc9 	bl	8012290 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_MAGNETO, &odr))
 80026fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002702:	461a      	mov	r2, r3
 8002704:	2104      	movs	r1, #4
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f009 f9f2 	bl	800baf0 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d007      	beq.n	8002722 <Magneto_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a29      	ldr	r2, [pc, #164]	@ (80027bc <Magneto_Sensor_Handler+0x170>)
 8002716:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800271a:	4821      	ldr	r0, [pc, #132]	@ (80027a0 <Magneto_Sensor_Handler+0x154>)
 800271c:	f00f fdca 	bl	80122b4 <sniprintf>
 8002720:	e014      	b.n	800274c <Magneto_Sensor_Handler+0x100>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8002722:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002726:	f107 0310 	add.w	r3, r7, #16
 800272a:	2103      	movs	r1, #3
 800272c:	4618      	mov	r0, r3
 800272e:	eeb0 0a67 	vmov.f32	s0, s15
 8002732:	f7ff fd81 	bl	8002238 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 800273a:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800273c:	9101      	str	r1, [sp, #4]
 800273e:	9200      	str	r2, [sp, #0]
 8002740:	4a1f      	ldr	r2, [pc, #124]	@ (80027c0 <Magneto_Sensor_Handler+0x174>)
 8002742:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002746:	4816      	ldr	r0, [pc, #88]	@ (80027a0 <Magneto_Sensor_Handler+0x154>)
 8002748:	f00f fdb4 	bl	80122b4 <sniprintf>
    }

    printf("%s", dataOut);
 800274c:	4914      	ldr	r1, [pc, #80]	@ (80027a0 <Magneto_Sensor_Handler+0x154>)
 800274e:	4815      	ldr	r0, [pc, #84]	@ (80027a4 <Magneto_Sensor_Handler+0x158>)
 8002750:	f00f fd9e 	bl	8012290 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_MAGNETO, &fullScale))
 8002754:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002758:	461a      	mov	r2, r3
 800275a:	2104      	movs	r1, #4
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f009 fa0b 	bl	800bb78 <IKS4A1_MOTION_SENSOR_GetFullScale>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d007      	beq.n	8002778 <Magneto_Sensor_Handler+0x12c>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a16      	ldr	r2, [pc, #88]	@ (80027c4 <Magneto_Sensor_Handler+0x178>)
 800276c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002770:	480b      	ldr	r0, [pc, #44]	@ (80027a0 <Magneto_Sensor_Handler+0x154>)
 8002772:	f00f fd9f 	bl	80122b4 <sniprintf>
 8002776:	e009      	b.n	800278c <Magneto_Sensor_Handler+0x140>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d gauss\r\n", (int)Instance, (int)fullScale);
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	4613      	mov	r3, r2
 8002780:	4a11      	ldr	r2, [pc, #68]	@ (80027c8 <Magneto_Sensor_Handler+0x17c>)
 8002782:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002786:	4806      	ldr	r0, [pc, #24]	@ (80027a0 <Magneto_Sensor_Handler+0x154>)
 8002788:	f00f fd94 	bl	80122b4 <sniprintf>
    }

    printf("%s", dataOut);
 800278c:	4904      	ldr	r1, [pc, #16]	@ (80027a0 <Magneto_Sensor_Handler+0x154>)
 800278e:	4805      	ldr	r0, [pc, #20]	@ (80027a4 <Magneto_Sensor_Handler+0x158>)
 8002790:	f00f fd7e 	bl	8012290 <iprintf>
  }
}
 8002794:	bf00      	nop
 8002796:	3730      	adds	r7, #48	@ 0x30
 8002798:	46bd      	mov	sp, r7
 800279a:	bdb0      	pop	{r4, r5, r7, pc}
 800279c:	080144ac 	.word	0x080144ac
 80027a0:	20000588 	.word	0x20000588
 80027a4:	080142e0 	.word	0x080142e0
 80027a8:	080145dc 	.word	0x080145dc
 80027ac:	080145f0 	.word	0x080145f0
 80027b0:	20000000 	.word	0x20000000
 80027b4:	08014510 	.word	0x08014510
 80027b8:	08014524 	.word	0x08014524
 80027bc:	08014538 	.word	0x08014538
 80027c0:	0801454c 	.word	0x0801454c
 80027c4:	08014564 	.word	0x08014564
 80027c8:	08014620 	.word	0x08014620

080027cc <Temp_Sensor_Handler>:
  * @brief  Handles the temperature data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Temp_Sensor_Handler(uint32_t Instance)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08c      	sub	sp, #48	@ 0x30
 80027d0:	af04      	add	r7, sp, #16
 80027d2:	6078      	str	r0, [r7, #4]
  float odr;
  float temperature;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nEnvironmental sensor instance %d:", (int)Instance);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a47      	ldr	r2, [pc, #284]	@ (80028f4 <Temp_Sensor_Handler+0x128>)
 80027d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027dc:	4846      	ldr	r0, [pc, #280]	@ (80028f8 <Temp_Sensor_Handler+0x12c>)
 80027de:	f00f fd69 	bl	80122b4 <sniprintf>
  printf("%s", dataOut);
 80027e2:	4945      	ldr	r1, [pc, #276]	@ (80028f8 <Temp_Sensor_Handler+0x12c>)
 80027e4:	4845      	ldr	r0, [pc, #276]	@ (80028fc <Temp_Sensor_Handler+0x130>)
 80027e6:	f00f fd53 	bl	8012290 <iprintf>

  if (IKS4A1_ENV_SENSOR_GetValue(Instance, ENV_TEMPERATURE, &temperature))
 80027ea:	f107 0318 	add.w	r3, r7, #24
 80027ee:	461a      	mov	r2, r3
 80027f0:	2101      	movs	r1, #1
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f008 fd1a 	bl	800b22c <IKS4A1_ENV_SENSOR_GetValue>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d007      	beq.n	800280e <Temp_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: Error\r\n", (int)Instance);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a3f      	ldr	r2, [pc, #252]	@ (8002900 <Temp_Sensor_Handler+0x134>)
 8002802:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002806:	483c      	ldr	r0, [pc, #240]	@ (80028f8 <Temp_Sensor_Handler+0x12c>)
 8002808:	f00f fd54 	bl	80122b4 <sniprintf>
 800280c:	e01d      	b.n	800284a <Temp_Sensor_Handler+0x7e>
  }
  else
  {
    floatToInt(temperature, &out_value, 2);
 800280e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002812:	f107 030c 	add.w	r3, r7, #12
 8002816:	2102      	movs	r1, #2
 8002818:	4618      	mov	r0, r3
 800281a:	eeb0 0a67 	vmov.f32	s0, s15
 800281e:	f7ff fd0b 	bl	8002238 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: %c%d.%02d degC\r\n", (int)Instance, ((out_value.sign) ? '-' : '+'), (int)out_value.out_int,
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <Temp_Sensor_Handler+0x64>
 800282c:	232d      	movs	r3, #45	@ 0x2d
 800282e:	e000      	b.n	8002832 <Temp_Sensor_Handler+0x66>
 8002830:	232b      	movs	r3, #43	@ 0x2b
 8002832:	6939      	ldr	r1, [r7, #16]
             (int)out_value.out_dec);
 8002834:	6978      	ldr	r0, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: %c%d.%02d degC\r\n", (int)Instance, ((out_value.sign) ? '-' : '+'), (int)out_value.out_int,
 8002836:	9002      	str	r0, [sp, #8]
 8002838:	9101      	str	r1, [sp, #4]
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	4613      	mov	r3, r2
 800283e:	4a31      	ldr	r2, [pc, #196]	@ (8002904 <Temp_Sensor_Handler+0x138>)
 8002840:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002844:	482c      	ldr	r0, [pc, #176]	@ (80028f8 <Temp_Sensor_Handler+0x12c>)
 8002846:	f00f fd35 	bl	80122b4 <sniprintf>
  }

  printf("%s", dataOut);
 800284a:	492b      	ldr	r1, [pc, #172]	@ (80028f8 <Temp_Sensor_Handler+0x12c>)
 800284c:	482b      	ldr	r0, [pc, #172]	@ (80028fc <Temp_Sensor_Handler+0x130>)
 800284e:	f00f fd1f 	bl	8012290 <iprintf>

  if (verbose == 1)
 8002852:	4b2d      	ldr	r3, [pc, #180]	@ (8002908 <Temp_Sensor_Handler+0x13c>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d148      	bne.n	80028ec <Temp_Sensor_Handler+0x120>
  {
    if (IKS4A1_ENV_SENSOR_ReadID(Instance, &whoami))
 800285a:	f107 030b 	add.w	r3, r7, #11
 800285e:	4619      	mov	r1, r3
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f008 fc77 	bl	800b154 <IKS4A1_ENV_SENSOR_ReadID>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d007      	beq.n	800287c <Temp_Sensor_Handler+0xb0>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a27      	ldr	r2, [pc, #156]	@ (800290c <Temp_Sensor_Handler+0x140>)
 8002870:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002874:	4820      	ldr	r0, [pc, #128]	@ (80028f8 <Temp_Sensor_Handler+0x12c>)
 8002876:	f00f fd1d 	bl	80122b4 <sniprintf>
 800287a:	e008      	b.n	800288e <Temp_Sensor_Handler+0xc2>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	7afa      	ldrb	r2, [r7, #11]
 8002880:	9200      	str	r2, [sp, #0]
 8002882:	4a23      	ldr	r2, [pc, #140]	@ (8002910 <Temp_Sensor_Handler+0x144>)
 8002884:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002888:	481b      	ldr	r0, [pc, #108]	@ (80028f8 <Temp_Sensor_Handler+0x12c>)
 800288a:	f00f fd13 	bl	80122b4 <sniprintf>
    }

    printf("%s", dataOut);
 800288e:	491a      	ldr	r1, [pc, #104]	@ (80028f8 <Temp_Sensor_Handler+0x12c>)
 8002890:	481a      	ldr	r0, [pc, #104]	@ (80028fc <Temp_Sensor_Handler+0x130>)
 8002892:	f00f fcfd 	bl	8012290 <iprintf>

    if (IKS4A1_ENV_SENSOR_GetOutputDataRate(Instance, ENV_TEMPERATURE, &odr))
 8002896:	f107 031c 	add.w	r3, r7, #28
 800289a:	461a      	mov	r2, r3
 800289c:	2101      	movs	r1, #1
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f008 fc82 	bl	800b1a8 <IKS4A1_ENV_SENSOR_GetOutputDataRate>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d007      	beq.n	80028ba <Temp_Sensor_Handler+0xee>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a19      	ldr	r2, [pc, #100]	@ (8002914 <Temp_Sensor_Handler+0x148>)
 80028ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80028b2:	4811      	ldr	r0, [pc, #68]	@ (80028f8 <Temp_Sensor_Handler+0x12c>)
 80028b4:	f00f fcfe 	bl	80122b4 <sniprintf>
 80028b8:	e014      	b.n	80028e4 <Temp_Sensor_Handler+0x118>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 80028ba:	edd7 7a07 	vldr	s15, [r7, #28]
 80028be:	f107 030c 	add.w	r3, r7, #12
 80028c2:	2103      	movs	r1, #3
 80028c4:	4618      	mov	r0, r3
 80028c6:	eeb0 0a67 	vmov.f32	s0, s15
 80028ca:	f7ff fcb5 	bl	8002238 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 80028d2:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 80028d4:	9101      	str	r1, [sp, #4]
 80028d6:	9200      	str	r2, [sp, #0]
 80028d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002918 <Temp_Sensor_Handler+0x14c>)
 80028da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80028de:	4806      	ldr	r0, [pc, #24]	@ (80028f8 <Temp_Sensor_Handler+0x12c>)
 80028e0:	f00f fce8 	bl	80122b4 <sniprintf>
    }

    printf("%s", dataOut);
 80028e4:	4904      	ldr	r1, [pc, #16]	@ (80028f8 <Temp_Sensor_Handler+0x12c>)
 80028e6:	4805      	ldr	r0, [pc, #20]	@ (80028fc <Temp_Sensor_Handler+0x130>)
 80028e8:	f00f fcd2 	bl	8012290 <iprintf>
  }
}
 80028ec:	bf00      	nop
 80028ee:	3720      	adds	r7, #32
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	08014634 	.word	0x08014634
 80028f8:	20000588 	.word	0x20000588
 80028fc:	080142e0 	.word	0x080142e0
 8002900:	08014658 	.word	0x08014658
 8002904:	0801466c 	.word	0x0801466c
 8002908:	20000000 	.word	0x20000000
 800290c:	08014510 	.word	0x08014510
 8002910:	08014524 	.word	0x08014524
 8002914:	0801468c 	.word	0x0801468c
 8002918:	0801454c 	.word	0x0801454c

0800291c <Press_Sensor_Handler>:
  * @brief  Handles the pressure sensor data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Press_Sensor_Handler(uint32_t Instance)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08a      	sub	sp, #40	@ 0x28
 8002920:	af02      	add	r7, sp, #8
 8002922:	6078      	str	r0, [r7, #4]
  float odr;
  float pressure;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nEnvironmental sensor instance %d:", (int)Instance);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a43      	ldr	r2, [pc, #268]	@ (8002a34 <Press_Sensor_Handler+0x118>)
 8002928:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800292c:	4842      	ldr	r0, [pc, #264]	@ (8002a38 <Press_Sensor_Handler+0x11c>)
 800292e:	f00f fcc1 	bl	80122b4 <sniprintf>
  printf("%s", dataOut);
 8002932:	4941      	ldr	r1, [pc, #260]	@ (8002a38 <Press_Sensor_Handler+0x11c>)
 8002934:	4841      	ldr	r0, [pc, #260]	@ (8002a3c <Press_Sensor_Handler+0x120>)
 8002936:	f00f fcab 	bl	8012290 <iprintf>

  if (IKS4A1_ENV_SENSOR_GetValue(Instance, ENV_PRESSURE, &pressure))
 800293a:	f107 0318 	add.w	r3, r7, #24
 800293e:	461a      	mov	r2, r3
 8002940:	2102      	movs	r1, #2
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f008 fc72 	bl	800b22c <IKS4A1_ENV_SENSOR_GetValue>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d007      	beq.n	800295e <Press_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: Error\r\n", (int)Instance);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a3b      	ldr	r2, [pc, #236]	@ (8002a40 <Press_Sensor_Handler+0x124>)
 8002952:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002956:	4838      	ldr	r0, [pc, #224]	@ (8002a38 <Press_Sensor_Handler+0x11c>)
 8002958:	f00f fcac 	bl	80122b4 <sniprintf>
 800295c:	e014      	b.n	8002988 <Press_Sensor_Handler+0x6c>
  }
  else
  {
    floatToInt(pressure, &out_value, 2);
 800295e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002962:	f107 030c 	add.w	r3, r7, #12
 8002966:	2102      	movs	r1, #2
 8002968:	4618      	mov	r0, r3
 800296a:	eeb0 0a67 	vmov.f32	s0, s15
 800296e:	f7ff fc63 	bl	8002238 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: %d.%02d hPa\r\n", (int)Instance, (int)out_value.out_int,
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	693a      	ldr	r2, [r7, #16]
             (int)out_value.out_dec);
 8002976:	6979      	ldr	r1, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: %d.%02d hPa\r\n", (int)Instance, (int)out_value.out_int,
 8002978:	9101      	str	r1, [sp, #4]
 800297a:	9200      	str	r2, [sp, #0]
 800297c:	4a31      	ldr	r2, [pc, #196]	@ (8002a44 <Press_Sensor_Handler+0x128>)
 800297e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002982:	482d      	ldr	r0, [pc, #180]	@ (8002a38 <Press_Sensor_Handler+0x11c>)
 8002984:	f00f fc96 	bl	80122b4 <sniprintf>
  }

  printf("%s", dataOut);
 8002988:	492b      	ldr	r1, [pc, #172]	@ (8002a38 <Press_Sensor_Handler+0x11c>)
 800298a:	482c      	ldr	r0, [pc, #176]	@ (8002a3c <Press_Sensor_Handler+0x120>)
 800298c:	f00f fc80 	bl	8012290 <iprintf>

  if (verbose == 1)
 8002990:	4b2d      	ldr	r3, [pc, #180]	@ (8002a48 <Press_Sensor_Handler+0x12c>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d148      	bne.n	8002a2a <Press_Sensor_Handler+0x10e>
  {
    if (IKS4A1_ENV_SENSOR_ReadID(Instance, &whoami))
 8002998:	f107 030b 	add.w	r3, r7, #11
 800299c:	4619      	mov	r1, r3
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f008 fbd8 	bl	800b154 <IKS4A1_ENV_SENSOR_ReadID>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d007      	beq.n	80029ba <Press_Sensor_Handler+0x9e>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a27      	ldr	r2, [pc, #156]	@ (8002a4c <Press_Sensor_Handler+0x130>)
 80029ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80029b2:	4821      	ldr	r0, [pc, #132]	@ (8002a38 <Press_Sensor_Handler+0x11c>)
 80029b4:	f00f fc7e 	bl	80122b4 <sniprintf>
 80029b8:	e008      	b.n	80029cc <Press_Sensor_Handler+0xb0>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	7afa      	ldrb	r2, [r7, #11]
 80029be:	9200      	str	r2, [sp, #0]
 80029c0:	4a23      	ldr	r2, [pc, #140]	@ (8002a50 <Press_Sensor_Handler+0x134>)
 80029c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80029c6:	481c      	ldr	r0, [pc, #112]	@ (8002a38 <Press_Sensor_Handler+0x11c>)
 80029c8:	f00f fc74 	bl	80122b4 <sniprintf>
    }

    printf("%s", dataOut);
 80029cc:	491a      	ldr	r1, [pc, #104]	@ (8002a38 <Press_Sensor_Handler+0x11c>)
 80029ce:	481b      	ldr	r0, [pc, #108]	@ (8002a3c <Press_Sensor_Handler+0x120>)
 80029d0:	f00f fc5e 	bl	8012290 <iprintf>

    if (IKS4A1_ENV_SENSOR_GetOutputDataRate(Instance, ENV_PRESSURE, &odr))
 80029d4:	f107 031c 	add.w	r3, r7, #28
 80029d8:	461a      	mov	r2, r3
 80029da:	2102      	movs	r1, #2
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f008 fbe3 	bl	800b1a8 <IKS4A1_ENV_SENSOR_GetOutputDataRate>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d007      	beq.n	80029f8 <Press_Sensor_Handler+0xdc>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a1a      	ldr	r2, [pc, #104]	@ (8002a54 <Press_Sensor_Handler+0x138>)
 80029ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80029f0:	4811      	ldr	r0, [pc, #68]	@ (8002a38 <Press_Sensor_Handler+0x11c>)
 80029f2:	f00f fc5f 	bl	80122b4 <sniprintf>
 80029f6:	e014      	b.n	8002a22 <Press_Sensor_Handler+0x106>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 80029f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80029fc:	f107 030c 	add.w	r3, r7, #12
 8002a00:	2103      	movs	r1, #3
 8002a02:	4618      	mov	r0, r3
 8002a04:	eeb0 0a67 	vmov.f32	s0, s15
 8002a08:	f7ff fc16 	bl	8002238 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 8002a10:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8002a12:	9101      	str	r1, [sp, #4]
 8002a14:	9200      	str	r2, [sp, #0]
 8002a16:	4a10      	ldr	r2, [pc, #64]	@ (8002a58 <Press_Sensor_Handler+0x13c>)
 8002a18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a1c:	4806      	ldr	r0, [pc, #24]	@ (8002a38 <Press_Sensor_Handler+0x11c>)
 8002a1e:	f00f fc49 	bl	80122b4 <sniprintf>
    }

    printf("%s", dataOut);
 8002a22:	4905      	ldr	r1, [pc, #20]	@ (8002a38 <Press_Sensor_Handler+0x11c>)
 8002a24:	4805      	ldr	r0, [pc, #20]	@ (8002a3c <Press_Sensor_Handler+0x120>)
 8002a26:	f00f fc33 	bl	8012290 <iprintf>
  }
}
 8002a2a:	bf00      	nop
 8002a2c:	3720      	adds	r7, #32
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	08014634 	.word	0x08014634
 8002a38:	20000588 	.word	0x20000588
 8002a3c:	080142e0 	.word	0x080142e0
 8002a40:	080146a0 	.word	0x080146a0
 8002a44:	080146b8 	.word	0x080146b8
 8002a48:	20000000 	.word	0x20000000
 8002a4c:	08014510 	.word	0x08014510
 8002a50:	08014524 	.word	0x08014524
 8002a54:	0801468c 	.word	0x0801468c
 8002a58:	0801454c 	.word	0x0801454c

08002a5c <Hum_Sensor_Handler>:
  * @brief  Handles the humidity data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Hum_Sensor_Handler(uint32_t Instance)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08a      	sub	sp, #40	@ 0x28
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	6078      	str	r0, [r7, #4]
  float odr;
  float humidity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nEnvironmental sensor instance %d:", (int)Instance);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a43      	ldr	r2, [pc, #268]	@ (8002b74 <Hum_Sensor_Handler+0x118>)
 8002a68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a6c:	4842      	ldr	r0, [pc, #264]	@ (8002b78 <Hum_Sensor_Handler+0x11c>)
 8002a6e:	f00f fc21 	bl	80122b4 <sniprintf>
  printf("%s", dataOut);
 8002a72:	4941      	ldr	r1, [pc, #260]	@ (8002b78 <Hum_Sensor_Handler+0x11c>)
 8002a74:	4841      	ldr	r0, [pc, #260]	@ (8002b7c <Hum_Sensor_Handler+0x120>)
 8002a76:	f00f fc0b 	bl	8012290 <iprintf>

  if (IKS4A1_ENV_SENSOR_GetValue(Instance, ENV_HUMIDITY, &humidity))
 8002a7a:	f107 0318 	add.w	r3, r7, #24
 8002a7e:	461a      	mov	r2, r3
 8002a80:	2104      	movs	r1, #4
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f008 fbd2 	bl	800b22c <IKS4A1_ENV_SENSOR_GetValue>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d007      	beq.n	8002a9e <Hum_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: Error\r\n", (int)Instance);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a3b      	ldr	r2, [pc, #236]	@ (8002b80 <Hum_Sensor_Handler+0x124>)
 8002a92:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a96:	4838      	ldr	r0, [pc, #224]	@ (8002b78 <Hum_Sensor_Handler+0x11c>)
 8002a98:	f00f fc0c 	bl	80122b4 <sniprintf>
 8002a9c:	e014      	b.n	8002ac8 <Hum_Sensor_Handler+0x6c>
  }
  else
  {
    floatToInt(humidity, &out_value, 2);
 8002a9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002aa2:	f107 030c 	add.w	r3, r7, #12
 8002aa6:	2102      	movs	r1, #2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8002aae:	f7ff fbc3 	bl	8002238 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: %d.%02d %%\r\n", (int)Instance, (int)out_value.out_int,
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	693a      	ldr	r2, [r7, #16]
             (int)out_value.out_dec);
 8002ab6:	6979      	ldr	r1, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: %d.%02d %%\r\n", (int)Instance, (int)out_value.out_int,
 8002ab8:	9101      	str	r1, [sp, #4]
 8002aba:	9200      	str	r2, [sp, #0]
 8002abc:	4a31      	ldr	r2, [pc, #196]	@ (8002b84 <Hum_Sensor_Handler+0x128>)
 8002abe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ac2:	482d      	ldr	r0, [pc, #180]	@ (8002b78 <Hum_Sensor_Handler+0x11c>)
 8002ac4:	f00f fbf6 	bl	80122b4 <sniprintf>
  }

  printf("%s", dataOut);
 8002ac8:	492b      	ldr	r1, [pc, #172]	@ (8002b78 <Hum_Sensor_Handler+0x11c>)
 8002aca:	482c      	ldr	r0, [pc, #176]	@ (8002b7c <Hum_Sensor_Handler+0x120>)
 8002acc:	f00f fbe0 	bl	8012290 <iprintf>

  if (verbose == 1)
 8002ad0:	4b2d      	ldr	r3, [pc, #180]	@ (8002b88 <Hum_Sensor_Handler+0x12c>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d148      	bne.n	8002b6a <Hum_Sensor_Handler+0x10e>
  {
    if (IKS4A1_ENV_SENSOR_ReadID(Instance, &whoami))
 8002ad8:	f107 030b 	add.w	r3, r7, #11
 8002adc:	4619      	mov	r1, r3
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f008 fb38 	bl	800b154 <IKS4A1_ENV_SENSOR_ReadID>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d007      	beq.n	8002afa <Hum_Sensor_Handler+0x9e>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a27      	ldr	r2, [pc, #156]	@ (8002b8c <Hum_Sensor_Handler+0x130>)
 8002aee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002af2:	4821      	ldr	r0, [pc, #132]	@ (8002b78 <Hum_Sensor_Handler+0x11c>)
 8002af4:	f00f fbde 	bl	80122b4 <sniprintf>
 8002af8:	e008      	b.n	8002b0c <Hum_Sensor_Handler+0xb0>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	7afa      	ldrb	r2, [r7, #11]
 8002afe:	9200      	str	r2, [sp, #0]
 8002b00:	4a23      	ldr	r2, [pc, #140]	@ (8002b90 <Hum_Sensor_Handler+0x134>)
 8002b02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b06:	481c      	ldr	r0, [pc, #112]	@ (8002b78 <Hum_Sensor_Handler+0x11c>)
 8002b08:	f00f fbd4 	bl	80122b4 <sniprintf>
    }

    printf("%s", dataOut);
 8002b0c:	491a      	ldr	r1, [pc, #104]	@ (8002b78 <Hum_Sensor_Handler+0x11c>)
 8002b0e:	481b      	ldr	r0, [pc, #108]	@ (8002b7c <Hum_Sensor_Handler+0x120>)
 8002b10:	f00f fbbe 	bl	8012290 <iprintf>

    if (IKS4A1_ENV_SENSOR_GetOutputDataRate(Instance, ENV_HUMIDITY, &odr))
 8002b14:	f107 031c 	add.w	r3, r7, #28
 8002b18:	461a      	mov	r2, r3
 8002b1a:	2104      	movs	r1, #4
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f008 fb43 	bl	800b1a8 <IKS4A1_ENV_SENSOR_GetOutputDataRate>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d007      	beq.n	8002b38 <Hum_Sensor_Handler+0xdc>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a1a      	ldr	r2, [pc, #104]	@ (8002b94 <Hum_Sensor_Handler+0x138>)
 8002b2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b30:	4811      	ldr	r0, [pc, #68]	@ (8002b78 <Hum_Sensor_Handler+0x11c>)
 8002b32:	f00f fbbf 	bl	80122b4 <sniprintf>
 8002b36:	e014      	b.n	8002b62 <Hum_Sensor_Handler+0x106>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8002b38:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b3c:	f107 030c 	add.w	r3, r7, #12
 8002b40:	2103      	movs	r1, #3
 8002b42:	4618      	mov	r0, r3
 8002b44:	eeb0 0a67 	vmov.f32	s0, s15
 8002b48:	f7ff fb76 	bl	8002238 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 8002b50:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8002b52:	9101      	str	r1, [sp, #4]
 8002b54:	9200      	str	r2, [sp, #0]
 8002b56:	4a10      	ldr	r2, [pc, #64]	@ (8002b98 <Hum_Sensor_Handler+0x13c>)
 8002b58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b5c:	4806      	ldr	r0, [pc, #24]	@ (8002b78 <Hum_Sensor_Handler+0x11c>)
 8002b5e:	f00f fba9 	bl	80122b4 <sniprintf>
    }

    printf("%s", dataOut);
 8002b62:	4905      	ldr	r1, [pc, #20]	@ (8002b78 <Hum_Sensor_Handler+0x11c>)
 8002b64:	4805      	ldr	r0, [pc, #20]	@ (8002b7c <Hum_Sensor_Handler+0x120>)
 8002b66:	f00f fb93 	bl	8012290 <iprintf>
  }
}
 8002b6a:	bf00      	nop
 8002b6c:	3720      	adds	r7, #32
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	08014634 	.word	0x08014634
 8002b78:	20000588 	.word	0x20000588
 8002b7c:	080142e0 	.word	0x080142e0
 8002b80:	080146d4 	.word	0x080146d4
 8002b84:	080146e8 	.word	0x080146e8
 8002b88:	20000000 	.word	0x20000000
 8002b8c:	08014510 	.word	0x08014510
 8002b90:	08014524 	.word	0x08014524
 8002b94:	0801468c 	.word	0x0801468c
 8002b98:	0801454c 	.word	0x0801454c

08002b9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002b9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002bd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ba0:	f009 fd62 	bl	800c668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ba4:	480c      	ldr	r0, [pc, #48]	@ (8002bd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ba6:	490d      	ldr	r1, [pc, #52]	@ (8002bdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8002be0 <LoopForever+0xe>)
  movs r3, #0
 8002baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bac:	e002      	b.n	8002bb4 <LoopCopyDataInit>

08002bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bb2:	3304      	adds	r3, #4

08002bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bb8:	d3f9      	bcc.n	8002bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bba:	4a0a      	ldr	r2, [pc, #40]	@ (8002be4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bbc:	4c0a      	ldr	r4, [pc, #40]	@ (8002be8 <LoopForever+0x16>)
  movs r3, #0
 8002bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bc0:	e001      	b.n	8002bc6 <LoopFillZerobss>

08002bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bc4:	3204      	adds	r2, #4

08002bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bc8:	d3fb      	bcc.n	8002bc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bca:	f00f fc41 	bl	8012450 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002bce:	f7fe f9c9 	bl	8000f64 <main>

08002bd2 <LoopForever>:

LoopForever:
    b LoopForever
 8002bd2:	e7fe      	b.n	8002bd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002bd4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bdc:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 8002be0:	080147e0 	.word	0x080147e0
  ldr r2, =_sbss
 8002be4:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 8002be8:	20000b40 	.word	0x20000b40

08002bec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002bec:	e7fe      	b.n	8002bec <ADC1_2_IRQHandler>
	...

08002bf0 <LIS2DUXS12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_RegisterBusIO(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_IO_t *pIO)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d103      	bne.n	8002c0c <LIS2DUXS12_RegisterBusIO+0x1c>
  {
    ret = LIS2DUXS12_ERROR;
 8002c04:	f04f 33ff 	mov.w	r3, #4294967295
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	e085      	b.n	8002d18 <LIS2DUXS12_RegisterBusIO+0x128>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	7b1a      	ldrb	r2, [r3, #12]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	699a      	ldr	r2, [r3, #24]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	619a      	str	r2, [r3, #24]
    pObj->IO.Delay     = pIO->Delay;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	69da      	ldr	r2, [r3, #28]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	61da      	str	r2, [r3, #28]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a35      	ldr	r2, [pc, #212]	@ (8002d24 <LIS2DUXS12_RegisterBusIO+0x134>)
 8002c50:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a34      	ldr	r2, [pc, #208]	@ (8002d28 <LIS2DUXS12_RegisterBusIO+0x138>)
 8002c56:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	69da      	ldr	r2, [r3, #28]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d103      	bne.n	8002c76 <LIS2DUXS12_RegisterBusIO+0x86>
    {
      ret = LIS2DUXS12_ERROR;
 8002c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	e050      	b.n	8002d18 <LIS2DUXS12_RegisterBusIO+0x128>
    }
    else if (pObj->IO.Init() != LIS2DUXS12_OK)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4798      	blx	r3
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <LIS2DUXS12_RegisterBusIO+0x9a>
    {
      ret = LIS2DUXS12_ERROR;
 8002c82:	f04f 33ff 	mov.w	r3, #4294967295
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	e046      	b.n	8002d18 <LIS2DUXS12_RegisterBusIO+0x128>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DUXS12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d11b      	bne.n	8002cca <LIS2DUXS12_RegisterBusIO+0xda>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d13d      	bne.n	8002d18 <LIS2DUXS12_RegisterBusIO+0x128>
        {
          /* Exit from deep power down only the first time in SPI mode */
          if (LIS2DUXS12_ExitDeepPowerDownSPI(pObj) != LIS2DUXS12_OK)
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f8f2 	bl	8002e86 <LIS2DUXS12_ExitDeepPowerDownSPI>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <LIS2DUXS12_RegisterBusIO+0xbc>
          {
            /* Forced OK because of an expected failure during the wake-up sequence */
            ret = LIS2DUXS12_OK;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]
          }
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x50;
 8002cac:	2350      	movs	r3, #80	@ 0x50
 8002cae:	72fb      	strb	r3, [r7, #11]

          if (LIS2DUXS12_Write_Reg(pObj, LIS2DUXS12_CTRL1, data) != LIS2DUXS12_OK)
 8002cb0:	7afb      	ldrb	r3, [r7, #11]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	2110      	movs	r1, #16
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fbf5 	bl	80034a6 <LIS2DUXS12_Write_Reg>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d02a      	beq.n	8002d18 <LIS2DUXS12_RegisterBusIO+0x128>
          {
            ret = LIS2DUXS12_ERROR;
 8002cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	e026      	b.n	8002d18 <LIS2DUXS12_RegisterBusIO+0x128>
          }
        }
      }
      else if (pObj->IO.BusType == LIS2DUXS12_SPI_4WIRES_BUS)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d10d      	bne.n	8002cee <LIS2DUXS12_RegisterBusIO+0xfe>
      {
        /* Exit from deep power down only the first time in SPI mode */
        if (pObj->is_initialized == 0U)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d11d      	bne.n	8002d18 <LIS2DUXS12_RegisterBusIO+0x128>
        {
          if (LIS2DUXS12_ExitDeepPowerDownSPI(pObj) != LIS2DUXS12_OK)
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 f8d2 	bl	8002e86 <LIS2DUXS12_ExitDeepPowerDownSPI>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d017      	beq.n	8002d18 <LIS2DUXS12_RegisterBusIO+0x128>
          {
            /* Forced OK because of an expected failure during the wake-up sequence */
            ret = LIS2DUXS12_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	e014      	b.n	8002d18 <LIS2DUXS12_RegisterBusIO+0x128>
          }
        }
      }
      else if (pObj->IO.BusType == LIS2DUXS12_I2C_BUS)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d110      	bne.n	8002d18 <LIS2DUXS12_RegisterBusIO+0x128>
      {
        /* Exit from deep power down only the first time in I2C mode */
        if (pObj->is_initialized == 0U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10b      	bne.n	8002d18 <LIS2DUXS12_RegisterBusIO+0x128>
        {
          if (LIS2DUXS12_ExitDeepPowerDownI2C(pObj) != LIS2DUXS12_OK)
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f8ab 	bl	8002e5c <LIS2DUXS12_ExitDeepPowerDownI2C>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <LIS2DUXS12_RegisterBusIO+0x128>
          {
            pObj->Ctx.mdelay(100);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d10:	2064      	movs	r0, #100	@ 0x64
 8002d12:	4798      	blx	r3

            /* Forced OK because of an expected failure during the wake-up sequence */
            ret = LIS2DUXS12_OK;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002d18:	68fb      	ldr	r3, [r7, #12]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	08003961 	.word	0x08003961
 8002d28:	08003997 	.word	0x08003997

08002d2c <LIS2DUXS12_Init>:
  * @brief  Initialize the LIS2DUXS12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Init(LIS2DUXS12_Object_t *pObj)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  lis2duxs12_i3c_cfg_t val;

  if(pObj->IO.BusType != LIS2DUXS12_I3C_BUS)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d01f      	beq.n	8002d7c <LIS2DUXS12_Init+0x50>
  {
    /* Disable I3C */
    if (lis2duxs12_i3c_configure_get(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3320      	adds	r3, #32
 8002d40:	f107 0214 	add.w	r2, r7, #20
 8002d44:	4611      	mov	r1, r2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f001 fb0a 	bl	8004360 <lis2duxs12_i3c_configure_get>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <LIS2DUXS12_Init+0x2c>
    {
      return LIS2DUXS12_ERROR;
 8002d52:	f04f 33ff 	mov.w	r3, #4294967295
 8002d56:	e05c      	b.n	8002e12 <LIS2DUXS12_Init+0xe6>
    }
    val.asf_on = PROPERTY_ENABLE;
 8002d58:	7d7b      	ldrb	r3, [r7, #21]
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	757b      	strb	r3, [r7, #21]
    if (lis2duxs12_i3c_configure_set(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3320      	adds	r3, #32
 8002d64:	f107 0214 	add.w	r2, r7, #20
 8002d68:	4611      	mov	r1, r2
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f001 fac0 	bl	80042f0 <lis2duxs12_i3c_configure_set>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <LIS2DUXS12_Init+0x50>
    {
      return LIS2DUXS12_ERROR;
 8002d76:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7a:	e04a      	b.n	8002e12 <LIS2DUXS12_Init+0xe6>
    }
  }

  /* Set main memory bank */
  if (LIS2DUXS12_Set_Mem_Bank(pObj, (uint8_t)LIS2DUXS12_MAIN_MEM_BANK) != LIS2DUXS12_OK)
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 fbac 	bl	80034dc <LIS2DUXS12_Set_Mem_Bank>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <LIS2DUXS12_Init+0x64>
  {
    return LIS2DUXS12_ERROR;
 8002d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d8e:	e040      	b.n	8002e12 <LIS2DUXS12_Init+0xe6>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. Enable BDU. */
  if (lis2duxs12_init_set(&(pObj->Ctx), LIS2DUXS12_SENSOR_ONLY_ON) != LIS2DUXS12_OK)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3320      	adds	r3, #32
 8002d94:	2100      	movs	r1, #0
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 fec4 	bl	8003b24 <lis2duxs12_init_set>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <LIS2DUXS12_Init+0x7c>
  {
    return LIS2DUXS12_ERROR;
 8002da2:	f04f 33ff 	mov.w	r3, #4294967295
 8002da6:	e034      	b.n	8002e12 <LIS2DUXS12_Init+0xe6>
  }

  /* FIFO mode selection */
  lis2duxs12_fifo_mode_t fifo_mode =
 8002da8:	f107 030c 	add.w	r3, r7, #12
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	809a      	strh	r2, [r3, #4]
    .operation = LIS2DUXS12_BYPASS_MODE,
    .store     = LIS2DUXS12_FIFO_1X,
    .watermark = 0,
  };

  if (lis2duxs12_fifo_mode_set(&(pObj->Ctx), fifo_mode) != LIS2DUXS12_OK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f103 0020 	add.w	r0, r3, #32
 8002db8:	f107 030c 	add.w	r3, r7, #12
 8002dbc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002dc0:	f001 fb33 	bl	800442a <lis2duxs12_fifo_mode_set>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <LIS2DUXS12_Init+0xa4>
  {
    return LIS2DUXS12_ERROR;
 8002dca:	f04f 33ff 	mov.w	r3, #4294967295
 8002dce:	e020      	b.n	8002e12 <LIS2DUXS12_Init+0xe6>
  }

  /* Select default output data rate */
  pObj->acc_odr = 100.0f;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a12      	ldr	r2, [pc, #72]	@ (8002e1c <LIS2DUXS12_Init+0xf0>)
 8002dd4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Select default high performance mode (when disabled) */
  pObj->power_mode = LIS2DUXS12_HIGH_PERFORMANCE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2202      	movs	r2, #2
 8002dda:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Output data rate: power down, full scale: 2g */
  lis2duxs12_md_t mode =
 8002dde:	f107 0308 	add.w	r3, r7, #8
 8002de2:	2100      	movs	r1, #0
 8002de4:	460a      	mov	r2, r1
 8002de6:	801a      	strh	r2, [r3, #0]
 8002de8:	460a      	mov	r2, r1
 8002dea:	709a      	strb	r2, [r3, #2]
  {
    .odr = LIS2DUXS12_OFF,
    .fs  = LIS2DUXS12_2g,
  };

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3320      	adds	r3, #32
 8002df0:	f107 0208 	add.w	r2, r7, #8
 8002df4:	4611      	mov	r1, r2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 ffe2 	bl	8003dc0 <lis2duxs12_mode_set>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <LIS2DUXS12_Init+0xdc>
  {
    return LIS2DUXS12_ERROR;
 8002e02:	f04f 33ff 	mov.w	r3, #4294967295
 8002e06:	e004      	b.n	8002e12 <LIS2DUXS12_Init+0xe6>
  }

  pObj->is_initialized = 1;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DUXS12_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	42c80000 	.word	0x42c80000

08002e20 <LIS2DUXS12_DeInit>:
  * @brief  Deinitialize the LIS2DUXS12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_DeInit(LIS2DUXS12_Object_t *pObj)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DUXS12_ACC_Disable(pObj) != LIS2DUXS12_OK)
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f8ad 	bl	8002f88 <LIS2DUXS12_ACC_Disable>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d002      	beq.n	8002e3a <LIS2DUXS12_DeInit+0x1a>
  {
    return LIS2DUXS12_ERROR;
 8002e34:	f04f 33ff 	mov.w	r3, #4294967295
 8002e38:	e00c      	b.n	8002e54 <LIS2DUXS12_DeInit+0x34>
  }

  /* Reset output data rate */
  pObj->acc_odr = 0.0f;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set low power mode (when disabled) */
  pObj->power_mode = LIS2DUXS12_LOW_POWER;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  pObj->is_initialized = 0;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DUXS12_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <LIS2DUXS12_ExitDeepPowerDownI2C>:
  * @brief  Exit from deep power down in I2C
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ExitDeepPowerDownI2C(LIS2DUXS12_Object_t *pObj)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint8_t val;

  /* Perform dummy read in order to exit from deep power down in I2C mode*/
  (void)lis2duxs12_device_id_get(&(pObj->Ctx), &val);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3320      	adds	r3, #32
 8002e68:	f107 020f 	add.w	r2, r7, #15
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 fe46 	bl	8003b00 <lis2duxs12_device_id_get>

  /* Wait for 25 ms based on datasheet */
  pObj->Ctx.mdelay(25);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e78:	2019      	movs	r0, #25
 8002e7a:	4798      	blx	r3

  return LIS2DUXS12_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <LIS2DUXS12_ExitDeepPowerDownSPI>:
  * @brief  Exit from deep power down in SPI
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ExitDeepPowerDownSPI(LIS2DUXS12_Object_t *pObj)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  /* Write IF_WAKE_UP register to exit from deep power down in SPI mode*/
  (void)lis2duxs12_exit_deep_power_down(&(pObj->Ctx));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3320      	adds	r3, #32
 8002e92:	4618      	mov	r0, r3
 8002e94:	f001 f960 	bl	8004158 <lis2duxs12_exit_deep_power_down>

  /* Wait for 25 ms based on datasheet */
  pObj->Ctx.mdelay(25);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9c:	2019      	movs	r0, #25
 8002e9e:	4798      	blx	r3

  return LIS2DUXS12_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <LIS2DUXS12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ReadID(LIS2DUXS12_Object_t *pObj, uint8_t *Id)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b084      	sub	sp, #16
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	6039      	str	r1, [r7, #0]
  uint8_t val;

  if (lis2duxs12_device_id_get(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3320      	adds	r3, #32
 8002eb8:	f107 020f 	add.w	r2, r7, #15
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fe1e 	bl	8003b00 <lis2duxs12_device_id_get>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <LIS2DUXS12_ReadID+0x26>
  {
    return LIS2DUXS12_ERROR;
 8002eca:	f04f 33ff 	mov.w	r3, #4294967295
 8002ece:	e003      	b.n	8002ed8 <LIS2DUXS12_ReadID+0x2e>
  }

  *Id = val;
 8002ed0:	7bfa      	ldrb	r2, [r7, #15]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	701a      	strb	r2, [r3, #0]

  return LIS2DUXS12_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <LIS2DUXS12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DUXS12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_GetCapabilities(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_Capabilities_t *Capabilities)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc        = 1;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2201      	movs	r2, #1
 8002eee:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro       = 0;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto    = 0;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower   = 1;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	2201      	movs	r2, #1
 8002f00:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS  = 0;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2200      	movs	r2, #0
 8002f06:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS   = 16;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	2210      	movs	r2, #16
 8002f0c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS   = 0;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2200      	movs	r2, #0
 8002f12:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr = 0.0f;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr  = 800.0f;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	4a06      	ldr	r2, [pc, #24]	@ (8002f38 <LIS2DUXS12_GetCapabilities+0x58>)
 8002f20:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr  = 0.0f;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	619a      	str	r2, [r3, #24]
  return LIS2DUXS12_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	44480000 	.word	0x44480000

08002f3c <LIS2DUXS12_ACC_Enable>:
  * @brief  Enable the LIS2DUXS12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_Enable(LIS2DUXS12_Object_t *pObj)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <LIS2DUXS12_ACC_Enable+0x16>
  {
    return LIS2DUXS12_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	e016      	b.n	8002f80 <LIS2DUXS12_ACC_Enable+0x44>
  }

  /* Output data rate selection. */
  if (LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->power_mode) != LIS2DUXS12_OK)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f5e:	4619      	mov	r1, r3
 8002f60:	eeb0 0a67 	vmov.f32	s0, s15
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 fadb 	bl	8003520 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <LIS2DUXS12_ACC_Enable+0x3a>
  {
    return LIS2DUXS12_ERROR;
 8002f70:	f04f 33ff 	mov.w	r3, #4294967295
 8002f74:	e004      	b.n	8002f80 <LIS2DUXS12_ACC_Enable+0x44>
  }

  pObj->acc_is_enabled = 1;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DUXS12_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <LIS2DUXS12_ACC_Disable>:
  * @brief  Disable the LIS2DUXS12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_Disable(LIS2DUXS12_Object_t *pObj)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  float_t Odr;
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <LIS2DUXS12_ACC_Disable+0x16>
  {
    return LIS2DUXS12_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	e046      	b.n	800302c <LIS2DUXS12_ACC_Disable+0xa4>
  }

  if (LIS2DUXS12_ACC_GetOutputDataRate(pObj, &Odr) != LIS2DUXS12_OK)
 8002f9e:	f107 030c 	add.w	r3, r7, #12
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f893 	bl	80030d0 <LIS2DUXS12_ACC_GetOutputDataRate>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <LIS2DUXS12_ACC_Disable+0x2e>
  {
    return LIS2DUXS12_ERROR;
 8002fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb4:	e03a      	b.n	800302c <LIS2DUXS12_ACC_Disable+0xa4>
  }

  if (Odr == 800.0f)
 8002fb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fba:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8003034 <LIS2DUXS12_ACC_Disable+0xac>
 8002fbe:	eef4 7a47 	vcmp.f32	s15, s14
 8002fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc6:	d10e      	bne.n	8002fe6 <LIS2DUXS12_ACC_Disable+0x5e>
  {
    if (LIS2DUXS12_ACC_SetOutputDataRate(pObj, 400.0f) != LIS2DUXS12_OK)
 8002fc8:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8003038 <LIS2DUXS12_ACC_Disable+0xb0>
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f94b 	bl	8003268 <LIS2DUXS12_ACC_SetOutputDataRate>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <LIS2DUXS12_ACC_Disable+0x56>
    {
      return LIS2DUXS12_ERROR;
 8002fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fdc:	e026      	b.n	800302c <LIS2DUXS12_ACC_Disable+0xa4>
    }

    /* Wait for 3 ms based on datasheet */
    pObj->Ctx.mdelay(3);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe2:	2003      	movs	r0, #3
 8002fe4:	4798      	blx	r3
  }

  /* Output data rate selection - power down. */
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3320      	adds	r3, #32
 8002fea:	f107 0208 	add.w	r2, r7, #8
 8002fee:	4611      	mov	r1, r2
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 ffa1 	bl	8003f38 <lis2duxs12_mode_get>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d002      	beq.n	8003002 <LIS2DUXS12_ACC_Disable+0x7a>
  {
    return LIS2DUXS12_ERROR;
 8002ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8003000:	e014      	b.n	800302c <LIS2DUXS12_ACC_Disable+0xa4>
  }

  mode.odr = LIS2DUXS12_OFF;
 8003002:	2300      	movs	r3, #0
 8003004:	723b      	strb	r3, [r7, #8]

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3320      	adds	r3, #32
 800300a:	f107 0208 	add.w	r2, r7, #8
 800300e:	4611      	mov	r1, r2
 8003010:	4618      	mov	r0, r3
 8003012:	f000 fed5 	bl	8003dc0 <lis2duxs12_mode_set>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <LIS2DUXS12_ACC_Disable+0x9a>
  {
    return LIS2DUXS12_ERROR;
 800301c:	f04f 33ff 	mov.w	r3, #4294967295
 8003020:	e004      	b.n	800302c <LIS2DUXS12_ACC_Disable+0xa4>
  }

  pObj->acc_is_enabled = 0;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DUXS12_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	44480000 	.word	0x44480000
 8003038:	43c80000 	.word	0x43c80000

0800303c <LIS2DUXS12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetSensitivity(LIS2DUXS12_Object_t *pObj, float_t *Sensitivity)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3320      	adds	r3, #32
 800304e:	f107 0208 	add.w	r2, r7, #8
 8003052:	4611      	mov	r1, r2
 8003054:	4618      	mov	r0, r3
 8003056:	f000 ff6f 	bl	8003f38 <lis2duxs12_mode_get>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d002      	beq.n	8003066 <LIS2DUXS12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DUXS12_ERROR;
 8003060:	f04f 33ff 	mov.w	r3, #4294967295
 8003064:	e026      	b.n	80030b4 <LIS2DUXS12_ACC_GetSensitivity+0x78>
  }

  switch (mode.fs)
 8003066:	7a7b      	ldrb	r3, [r7, #9]
 8003068:	2b03      	cmp	r3, #3
 800306a:	d81b      	bhi.n	80030a4 <LIS2DUXS12_ACC_GetSensitivity+0x68>
 800306c:	a201      	add	r2, pc, #4	@ (adr r2, 8003074 <LIS2DUXS12_ACC_GetSensitivity+0x38>)
 800306e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003072:	bf00      	nop
 8003074:	08003085 	.word	0x08003085
 8003078:	0800308d 	.word	0x0800308d
 800307c:	08003095 	.word	0x08003095
 8003080:	0800309d 	.word	0x0800309d
  {
    case LIS2DUXS12_2g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_2G;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	4a0d      	ldr	r2, [pc, #52]	@ (80030bc <LIS2DUXS12_ACC_GetSensitivity+0x80>)
 8003088:	601a      	str	r2, [r3, #0]
      break;
 800308a:	e012      	b.n	80030b2 <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_4g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_4G;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	4a0c      	ldr	r2, [pc, #48]	@ (80030c0 <LIS2DUXS12_ACC_GetSensitivity+0x84>)
 8003090:	601a      	str	r2, [r3, #0]
      break;
 8003092:	e00e      	b.n	80030b2 <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_8g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_8G;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	4a0b      	ldr	r2, [pc, #44]	@ (80030c4 <LIS2DUXS12_ACC_GetSensitivity+0x88>)
 8003098:	601a      	str	r2, [r3, #0]
      break;
 800309a:	e00a      	b.n	80030b2 <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_16g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_16G;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	4a0a      	ldr	r2, [pc, #40]	@ (80030c8 <LIS2DUXS12_ACC_GetSensitivity+0x8c>)
 80030a0:	601a      	str	r2, [r3, #0]
      break;
 80030a2:	e006      	b.n	80030b2 <LIS2DUXS12_ACC_GetSensitivity+0x76>

    default:
      *Sensitivity = -1.0f;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	4a09      	ldr	r2, [pc, #36]	@ (80030cc <LIS2DUXS12_ACC_GetSensitivity+0x90>)
 80030a8:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 80030aa:	f04f 33ff 	mov.w	r3, #4294967295
 80030ae:	60fb      	str	r3, [r7, #12]
      break;
 80030b0:	bf00      	nop
  }

  return ret;
 80030b2:	68fb      	ldr	r3, [r7, #12]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	3d79db23 	.word	0x3d79db23
 80030c0:	3df9db23 	.word	0x3df9db23
 80030c4:	3e79db23 	.word	0x3e79db23
 80030c8:	3ef9db23 	.word	0x3ef9db23
 80030cc:	bf800000 	.word	0xbf800000

080030d0 <LIS2DUXS12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetOutputDataRate(LIS2DUXS12_Object_t *pObj, float_t *Odr)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  /* Read actual output data rate from sensor. */
  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3320      	adds	r3, #32
 80030e2:	f107 0208 	add.w	r2, r7, #8
 80030e6:	4611      	mov	r1, r2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 ff25 	bl	8003f38 <lis2duxs12_mode_get>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <LIS2DUXS12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DUXS12_ERROR;
 80030f4:	f04f 33ff 	mov.w	r3, #4294967295
 80030f8:	e09b      	b.n	8003232 <LIS2DUXS12_ACC_GetOutputDataRate+0x162>
  }

  switch (mode.odr)
 80030fa:	7a3b      	ldrb	r3, [r7, #8]
 80030fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80030fe:	f200 8090 	bhi.w	8003222 <LIS2DUXS12_ACC_GetOutputDataRate+0x152>
 8003102:	a201      	add	r2, pc, #4	@ (adr r2, 8003108 <LIS2DUXS12_ACC_GetOutputDataRate+0x38>)
 8003104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003108:	080031c9 	.word	0x080031c9
 800310c:	080031d3 	.word	0x080031d3
 8003110:	080031db 	.word	0x080031db
 8003114:	080031f3 	.word	0x080031f3
 8003118:	080031e3 	.word	0x080031e3
 800311c:	080031eb 	.word	0x080031eb
 8003120:	080031f3 	.word	0x080031f3
 8003124:	080031fb 	.word	0x080031fb
 8003128:	08003203 	.word	0x08003203
 800312c:	0800320b 	.word	0x0800320b
 8003130:	08003213 	.word	0x08003213
 8003134:	0800321b 	.word	0x0800321b
 8003138:	08003223 	.word	0x08003223
 800313c:	08003223 	.word	0x08003223
 8003140:	08003223 	.word	0x08003223
 8003144:	08003223 	.word	0x08003223
 8003148:	08003223 	.word	0x08003223
 800314c:	08003223 	.word	0x08003223
 8003150:	08003223 	.word	0x08003223
 8003154:	08003223 	.word	0x08003223
 8003158:	080031e3 	.word	0x080031e3
 800315c:	080031eb 	.word	0x080031eb
 8003160:	080031f3 	.word	0x080031f3
 8003164:	080031fb 	.word	0x080031fb
 8003168:	08003203 	.word	0x08003203
 800316c:	0800320b 	.word	0x0800320b
 8003170:	08003213 	.word	0x08003213
 8003174:	0800321b 	.word	0x0800321b
 8003178:	08003223 	.word	0x08003223
 800317c:	08003223 	.word	0x08003223
 8003180:	08003223 	.word	0x08003223
 8003184:	08003223 	.word	0x08003223
 8003188:	08003223 	.word	0x08003223
 800318c:	08003223 	.word	0x08003223
 8003190:	08003223 	.word	0x08003223
 8003194:	08003223 	.word	0x08003223
 8003198:	08003223 	.word	0x08003223
 800319c:	08003223 	.word	0x08003223
 80031a0:	08003223 	.word	0x08003223
 80031a4:	08003223 	.word	0x08003223
 80031a8:	08003223 	.word	0x08003223
 80031ac:	08003223 	.word	0x08003223
 80031b0:	08003223 	.word	0x08003223
 80031b4:	08003223 	.word	0x08003223
 80031b8:	08003223 	.word	0x08003223
 80031bc:	08003223 	.word	0x08003223
 80031c0:	080031c9 	.word	0x080031c9
 80031c4:	080031c9 	.word	0x080031c9
  {
    case LIS2DUXS12_OFF:
    case LIS2DUXS12_TRIG_PIN:
    case LIS2DUXS12_TRIG_SW:
      *Odr = 0.0f;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
      break;
 80031d0:	e02e      	b.n	8003230 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_1Hz6_ULP:
      *Odr = 1.6f;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	4a19      	ldr	r2, [pc, #100]	@ (800323c <LIS2DUXS12_ACC_GetOutputDataRate+0x16c>)
 80031d6:	601a      	str	r2, [r3, #0]
      break;
 80031d8:	e02a      	b.n	8003230 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_3Hz_ULP:
      *Odr = 3.0f;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	4a18      	ldr	r2, [pc, #96]	@ (8003240 <LIS2DUXS12_ACC_GetOutputDataRate+0x170>)
 80031de:	601a      	str	r2, [r3, #0]
      break;
 80031e0:	e026      	b.n	8003230 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_6Hz_LP:
    case LIS2DUXS12_6Hz_HP:
      *Odr = 6.0f;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	4a17      	ldr	r2, [pc, #92]	@ (8003244 <LIS2DUXS12_ACC_GetOutputDataRate+0x174>)
 80031e6:	601a      	str	r2, [r3, #0]
      break;
 80031e8:	e022      	b.n	8003230 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_12Hz5_LP:
    case LIS2DUXS12_12Hz5_HP:
      *Odr = 12.5f;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	4a16      	ldr	r2, [pc, #88]	@ (8003248 <LIS2DUXS12_ACC_GetOutputDataRate+0x178>)
 80031ee:	601a      	str	r2, [r3, #0]
      break;
 80031f0:	e01e      	b.n	8003230 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_25Hz_ULP:
    case LIS2DUXS12_25Hz_LP:
    case LIS2DUXS12_25Hz_HP:
      *Odr = 25.0f;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	4a15      	ldr	r2, [pc, #84]	@ (800324c <LIS2DUXS12_ACC_GetOutputDataRate+0x17c>)
 80031f6:	601a      	str	r2, [r3, #0]
      break;
 80031f8:	e01a      	b.n	8003230 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_50Hz_LP:
    case LIS2DUXS12_50Hz_HP:
      *Odr = 50.0f;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	4a14      	ldr	r2, [pc, #80]	@ (8003250 <LIS2DUXS12_ACC_GetOutputDataRate+0x180>)
 80031fe:	601a      	str	r2, [r3, #0]
      break;
 8003200:	e016      	b.n	8003230 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_100Hz_LP:
    case LIS2DUXS12_100Hz_HP:
      *Odr = 100.0f;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	4a13      	ldr	r2, [pc, #76]	@ (8003254 <LIS2DUXS12_ACC_GetOutputDataRate+0x184>)
 8003206:	601a      	str	r2, [r3, #0]
      break;
 8003208:	e012      	b.n	8003230 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_200Hz_LP:
    case LIS2DUXS12_200Hz_HP:
      *Odr = 200.0f;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	4a12      	ldr	r2, [pc, #72]	@ (8003258 <LIS2DUXS12_ACC_GetOutputDataRate+0x188>)
 800320e:	601a      	str	r2, [r3, #0]
      break;
 8003210:	e00e      	b.n	8003230 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_400Hz_LP:
    case LIS2DUXS12_400Hz_HP:
      *Odr = 400.0f;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	4a11      	ldr	r2, [pc, #68]	@ (800325c <LIS2DUXS12_ACC_GetOutputDataRate+0x18c>)
 8003216:	601a      	str	r2, [r3, #0]
      break;
 8003218:	e00a      	b.n	8003230 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_800Hz_LP:
    case LIS2DUXS12_800Hz_HP:
      *Odr = 800.0f;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	4a10      	ldr	r2, [pc, #64]	@ (8003260 <LIS2DUXS12_ACC_GetOutputDataRate+0x190>)
 800321e:	601a      	str	r2, [r3, #0]
      break;
 8003220:	e006      	b.n	8003230 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    default:
      *Odr = -1.0f;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	4a0f      	ldr	r2, [pc, #60]	@ (8003264 <LIS2DUXS12_ACC_GetOutputDataRate+0x194>)
 8003226:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 8003228:	f04f 33ff 	mov.w	r3, #4294967295
 800322c:	60fb      	str	r3, [r7, #12]
      break;
 800322e:	bf00      	nop
  }

  return ret;
 8003230:	68fb      	ldr	r3, [r7, #12]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	3fcccccd 	.word	0x3fcccccd
 8003240:	40400000 	.word	0x40400000
 8003244:	40c00000 	.word	0x40c00000
 8003248:	41480000 	.word	0x41480000
 800324c:	41c80000 	.word	0x41c80000
 8003250:	42480000 	.word	0x42480000
 8003254:	42c80000 	.word	0x42c80000
 8003258:	43480000 	.word	0x43480000
 800325c:	43c80000 	.word	0x43c80000
 8003260:	44480000 	.word	0x44480000
 8003264:	bf800000 	.word	0xbf800000

08003268 <LIS2DUXS12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetOutputDataRate(LIS2DUXS12_Object_t *pObj, float_t Odr)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use high performance mode */
  return LIS2DUXS12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DUXS12_HIGH_PERFORMANCE);
 8003274:	2102      	movs	r1, #2
 8003276:	ed97 0a00 	vldr	s0, [r7]
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f805 	bl	800328a <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode>
 8003280:	4603      	mov	r3, r0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Odr the output data rate value to be set
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetOutputDataRate_With_Mode(LIS2DUXS12_Object_t *pObj, float_t Odr, LIS2DUXS12_Power_Mode_t Power)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b084      	sub	sp, #16
 800328e:	af00      	add	r7, sp, #0
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	ed87 0a02 	vstr	s0, [r7, #8]
 8003296:	460b      	mov	r3, r1
 8003298:	71fb      	strb	r3, [r7, #7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d108      	bne.n	80032b6 <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode+0x2c>
  {
    return LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Power);
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	4619      	mov	r1, r3
 80032a8:	ed97 0a02 	vldr	s0, [r7, #8]
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 f937 	bl	8003520 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>
 80032b2:	4603      	mov	r3, r0
 80032b4:	e007      	b.n	80032c6 <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode+0x3c>
  }
  else
  {
    return LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Power);
 80032b6:	79fb      	ldrb	r3, [r7, #7]
 80032b8:	4619      	mov	r1, r3
 80032ba:	ed97 0a02 	vldr	s0, [r7, #8]
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 faac 	bl	800381c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled>
 80032c4:	4603      	mov	r3, r0
  }
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
	...

080032d0 <LIS2DUXS12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetFullScale(LIS2DUXS12_Object_t *pObj, int32_t *FullScale)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3320      	adds	r3, #32
 80032e2:	f107 0208 	add.w	r2, r7, #8
 80032e6:	4611      	mov	r1, r2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 fe25 	bl	8003f38 <lis2duxs12_mode_get>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <LIS2DUXS12_ACC_GetFullScale+0x2a>
  {
    return LIS2DUXS12_ERROR;
 80032f4:	f04f 33ff 	mov.w	r3, #4294967295
 80032f8:	e027      	b.n	800334a <LIS2DUXS12_ACC_GetFullScale+0x7a>
  }

  switch (mode.fs)
 80032fa:	7a7b      	ldrb	r3, [r7, #9]
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d81b      	bhi.n	8003338 <LIS2DUXS12_ACC_GetFullScale+0x68>
 8003300:	a201      	add	r2, pc, #4	@ (adr r2, 8003308 <LIS2DUXS12_ACC_GetFullScale+0x38>)
 8003302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003306:	bf00      	nop
 8003308:	08003319 	.word	0x08003319
 800330c:	08003321 	.word	0x08003321
 8003310:	08003329 	.word	0x08003329
 8003314:	08003331 	.word	0x08003331
  {
    case LIS2DUXS12_2g:
      *FullScale =  2;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	2202      	movs	r2, #2
 800331c:	601a      	str	r2, [r3, #0]
      break;
 800331e:	e013      	b.n	8003348 <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_4g:
      *FullScale =  4;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	2204      	movs	r2, #4
 8003324:	601a      	str	r2, [r3, #0]
      break;
 8003326:	e00f      	b.n	8003348 <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_8g:
      *FullScale =  8;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	2208      	movs	r2, #8
 800332c:	601a      	str	r2, [r3, #0]
      break;
 800332e:	e00b      	b.n	8003348 <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_16g:
      *FullScale = 16;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	2210      	movs	r2, #16
 8003334:	601a      	str	r2, [r3, #0]
      break;
 8003336:	e007      	b.n	8003348 <LIS2DUXS12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	f04f 32ff 	mov.w	r2, #4294967295
 800333e:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 8003340:	f04f 33ff 	mov.w	r3, #4294967295
 8003344:	60fb      	str	r3, [r7, #12]
      break;
 8003346:	bf00      	nop
  }

  return ret;
 8003348:	68fb      	ldr	r3, [r7, #12]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop

08003354 <LIS2DUXS12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetFullScale(LIS2DUXS12_Object_t *pObj, int32_t FullScale)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3320      	adds	r3, #32
 8003362:	f107 020c 	add.w	r2, r7, #12
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f000 fde5 	bl	8003f38 <lis2duxs12_mode_get>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <LIS2DUXS12_ACC_SetFullScale+0x26>
  {
    return LIS2DUXS12_ERROR;
 8003374:	f04f 33ff 	mov.w	r3, #4294967295
 8003378:	e01f      	b.n	80033ba <LIS2DUXS12_ACC_SetFullScale+0x66>
  }

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  mode.fs = (FullScale <= 2) ? LIS2DUXS12_2g
            : (FullScale <= 4) ? LIS2DUXS12_4g
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b02      	cmp	r3, #2
 800337e:	dd0b      	ble.n	8003398 <LIS2DUXS12_ACC_SetFullScale+0x44>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2b04      	cmp	r3, #4
 8003384:	dd06      	ble.n	8003394 <LIS2DUXS12_ACC_SetFullScale+0x40>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b08      	cmp	r3, #8
 800338a:	dc01      	bgt.n	8003390 <LIS2DUXS12_ACC_SetFullScale+0x3c>
 800338c:	2302      	movs	r3, #2
 800338e:	e004      	b.n	800339a <LIS2DUXS12_ACC_SetFullScale+0x46>
 8003390:	2303      	movs	r3, #3
 8003392:	e002      	b.n	800339a <LIS2DUXS12_ACC_SetFullScale+0x46>
 8003394:	2301      	movs	r3, #1
 8003396:	e000      	b.n	800339a <LIS2DUXS12_ACC_SetFullScale+0x46>
 8003398:	2300      	movs	r3, #0
  mode.fs = (FullScale <= 2) ? LIS2DUXS12_2g
 800339a:	737b      	strb	r3, [r7, #13]
            : (FullScale <= 8) ? LIS2DUXS12_8g
            :                    LIS2DUXS12_16g;

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3320      	adds	r3, #32
 80033a0:	f107 020c 	add.w	r2, r7, #12
 80033a4:	4611      	mov	r1, r2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fd0a 	bl	8003dc0 <lis2duxs12_mode_set>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <LIS2DUXS12_ACC_SetFullScale+0x64>
  {
    return LIS2DUXS12_ERROR;
 80033b2:	f04f 33ff 	mov.w	r3, #4294967295
 80033b6:	e000      	b.n	80033ba <LIS2DUXS12_ACC_SetFullScale+0x66>
  }

  return LIS2DUXS12_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <LIS2DUXS12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetAxesRaw(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_AxesRaw_t *Value)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b088      	sub	sp, #32
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;
  lis2duxs12_xl_data_t data;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3320      	adds	r3, #32
 80033d0:	f107 021c 	add.w	r2, r7, #28
 80033d4:	4611      	mov	r1, r2
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 fdae 	bl	8003f38 <lis2duxs12_mode_get>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <LIS2DUXS12_ACC_GetAxesRaw+0x26>
  {
    return LIS2DUXS12_ERROR;
 80033e2:	f04f 33ff 	mov.w	r3, #4294967295
 80033e6:	e01b      	b.n	8003420 <LIS2DUXS12_ACC_GetAxesRaw+0x5e>
  }

  if (lis2duxs12_xl_data_get(&(pObj->Ctx), &mode, &data) != LIS2DUXS12_OK)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3320      	adds	r3, #32
 80033ec:	f107 0208 	add.w	r2, r7, #8
 80033f0:	f107 011c 	add.w	r1, r7, #28
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 fecf 	bl	8004198 <lis2duxs12_xl_data_get>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <LIS2DUXS12_ACC_GetAxesRaw+0x44>
  {
    return LIS2DUXS12_ERROR;
 8003400:	f04f 33ff 	mov.w	r3, #4294967295
 8003404:	e00c      	b.n	8003420 <LIS2DUXS12_ACC_GetAxesRaw+0x5e>
  }

  Value->x = data.raw[0];
 8003406:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	801a      	strh	r2, [r3, #0]
  Value->y = data.raw[1];
 800340e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	805a      	strh	r2, [r3, #2]
  Value->z = data.raw[2];
 8003416:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	809a      	strh	r2, [r3, #4]

  return LIS2DUXS12_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3720      	adds	r7, #32
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <LIS2DUXS12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetAxes(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_Axes_t *Acceleration)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;
  lis2duxs12_xl_data_t data;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3320      	adds	r3, #32
 8003436:	f107 021c 	add.w	r2, r7, #28
 800343a:	4611      	mov	r1, r2
 800343c:	4618      	mov	r0, r3
 800343e:	f000 fd7b 	bl	8003f38 <lis2duxs12_mode_get>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <LIS2DUXS12_ACC_GetAxes+0x26>
  {
    return LIS2DUXS12_ERROR;
 8003448:	f04f 33ff 	mov.w	r3, #4294967295
 800344c:	e027      	b.n	800349e <LIS2DUXS12_ACC_GetAxes+0x76>
  }

  if (lis2duxs12_xl_data_get(&(pObj->Ctx), &mode, &data) != LIS2DUXS12_OK)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3320      	adds	r3, #32
 8003452:	f107 0208 	add.w	r2, r7, #8
 8003456:	f107 011c 	add.w	r1, r7, #28
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fe9c 	bl	8004198 <lis2duxs12_xl_data_get>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d002      	beq.n	800346c <LIS2DUXS12_ACC_GetAxes+0x44>
  {
    return LIS2DUXS12_ERROR;
 8003466:	f04f 33ff 	mov.w	r3, #4294967295
 800346a:	e018      	b.n	800349e <LIS2DUXS12_ACC_GetAxes+0x76>
  }

  Acceleration->x = (int32_t)data.mg[0];
 800346c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003470:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003474:	ee17 2a90 	vmov	r2, s15
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)data.mg[1];
 800347c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003480:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003484:	ee17 2a90 	vmov	r2, s15
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)data.mg[2];
 800348c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003490:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003494:	ee17 2a90 	vmov	r2, s15
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	609a      	str	r2, [r3, #8]

  return LIS2DUXS12_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3720      	adds	r7, #32
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <LIS2DUXS12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Write_Reg(LIS2DUXS12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	460b      	mov	r3, r1
 80034b0:	70fb      	strb	r3, [r7, #3]
 80034b2:	4613      	mov	r3, r2
 80034b4:	70bb      	strb	r3, [r7, #2]
  if (lis2duxs12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DUXS12_OK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f103 0020 	add.w	r0, r3, #32
 80034bc:	1cba      	adds	r2, r7, #2
 80034be:	78f9      	ldrb	r1, [r7, #3]
 80034c0:	2301      	movs	r3, #1
 80034c2:	f000 faa0 	bl	8003a06 <lis2duxs12_write_reg>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <LIS2DUXS12_Write_Reg+0x2c>
  {
    return LIS2DUXS12_ERROR;
 80034cc:	f04f 33ff 	mov.w	r3, #4294967295
 80034d0:	e000      	b.n	80034d4 <LIS2DUXS12_Write_Reg+0x2e>
  }

  return LIS2DUXS12_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <LIS2DUXS12_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LIS2DUXS12_MAIN_MEM_BANK, 1 - LIS2DUXS12_EMBED_FUNC_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Set_Mem_Bank(LIS2DUXS12_Object_t *pObj, uint8_t Val)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LIS2DUXS12_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
  lis2duxs12_mem_bank_t reg;

  reg = (Val == 1U) ? LIS2DUXS12_EMBED_FUNC_MEM_BANK
        :               LIS2DUXS12_MAIN_MEM_BANK;
 80034ec:	78fb      	ldrb	r3, [r7, #3]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	bf0c      	ite	eq
 80034f2:	2301      	moveq	r3, #1
 80034f4:	2300      	movne	r3, #0
 80034f6:	b2db      	uxtb	r3, r3
  reg = (Val == 1U) ? LIS2DUXS12_EMBED_FUNC_MEM_BANK
 80034f8:	72fb      	strb	r3, [r7, #11]

  if (lis2duxs12_mem_bank_set(&(pObj->Ctx), reg) != LIS2DUXS12_OK)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3320      	adds	r3, #32
 80034fe:	7afa      	ldrb	r2, [r7, #11]
 8003500:	4611      	mov	r1, r2
 8003502:	4618      	mov	r0, r3
 8003504:	f000 ff6b 	bl	80043de <lis2duxs12_mem_bank_set>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <LIS2DUXS12_Set_Mem_Bank+0x38>
  {
    ret = LIS2DUXS12_ERROR;
 800350e:	f04f 33ff 	mov.w	r3, #4294967295
 8003512:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003514:	68fb      	ldr	r3, [r7, #12]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(LIS2DUXS12_Object_t *pObj, float_t Odr,
    LIS2DUXS12_Power_Mode_t Power)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	ed87 0a02 	vstr	s0, [r7, #8]
 800352c:	460b      	mov	r3, r1
 800352e:	71fb      	strb	r3, [r7, #7]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	3320      	adds	r3, #32
 8003534:	f107 0214 	add.w	r2, r7, #20
 8003538:	4611      	mov	r1, r2
 800353a:	4618      	mov	r0, r3
 800353c:	f000 fcfc 	bl	8003f38 <lis2duxs12_mode_get>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c>
  {
    return LIS2DUXS12_ERROR;
 8003546:	f04f 33ff 	mov.w	r3, #4294967295
 800354a:	e142      	b.n	80037d2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  if (Power == LIS2DUXS12_ULTRA_LOW_POWER)
 800354c:	79fb      	ldrb	r3, [r7, #7]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d118      	bne.n	8003584 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x64>
  {
    mode.odr = (Odr <= 1.6f) ? LIS2DUXS12_1Hz6_ULP
               : (Odr <= 3.0f) ? LIS2DUXS12_3Hz_ULP
 8003552:	edd7 7a02 	vldr	s15, [r7, #8]
 8003556:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 80037dc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2bc>
 800355a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800355e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003562:	d801      	bhi.n	8003568 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x48>
 8003564:	2301      	movs	r3, #1
 8003566:	e00b      	b.n	8003580 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x60>
 8003568:	edd7 7a02 	vldr	s15, [r7, #8]
 800356c:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8003570:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003578:	d801      	bhi.n	800357e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x5e>
 800357a:	2302      	movs	r3, #2
 800357c:	e000      	b.n	8003580 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x60>
 800357e:	2303      	movs	r3, #3
    mode.odr = (Odr <= 1.6f) ? LIS2DUXS12_1Hz6_ULP
 8003580:	753b      	strb	r3, [r7, #20]
 8003582:	e0a4      	b.n	80036ce <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
               :                 LIS2DUXS12_25Hz_ULP;
  }
  else if (Power == LIS2DUXS12_LOW_POWER)
 8003584:	79fb      	ldrb	r3, [r7, #7]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d14f      	bne.n	800362a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x10a>
  {
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_LP
               : (Odr <=  12.5f) ? LIS2DUXS12_12Hz5_LP
 800358a:	edd7 7a02 	vldr	s15, [r7, #8]
 800358e:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8003592:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800359a:	d801      	bhi.n	80035a0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x80>
 800359c:	2304      	movs	r3, #4
 800359e:	e042      	b.n	8003626 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80035a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80035a4:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80035a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b0:	d801      	bhi.n	80035b6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x96>
 80035b2:	2305      	movs	r3, #5
 80035b4:	e037      	b.n	8003626 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80035b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80035ba:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80035be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c6:	d801      	bhi.n	80035cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xac>
 80035c8:	2306      	movs	r3, #6
 80035ca:	e02c      	b.n	8003626 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80035cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80035d0:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80037e0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c0>
 80035d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035dc:	d801      	bhi.n	80035e2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xc2>
 80035de:	2307      	movs	r3, #7
 80035e0:	e021      	b.n	8003626 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80035e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80035e6:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 80037e4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c4>
 80035ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f2:	d801      	bhi.n	80035f8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80035f4:	2308      	movs	r3, #8
 80035f6:	e016      	b.n	8003626 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80035f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80035fc:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80037e8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c8>
 8003600:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003608:	d801      	bhi.n	800360e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xee>
 800360a:	2309      	movs	r3, #9
 800360c:	e00b      	b.n	8003626 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 800360e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003612:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 80037ec <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2cc>
 8003616:	eef4 7ac7 	vcmpe.f32	s15, s14
 800361a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800361e:	d801      	bhi.n	8003624 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x104>
 8003620:	230a      	movs	r3, #10
 8003622:	e000      	b.n	8003626 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8003624:	230b      	movs	r3, #11
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_LP
 8003626:	753b      	strb	r3, [r7, #20]
 8003628:	e051      	b.n	80036ce <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
               : (Odr <= 100.0f) ? LIS2DUXS12_100Hz_LP
               : (Odr <= 200.0f) ? LIS2DUXS12_200Hz_LP
               : (Odr <= 400.0f) ? LIS2DUXS12_400Hz_LP
               :                   LIS2DUXS12_800Hz_LP;
  }
  else if (Power == LIS2DUXS12_HIGH_PERFORMANCE)
 800362a:	79fb      	ldrb	r3, [r7, #7]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d14e      	bne.n	80036ce <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
  {
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_HP
               : (Odr <=  12.5f) ? LIS2DUXS12_12Hz5_HP
 8003630:	edd7 7a02 	vldr	s15, [r7, #8]
 8003634:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8003638:	eef4 7ac7 	vcmpe.f32	s15, s14
 800363c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003640:	d801      	bhi.n	8003646 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8003642:	2314      	movs	r3, #20
 8003644:	e042      	b.n	80036cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8003646:	edd7 7a02 	vldr	s15, [r7, #8]
 800364a:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800364e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003656:	d801      	bhi.n	800365c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8003658:	2315      	movs	r3, #21
 800365a:	e037      	b.n	80036cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 800365c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003660:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8003664:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800366c:	d801      	bhi.n	8003672 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x152>
 800366e:	2316      	movs	r3, #22
 8003670:	e02c      	b.n	80036cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8003672:	edd7 7a02 	vldr	s15, [r7, #8]
 8003676:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80037e0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c0>
 800367a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800367e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003682:	d801      	bhi.n	8003688 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8003684:	2317      	movs	r3, #23
 8003686:	e021      	b.n	80036cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8003688:	edd7 7a02 	vldr	s15, [r7, #8]
 800368c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80037e4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c4>
 8003690:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003698:	d801      	bhi.n	800369e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 800369a:	2318      	movs	r3, #24
 800369c:	e016      	b.n	80036cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 800369e:	edd7 7a02 	vldr	s15, [r7, #8]
 80036a2:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80037e8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c8>
 80036a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ae:	d801      	bhi.n	80036b4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x194>
 80036b0:	2319      	movs	r3, #25
 80036b2:	e00b      	b.n	80036cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 80036b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80036b8:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80037ec <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2cc>
 80036bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c4:	d801      	bhi.n	80036ca <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 80036c6:	231a      	movs	r3, #26
 80036c8:	e000      	b.n	80036cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 80036ca:	231b      	movs	r3, #27
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_HP
 80036cc:	753b      	strb	r3, [r7, #20]
  else
  {
    /* Do nothing */
  }

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	3320      	adds	r3, #32
 80036d2:	f107 0214 	add.w	r2, r7, #20
 80036d6:	4611      	mov	r1, r2
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 fb71 	bl	8003dc0 <lis2duxs12_mode_set>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ca>
  {
    return LIS2DUXS12_ERROR;
 80036e4:	f04f 33ff 	mov.w	r3, #4294967295
 80036e8:	e073      	b.n	80037d2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  /* Store the current Odr value */
  pObj->acc_odr = (mode.odr == LIS2DUXS12_1Hz6_ULP) ?   1.6f
 80036ea:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_3Hz_ULP)  ?   3.0f
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d05b      	beq.n	80037a8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x288>
 80036f0:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_6Hz_LP)   ?   6.0f
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d056      	beq.n	80037a4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x284>
 80036f6:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_6Hz_HP)   ?   6.0f
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d051      	beq.n	80037a0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x280>
 80036fc:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_12Hz5_LP) ?  12.5f
 80036fe:	2b14      	cmp	r3, #20
 8003700:	d04c      	beq.n	800379c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x27c>
 8003702:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_12Hz5_HP) ?  12.5f
 8003704:	2b05      	cmp	r3, #5
 8003706:	d047      	beq.n	8003798 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x278>
 8003708:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_ULP) ?  25.0f
 800370a:	2b15      	cmp	r3, #21
 800370c:	d042      	beq.n	8003794 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x274>
 800370e:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_LP)  ?  25.0f
 8003710:	2b03      	cmp	r3, #3
 8003712:	d03d      	beq.n	8003790 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x270>
 8003714:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_HP)  ?  25.0f
 8003716:	2b06      	cmp	r3, #6
 8003718:	d038      	beq.n	800378c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x26c>
 800371a:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_50Hz_LP)  ?  50.0f
 800371c:	2b16      	cmp	r3, #22
 800371e:	d033      	beq.n	8003788 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x268>
 8003720:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_50Hz_HP)  ?  50.0f
 8003722:	2b07      	cmp	r3, #7
 8003724:	d02e      	beq.n	8003784 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x264>
 8003726:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_100Hz_LP) ? 100.0f
 8003728:	2b17      	cmp	r3, #23
 800372a:	d029      	beq.n	8003780 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x260>
 800372c:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_100Hz_HP) ? 100.0f
 800372e:	2b08      	cmp	r3, #8
 8003730:	d024      	beq.n	800377c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x25c>
 8003732:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_200Hz_LP) ? 200.0f
 8003734:	2b18      	cmp	r3, #24
 8003736:	d01f      	beq.n	8003778 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x258>
 8003738:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_200Hz_HP) ? 200.0f
 800373a:	2b09      	cmp	r3, #9
 800373c:	d01a      	beq.n	8003774 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x254>
 800373e:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_400Hz_LP) ? 400.0f
 8003740:	2b19      	cmp	r3, #25
 8003742:	d015      	beq.n	8003770 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x250>
 8003744:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_400Hz_HP) ? 400.0f
 8003746:	2b0a      	cmp	r3, #10
 8003748:	d010      	beq.n	800376c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x24c>
 800374a:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_800Hz_LP) ? 800.0f
 800374c:	2b1a      	cmp	r3, #26
 800374e:	d00b      	beq.n	8003768 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x248>
 8003750:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_800Hz_HP) ? 800.0f
 8003752:	2b0b      	cmp	r3, #11
 8003754:	d006      	beq.n	8003764 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x244>
 8003756:	7d3b      	ldrb	r3, [r7, #20]
                  :                                     -1.0f;
 8003758:	2b1b      	cmp	r3, #27
 800375a:	d101      	bne.n	8003760 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x240>
 800375c:	4b24      	ldr	r3, [pc, #144]	@ (80037f0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d0>)
 800375e:	e024      	b.n	80037aa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 8003760:	4b24      	ldr	r3, [pc, #144]	@ (80037f4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d4>)
 8003762:	e022      	b.n	80037aa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_800Hz_HP) ? 800.0f
 8003764:	4b22      	ldr	r3, [pc, #136]	@ (80037f0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d0>)
 8003766:	e020      	b.n	80037aa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_800Hz_LP) ? 800.0f
 8003768:	4b23      	ldr	r3, [pc, #140]	@ (80037f8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d8>)
 800376a:	e01e      	b.n	80037aa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_400Hz_HP) ? 400.0f
 800376c:	4b22      	ldr	r3, [pc, #136]	@ (80037f8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d8>)
 800376e:	e01c      	b.n	80037aa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_400Hz_LP) ? 400.0f
 8003770:	4b22      	ldr	r3, [pc, #136]	@ (80037fc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2dc>)
 8003772:	e01a      	b.n	80037aa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_200Hz_HP) ? 200.0f
 8003774:	4b21      	ldr	r3, [pc, #132]	@ (80037fc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2dc>)
 8003776:	e018      	b.n	80037aa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_200Hz_LP) ? 200.0f
 8003778:	4b21      	ldr	r3, [pc, #132]	@ (8003800 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e0>)
 800377a:	e016      	b.n	80037aa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_100Hz_HP) ? 100.0f
 800377c:	4b20      	ldr	r3, [pc, #128]	@ (8003800 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e0>)
 800377e:	e014      	b.n	80037aa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_100Hz_LP) ? 100.0f
 8003780:	4b20      	ldr	r3, [pc, #128]	@ (8003804 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e4>)
 8003782:	e012      	b.n	80037aa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_50Hz_HP)  ?  50.0f
 8003784:	4b1f      	ldr	r3, [pc, #124]	@ (8003804 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e4>)
 8003786:	e010      	b.n	80037aa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_50Hz_LP)  ?  50.0f
 8003788:	4b1f      	ldr	r3, [pc, #124]	@ (8003808 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 800378a:	e00e      	b.n	80037aa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_HP)  ?  25.0f
 800378c:	4b1e      	ldr	r3, [pc, #120]	@ (8003808 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 800378e:	e00c      	b.n	80037aa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_LP)  ?  25.0f
 8003790:	4b1d      	ldr	r3, [pc, #116]	@ (8003808 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 8003792:	e00a      	b.n	80037aa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_ULP) ?  25.0f
 8003794:	4b1d      	ldr	r3, [pc, #116]	@ (800380c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2ec>)
 8003796:	e008      	b.n	80037aa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_12Hz5_HP) ?  12.5f
 8003798:	4b1c      	ldr	r3, [pc, #112]	@ (800380c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2ec>)
 800379a:	e006      	b.n	80037aa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_12Hz5_LP) ?  12.5f
 800379c:	4b1c      	ldr	r3, [pc, #112]	@ (8003810 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f0>)
 800379e:	e004      	b.n	80037aa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_6Hz_HP)   ?   6.0f
 80037a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003810 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f0>)
 80037a2:	e002      	b.n	80037aa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_6Hz_LP)   ?   6.0f
 80037a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003814 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f4>)
 80037a6:	e000      	b.n	80037aa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_3Hz_ULP)  ?   3.0f
 80037a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003818 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f8>)
  pObj->acc_odr = (mode.odr == LIS2DUXS12_1Hz6_ULP) ?   1.6f
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	6353      	str	r3, [r2, #52]	@ 0x34

  if (pObj->acc_odr == -1.0f)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80037b4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80037b8:	eef4 7a47 	vcmp.f32	s15, s14
 80037bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c0:	d102      	bne.n	80037c8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2a8>
  {
    return LIS2DUXS12_ERROR;
 80037c2:	f04f 33ff 	mov.w	r3, #4294967295
 80037c6:	e004      	b.n	80037d2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  /* Store the current Power value */
  pObj->power_mode = Power;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	79fa      	ldrb	r2, [r7, #7]
 80037cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return LIS2DUXS12_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3718      	adds	r7, #24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	3fcccccd 	.word	0x3fcccccd
 80037e0:	42480000 	.word	0x42480000
 80037e4:	42c80000 	.word	0x42c80000
 80037e8:	43480000 	.word	0x43480000
 80037ec:	43c80000 	.word	0x43c80000
 80037f0:	44480000 	.word	0x44480000
 80037f4:	bf800000 	.word	0xbf800000
 80037f8:	43c80000 	.word	0x43c80000
 80037fc:	43480000 	.word	0x43480000
 8003800:	42c80000 	.word	0x42c80000
 8003804:	42480000 	.word	0x42480000
 8003808:	41c80000 	.word	0x41c80000
 800380c:	41480000 	.word	0x41480000
 8003810:	40c00000 	.word	0x40c00000
 8003814:	40400000 	.word	0x40400000
 8003818:	3fcccccd 	.word	0x3fcccccd

0800381c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled(LIS2DUXS12_Object_t *pObj, float_t Odr,
    LIS2DUXS12_Power_Mode_t Power)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	ed87 0a02 	vstr	s0, [r7, #8]
 8003828:	460b      	mov	r3, r1
 800382a:	71fb      	strb	r3, [r7, #7]
  /* Store the new Odr value */
  if (Power == LIS2DUXS12_ULTRA_LOW_POWER)
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d11a      	bne.n	8003868 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x4c>
  {
    pObj->acc_odr = (Odr <= 1.5f) ? 1.5f
                    : (Odr <= 3.0f) ? 3.0f
 8003832:	edd7 7a02 	vldr	s15, [r7, #8]
 8003836:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800383a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800383e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003842:	d802      	bhi.n	800384a <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x2e>
 8003844:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8003848:	e00b      	b.n	8003862 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x46>
                    :                25.0f;
 800384a:	edd7 7a02 	vldr	s15, [r7, #8]
 800384e:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8003852:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800385a:	d801      	bhi.n	8003860 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x44>
 800385c:	4b33      	ldr	r3, [pc, #204]	@ (800392c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x110>)
 800385e:	e000      	b.n	8003862 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x46>
 8003860:	4b33      	ldr	r3, [pc, #204]	@ (8003930 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x114>)
    pObj->acc_odr = (Odr <= 1.5f) ? 1.5f
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	6353      	str	r3, [r2, #52]	@ 0x34
 8003866:	e055      	b.n	8003914 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf8>
  }
  else if ((Power == LIS2DUXS12_LOW_POWER) || (Power == LIS2DUXS12_HIGH_PERFORMANCE))
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d002      	beq.n	8003874 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x58>
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d14f      	bne.n	8003914 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf8>
  {
    pObj->acc_odr = (Odr <=   6.0f) ?   6.0f
                    : (Odr <=  12.5f) ?  12.5f
 8003874:	edd7 7a02 	vldr	s15, [r7, #8]
 8003878:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 800387c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003884:	d801      	bhi.n	800388a <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x6e>
 8003886:	4b2b      	ldr	r3, [pc, #172]	@ (8003934 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x118>)
 8003888:	e042      	b.n	8003910 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <=  25.0f) ?  25.0f
 800388a:	edd7 7a02 	vldr	s15, [r7, #8]
 800388e:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8003892:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800389a:	d801      	bhi.n	80038a0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x84>
 800389c:	4b26      	ldr	r3, [pc, #152]	@ (8003938 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 800389e:	e037      	b.n	8003910 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <=  50.0f) ?  50.0f
 80038a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80038a4:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80038a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b0:	d801      	bhi.n	80038b6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x9a>
 80038b2:	4b1f      	ldr	r3, [pc, #124]	@ (8003930 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 80038b4:	e02c      	b.n	8003910 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 100.0f) ? 100.0f
 80038b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80038ba:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800393c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x120>
 80038be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c6:	d801      	bhi.n	80038cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xb0>
 80038c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003940 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x124>)
 80038ca:	e021      	b.n	8003910 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 200.0f) ? 200.0f
 80038cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80038d0:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8003944 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x128>
 80038d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038dc:	d801      	bhi.n	80038e2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xc6>
 80038de:	4b1a      	ldr	r3, [pc, #104]	@ (8003948 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x12c>)
 80038e0:	e016      	b.n	8003910 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 400.0f) ? 400.0f
 80038e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80038e6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800394c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x130>
 80038ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f2:	d801      	bhi.n	80038f8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xdc>
 80038f4:	4b16      	ldr	r3, [pc, #88]	@ (8003950 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x134>)
 80038f6:	e00b      	b.n	8003910 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    :                   800.0f;
 80038f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80038fc:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8003954 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x138>
 8003900:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003908:	d801      	bhi.n	800390e <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf2>
 800390a:	4b13      	ldr	r3, [pc, #76]	@ (8003958 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x13c>)
 800390c:	e000      	b.n	8003910 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800390e:	4b13      	ldr	r3, [pc, #76]	@ (800395c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x140>)
    pObj->acc_odr = (Odr <=   6.0f) ?   6.0f
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	6353      	str	r3, [r2, #52]	@ 0x34
  {
    /* Do nothing */
  }

  /* Store the new Power value */
  pObj->power_mode = Power;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	79fa      	ldrb	r2, [r7, #7]
 8003918:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return LIS2DUXS12_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40400000 	.word	0x40400000
 8003930:	41c80000 	.word	0x41c80000
 8003934:	40c00000 	.word	0x40c00000
 8003938:	41480000 	.word	0x41480000
 800393c:	42480000 	.word	0x42480000
 8003940:	42480000 	.word	0x42480000
 8003944:	42c80000 	.word	0x42c80000
 8003948:	42c80000 	.word	0x42c80000
 800394c:	43480000 	.word	0x43480000
 8003950:	43480000 	.word	0x43480000
 8003954:	43c80000 	.word	0x43c80000
 8003958:	43c80000 	.word	0x43c80000
 800395c:	44480000 	.word	0x44480000

08003960 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003960:	b590      	push	{r4, r7, lr}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	607a      	str	r2, [r7, #4]
 800396a:	461a      	mov	r2, r3
 800396c:	460b      	mov	r3, r1
 800396e:	72fb      	strb	r3, [r7, #11]
 8003970:	4613      	mov	r3, r2
 8003972:	813b      	strh	r3, [r7, #8]
  LIS2DUXS12_Object_t *pObj = (LIS2DUXS12_Object_t *)Handle;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	695c      	ldr	r4, [r3, #20]
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	7b1b      	ldrb	r3, [r3, #12]
 8003980:	4618      	mov	r0, r3
 8003982:	7afb      	ldrb	r3, [r7, #11]
 8003984:	b299      	uxth	r1, r3
 8003986:	893b      	ldrh	r3, [r7, #8]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	47a0      	blx	r4
 800398c:	4603      	mov	r3, r0
}
 800398e:	4618      	mov	r0, r3
 8003990:	371c      	adds	r7, #28
 8003992:	46bd      	mov	sp, r7
 8003994:	bd90      	pop	{r4, r7, pc}

08003996 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003996:	b590      	push	{r4, r7, lr}
 8003998:	b087      	sub	sp, #28
 800399a:	af00      	add	r7, sp, #0
 800399c:	60f8      	str	r0, [r7, #12]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	461a      	mov	r2, r3
 80039a2:	460b      	mov	r3, r1
 80039a4:	72fb      	strb	r3, [r7, #11]
 80039a6:	4613      	mov	r3, r2
 80039a8:	813b      	strh	r3, [r7, #8]
  LIS2DUXS12_Object_t *pObj = (LIS2DUXS12_Object_t *)Handle;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	691c      	ldr	r4, [r3, #16]
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	7b1b      	ldrb	r3, [r3, #12]
 80039b6:	4618      	mov	r0, r3
 80039b8:	7afb      	ldrb	r3, [r7, #11]
 80039ba:	b299      	uxth	r1, r3
 80039bc:	893b      	ldrh	r3, [r7, #8]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	47a0      	blx	r4
 80039c2:	4603      	mov	r3, r0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	371c      	adds	r7, #28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd90      	pop	{r4, r7, pc}

080039cc <lis2duxs12_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis2duxs12_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                   uint16_t len)
{
 80039cc:	b590      	push	{r4, r7, lr}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	607a      	str	r2, [r7, #4]
 80039d6:	461a      	mov	r2, r3
 80039d8:	460b      	mov	r3, r1
 80039da:	72fb      	strb	r3, [r7, #11]
 80039dc:	4613      	mov	r3, r2
 80039de:	813b      	strh	r3, [r7, #8]
  if (ctx == NULL)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d102      	bne.n	80039ec <lis2duxs12_read_reg+0x20>
  {
    return -1;
 80039e6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ea:	e008      	b.n	80039fe <lis2duxs12_read_reg+0x32>
  }

  return ctx->read_reg(ctx->handle, reg, data, len);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	685c      	ldr	r4, [r3, #4]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	68d8      	ldr	r0, [r3, #12]
 80039f4:	893b      	ldrh	r3, [r7, #8]
 80039f6:	7af9      	ldrb	r1, [r7, #11]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	47a0      	blx	r4
 80039fc:	4603      	mov	r3, r0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd90      	pop	{r4, r7, pc}

08003a06 <lis2duxs12_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis2duxs12_write_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                    uint16_t len)
{
 8003a06:	b590      	push	{r4, r7, lr}
 8003a08:	b085      	sub	sp, #20
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	607a      	str	r2, [r7, #4]
 8003a10:	461a      	mov	r2, r3
 8003a12:	460b      	mov	r3, r1
 8003a14:	72fb      	strb	r3, [r7, #11]
 8003a16:	4613      	mov	r3, r2
 8003a18:	813b      	strh	r3, [r7, #8]
  if (ctx == NULL)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d102      	bne.n	8003a26 <lis2duxs12_write_reg+0x20>
  {
    return -1;
 8003a20:	f04f 33ff 	mov.w	r3, #4294967295
 8003a24:	e008      	b.n	8003a38 <lis2duxs12_write_reg+0x32>
  }

  return ctx->write_reg(ctx->handle, reg, data, len);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681c      	ldr	r4, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	68d8      	ldr	r0, [r3, #12]
 8003a2e:	893b      	ldrh	r3, [r7, #8]
 8003a30:	7af9      	ldrb	r1, [r7, #11]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	47a0      	blx	r4
 8003a36:	4603      	mov	r3, r0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd90      	pop	{r4, r7, pc}

08003a40 <lis2duxs12_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lis2duxs12_from_fs2g_to_mg(int16_t lsb)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4603      	mov	r3, r0
 8003a48:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.061f;
 8003a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a4e:	ee07 3a90 	vmov	s15, r3
 8003a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a56:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003a6c <lis2duxs12_from_fs2g_to_mg+0x2c>
 8003a5a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	3d79db23 	.word	0x3d79db23

08003a70 <lis2duxs12_from_fs4g_to_mg>:

float_t lis2duxs12_from_fs4g_to_mg(int16_t lsb)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.122f;
 8003a7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a7e:	ee07 3a90 	vmov	s15, r3
 8003a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a86:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003a9c <lis2duxs12_from_fs4g_to_mg+0x2c>
 8003a8a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	3df9db23 	.word	0x3df9db23

08003aa0 <lis2duxs12_from_fs8g_to_mg>:

float_t lis2duxs12_from_fs8g_to_mg(int16_t lsb)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.244f;
 8003aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003aae:	ee07 3a90 	vmov	s15, r3
 8003ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ab6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003acc <lis2duxs12_from_fs8g_to_mg+0x2c>
 8003aba:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003abe:	eeb0 0a67 	vmov.f32	s0, s15
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	3e79db23 	.word	0x3e79db23

08003ad0 <lis2duxs12_from_fs16g_to_mg>:

float_t lis2duxs12_from_fs16g_to_mg(int16_t lsb)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.488f;
 8003ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ade:	ee07 3a90 	vmov	s15, r3
 8003ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ae6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003afc <lis2duxs12_from_fs16g_to_mg+0x2c>
 8003aea:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003aee:	eeb0 0a67 	vmov.f32	s0, s15
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	3ef9db23 	.word	0x3ef9db23

08003b00 <lis2duxs12_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_WHO_AM_I, val, 1);
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	210f      	movs	r1, #15
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7ff ff5b 	bl	80039cc <lis2duxs12_read_reg>
 8003b16:	60f8      	str	r0, [r7, #12]

  return ret;
 8003b18:	68fb      	ldr	r3, [r7, #12]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <lis2duxs12_init_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_init_set(const stmdev_ctx_t *ctx, lis2duxs12_init_t val)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b088      	sub	sp, #32
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	70fb      	strb	r3, [r7, #3]
  lis2duxs12_ctrl1_t ctrl1;
  lis2duxs12_ctrl4_t ctrl4;
  lis2duxs12_status_t status;
  uint8_t cnt = 0;
 8003b30:	2300      	movs	r3, #0
 8003b32:	77fb      	strb	r3, [r7, #31]
  int32_t ret = 0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	61bb      	str	r3, [r7, #24]

  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8003b38:	f107 0214 	add.w	r2, r7, #20
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	2110      	movs	r1, #16
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7ff ff43 	bl	80039cc <lis2duxs12_read_reg>
 8003b46:	4602      	mov	r2, r0
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003b4e:	f107 0210 	add.w	r2, r7, #16
 8003b52:	2301      	movs	r3, #1
 8003b54:	2113      	movs	r1, #19
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7ff ff38 	bl	80039cc <lis2duxs12_read_reg>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	4413      	add	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
  switch (val)
 8003b64:	78fb      	ldrb	r3, [r7, #3]
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	f200 80ca 	bhi.w	8003d00 <lis2duxs12_init_set+0x1dc>
 8003b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b74 <lis2duxs12_init_set+0x50>)
 8003b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b72:	bf00      	nop
 8003b74:	08003c75 	.word	0x08003c75
 8003b78:	08003b85 	.word	0x08003b85
 8003b7c:	08003bff 	.word	0x08003bff
 8003b80:	08003cbb 	.word	0x08003cbb
  {
    case LIS2DUXS12_BOOT:
      ctrl4.boot = PROPERTY_ENABLE;
 8003b84:	7c3b      	ldrb	r3, [r7, #16]
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	743b      	strb	r3, [r7, #16]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003b8c:	f107 0210 	add.w	r2, r7, #16
 8003b90:	2301      	movs	r3, #1
 8003b92:	2113      	movs	r1, #19
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7ff ff36 	bl	8003a06 <lis2duxs12_write_reg>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
      if (ret != 0)
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f040 80bb 	bne.w	8003d20 <lis2duxs12_init_set+0x1fc>
        break;
      }

      do
      {
        ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003baa:	f107 0210 	add.w	r2, r7, #16
 8003bae:	2301      	movs	r3, #1
 8003bb0:	2113      	movs	r1, #19
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7ff ff0a 	bl	80039cc <lis2duxs12_read_reg>
 8003bb8:	61b8      	str	r0, [r7, #24]
        if (ret != 0)
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d113      	bne.n	8003be8 <lis2duxs12_init_set+0xc4>
        {
          break;
        }

        /* boot procedure ended correctly */
        if (ctrl4.boot == 0U)
 8003bc0:	7c3b      	ldrb	r3, [r7, #16]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00f      	beq.n	8003bec <lis2duxs12_init_set+0xc8>
        {
          break;
        }

        if (ctx->mdelay != NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <lis2duxs12_init_set+0xb8>
        {
          ctx->mdelay(25); /* 25 ms of boot time */
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	2019      	movs	r0, #25
 8003bda:	4798      	blx	r3
        }
      } while (cnt++ < 5U);
 8003bdc:	7ffb      	ldrb	r3, [r7, #31]
 8003bde:	1c5a      	adds	r2, r3, #1
 8003be0:	77fa      	strb	r2, [r7, #31]
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d9e1      	bls.n	8003baa <lis2duxs12_init_set+0x86>
 8003be6:	e002      	b.n	8003bee <lis2duxs12_init_set+0xca>
          break;
 8003be8:	bf00      	nop
 8003bea:	e000      	b.n	8003bee <lis2duxs12_init_set+0xca>
          break;
 8003bec:	bf00      	nop

      if (cnt >= 5U)
 8003bee:	7ffb      	ldrb	r3, [r7, #31]
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	f240 8097 	bls.w	8003d24 <lis2duxs12_init_set+0x200>
      {
        ret = -1;  /* boot procedure failed */
 8003bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfa:	61bb      	str	r3, [r7, #24]
      }
      break;
 8003bfc:	e092      	b.n	8003d24 <lis2duxs12_init_set+0x200>
    case LIS2DUXS12_RESET:
      ctrl1.sw_reset = PROPERTY_ENABLE;
 8003bfe:	7d3b      	ldrb	r3, [r7, #20]
 8003c00:	f043 0320 	orr.w	r3, r3, #32
 8003c04:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8003c06:	f107 0214 	add.w	r2, r7, #20
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	2110      	movs	r1, #16
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7ff fef9 	bl	8003a06 <lis2duxs12_write_reg>
 8003c14:	4602      	mov	r2, r0
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	4413      	add	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
      if (ret != 0)
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f040 8082 	bne.w	8003d28 <lis2duxs12_init_set+0x204>
        break;
      }

      do
      {
        ret = lis2duxs12_status_get(ctx, &status);
 8003c24:	f107 030c 	add.w	r3, r7, #12
 8003c28:	4619      	mov	r1, r3
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f884 	bl	8003d38 <lis2duxs12_status_get>
 8003c30:	61b8      	str	r0, [r7, #24]
        if (ret != 0)
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d113      	bne.n	8003c60 <lis2duxs12_init_set+0x13c>
        {
          break;
        }

        /* sw-reset procedure ended correctly */
        if (status.sw_reset == 0U)
 8003c38:	7b3b      	ldrb	r3, [r7, #12]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00f      	beq.n	8003c64 <lis2duxs12_init_set+0x140>
        {
          break;
        }

        if (ctx->mdelay != NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <lis2duxs12_init_set+0x130>
        {
          ctx->mdelay(1); /* should be 50 us */
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	2001      	movs	r0, #1
 8003c52:	4798      	blx	r3
        }
      } while (cnt++ < 5U);
 8003c54:	7ffb      	ldrb	r3, [r7, #31]
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	77fa      	strb	r2, [r7, #31]
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d9e2      	bls.n	8003c24 <lis2duxs12_init_set+0x100>
 8003c5e:	e002      	b.n	8003c66 <lis2duxs12_init_set+0x142>
          break;
 8003c60:	bf00      	nop
 8003c62:	e000      	b.n	8003c66 <lis2duxs12_init_set+0x142>
          break;
 8003c64:	bf00      	nop

      if (cnt >= 5U)
 8003c66:	7ffb      	ldrb	r3, [r7, #31]
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d95f      	bls.n	8003d2c <lis2duxs12_init_set+0x208>
      {
        ret = -1;  /* sw-reset procedure failed */
 8003c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c70:	61bb      	str	r3, [r7, #24]
      }
      break;
 8003c72:	e05b      	b.n	8003d2c <lis2duxs12_init_set+0x208>
    case LIS2DUXS12_SENSOR_ONLY_ON:
      /* no embedded funcs are used */
      ctrl4.emb_func_en = PROPERTY_DISABLE;
 8003c74:	7c3b      	ldrb	r3, [r7, #16]
 8003c76:	f023 0310 	bic.w	r3, r3, #16
 8003c7a:	743b      	strb	r3, [r7, #16]
      ctrl4.bdu = PROPERTY_ENABLE;
 8003c7c:	7c3b      	ldrb	r3, [r7, #16]
 8003c7e:	f043 0320 	orr.w	r3, r3, #32
 8003c82:	743b      	strb	r3, [r7, #16]
      ctrl1.if_add_inc = PROPERTY_ENABLE;
 8003c84:	7d3b      	ldrb	r3, [r7, #20]
 8003c86:	f043 0310 	orr.w	r3, r3, #16
 8003c8a:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003c8c:	f107 0210 	add.w	r2, r7, #16
 8003c90:	2301      	movs	r3, #1
 8003c92:	2113      	movs	r1, #19
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7ff feb6 	bl	8003a06 <lis2duxs12_write_reg>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8003ca2:	f107 0214 	add.w	r2, r7, #20
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	2110      	movs	r1, #16
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff feab 	bl	8003a06 <lis2duxs12_write_reg>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
      break;
 8003cb8:	e039      	b.n	8003d2e <lis2duxs12_init_set+0x20a>
    case LIS2DUXS12_SENSOR_EMB_FUNC_ON:
      /* complete configuration is used */
      ctrl4.emb_func_en = PROPERTY_ENABLE;
 8003cba:	7c3b      	ldrb	r3, [r7, #16]
 8003cbc:	f043 0310 	orr.w	r3, r3, #16
 8003cc0:	743b      	strb	r3, [r7, #16]
      ctrl4.bdu = PROPERTY_ENABLE;
 8003cc2:	7c3b      	ldrb	r3, [r7, #16]
 8003cc4:	f043 0320 	orr.w	r3, r3, #32
 8003cc8:	743b      	strb	r3, [r7, #16]
      ctrl1.if_add_inc = PROPERTY_ENABLE;
 8003cca:	7d3b      	ldrb	r3, [r7, #20]
 8003ccc:	f043 0310 	orr.w	r3, r3, #16
 8003cd0:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003cd2:	f107 0210 	add.w	r2, r7, #16
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	2113      	movs	r1, #19
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff fe93 	bl	8003a06 <lis2duxs12_write_reg>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8003ce8:	f107 0214 	add.w	r2, r7, #20
 8003cec:	2301      	movs	r3, #1
 8003cee:	2110      	movs	r1, #16
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff fe88 	bl	8003a06 <lis2duxs12_write_reg>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	61bb      	str	r3, [r7, #24]
      break;
 8003cfe:	e016      	b.n	8003d2e <lis2duxs12_init_set+0x20a>
    default:
      ctrl1.sw_reset = PROPERTY_ENABLE;
 8003d00:	7d3b      	ldrb	r3, [r7, #20]
 8003d02:	f043 0320 	orr.w	r3, r3, #32
 8003d06:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8003d08:	f107 0214 	add.w	r2, r7, #20
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	2110      	movs	r1, #16
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff fe78 	bl	8003a06 <lis2duxs12_write_reg>
 8003d16:	4602      	mov	r2, r0
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
      break;
 8003d1e:	e006      	b.n	8003d2e <lis2duxs12_init_set+0x20a>
        break;
 8003d20:	bf00      	nop
 8003d22:	e004      	b.n	8003d2e <lis2duxs12_init_set+0x20a>
      break;
 8003d24:	bf00      	nop
 8003d26:	e002      	b.n	8003d2e <lis2duxs12_init_set+0x20a>
        break;
 8003d28:	bf00      	nop
 8003d2a:	e000      	b.n	8003d2e <lis2duxs12_init_set+0x20a>
      break;
 8003d2c:	bf00      	nop
  }
  return ret;
 8003d2e:	69bb      	ldr	r3, [r7, #24]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3720      	adds	r7, #32
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <lis2duxs12_status_get>:
  * @param  val   the status of the device.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_status_get(const stmdev_ctx_t *ctx, lis2duxs12_status_t *val)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  lis2duxs12_status_register_t status_register;
  lis2duxs12_ctrl1_t ctrl1;
  lis2duxs12_ctrl4_t ctrl4;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_STATUS,
 8003d42:	f107 0210 	add.w	r2, r7, #16
 8003d46:	2301      	movs	r3, #1
 8003d48:	2125      	movs	r1, #37	@ 0x25
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff fe3e 	bl	80039cc <lis2duxs12_read_reg>
 8003d50:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&status_register, 1);
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8003d52:	f107 020c 	add.w	r2, r7, #12
 8003d56:	2301      	movs	r3, #1
 8003d58:	2110      	movs	r1, #16
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff fe36 	bl	80039cc <lis2duxs12_read_reg>
 8003d60:	4602      	mov	r2, r0
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	4413      	add	r3, r2
 8003d66:	617b      	str	r3, [r7, #20]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003d68:	f107 0208 	add.w	r2, r7, #8
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	2113      	movs	r1, #19
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff fe2b 	bl	80039cc <lis2duxs12_read_reg>
 8003d76:	4602      	mov	r2, r0
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	617b      	str	r3, [r7, #20]

  val->sw_reset = ctrl1.sw_reset;
 8003d7e:	7b3b      	ldrb	r3, [r7, #12]
 8003d80:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003d84:	b2d9      	uxtb	r1, r3
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	7813      	ldrb	r3, [r2, #0]
 8003d8a:	f361 0300 	bfi	r3, r1, #0, #1
 8003d8e:	7013      	strb	r3, [r2, #0]
  val->boot     = ctrl4.boot;
 8003d90:	7a3b      	ldrb	r3, [r7, #8]
 8003d92:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003d96:	b2d9      	uxtb	r1, r3
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	7813      	ldrb	r3, [r2, #0]
 8003d9c:	f361 0341 	bfi	r3, r1, #1, #1
 8003da0:	7013      	strb	r3, [r2, #0]
  val->drdy     = status_register.drdy;
 8003da2:	7c3b      	ldrb	r3, [r7, #16]
 8003da4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003da8:	b2d9      	uxtb	r1, r3
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	7813      	ldrb	r3, [r2, #0]
 8003dae:	f361 0382 	bfi	r3, r1, #2, #1
 8003db2:	7013      	strb	r3, [r2, #0]

  return ret;
 8003db4:	697b      	ldr	r3, [r7, #20]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <lis2duxs12_mode_set>:
  * @param  val   set the sensor FS and ODR.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mode_set(const stmdev_ctx_t *ctx, const lis2duxs12_md_t *val)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  lis2duxs12_ctrl3_t ctrl3;
  lis2duxs12_ctrl5_t ctrl5;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 8003dca:	f107 020c 	add.w	r2, r7, #12
 8003dce:	2301      	movs	r3, #1
 8003dd0:	2114      	movs	r1, #20
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7ff fdfa 	bl	80039cc <lis2duxs12_read_reg>
 8003dd8:	6178      	str	r0, [r7, #20]

  ctrl5.odr = (uint8_t)val->odr & 0xFU;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	7b3b      	ldrb	r3, [r7, #12]
 8003de6:	f362 1307 	bfi	r3, r2, #4, #4
 8003dea:	733b      	strb	r3, [r7, #12]
  ctrl5.fs = (uint8_t)val->fs;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	785b      	ldrb	r3, [r3, #1]
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	7b3b      	ldrb	r3, [r7, #12]
 8003df8:	f362 0301 	bfi	r3, r2, #0, #2
 8003dfc:	733b      	strb	r3, [r7, #12]

  /* set the bandwidth */
  switch (val->odr)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b06      	cmp	r3, #6
 8003e04:	d859      	bhi.n	8003eba <lis2duxs12_mode_set+0xfa>
 8003e06:	a201      	add	r2, pc, #4	@ (adr r2, 8003e0c <lis2duxs12_mode_set+0x4c>)
 8003e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0c:	08003e29 	.word	0x08003e29
 8003e10:	08003e29 	.word	0x08003e29
 8003e14:	08003e29 	.word	0x08003e29
 8003e18:	08003e29 	.word	0x08003e29
 8003e1c:	08003e33 	.word	0x08003e33
 8003e20:	08003e4f 	.word	0x08003e4f
 8003e24:	08003e7b 	.word	0x08003e7b
    /* no anti-aliasing filter present */
    case LIS2DUXS12_OFF:
    case LIS2DUXS12_1Hz6_ULP:
    case LIS2DUXS12_3Hz_ULP:
    case LIS2DUXS12_25Hz_ULP:
      ctrl5.bw = 0x0;
 8003e28:	7b3b      	ldrb	r3, [r7, #12]
 8003e2a:	f023 030c 	bic.w	r3, r3, #12
 8003e2e:	733b      	strb	r3, [r7, #12]
      break;
 8003e30:	e04d      	b.n	8003ece <lis2duxs12_mode_set+0x10e>

    /* low-power mode with ODR < 50 Hz */
    case LIS2DUXS12_6Hz_LP:
      switch (val->bw)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	789b      	ldrb	r3, [r3, #2]
 8003e36:	2b03      	cmp	r3, #3
 8003e38:	d003      	beq.n	8003e42 <lis2duxs12_mode_set+0x82>
        default:
        case LIS2DUXS12_ODR_div_2:
        case LIS2DUXS12_ODR_div_4:
        case LIS2DUXS12_ODR_div_8:
          /* value not allowed */
          ret = -1;
 8003e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e3e:	617b      	str	r3, [r7, #20]
          break;
 8003e40:	e004      	b.n	8003e4c <lis2duxs12_mode_set+0x8c>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 8003e42:	7b3b      	ldrb	r3, [r7, #12]
 8003e44:	f043 030c 	orr.w	r3, r3, #12
 8003e48:	733b      	strb	r3, [r7, #12]
          break;
 8003e4a:	bf00      	nop
      }
      break;
 8003e4c:	e03f      	b.n	8003ece <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_12Hz5_LP:
      switch (val->bw)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	789b      	ldrb	r3, [r3, #2]
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d005      	beq.n	8003e62 <lis2duxs12_mode_set+0xa2>
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d009      	beq.n	8003e6e <lis2duxs12_mode_set+0xae>
      {
        default:
        case LIS2DUXS12_ODR_div_2:
        case LIS2DUXS12_ODR_div_4:
          /* value not allowed */
          ret = -1;
 8003e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e5e:	617b      	str	r3, [r7, #20]
          break;
 8003e60:	e00a      	b.n	8003e78 <lis2duxs12_mode_set+0xb8>
        case LIS2DUXS12_ODR_div_8:
          ctrl5.bw = 0x2;
 8003e62:	7b3b      	ldrb	r3, [r7, #12]
 8003e64:	2202      	movs	r2, #2
 8003e66:	f362 0383 	bfi	r3, r2, #2, #2
 8003e6a:	733b      	strb	r3, [r7, #12]
          break;
 8003e6c:	e004      	b.n	8003e78 <lis2duxs12_mode_set+0xb8>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 8003e6e:	7b3b      	ldrb	r3, [r7, #12]
 8003e70:	f043 030c 	orr.w	r3, r3, #12
 8003e74:	733b      	strb	r3, [r7, #12]
          break;
 8003e76:	bf00      	nop
      }
      break;
 8003e78:	e029      	b.n	8003ece <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_25Hz_LP:
      switch (val->bw)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	789b      	ldrb	r3, [r3, #2]
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	d015      	beq.n	8003eae <lis2duxs12_mode_set+0xee>
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	dc03      	bgt.n	8003e8e <lis2duxs12_mode_set+0xce>
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d005      	beq.n	8003e96 <lis2duxs12_mode_set+0xd6>
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d009      	beq.n	8003ea2 <lis2duxs12_mode_set+0xe2>
      {
        default:
        case LIS2DUXS12_ODR_div_2:
          /* value not allowed */
          ret = -1;
 8003e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e92:	617b      	str	r3, [r7, #20]
          break;
 8003e94:	e010      	b.n	8003eb8 <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_4:
          ctrl5.bw = 0x1;
 8003e96:	7b3b      	ldrb	r3, [r7, #12]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f362 0383 	bfi	r3, r2, #2, #2
 8003e9e:	733b      	strb	r3, [r7, #12]
          break;
 8003ea0:	e00a      	b.n	8003eb8 <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_8:
          ctrl5.bw = 0x2;
 8003ea2:	7b3b      	ldrb	r3, [r7, #12]
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	f362 0383 	bfi	r3, r2, #2, #2
 8003eaa:	733b      	strb	r3, [r7, #12]
          break;
 8003eac:	e004      	b.n	8003eb8 <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 8003eae:	7b3b      	ldrb	r3, [r7, #12]
 8003eb0:	f043 030c 	orr.w	r3, r3, #12
 8003eb4:	733b      	strb	r3, [r7, #12]
          break;
 8003eb6:	bf00      	nop
      }
      break;
 8003eb8:	e009      	b.n	8003ece <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_100Hz_HP:
    case LIS2DUXS12_200Hz_HP:
    case LIS2DUXS12_400Hz_HP:
    case LIS2DUXS12_800Hz_HP:
    default:
      ctrl5.bw = (uint8_t)val->bw;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	789b      	ldrb	r3, [r3, #2]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	7b3b      	ldrb	r3, [r7, #12]
 8003ec6:	f362 0383 	bfi	r3, r2, #2, #2
 8003eca:	733b      	strb	r3, [r7, #12]
      break;
 8003ecc:	bf00      	nop
  }

  if (ret != 0)
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <lis2duxs12_mode_set+0x118>
  {
    return ret;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	e02b      	b.n	8003f30 <lis2duxs12_mode_set+0x170>
  }

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 8003ed8:	f107 0210 	add.w	r2, r7, #16
 8003edc:	2301      	movs	r3, #1
 8003ede:	2112      	movs	r1, #18
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7ff fd73 	bl	80039cc <lis2duxs12_read_reg>
 8003ee6:	6178      	str	r0, [r7, #20]

  ctrl3.hp_en = (((uint8_t)val->odr & 0x30U) == 0x10U) ? 1U : 0U;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ef0:	2b10      	cmp	r3, #16
 8003ef2:	d101      	bne.n	8003ef8 <lis2duxs12_mode_set+0x138>
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	e000      	b.n	8003efa <lis2duxs12_mode_set+0x13a>
 8003ef8:	2200      	movs	r2, #0
 8003efa:	7c3b      	ldrb	r3, [r7, #16]
 8003efc:	f362 0382 	bfi	r3, r2, #2, #1
 8003f00:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d112      	bne.n	8003f2e <lis2duxs12_mode_set+0x16e>
  {
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 8003f08:	f107 020c 	add.w	r2, r7, #12
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	2114      	movs	r1, #20
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff fd78 	bl	8003a06 <lis2duxs12_write_reg>
 8003f16:	6178      	str	r0, [r7, #20]
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 8003f18:	f107 0210 	add.w	r2, r7, #16
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	2112      	movs	r1, #18
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff fd70 	bl	8003a06 <lis2duxs12_write_reg>
 8003f26:	4602      	mov	r2, r0
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003f2e:	697b      	ldr	r3, [r7, #20]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <lis2duxs12_mode_get>:
  * @param  val   get the sensor FS and ODR.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mode_get(const stmdev_ctx_t *ctx, lis2duxs12_md_t *val)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  lis2duxs12_ctrl3_t ctrl3;
  lis2duxs12_ctrl5_t ctrl5;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 8003f42:	f107 020c 	add.w	r2, r7, #12
 8003f46:	2301      	movs	r3, #1
 8003f48:	2114      	movs	r1, #20
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff fd3e 	bl	80039cc <lis2duxs12_read_reg>
 8003f50:	6178      	str	r0, [r7, #20]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 8003f52:	f107 0210 	add.w	r2, r7, #16
 8003f56:	2301      	movs	r3, #1
 8003f58:	2112      	movs	r1, #18
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff fd36 	bl	80039cc <lis2duxs12_read_reg>
 8003f60:	4602      	mov	r2, r0
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	4413      	add	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]

  switch (ctrl5.odr)
 8003f68:	7b3b      	ldrb	r3, [r7, #12]
 8003f6a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b0f      	cmp	r3, #15
 8003f72:	f200 809b 	bhi.w	80040ac <lis2duxs12_mode_get+0x174>
 8003f76:	a201      	add	r2, pc, #4	@ (adr r2, 8003f7c <lis2duxs12_mode_get+0x44>)
 8003f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7c:	08003fbd 	.word	0x08003fbd
 8003f80:	08003fc5 	.word	0x08003fc5
 8003f84:	08003fcd 	.word	0x08003fcd
 8003f88:	08003fd5 	.word	0x08003fd5
 8003f8c:	08003fdd 	.word	0x08003fdd
 8003f90:	08003ff5 	.word	0x08003ff5
 8003f94:	0800400d 	.word	0x0800400d
 8003f98:	08004025 	.word	0x08004025
 8003f9c:	0800403d 	.word	0x0800403d
 8003fa0:	08004055 	.word	0x08004055
 8003fa4:	0800406d 	.word	0x0800406d
 8003fa8:	08004085 	.word	0x08004085
 8003fac:	080040ad 	.word	0x080040ad
 8003fb0:	080040ad 	.word	0x080040ad
 8003fb4:	0800409d 	.word	0x0800409d
 8003fb8:	080040a5 	.word	0x080040a5
  {
    case 0x00:
      val->odr = LIS2DUXS12_OFF;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	701a      	strb	r2, [r3, #0]
      break;
 8003fc2:	e077      	b.n	80040b4 <lis2duxs12_mode_get+0x17c>
    case 0x01:
      val->odr = LIS2DUXS12_1Hz6_ULP;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	701a      	strb	r2, [r3, #0]
      break;
 8003fca:	e073      	b.n	80040b4 <lis2duxs12_mode_get+0x17c>
    case 0x02:
      val->odr = LIS2DUXS12_3Hz_ULP;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	701a      	strb	r2, [r3, #0]
      break;
 8003fd2:	e06f      	b.n	80040b4 <lis2duxs12_mode_get+0x17c>
    case 0x03:
      val->odr = LIS2DUXS12_25Hz_ULP;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2203      	movs	r2, #3
 8003fd8:	701a      	strb	r2, [r3, #0]
      break;
 8003fda:	e06b      	b.n	80040b4 <lis2duxs12_mode_get+0x17c>
    case 0x04:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_6Hz_HP : LIS2DUXS12_6Hz_LP;
 8003fdc:	7c3b      	ldrb	r3, [r7, #16]
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <lis2duxs12_mode_get+0xb4>
 8003fe8:	2214      	movs	r2, #20
 8003fea:	e000      	b.n	8003fee <lis2duxs12_mode_get+0xb6>
 8003fec:	2204      	movs	r2, #4
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	701a      	strb	r2, [r3, #0]
      break;
 8003ff2:	e05f      	b.n	80040b4 <lis2duxs12_mode_get+0x17c>
    case 0x05:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_12Hz5_HP : LIS2DUXS12_12Hz5_LP;
 8003ff4:	7c3b      	ldrb	r3, [r7, #16]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <lis2duxs12_mode_get+0xcc>
 8004000:	2215      	movs	r2, #21
 8004002:	e000      	b.n	8004006 <lis2duxs12_mode_get+0xce>
 8004004:	2205      	movs	r2, #5
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	701a      	strb	r2, [r3, #0]
      break;
 800400a:	e053      	b.n	80040b4 <lis2duxs12_mode_get+0x17c>
    case 0x06:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_25Hz_HP : LIS2DUXS12_25Hz_LP;
 800400c:	7c3b      	ldrb	r3, [r7, #16]
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <lis2duxs12_mode_get+0xe4>
 8004018:	2216      	movs	r2, #22
 800401a:	e000      	b.n	800401e <lis2duxs12_mode_get+0xe6>
 800401c:	2206      	movs	r2, #6
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	701a      	strb	r2, [r3, #0]
      break;
 8004022:	e047      	b.n	80040b4 <lis2duxs12_mode_get+0x17c>
    case 0x07:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_50Hz_HP : LIS2DUXS12_50Hz_LP;
 8004024:	7c3b      	ldrb	r3, [r7, #16]
 8004026:	f003 0304 	and.w	r3, r3, #4
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <lis2duxs12_mode_get+0xfc>
 8004030:	2217      	movs	r2, #23
 8004032:	e000      	b.n	8004036 <lis2duxs12_mode_get+0xfe>
 8004034:	2207      	movs	r2, #7
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	701a      	strb	r2, [r3, #0]
      break;
 800403a:	e03b      	b.n	80040b4 <lis2duxs12_mode_get+0x17c>
    case 0x08:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_100Hz_HP : LIS2DUXS12_100Hz_LP;
 800403c:	7c3b      	ldrb	r3, [r7, #16]
 800403e:	f003 0304 	and.w	r3, r3, #4
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <lis2duxs12_mode_get+0x114>
 8004048:	2218      	movs	r2, #24
 800404a:	e000      	b.n	800404e <lis2duxs12_mode_get+0x116>
 800404c:	2208      	movs	r2, #8
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	701a      	strb	r2, [r3, #0]
      break;
 8004052:	e02f      	b.n	80040b4 <lis2duxs12_mode_get+0x17c>
    case 0x09:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_200Hz_HP : LIS2DUXS12_200Hz_LP;
 8004054:	7c3b      	ldrb	r3, [r7, #16]
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <lis2duxs12_mode_get+0x12c>
 8004060:	2219      	movs	r2, #25
 8004062:	e000      	b.n	8004066 <lis2duxs12_mode_get+0x12e>
 8004064:	2209      	movs	r2, #9
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	701a      	strb	r2, [r3, #0]
      break;
 800406a:	e023      	b.n	80040b4 <lis2duxs12_mode_get+0x17c>
    case 0x0A:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_400Hz_HP : LIS2DUXS12_400Hz_LP;
 800406c:	7c3b      	ldrb	r3, [r7, #16]
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <lis2duxs12_mode_get+0x144>
 8004078:	221a      	movs	r2, #26
 800407a:	e000      	b.n	800407e <lis2duxs12_mode_get+0x146>
 800407c:	220a      	movs	r2, #10
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	701a      	strb	r2, [r3, #0]
      break;
 8004082:	e017      	b.n	80040b4 <lis2duxs12_mode_get+0x17c>
    case 0x0B:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_800Hz_HP : LIS2DUXS12_800Hz_LP;
 8004084:	7c3b      	ldrb	r3, [r7, #16]
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <lis2duxs12_mode_get+0x15c>
 8004090:	221b      	movs	r2, #27
 8004092:	e000      	b.n	8004096 <lis2duxs12_mode_get+0x15e>
 8004094:	220b      	movs	r2, #11
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	701a      	strb	r2, [r3, #0]
      break;
 800409a:	e00b      	b.n	80040b4 <lis2duxs12_mode_get+0x17c>
    case 0xe:
      val->odr = LIS2DUXS12_TRIG_PIN;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	222e      	movs	r2, #46	@ 0x2e
 80040a0:	701a      	strb	r2, [r3, #0]
      break;
 80040a2:	e007      	b.n	80040b4 <lis2duxs12_mode_get+0x17c>
    case 0xf:
      val->odr = LIS2DUXS12_TRIG_SW;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	222f      	movs	r2, #47	@ 0x2f
 80040a8:	701a      	strb	r2, [r3, #0]
      break;
 80040aa:	e003      	b.n	80040b4 <lis2duxs12_mode_get+0x17c>
    default:
      val->odr = LIS2DUXS12_OFF;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	2200      	movs	r2, #0
 80040b0:	701a      	strb	r2, [r3, #0]
      break;
 80040b2:	bf00      	nop
  }

  switch (ctrl5.fs)
 80040b4:	7b3b      	ldrb	r3, [r7, #12]
 80040b6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b03      	cmp	r3, #3
 80040be:	d81b      	bhi.n	80040f8 <lis2duxs12_mode_get+0x1c0>
 80040c0:	a201      	add	r2, pc, #4	@ (adr r2, 80040c8 <lis2duxs12_mode_get+0x190>)
 80040c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c6:	bf00      	nop
 80040c8:	080040d9 	.word	0x080040d9
 80040cc:	080040e1 	.word	0x080040e1
 80040d0:	080040e9 	.word	0x080040e9
 80040d4:	080040f1 	.word	0x080040f1
  {
    case 0:
      val->fs = LIS2DUXS12_2g;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	2200      	movs	r2, #0
 80040dc:	705a      	strb	r2, [r3, #1]
      break;
 80040de:	e00f      	b.n	8004100 <lis2duxs12_mode_get+0x1c8>
    case 1:
      val->fs = LIS2DUXS12_4g;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2201      	movs	r2, #1
 80040e4:	705a      	strb	r2, [r3, #1]
      break;
 80040e6:	e00b      	b.n	8004100 <lis2duxs12_mode_get+0x1c8>
    case 2:
      val->fs = LIS2DUXS12_8g;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2202      	movs	r2, #2
 80040ec:	705a      	strb	r2, [r3, #1]
      break;
 80040ee:	e007      	b.n	8004100 <lis2duxs12_mode_get+0x1c8>
    case 3:
      val->fs = LIS2DUXS12_16g;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2203      	movs	r2, #3
 80040f4:	705a      	strb	r2, [r3, #1]
      break;
 80040f6:	e003      	b.n	8004100 <lis2duxs12_mode_get+0x1c8>
    default:
      val->fs = LIS2DUXS12_2g;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2200      	movs	r2, #0
 80040fc:	705a      	strb	r2, [r3, #1]
      break;
 80040fe:	bf00      	nop
  }

  switch (ctrl5.bw)
 8004100:	7b3b      	ldrb	r3, [r7, #12]
 8004102:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b03      	cmp	r3, #3
 800410a:	d81b      	bhi.n	8004144 <lis2duxs12_mode_get+0x20c>
 800410c:	a201      	add	r2, pc, #4	@ (adr r2, 8004114 <lis2duxs12_mode_get+0x1dc>)
 800410e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004112:	bf00      	nop
 8004114:	08004125 	.word	0x08004125
 8004118:	0800412d 	.word	0x0800412d
 800411c:	08004135 	.word	0x08004135
 8004120:	0800413d 	.word	0x0800413d
  {
    case 0:
      val->bw = LIS2DUXS12_ODR_div_2;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2200      	movs	r2, #0
 8004128:	709a      	strb	r2, [r3, #2]
      break;
 800412a:	e00f      	b.n	800414c <lis2duxs12_mode_get+0x214>
    case 1:
      val->bw = LIS2DUXS12_ODR_div_4;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2201      	movs	r2, #1
 8004130:	709a      	strb	r2, [r3, #2]
      break;
 8004132:	e00b      	b.n	800414c <lis2duxs12_mode_get+0x214>
    case 2:
      val->bw = LIS2DUXS12_ODR_div_8;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	2202      	movs	r2, #2
 8004138:	709a      	strb	r2, [r3, #2]
      break;
 800413a:	e007      	b.n	800414c <lis2duxs12_mode_get+0x214>
    case 3:
      val->bw = LIS2DUXS12_ODR_div_16;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2203      	movs	r2, #3
 8004140:	709a      	strb	r2, [r3, #2]
      break;
 8004142:	e003      	b.n	800414c <lis2duxs12_mode_get+0x214>
    default:
      val->bw = LIS2DUXS12_ODR_div_2;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2200      	movs	r2, #0
 8004148:	709a      	strb	r2, [r3, #2]
      break;
 800414a:	bf00      	nop
  }

  return ret;
 800414c:	697b      	ldr	r3, [r7, #20]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop

08004158 <lis2duxs12_exit_deep_power_down>:
  * @param  val      Enter soft power down in SPI case
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_exit_deep_power_down(const stmdev_ctx_t *ctx)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  lis2duxs12_en_device_config_t en_device_config = {0};
 8004160:	2300      	movs	r3, #0
 8004162:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  en_device_config.soft_pd = PROPERTY_ENABLE;
 8004164:	7a3b      	ldrb	r3, [r7, #8]
 8004166:	f043 0301 	orr.w	r3, r3, #1
 800416a:	723b      	strb	r3, [r7, #8]
  ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_EN_DEVICE_CONFIG, (uint8_t *)&en_device_config, 1);
 800416c:	f107 0208 	add.w	r2, r7, #8
 8004170:	2301      	movs	r3, #1
 8004172:	213e      	movs	r1, #62	@ 0x3e
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7ff fc46 	bl	8003a06 <lis2duxs12_write_reg>
 800417a:	60f8      	str	r0, [r7, #12]

  if (ctx->mdelay != NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <lis2duxs12_exit_deep_power_down+0x34>
  {
    ctx->mdelay(25); /* See AN5812 - paragraphs 3.1.1.1 and 3.1.1.2 */
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	2019      	movs	r0, #25
 800418a:	4798      	blx	r3
  }

  return ret;
 800418c:	68fb      	ldr	r3, [r7, #12]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <lis2duxs12_xl_data_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_xl_data_get(const stmdev_ctx_t *ctx, const lis2duxs12_md_t *md,
                               lis2duxs12_xl_data_t *data)
{
 8004198:	b590      	push	{r4, r7, lr}
 800419a:	b089      	sub	sp, #36	@ 0x24
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  uint8_t buff[6];
  int32_t ret;
  uint8_t i;
  uint8_t j;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_OUT_X_L, buff, 6);
 80041a4:	f107 0210 	add.w	r2, r7, #16
 80041a8:	2306      	movs	r3, #6
 80041aa:	2128      	movs	r1, #40	@ 0x28
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f7ff fc0d 	bl	80039cc <lis2duxs12_read_reg>
 80041b2:	61b8      	str	r0, [r7, #24]

  /* acceleration conversion */
  j = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	77bb      	strb	r3, [r7, #30]
  for (i = 0U; i < 3U; i++)
 80041b8:	2300      	movs	r3, #0
 80041ba:	77fb      	strb	r3, [r7, #31]
 80041bc:	e08f      	b.n	80042de <lis2duxs12_xl_data_get+0x146>
  {
    data->raw[i] = (int16_t)buff[j + 1U];
 80041be:	7fbb      	ldrb	r3, [r7, #30]
 80041c0:	3301      	adds	r3, #1
 80041c2:	3320      	adds	r3, #32
 80041c4:	443b      	add	r3, r7
 80041c6:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80041ca:	7ffb      	ldrb	r3, [r7, #31]
 80041cc:	b211      	sxth	r1, r2
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	3304      	adds	r3, #4
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	4413      	add	r3, r2
 80041d6:	460a      	mov	r2, r1
 80041d8:	809a      	strh	r2, [r3, #4]
    data->raw[i] = (data->raw[i] * 256) + (int16_t) buff[j];
 80041da:	7ffb      	ldrb	r3, [r7, #31]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	3304      	adds	r3, #4
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	4413      	add	r3, r2
 80041e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	021b      	lsls	r3, r3, #8
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	7fba      	ldrb	r2, [r7, #30]
 80041f0:	3220      	adds	r2, #32
 80041f2:	443a      	add	r2, r7
 80041f4:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80041f8:	4413      	add	r3, r2
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	7ffb      	ldrb	r3, [r7, #31]
 80041fe:	b211      	sxth	r1, r2
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	3304      	adds	r3, #4
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	4413      	add	r3, r2
 8004208:	460a      	mov	r2, r1
 800420a:	809a      	strh	r2, [r3, #4]
    j += 2U;
 800420c:	7fbb      	ldrb	r3, [r7, #30]
 800420e:	3302      	adds	r3, #2
 8004210:	77bb      	strb	r3, [r7, #30]
    switch (md->fs)
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	785b      	ldrb	r3, [r3, #1]
 8004216:	2b03      	cmp	r3, #3
 8004218:	d856      	bhi.n	80042c8 <lis2duxs12_xl_data_get+0x130>
 800421a:	a201      	add	r2, pc, #4	@ (adr r2, 8004220 <lis2duxs12_xl_data_get+0x88>)
 800421c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004220:	08004231 	.word	0x08004231
 8004224:	08004257 	.word	0x08004257
 8004228:	0800427d 	.word	0x0800427d
 800422c:	080042a3 	.word	0x080042a3
    {
      case LIS2DUXS12_2g:
        data->mg[i] = lis2duxs12_from_fs2g_to_mg(data->raw[i]);
 8004230:	7ffb      	ldrb	r3, [r7, #31]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	3304      	adds	r3, #4
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	4413      	add	r3, r2
 800423a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800423e:	7ffc      	ldrb	r4, [r7, #31]
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff fbfd 	bl	8003a40 <lis2duxs12_from_fs2g_to_mg>
 8004246:	eef0 7a40 	vmov.f32	s15, s0
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	00a3      	lsls	r3, r4, #2
 800424e:	4413      	add	r3, r2
 8004250:	edc3 7a00 	vstr	s15, [r3]
        break;
 8004254:	e040      	b.n	80042d8 <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_4g:
        data->mg[i] = lis2duxs12_from_fs4g_to_mg(data->raw[i]);
 8004256:	7ffb      	ldrb	r3, [r7, #31]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	3304      	adds	r3, #4
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	4413      	add	r3, r2
 8004260:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004264:	7ffc      	ldrb	r4, [r7, #31]
 8004266:	4618      	mov	r0, r3
 8004268:	f7ff fc02 	bl	8003a70 <lis2duxs12_from_fs4g_to_mg>
 800426c:	eef0 7a40 	vmov.f32	s15, s0
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	00a3      	lsls	r3, r4, #2
 8004274:	4413      	add	r3, r2
 8004276:	edc3 7a00 	vstr	s15, [r3]
        break;
 800427a:	e02d      	b.n	80042d8 <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_8g:
        data->mg[i] = lis2duxs12_from_fs8g_to_mg(data->raw[i]);
 800427c:	7ffb      	ldrb	r3, [r7, #31]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	3304      	adds	r3, #4
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	4413      	add	r3, r2
 8004286:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800428a:	7ffc      	ldrb	r4, [r7, #31]
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff fc07 	bl	8003aa0 <lis2duxs12_from_fs8g_to_mg>
 8004292:	eef0 7a40 	vmov.f32	s15, s0
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	00a3      	lsls	r3, r4, #2
 800429a:	4413      	add	r3, r2
 800429c:	edc3 7a00 	vstr	s15, [r3]
        break;
 80042a0:	e01a      	b.n	80042d8 <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_16g:
        data->mg[i] = lis2duxs12_from_fs16g_to_mg(data->raw[i]);
 80042a2:	7ffb      	ldrb	r3, [r7, #31]
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	3304      	adds	r3, #4
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	4413      	add	r3, r2
 80042ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80042b0:	7ffc      	ldrb	r4, [r7, #31]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff fc0c 	bl	8003ad0 <lis2duxs12_from_fs16g_to_mg>
 80042b8:	eef0 7a40 	vmov.f32	s15, s0
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	00a3      	lsls	r3, r4, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	edc3 7a00 	vstr	s15, [r3]
        break;
 80042c6:	e007      	b.n	80042d8 <lis2duxs12_xl_data_get+0x140>
      default:
        data->mg[i] = 0.0f;
 80042c8:	7ffb      	ldrb	r3, [r7, #31]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4413      	add	r3, r2
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]
        break;
 80042d6:	bf00      	nop
  for (i = 0U; i < 3U; i++)
 80042d8:	7ffb      	ldrb	r3, [r7, #31]
 80042da:	3301      	adds	r3, #1
 80042dc:	77fb      	strb	r3, [r7, #31]
 80042de:	7ffb      	ldrb	r3, [r7, #31]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	f67f af6c 	bls.w	80041be <lis2duxs12_xl_data_get+0x26>
    }
  }

  return ret;
 80042e6:	69bb      	ldr	r3, [r7, #24]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3724      	adds	r7, #36	@ 0x24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd90      	pop	{r4, r7, pc}

080042f0 <lis2duxs12_i3c_configure_set>:
  * @param  val   configuration params
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_i3c_configure_set(const stmdev_ctx_t *ctx, const lis2duxs12_i3c_cfg_t *val)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  lis2duxs12_i3c_if_ctrl_t i3c_cfg;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 80042fa:	f107 0208 	add.w	r2, r7, #8
 80042fe:	2301      	movs	r3, #1
 8004300:	2133      	movs	r1, #51	@ 0x33
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff fb62 	bl	80039cc <lis2duxs12_read_reg>
 8004308:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d122      	bne.n	8004356 <lis2duxs12_i3c_configure_set+0x66>
  {
    i3c_cfg.bus_act_sel = (uint8_t)val->bus_act_sel;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	f003 0303 	and.w	r3, r3, #3
 8004318:	b2da      	uxtb	r2, r3
 800431a:	7a3b      	ldrb	r3, [r7, #8]
 800431c:	f362 0301 	bfi	r3, r2, #0, #2
 8004320:	723b      	strb	r3, [r7, #8]
    i3c_cfg.dis_drstdaa = val->drstdaa_en;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	785b      	ldrb	r3, [r3, #1]
 8004326:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800432a:	b2da      	uxtb	r2, r3
 800432c:	7a3b      	ldrb	r3, [r7, #8]
 800432e:	f362 1386 	bfi	r3, r2, #6, #1
 8004332:	723b      	strb	r3, [r7, #8]
    i3c_cfg.asf_on = val->asf_on;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	785b      	ldrb	r3, [r3, #1]
 8004338:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800433c:	b2da      	uxtb	r2, r3
 800433e:	7a3b      	ldrb	r3, [r7, #8]
 8004340:	f362 1345 	bfi	r3, r2, #5, #1
 8004344:	723b      	strb	r3, [r7, #8]
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 8004346:	f107 0208 	add.w	r2, r7, #8
 800434a:	2301      	movs	r3, #1
 800434c:	2133      	movs	r1, #51	@ 0x33
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7ff fb59 	bl	8003a06 <lis2duxs12_write_reg>
 8004354:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004356:	68fb      	ldr	r3, [r7, #12]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <lis2duxs12_i3c_configure_get>:
  * @param  ctx   communication interface handler.(ptr)
  * @param  val   configuration params
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */int32_t lis2duxs12_i3c_configure_get(const stmdev_ctx_t *ctx, lis2duxs12_i3c_cfg_t *val)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  lis2duxs12_i3c_if_ctrl_t i3c_cfg;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 800436a:	f107 0208 	add.w	r2, r7, #8
 800436e:	2301      	movs	r3, #1
 8004370:	2133      	movs	r1, #51	@ 0x33
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7ff fb2a 	bl	80039cc <lis2duxs12_read_reg>
 8004378:	60f8      	str	r0, [r7, #12]

  val->drstdaa_en = i3c_cfg.dis_drstdaa;
 800437a:	7a3b      	ldrb	r3, [r7, #8]
 800437c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004380:	b2d9      	uxtb	r1, r3
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	7853      	ldrb	r3, [r2, #1]
 8004386:	f361 0341 	bfi	r3, r1, #1, #1
 800438a:	7053      	strb	r3, [r2, #1]
  val->asf_on = i3c_cfg.asf_on;
 800438c:	7a3b      	ldrb	r3, [r7, #8]
 800438e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004392:	b2d9      	uxtb	r1, r3
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	7853      	ldrb	r3, [r2, #1]
 8004398:	f361 0300 	bfi	r3, r1, #0, #1
 800439c:	7053      	strb	r3, [r2, #1]

  switch (val->bus_act_sel)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d00e      	beq.n	80043c4 <lis2duxs12_i3c_configure_get+0x64>
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	dc10      	bgt.n	80043cc <lis2duxs12_i3c_configure_get+0x6c>
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <lis2duxs12_i3c_configure_get+0x54>
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d004      	beq.n	80043bc <lis2duxs12_i3c_configure_get+0x5c>
 80043b2:	e00b      	b.n	80043cc <lis2duxs12_i3c_configure_get+0x6c>
  {
    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_20US:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_20US;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2200      	movs	r2, #0
 80043b8:	701a      	strb	r2, [r3, #0]
      break;
 80043ba:	e00b      	b.n	80043d4 <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_50US:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_50US;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2201      	movs	r2, #1
 80043c0:	701a      	strb	r2, [r3, #0]
      break;
 80043c2:	e007      	b.n	80043d4 <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_1MS:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_1MS;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2202      	movs	r2, #2
 80043c8:	701a      	strb	r2, [r3, #0]
      break;
 80043ca:	e003      	b.n	80043d4 <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_25MS:
    default:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_25MS;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	2203      	movs	r2, #3
 80043d0:	701a      	strb	r2, [r3, #0]
      break;
 80043d2:	bf00      	nop
  }

  return ret;
 80043d4:	68fb      	ldr	r3, [r7, #12]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <lis2duxs12_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK, SENSOR_HUB_MEM_BANK, STRED_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mem_bank_set(const stmdev_ctx_t *ctx, lis2duxs12_mem_bank_t val)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b084      	sub	sp, #16
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	460b      	mov	r3, r1
 80043e8:	70fb      	strb	r3, [r7, #3]
  lis2duxs12_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80043ea:	f107 0208 	add.w	r2, r7, #8
 80043ee:	2301      	movs	r3, #1
 80043f0:	213f      	movs	r1, #63	@ 0x3f
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7ff faea 	bl	80039cc <lis2duxs12_read_reg>
 80043f8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10f      	bne.n	8004420 <lis2duxs12_mem_bank_set+0x42>
  {
    func_cfg_access.emb_func_reg_access = ((uint8_t)val & 0x1U);
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	b2da      	uxtb	r2, r3
 8004408:	7a3b      	ldrb	r3, [r7, #8]
 800440a:	f362 13c7 	bfi	r3, r2, #7, #1
 800440e:	723b      	strb	r3, [r7, #8]
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8004410:	f107 0208 	add.w	r2, r7, #8
 8004414:	2301      	movs	r3, #1
 8004416:	213f      	movs	r1, #63	@ 0x3f
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7ff faf4 	bl	8003a06 <lis2duxs12_write_reg>
 800441e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004420:	68fb      	ldr	r3, [r7, #12]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <lis2duxs12_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_fifo_mode_set(const stmdev_ctx_t *ctx, lis2duxs12_fifo_mode_t val)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b08a      	sub	sp, #40	@ 0x28
 800442e:	af00      	add	r7, sp, #0
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	1d3b      	adds	r3, r7, #4
 8004434:	e883 0006 	stmia.w	r3, {r1, r2}
  lis2duxs12_fifo_ctrl_t fifo_ctrl;
  lis2duxs12_fifo_wtm_t fifo_wtm;
  lis2duxs12_fifo_batch_dec_t fifo_batch;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8004438:	f107 0220 	add.w	r2, r7, #32
 800443c:	2301      	movs	r3, #1
 800443e:	2113      	movs	r1, #19
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f7ff fac3 	bl	80039cc <lis2duxs12_read_reg>
 8004446:	6278      	str	r0, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_CTRL, (uint8_t *)&fifo_ctrl, 1);
 8004448:	f107 021c 	add.w	r2, r7, #28
 800444c:	2301      	movs	r3, #1
 800444e:	2115      	movs	r1, #21
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f7ff fabb 	bl	80039cc <lis2duxs12_read_reg>
 8004456:	4602      	mov	r2, r0
 8004458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445a:	4413      	add	r3, r2
 800445c:	627b      	str	r3, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_BATCH_DEC, (uint8_t *)&fifo_batch, 1);
 800445e:	f107 0214 	add.w	r2, r7, #20
 8004462:	2301      	movs	r3, #1
 8004464:	2147      	movs	r1, #71	@ 0x47
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f7ff fab0 	bl	80039cc <lis2duxs12_read_reg>
 800446c:	4602      	mov	r2, r0
 800446e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004470:	4413      	add	r3, r2
 8004472:	627b      	str	r3, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_WTM, (uint8_t *)&fifo_wtm, 1);
 8004474:	f107 0218 	add.w	r2, r7, #24
 8004478:	2301      	movs	r3, #1
 800447a:	2116      	movs	r1, #22
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f7ff faa5 	bl	80039cc <lis2duxs12_read_reg>
 8004482:	4602      	mov	r2, r0
 8004484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004486:	4413      	add	r3, r2
 8004488:	627b      	str	r3, [r7, #36]	@ 0x24

  if (ret == 0)
 800448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448c:	2b00      	cmp	r3, #0
 800448e:	f040 808a 	bne.w	80045a6 <lis2duxs12_fifo_mode_set+0x17c>
  {
    /* set FIFO mode */
    if (val.operation != LIS2DUXS12_FIFO_OFF)
 8004492:	793b      	ldrb	r3, [r7, #4]
 8004494:	2b08      	cmp	r3, #8
 8004496:	d00e      	beq.n	80044b6 <lis2duxs12_fifo_mode_set+0x8c>
    {
      ctrl4.fifo_en = 1;
 8004498:	f897 3020 	ldrb.w	r3, [r7, #32]
 800449c:	f043 0308 	orr.w	r3, r3, #8
 80044a0:	f887 3020 	strb.w	r3, [r7, #32]
      fifo_ctrl.fifo_mode = ((uint8_t)val.operation & 0x7U);
 80044a4:	793b      	ldrb	r3, [r7, #4]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	7f3b      	ldrb	r3, [r7, #28]
 80044ae:	f362 0302 	bfi	r3, r2, #0, #3
 80044b2:	773b      	strb	r3, [r7, #28]
 80044b4:	e005      	b.n	80044c2 <lis2duxs12_fifo_mode_set+0x98>
    }
    else
    {
      ctrl4.fifo_en = 0;
 80044b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80044ba:	f023 0308 	bic.w	r3, r3, #8
 80044be:	f887 3020 	strb.w	r3, [r7, #32]
    }

    /* set fifo depth (1X/2X) */
    fifo_ctrl.fifo_depth = (uint8_t)val.store;
 80044c2:	797b      	ldrb	r3, [r7, #5]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	7f3b      	ldrb	r3, [r7, #28]
 80044cc:	f362 1386 	bfi	r3, r2, #6, #1
 80044d0:	773b      	strb	r3, [r7, #28]

    /* Set xl_only_fifo */
    fifo_wtm.xl_only_fifo = val.xl_only;
 80044d2:	79bb      	ldrb	r3, [r7, #6]
 80044d4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	7e3b      	ldrb	r3, [r7, #24]
 80044dc:	f362 13c7 	bfi	r3, r2, #7, #1
 80044e0:	763b      	strb	r3, [r7, #24]

    /* set batching info */
    if (val.batch.dec_ts != LIS2DUXS12_DEC_TS_OFF)
 80044e2:	7a3b      	ldrb	r3, [r7, #8]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00f      	beq.n	8004508 <lis2duxs12_fifo_mode_set+0xde>
    {
      fifo_batch.dec_ts_batch = (uint8_t)val.batch.dec_ts;
 80044e8:	7a3b      	ldrb	r3, [r7, #8]
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	7d3b      	ldrb	r3, [r7, #20]
 80044f2:	f362 03c4 	bfi	r3, r2, #3, #2
 80044f6:	753b      	strb	r3, [r7, #20]
      fifo_batch.bdr_xl = (uint8_t)val.batch.bdr_xl;
 80044f8:	7a7b      	ldrb	r3, [r7, #9]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	7d3b      	ldrb	r3, [r7, #20]
 8004502:	f362 0302 	bfi	r3, r2, #0, #3
 8004506:	753b      	strb	r3, [r7, #20]
    }

    fifo_ctrl.cfg_chg_en = val.cfg_change_in_fifo;
 8004508:	79fb      	ldrb	r3, [r7, #7]
 800450a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800450e:	b2da      	uxtb	r2, r3
 8004510:	7f3b      	ldrb	r3, [r7, #28]
 8004512:	f362 13c7 	bfi	r3, r2, #7, #1
 8004516:	773b      	strb	r3, [r7, #28]

    /* set watermark */
    if (val.watermark > 0U)
 8004518:	79bb      	ldrb	r3, [r7, #6]
 800451a:	f023 0301 	bic.w	r3, r3, #1
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d014      	beq.n	800454e <lis2duxs12_fifo_mode_set+0x124>
    {
      fifo_ctrl.stop_on_fth = (val.fifo_event == LIS2DUXS12_FIFO_EV_WTM) ? 1 : 0;
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	bf0c      	ite	eq
 8004530:	2301      	moveq	r3, #1
 8004532:	2300      	movne	r3, #0
 8004534:	b2da      	uxtb	r2, r3
 8004536:	7f3b      	ldrb	r3, [r7, #28]
 8004538:	f362 03c3 	bfi	r3, r2, #3, #1
 800453c:	773b      	strb	r3, [r7, #28]
      fifo_wtm.fth = val.watermark;
 800453e:	79bb      	ldrb	r3, [r7, #6]
 8004540:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8004544:	b2da      	uxtb	r2, r3
 8004546:	7e3b      	ldrb	r3, [r7, #24]
 8004548:	f362 0306 	bfi	r3, r2, #0, #7
 800454c:	763b      	strb	r3, [r7, #24]
    }

    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_BATCH_DEC, (uint8_t *)&fifo_batch, 1);
 800454e:	f107 0214 	add.w	r2, r7, #20
 8004552:	2301      	movs	r3, #1
 8004554:	2147      	movs	r1, #71	@ 0x47
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f7ff fa55 	bl	8003a06 <lis2duxs12_write_reg>
 800455c:	4602      	mov	r2, r0
 800455e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004560:	4413      	add	r3, r2
 8004562:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_WTM, (uint8_t *)&fifo_wtm, 1);
 8004564:	f107 0218 	add.w	r2, r7, #24
 8004568:	2301      	movs	r3, #1
 800456a:	2116      	movs	r1, #22
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f7ff fa4a 	bl	8003a06 <lis2duxs12_write_reg>
 8004572:	4602      	mov	r2, r0
 8004574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004576:	4413      	add	r3, r2
 8004578:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_CTRL, (uint8_t *)&fifo_ctrl, 1);
 800457a:	f107 021c 	add.w	r2, r7, #28
 800457e:	2301      	movs	r3, #1
 8004580:	2115      	movs	r1, #21
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f7ff fa3f 	bl	8003a06 <lis2duxs12_write_reg>
 8004588:	4602      	mov	r2, r0
 800458a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458c:	4413      	add	r3, r2
 800458e:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8004590:	f107 0220 	add.w	r2, r7, #32
 8004594:	2301      	movs	r3, #1
 8004596:	2113      	movs	r1, #19
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f7ff fa34 	bl	8003a06 <lis2duxs12_write_reg>
 800459e:	4602      	mov	r2, r0
 80045a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a2:	4413      	add	r3, r2
 80045a4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  return ret;
 80045a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3728      	adds	r7, #40	@ 0x28
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d103      	bne.n	80045cc <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 80045c4:	f04f 33ff 	mov.w	r3, #4294967295
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	e067      	b.n	800469c <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	7b1a      	ldrb	r2, [r3, #12]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	695a      	ldr	r2, [r3, #20]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	699a      	ldr	r2, [r3, #24]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a28      	ldr	r2, [pc, #160]	@ (80046a8 <LIS2MDL_RegisterBusIO+0xf8>)
 8004608:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a27      	ldr	r2, [pc, #156]	@ (80046ac <LIS2MDL_RegisterBusIO+0xfc>)
 800460e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	69da      	ldr	r2, [r3, #28]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d103      	bne.n	800462e <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8004626:	f04f 33ff 	mov.w	r3, #4294967295
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	e036      	b.n	800469c <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4798      	blx	r3
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 800463a:	f04f 33ff 	mov.w	r3, #4294967295
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	e02c      	b.n	800469c <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d028      	beq.n	800469c <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004650:	2b00      	cmp	r3, #0
 8004652:	d123      	bne.n	800469c <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d10d      	bne.n	8004678 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 800465c:	2334      	movs	r3, #52	@ 0x34
 800465e:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8004660:	7afb      	ldrb	r3, [r7, #11]
 8004662:	461a      	mov	r2, r3
 8004664:	2162      	movs	r1, #98	@ 0x62
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fb1b 	bl	8004ca2 <LIS2MDL_Write_Reg>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d014      	beq.n	800469c <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8004672:	f04f 33ff 	mov.w	r3, #4294967295
 8004676:	e012      	b.n	800469e <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	2b03      	cmp	r3, #3
 800467e:	d101      	bne.n	8004684 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	e00c      	b.n	800469e <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3320      	adds	r3, #32
 8004688:	2101      	movs	r1, #1
 800468a:	4618      	mov	r0, r3
 800468c:	f000 ff79 	bl	8005582 <lis2mdl_i2c_interface_set>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8004696:	f04f 33ff 	mov.w	r3, #4294967295
 800469a:	e000      	b.n	800469e <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 800469c:	68fb      	ldr	r3, [r7, #12]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	08004cf9 	.word	0x08004cf9
 80046ac:	08004d7b 	.word	0x08004d7b

080046b0 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	2b03      	cmp	r3, #3
 80046be:	d144      	bne.n	800474a <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80046c0:	f107 0208 	add.w	r2, r7, #8
 80046c4:	2301      	movs	r3, #1
 80046c6:	2162      	movs	r1, #98	@ 0x62
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 fb97 	bl	8004dfc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 80046d4:	f04f 33ff 	mov.w	r3, #4294967295
 80046d8:	e06c      	b.n	80047b4 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80046da:	f107 020c 	add.w	r2, r7, #12
 80046de:	2301      	movs	r3, #1
 80046e0:	2160      	movs	r1, #96	@ 0x60
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fb8a 	bl	8004dfc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d002      	beq.n	80046f4 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 80046ee:	f04f 33ff 	mov.w	r3, #4294967295
 80046f2:	e05f      	b.n	80047b4 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 80046f4:	7a3b      	ldrb	r3, [r7, #8]
 80046f6:	f043 0310 	orr.w	r3, r3, #16
 80046fa:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 80046fc:	7a3b      	ldrb	r3, [r7, #8]
 80046fe:	f023 0302 	bic.w	r3, r3, #2
 8004702:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004704:	7b3b      	ldrb	r3, [r7, #12]
 8004706:	2202      	movs	r2, #2
 8004708:	f362 0301 	bfi	r3, r2, #0, #2
 800470c:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 800470e:	7b3b      	ldrb	r3, [r7, #12]
 8004710:	f043 030c 	orr.w	r3, r3, #12
 8004714:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8004716:	f107 0208 	add.w	r2, r7, #8
 800471a:	2301      	movs	r3, #1
 800471c:	2162      	movs	r1, #98	@ 0x62
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fcab 	bl	800507a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 800472a:	f04f 33ff 	mov.w	r3, #4294967295
 800472e:	e041      	b.n	80047b4 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004730:	f107 020c 	add.w	r2, r7, #12
 8004734:	2301      	movs	r3, #1
 8004736:	2160      	movs	r1, #96	@ 0x60
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 fc9e 	bl	800507a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d032      	beq.n	80047aa <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004744:	f04f 33ff 	mov.w	r3, #4294967295
 8004748:	e034      	b.n	80047b4 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3320      	adds	r3, #32
 800474e:	2101      	movs	r1, #1
 8004750:	4618      	mov	r0, r3
 8004752:	f000 fe71 	bl	8005438 <lis2mdl_block_data_update_set>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 800475c:	f04f 33ff 	mov.w	r3, #4294967295
 8004760:	e028      	b.n	80047b4 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3320      	adds	r3, #32
 8004766:	2102      	movs	r1, #2
 8004768:	4618      	mov	r0, r3
 800476a:	f000 fde0 	bl	800532e <lis2mdl_operating_mode_set>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d002      	beq.n	800477a <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8004774:	f04f 33ff 	mov.w	r3, #4294967295
 8004778:	e01c      	b.n	80047b4 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	3320      	adds	r3, #32
 800477e:	2103      	movs	r1, #3
 8004780:	4618      	mov	r0, r3
 8004782:	f000 fdfa 	bl	800537a <lis2mdl_data_rate_set>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 800478c:	f04f 33ff 	mov.w	r3, #4294967295
 8004790:	e010      	b.n	80047b4 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	3320      	adds	r3, #32
 8004796:	2100      	movs	r1, #0
 8004798:	4618      	mov	r0, r3
 800479a:	f000 fecc 	bl	8005536 <lis2mdl_self_test_set>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d002      	beq.n	80047aa <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80047a4:	f04f 33ff 	mov.w	r3, #4294967295
 80047a8:	e004      	b.n	80047b4 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f8a5 	bl	8004914 <LIS2MDL_MAG_Disable>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 80047d0:	f04f 33ff 	mov.w	r3, #4294967295
 80047d4:	e004      	b.n	80047e0 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	d10b      	bne.n	8004812 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 80047fa:	2301      	movs	r3, #1
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	214f      	movs	r1, #79	@ 0x4f
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 fafb 	bl	8004dfc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00e      	beq.n	800482a <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 800480c:	f04f 33ff 	mov.w	r3, #4294967295
 8004810:	e00c      	b.n	800482c <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3320      	adds	r3, #32
 8004816:	6839      	ldr	r1, [r7, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fe7b 	bl	8005514 <lis2mdl_device_id_get>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8004824:	f04f 33ff 	mov.w	r3, #4294967295
 8004828:	e000      	b.n	800482c <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2200      	movs	r2, #0
 8004842:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	2200      	movs	r2, #0
 8004848:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2201      	movs	r2, #1
 800484e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2200      	movs	r2, #0
 8004854:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2200      	movs	r2, #0
 800485a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2200      	movs	r2, #0
 8004860:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2232      	movs	r2, #50	@ 0x32
 8004866:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	f04f 0200 	mov.w	r2, #0
 8004876:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	4a04      	ldr	r2, [pc, #16]	@ (800488c <LIS2MDL_GetCapabilities+0x58>)
 800487c:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	42c80000 	.word	0x42c80000

08004890 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	e032      	b.n	800490c <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	2b03      	cmp	r3, #3
 80048ac:	d11d      	bne.n	80048ea <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80048ae:	f107 020c 	add.w	r2, r7, #12
 80048b2:	2301      	movs	r3, #1
 80048b4:	2160      	movs	r1, #96	@ 0x60
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 faa0 	bl	8004dfc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 80048c2:	f04f 33ff 	mov.w	r3, #4294967295
 80048c6:	e021      	b.n	800490c <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 80048c8:	7b3b      	ldrb	r3, [r7, #12]
 80048ca:	f023 0303 	bic.w	r3, r3, #3
 80048ce:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80048d0:	f107 020c 	add.w	r2, r7, #12
 80048d4:	2301      	movs	r3, #1
 80048d6:	2160      	movs	r1, #96	@ 0x60
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 fbce 	bl	800507a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00e      	beq.n	8004902 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80048e4:	f04f 33ff 	mov.w	r3, #4294967295
 80048e8:	e010      	b.n	800490c <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	3320      	adds	r3, #32
 80048ee:	2100      	movs	r1, #0
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 fd1c 	bl	800532e <lis2mdl_operating_mode_set>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80048fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004900:	e004      	b.n	800490c <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	e033      	b.n	8004992 <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	2b03      	cmp	r3, #3
 8004930:	d11e      	bne.n	8004970 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004932:	f107 020c 	add.w	r2, r7, #12
 8004936:	2301      	movs	r3, #1
 8004938:	2160      	movs	r1, #96	@ 0x60
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 fa5e 	bl	8004dfc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8004946:	f04f 33ff 	mov.w	r3, #4294967295
 800494a:	e022      	b.n	8004992 <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 800494c:	7b3b      	ldrb	r3, [r7, #12]
 800494e:	2202      	movs	r2, #2
 8004950:	f362 0301 	bfi	r3, r2, #0, #2
 8004954:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004956:	f107 020c 	add.w	r2, r7, #12
 800495a:	2301      	movs	r3, #1
 800495c:	2160      	movs	r1, #96	@ 0x60
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fb8b 	bl	800507a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00e      	beq.n	8004988 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800496a:	f04f 33ff 	mov.w	r3, #4294967295
 800496e:	e010      	b.n	8004992 <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3320      	adds	r3, #32
 8004974:	2102      	movs	r1, #2
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fcd9 	bl	800532e <lis2mdl_operating_mode_set>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8004982:	f04f 33ff 	mov.w	r3, #4294967295
 8004986:	e004      	b.n	8004992 <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float_t *Sensitivity)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 80049aa:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
	...

080049bc <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float_t *Odr)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	3320      	adds	r3, #32
 80049ce:	f107 020b 	add.w	r2, r7, #11
 80049d2:	4611      	mov	r1, r2
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 fcf7 	bl	80053c8 <lis2mdl_data_rate_get>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 80049e0:	f04f 33ff 	mov.w	r3, #4294967295
 80049e4:	e023      	b.n	8004a2e <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80049e6:	7afb      	ldrb	r3, [r7, #11]
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d81b      	bhi.n	8004a24 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 80049ec:	a201      	add	r2, pc, #4	@ (adr r2, 80049f4 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 80049ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f2:	bf00      	nop
 80049f4:	08004a05 	.word	0x08004a05
 80049f8:	08004a0d 	.word	0x08004a0d
 80049fc:	08004a15 	.word	0x08004a15
 8004a00:	08004a1d 	.word	0x08004a1d
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	4a0c      	ldr	r2, [pc, #48]	@ (8004a38 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8004a08:	601a      	str	r2, [r3, #0]
      break;
 8004a0a:	e00f      	b.n	8004a2c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	4a0b      	ldr	r2, [pc, #44]	@ (8004a3c <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8004a10:	601a      	str	r2, [r3, #0]
      break;
 8004a12:	e00b      	b.n	8004a2c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	4a0a      	ldr	r2, [pc, #40]	@ (8004a40 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8004a18:	601a      	str	r2, [r3, #0]
      break;
 8004a1a:	e007      	b.n	8004a2c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	4a09      	ldr	r2, [pc, #36]	@ (8004a44 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8004a20:	601a      	str	r2, [r3, #0]
      break;
 8004a22:	e003      	b.n	8004a2c <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8004a24:	f04f 33ff 	mov.w	r3, #4294967295
 8004a28:	60fb      	str	r3, [r7, #12]
      break;
 8004a2a:	bf00      	nop
  }

  return ret;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	41200000 	.word	0x41200000
 8004a3c:	41a00000 	.word	0x41a00000
 8004a40:	42480000 	.word	0x42480000
 8004a44:	42c80000 	.word	0x42c80000

08004a48 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float_t Odr)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8004a54:	edd7 7a00 	vldr	s15, [r7]
 8004a58:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004a5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a64:	d801      	bhi.n	8004a6a <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8004a66:	2300      	movs	r3, #0
 8004a68:	e016      	b.n	8004a98 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004a6a:	edd7 7a00 	vldr	s15, [r7]
 8004a6e:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8004a72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a7a:	d801      	bhi.n	8004a80 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e00b      	b.n	8004a98 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004a80:	edd7 7a00 	vldr	s15, [r7]
 8004a84:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8004b0c <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8004a88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a90:	d801      	bhi.n	8004a96 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8004a92:	2302      	movs	r3, #2
 8004a94:	e000      	b.n	8004a98 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004a96:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8004a98:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2b03      	cmp	r3, #3
 8004aa0:	d121      	bne.n	8004ae6 <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004aa2:	f107 020c 	add.w	r2, r7, #12
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	2160      	movs	r1, #96	@ 0x60
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f9a6 	bl	8004dfc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 8004ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aba:	e022      	b.n	8004b02 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	7b3b      	ldrb	r3, [r7, #12]
 8004ac6:	f362 0383 	bfi	r3, r2, #2, #2
 8004aca:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004acc:	f107 020c 	add.w	r2, r7, #12
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	2160      	movs	r1, #96	@ 0x60
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 fad0 	bl	800507a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00f      	beq.n	8004b00 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8004ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ae4:	e00d      	b.n	8004b02 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	3320      	adds	r3, #32
 8004aea:	7bfa      	ldrb	r2, [r7, #15]
 8004aec:	4611      	mov	r1, r2
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fc43 	bl	800537a <lis2mdl_data_rate_set>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8004afa:	f04f 33ff 	mov.w	r3, #4294967295
 8004afe:	e000      	b.n	8004b02 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	42480000 	.word	0x42480000

08004b10 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *FullScale = 50;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2232      	movs	r2, #50	@ 0x32
 8004b1e:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
 8004b36:	6039      	str	r1, [r7, #0]
  (void)pObj;
  (void)FullScale;

  return LIS2MDL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
 8004b4e:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3320      	adds	r3, #32
 8004b54:	f107 0208 	add.w	r2, r7, #8
 8004b58:	4611      	mov	r1, r2
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fc92 	bl	8005484 <lis2mdl_magnetic_raw_get>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8004b66:	f04f 33ff 	mov.w	r3, #4294967295
 8004b6a:	e00c      	b.n	8004b86 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004b6c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004b74:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004b7c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b088      	sub	sp, #32
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
 8004b96:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	60fb      	str	r3, [r7, #12]

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d134      	bne.n	8004c10 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8004ba6:	f107 0218 	add.w	r2, r7, #24
 8004baa:	2306      	movs	r3, #6
 8004bac:	2168      	movs	r1, #104	@ 0x68
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f924 	bl	8004dfc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <LIS2MDL_MAG_GetAxes+0x32>
    {
      return LIS2MDL_ERROR;
 8004bba:	f04f 33ff 	mov.w	r3, #4294967295
 8004bbe:	e06c      	b.n	8004c9a <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8004bc0:	7e7b      	ldrb	r3, [r7, #25]
 8004bc2:	b21b      	sxth	r3, r3
 8004bc4:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8004bc6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	021b      	lsls	r3, r3, #8
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	7e3a      	ldrb	r2, [r7, #24]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	b21b      	sxth	r3, r3
 8004bd8:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8004bda:	7efb      	ldrb	r3, [r7, #27]
 8004bdc:	b21b      	sxth	r3, r3
 8004bde:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8004be0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	021b      	lsls	r3, r3, #8
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	7eba      	ldrb	r2, [r7, #26]
 8004bec:	4413      	add	r3, r2
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	b21b      	sxth	r3, r3
 8004bf2:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8004bf4:	7f7b      	ldrb	r3, [r7, #29]
 8004bf6:	b21b      	sxth	r3, r3
 8004bf8:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8004bfa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	021b      	lsls	r3, r3, #8
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	7f3a      	ldrb	r2, [r7, #28]
 8004c06:	4413      	add	r3, r2
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	b21b      	sxth	r3, r3
 8004c0c:	82bb      	strh	r3, [r7, #20]
 8004c0e:	e00d      	b.n	8004c2c <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3320      	adds	r3, #32
 8004c14:	f107 0210 	add.w	r2, r7, #16
 8004c18:	4611      	mov	r1, r2
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 fc32 	bl	8005484 <lis2mdl_magnetic_raw_get>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8004c26:	f04f 33ff 	mov.w	r3, #4294967295
 8004c2a:	e036      	b.n	8004c9a <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8004c2c:	f107 030c 	add.w	r3, r7, #12
 8004c30:	4619      	mov	r1, r3
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7ff feb1 	bl	800499a <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8004c38:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004c3c:	ee07 3a90 	vmov	s15, r3
 8004c40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c44:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c50:	ee17 2a90 	vmov	r2, s15
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8004c58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004c5c:	ee07 3a90 	vmov	s15, r3
 8004c60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c64:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c70:	ee17 2a90 	vmov	r2, s15
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8004c78:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004c7c:	ee07 3a90 	vmov	s15, r3
 8004c80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c84:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c90:	ee17 2a90 	vmov	r2, s15
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3720      	adds	r7, #32
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b082      	sub	sp, #8
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	460b      	mov	r3, r1
 8004cac:	70fb      	strb	r3, [r7, #3]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	2b03      	cmp	r3, #3
 8004cb8:	d10b      	bne.n	8004cd2 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8004cba:	1cba      	adds	r2, r7, #2
 8004cbc:	78f9      	ldrb	r1, [r7, #3]
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f9da 	bl	800507a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d010      	beq.n	8004cee <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8004ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd0:	e00e      	b.n	8004cf0 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f103 0020 	add.w	r0, r3, #32
 8004cd8:	1cba      	adds	r2, r7, #2
 8004cda:	78f9      	ldrb	r1, [r7, #3]
 8004cdc:	2301      	movs	r3, #1
 8004cde:	f000 fb08 	bl	80052f2 <lis2mdl_write_reg>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8004ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8004cec:	e000      	b.n	8004cf0 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004cf8:	b590      	push	{r4, r7, lr}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	607a      	str	r2, [r7, #4]
 8004d02:	461a      	mov	r2, r3
 8004d04:	460b      	mov	r3, r1
 8004d06:	72fb      	strb	r3, [r7, #11]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10e      	bne.n	8004d36 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	695c      	ldr	r4, [r3, #20]
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	7b1b      	ldrb	r3, [r3, #12]
 8004d20:	4618      	mov	r0, r3
 8004d22:	7afb      	ldrb	r3, [r7, #11]
 8004d24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	893b      	ldrh	r3, [r7, #8]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	47a0      	blx	r4
 8004d32:	4603      	mov	r3, r0
 8004d34:	e01d      	b.n	8004d72 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d10b      	bne.n	8004d56 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	695c      	ldr	r4, [r3, #20]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	7b1b      	ldrb	r3, [r3, #12]
 8004d46:	4618      	mov	r0, r3
 8004d48:	7afb      	ldrb	r3, [r7, #11]
 8004d4a:	b299      	uxth	r1, r3
 8004d4c:	893b      	ldrh	r3, [r7, #8]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	47a0      	blx	r4
 8004d52:	4603      	mov	r3, r0
 8004d54:	e00d      	b.n	8004d72 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	695c      	ldr	r4, [r3, #20]
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	7b1b      	ldrb	r3, [r3, #12]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	7afb      	ldrb	r3, [r7, #11]
 8004d62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	4619      	mov	r1, r3
 8004d6a:	893b      	ldrh	r3, [r7, #8]
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	47a0      	blx	r4
 8004d70:	4603      	mov	r3, r0
  }
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	371c      	adds	r7, #28
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd90      	pop	{r4, r7, pc}

08004d7a <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004d7a:	b590      	push	{r4, r7, lr}
 8004d7c:	b087      	sub	sp, #28
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	60f8      	str	r0, [r7, #12]
 8004d82:	607a      	str	r2, [r7, #4]
 8004d84:	461a      	mov	r2, r3
 8004d86:	460b      	mov	r3, r1
 8004d88:	72fb      	strb	r3, [r7, #11]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10e      	bne.n	8004db8 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	691c      	ldr	r4, [r3, #16]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	7b1b      	ldrb	r3, [r3, #12]
 8004da2:	4618      	mov	r0, r3
 8004da4:	7afb      	ldrb	r3, [r7, #11]
 8004da6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	4619      	mov	r1, r3
 8004dae:	893b      	ldrh	r3, [r7, #8]
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	47a0      	blx	r4
 8004db4:	4603      	mov	r3, r0
 8004db6:	e01d      	b.n	8004df4 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2b03      	cmp	r3, #3
 8004dbe:	d10b      	bne.n	8004dd8 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	691c      	ldr	r4, [r3, #16]
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	7b1b      	ldrb	r3, [r3, #12]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	7afb      	ldrb	r3, [r7, #11]
 8004dcc:	b299      	uxth	r1, r3
 8004dce:	893b      	ldrh	r3, [r7, #8]
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	47a0      	blx	r4
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	e00d      	b.n	8004df4 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	691c      	ldr	r4, [r3, #16]
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	7b1b      	ldrb	r3, [r3, #12]
 8004de0:	4618      	mov	r0, r3
 8004de2:	7afb      	ldrb	r3, [r7, #11]
 8004de4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	4619      	mov	r1, r3
 8004dec:	893b      	ldrh	r3, [r7, #8]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	47a0      	blx	r4
 8004df2:	4603      	mov	r3, r0
  }
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	371c      	adds	r7, #28
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd90      	pop	{r4, r7, pc}

08004dfc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08c      	sub	sp, #48	@ 0x30
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	607a      	str	r2, [r7, #4]
 8004e06:	461a      	mov	r2, r3
 8004e08:	460b      	mov	r3, r1
 8004e0a:	72fb      	strb	r3, [r7, #11]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8004e10:	2301      	movs	r3, #1
 8004e12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8004e16:	2340      	movs	r3, #64	@ 0x40
 8004e18:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8004e22:	233d      	movs	r3, #61	@ 0x3d
 8004e24:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8004e26:	2315      	movs	r3, #21
 8004e28:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8004e2c:	2316      	movs	r3, #22
 8004e2e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8004e32:	2317      	movs	r3, #23
 8004e34:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 8004e38:	2314      	movs	r3, #20
 8004e3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8004e3e:	2344      	movs	r3, #68	@ 0x44
 8004e40:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8004e42:	2302      	movs	r3, #2
 8004e44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8004e48:	2339      	movs	r3, #57	@ 0x39
 8004e4a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8004e54:	2329      	movs	r3, #41	@ 0x29
 8004e56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8004e5a:	231e      	movs	r3, #30
 8004e5c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 8004e60:	2301      	movs	r3, #1
 8004e62:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 8004e66:	893b      	ldrh	r3, [r7, #8]
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8004e6c:	2310      	movs	r3, #16
 8004e6e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8004e78:	2340      	movs	r3, #64	@ 0x40
 8004e7a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f103 0020 	add.w	r0, r3, #32
 8004e84:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8004e88:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	f000 fa30 	bl	80052f2 <lis2mdl_write_reg>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8004e98:	f04f 33ff 	mov.w	r3, #4294967295
 8004e9c:	e0e9      	b.n	8005072 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f103 0020 	add.w	r0, r3, #32
 8004ea4:	f107 021f 	add.w	r2, r7, #31
 8004ea8:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8004eac:	2301      	movs	r3, #1
 8004eae:	f000 fa20 	bl	80052f2 <lis2mdl_write_reg>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8004eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8004ebc:	e0d9      	b.n	8005072 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f103 0020 	add.w	r0, r3, #32
 8004ec4:	f107 020b 	add.w	r2, r7, #11
 8004ec8:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8004ecc:	2301      	movs	r3, #1
 8004ece:	f000 fa10 	bl	80052f2 <lis2mdl_write_reg>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d002      	beq.n	8004ede <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8004ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8004edc:	e0c9      	b.n	8005072 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f103 0020 	add.w	r0, r3, #32
 8004ee4:	f107 021d 	add.w	r2, r7, #29
 8004ee8:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8004eec:	2301      	movs	r3, #1
 8004eee:	f000 fa00 	bl	80052f2 <lis2mdl_write_reg>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8004ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8004efc:	e0b9      	b.n	8005072 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f103 0020 	add.w	r0, r3, #32
 8004f04:	f107 021e 	add.w	r2, r7, #30
 8004f08:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	f000 f9f0 	bl	80052f2 <lis2mdl_write_reg>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d002      	beq.n	8004f1e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8004f18:	f04f 33ff 	mov.w	r3, #4294967295
 8004f1c:	e0a9      	b.n	8005072 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f103 0020 	add.w	r0, r3, #32
 8004f24:	f107 0220 	add.w	r2, r7, #32
 8004f28:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	f000 f9e0 	bl	80052f2 <lis2mdl_write_reg>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d002      	beq.n	8004f3e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8004f38:	f04f 33ff 	mov.w	r3, #4294967295
 8004f3c:	e099      	b.n	8005072 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f103 0020 	add.w	r0, r3, #32
 8004f44:	f107 021c 	add.w	r2, r7, #28
 8004f48:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	f000 f9b2 	bl	80052b6 <lis2mdl_read_reg>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8004f58:	f04f 33ff 	mov.w	r3, #4294967295
 8004f5c:	e089      	b.n	8005072 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8004f5e:	7f3b      	ldrb	r3, [r7, #28]
 8004f60:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d102      	bne.n	8004f6e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8004f68:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8004f6c:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f103 0020 	add.w	r0, r3, #32
 8004f74:	f107 021c 	add.w	r2, r7, #28
 8004f78:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	f000 f9b8 	bl	80052f2 <lis2mdl_write_reg>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d002      	beq.n	8004f8e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8004f88:	f04f 33ff 	mov.w	r3, #4294967295
 8004f8c:	e071      	b.n	8005072 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f103 0020 	add.w	r0, r3, #32
 8004f94:	f107 0214 	add.w	r2, r7, #20
 8004f98:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8004f9c:	2306      	movs	r3, #6
 8004f9e:	f000 f98a 	bl	80052b6 <lis2mdl_read_reg>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8004fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fac:	e061      	b.n	8005072 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f103 0020 	add.w	r0, r3, #32
 8004fb4:	f107 021b 	add.w	r2, r7, #27
 8004fb8:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	f000 f97a 	bl	80052b6 <lis2mdl_read_reg>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d002      	beq.n	8004fce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8004fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fcc:	e051      	b.n	8005072 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8004fce:	7efa      	ldrb	r2, [r7, #27]
 8004fd0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d1e6      	bne.n	8004fae <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f103 0020 	add.w	r0, r3, #32
 8004fe6:	f107 021b 	add.w	r2, r7, #27
 8004fea:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8004fee:	2301      	movs	r3, #1
 8004ff0:	f000 f961 	bl	80052b6 <lis2mdl_read_reg>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d002      	beq.n	8005000 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8004ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8004ffe:	e038      	b.n	8005072 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8005000:	7efa      	ldrb	r2, [r7, #27]
 8005002:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005006:	4013      	ands	r3, r2
 8005008:	b2db      	uxtb	r3, r3
 800500a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800500e:	429a      	cmp	r2, r3
 8005010:	d1e6      	bne.n	8004fe0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f103 0020 	add.w	r0, r3, #32
 8005018:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 800501c:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005020:	2301      	movs	r3, #1
 8005022:	f000 f966 	bl	80052f2 <lis2mdl_write_reg>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 800502c:	f04f 33ff 	mov.w	r3, #4294967295
 8005030:	e01f      	b.n	8005072 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f103 0020 	add.w	r0, r3, #32
 8005038:	893b      	ldrh	r3, [r7, #8]
 800503a:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	f000 f939 	bl	80052b6 <lis2mdl_read_reg>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d002      	beq.n	8005050 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 800504a:	f04f 33ff 	mov.w	r3, #4294967295
 800504e:	e010      	b.n	8005072 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f103 0020 	add.w	r0, r3, #32
 8005056:	f107 0220 	add.w	r2, r7, #32
 800505a:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800505e:	2301      	movs	r3, #1
 8005060:	f000 f947 	bl	80052f2 <lis2mdl_write_reg>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 800506a:	f04f 33ff 	mov.w	r3, #4294967295
 800506e:	e000      	b.n	8005072 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3730      	adds	r7, #48	@ 0x30
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b08c      	sub	sp, #48	@ 0x30
 800507e:	af00      	add	r7, sp, #0
 8005080:	60f8      	str	r0, [r7, #12]
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	461a      	mov	r2, r3
 8005086:	460b      	mov	r3, r1
 8005088:	72fb      	strb	r3, [r7, #11]
 800508a:	4613      	mov	r3, r2
 800508c:	813b      	strh	r3, [r7, #8]
  (void)Length;
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 800508e:	2301      	movs	r3, #1
 8005090:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8005094:	2340      	movs	r3, #64	@ 0x40
 8005096:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 800509a:	2300      	movs	r3, #0
 800509c:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 80050a0:	233c      	movs	r3, #60	@ 0x3c
 80050a2:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 80050a4:	2315      	movs	r3, #21
 80050a6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 80050aa:	2316      	movs	r3, #22
 80050ac:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 80050b0:	2317      	movs	r3, #23
 80050b2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 80050ba:	2314      	movs	r3, #20
 80050bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 80050c0:	2344      	movs	r3, #68	@ 0x44
 80050c2:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 80050c4:	2339      	movs	r3, #57	@ 0x39
 80050c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 80050ca:	2380      	movs	r3, #128	@ 0x80
 80050cc:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 80050d0:	2329      	movs	r3, #41	@ 0x29
 80050d2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80050d6:	231e      	movs	r3, #30
 80050d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 80050dc:	2301      	movs	r3, #1
 80050de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80050e2:	2310      	movs	r3, #16
 80050e4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 80050ee:	2340      	movs	r3, #64	@ 0x40
 80050f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 80050f4:	230e      	movs	r3, #14
 80050f6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f103 0020 	add.w	r0, r3, #32
 8005100:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8005104:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005108:	2301      	movs	r3, #1
 800510a:	f000 f8f2 	bl	80052f2 <lis2mdl_write_reg>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8005114:	f04f 33ff 	mov.w	r3, #4294967295
 8005118:	e0c9      	b.n	80052ae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f103 0020 	add.w	r0, r3, #32
 8005120:	f107 021f 	add.w	r2, r7, #31
 8005124:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8005128:	2301      	movs	r3, #1
 800512a:	f000 f8e2 	bl	80052f2 <lis2mdl_write_reg>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8005134:	f04f 33ff 	mov.w	r3, #4294967295
 8005138:	e0b9      	b.n	80052ae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f103 0020 	add.w	r0, r3, #32
 8005140:	f107 020b 	add.w	r2, r7, #11
 8005144:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8005148:	2301      	movs	r3, #1
 800514a:	f000 f8d2 	bl	80052f2 <lis2mdl_write_reg>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8005154:	f04f 33ff 	mov.w	r3, #4294967295
 8005158:	e0a9      	b.n	80052ae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f103 0020 	add.w	r0, r3, #32
 8005160:	f107 021e 	add.w	r2, r7, #30
 8005164:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8005168:	2301      	movs	r3, #1
 800516a:	f000 f8c2 	bl	80052f2 <lis2mdl_write_reg>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8005174:	f04f 33ff 	mov.w	r3, #4294967295
 8005178:	e099      	b.n	80052ae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f103 0020 	add.w	r0, r3, #32
 8005180:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8005184:	2301      	movs	r3, #1
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	f000 f8b3 	bl	80052f2 <lis2mdl_write_reg>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8005192:	f04f 33ff 	mov.w	r3, #4294967295
 8005196:	e08a      	b.n	80052ae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f103 0020 	add.w	r0, r3, #32
 800519e:	f107 021d 	add.w	r2, r7, #29
 80051a2:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 80051a6:	2301      	movs	r3, #1
 80051a8:	f000 f8a3 	bl	80052f2 <lis2mdl_write_reg>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 80051b2:	f04f 33ff 	mov.w	r3, #4294967295
 80051b6:	e07a      	b.n	80052ae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f103 0020 	add.w	r0, r3, #32
 80051be:	f107 0220 	add.w	r2, r7, #32
 80051c2:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80051c6:	2301      	movs	r3, #1
 80051c8:	f000 f893 	bl	80052f2 <lis2mdl_write_reg>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d002      	beq.n	80051d8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 80051d2:	f04f 33ff 	mov.w	r3, #4294967295
 80051d6:	e06a      	b.n	80052ae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f103 0020 	add.w	r0, r3, #32
 80051de:	f107 021c 	add.w	r2, r7, #28
 80051e2:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 80051e6:	2301      	movs	r3, #1
 80051e8:	f000 f865 	bl	80052b6 <lis2mdl_read_reg>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 80051f2:	f04f 33ff 	mov.w	r3, #4294967295
 80051f6:	e05a      	b.n	80052ae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80051f8:	7f3b      	ldrb	r3, [r7, #28]
 80051fa:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80051fe:	429a      	cmp	r2, r3
 8005200:	d102      	bne.n	8005208 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8005202:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005206:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f103 0020 	add.w	r0, r3, #32
 800520e:	f107 021c 	add.w	r2, r7, #28
 8005212:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8005216:	2301      	movs	r3, #1
 8005218:	f000 f86b 	bl	80052f2 <lis2mdl_write_reg>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8005222:	f04f 33ff 	mov.w	r3, #4294967295
 8005226:	e042      	b.n	80052ae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f103 0020 	add.w	r0, r3, #32
 800522e:	f107 0214 	add.w	r2, r7, #20
 8005232:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8005236:	2306      	movs	r3, #6
 8005238:	f000 f83d 	bl	80052b6 <lis2mdl_read_reg>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d002      	beq.n	8005248 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8005242:	f04f 33ff 	mov.w	r3, #4294967295
 8005246:	e032      	b.n	80052ae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f103 0020 	add.w	r0, r3, #32
 800524e:	f107 021b 	add.w	r2, r7, #27
 8005252:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8005256:	2301      	movs	r3, #1
 8005258:	f000 f82d 	bl	80052b6 <lis2mdl_read_reg>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8005262:	f04f 33ff 	mov.w	r3, #4294967295
 8005266:	e022      	b.n	80052ae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8005268:	7efa      	ldrb	r2, [r7, #27]
 800526a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800526e:	4013      	ands	r3, r2
 8005270:	b2db      	uxtb	r3, r3
 8005272:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005276:	429a      	cmp	r2, r3
 8005278:	d1e6      	bne.n	8005248 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f103 0020 	add.w	r0, r3, #32
 8005280:	f107 021b 	add.w	r2, r7, #27
 8005284:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8005288:	2301      	movs	r3, #1
 800528a:	f000 f814 	bl	80052b6 <lis2mdl_read_reg>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8005294:	f04f 33ff 	mov.w	r3, #4294967295
 8005298:	e009      	b.n	80052ae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 800529a:	7efa      	ldrb	r2, [r7, #27]
 800529c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80052a0:	4013      	ands	r3, r2
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d1e6      	bne.n	800527a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3730      	adds	r7, #48	@ 0x30
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <lis2mdl_read_reg>:
  *
  */
int32_t __weak lis2mdl_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80052b6:	b590      	push	{r4, r7, lr}
 80052b8:	b087      	sub	sp, #28
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	60f8      	str	r0, [r7, #12]
 80052be:	607a      	str	r2, [r7, #4]
 80052c0:	461a      	mov	r2, r3
 80052c2:	460b      	mov	r3, r1
 80052c4:	72fb      	strb	r3, [r7, #11]
 80052c6:	4613      	mov	r3, r2
 80052c8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d102      	bne.n	80052d6 <lis2mdl_read_reg+0x20>
  {
    return -1;
 80052d0:	f04f 33ff 	mov.w	r3, #4294967295
 80052d4:	e009      	b.n	80052ea <lis2mdl_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	685c      	ldr	r4, [r3, #4]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	68d8      	ldr	r0, [r3, #12]
 80052de:	893b      	ldrh	r3, [r7, #8]
 80052e0:	7af9      	ldrb	r1, [r7, #11]
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	47a0      	blx	r4
 80052e6:	6178      	str	r0, [r7, #20]

  return ret;
 80052e8:	697b      	ldr	r3, [r7, #20]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	371c      	adds	r7, #28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd90      	pop	{r4, r7, pc}

080052f2 <lis2mdl_write_reg>:
  *
  */
int32_t __weak lis2mdl_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80052f2:	b590      	push	{r4, r7, lr}
 80052f4:	b087      	sub	sp, #28
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	60f8      	str	r0, [r7, #12]
 80052fa:	607a      	str	r2, [r7, #4]
 80052fc:	461a      	mov	r2, r3
 80052fe:	460b      	mov	r3, r1
 8005300:	72fb      	strb	r3, [r7, #11]
 8005302:	4613      	mov	r3, r2
 8005304:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d102      	bne.n	8005312 <lis2mdl_write_reg+0x20>
  {
    return -1;
 800530c:	f04f 33ff 	mov.w	r3, #4294967295
 8005310:	e009      	b.n	8005326 <lis2mdl_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681c      	ldr	r4, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	68d8      	ldr	r0, [r3, #12]
 800531a:	893b      	ldrh	r3, [r7, #8]
 800531c:	7af9      	ldrb	r1, [r7, #11]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	47a0      	blx	r4
 8005322:	6178      	str	r0, [r7, #20]

  return ret;
 8005324:	697b      	ldr	r3, [r7, #20]
}
 8005326:	4618      	mov	r0, r3
 8005328:	371c      	adds	r7, #28
 800532a:	46bd      	mov	sp, r7
 800532c:	bd90      	pop	{r4, r7, pc}

0800532e <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(const stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b084      	sub	sp, #16
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
 8005336:	460b      	mov	r3, r1
 8005338:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800533a:	f107 0208 	add.w	r2, r7, #8
 800533e:	2301      	movs	r3, #1
 8005340:	2160      	movs	r1, #96	@ 0x60
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7ff ffb7 	bl	80052b6 <lis2mdl_read_reg>
 8005348:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10f      	bne.n	8005370 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8005350:	78fb      	ldrb	r3, [r7, #3]
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	b2da      	uxtb	r2, r3
 8005358:	7a3b      	ldrb	r3, [r7, #8]
 800535a:	f362 0301 	bfi	r3, r2, #0, #2
 800535e:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005360:	f107 0208 	add.w	r2, r7, #8
 8005364:	2301      	movs	r3, #1
 8005366:	2160      	movs	r1, #96	@ 0x60
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff ffc2 	bl	80052f2 <lis2mdl_write_reg>
 800536e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005370:	68fb      	ldr	r3, [r7, #12]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(const stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b084      	sub	sp, #16
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	460b      	mov	r3, r1
 8005384:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005386:	f107 0208 	add.w	r2, r7, #8
 800538a:	2301      	movs	r3, #1
 800538c:	2160      	movs	r1, #96	@ 0x60
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7ff ff91 	bl	80052b6 <lis2mdl_read_reg>
 8005394:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10f      	bne.n	80053bc <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 800539c:	78fb      	ldrb	r3, [r7, #3]
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	7a3b      	ldrb	r3, [r7, #8]
 80053a6:	f362 0383 	bfi	r3, r2, #2, #2
 80053aa:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80053ac:	f107 0208 	add.w	r2, r7, #8
 80053b0:	2301      	movs	r3, #1
 80053b2:	2160      	movs	r1, #96	@ 0x60
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7ff ff9c 	bl	80052f2 <lis2mdl_write_reg>
 80053ba:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80053bc:	68fb      	ldr	r3, [r7, #12]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
	...

080053c8 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(const stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80053d2:	f107 0208 	add.w	r2, r7, #8
 80053d6:	2301      	movs	r3, #1
 80053d8:	2160      	movs	r1, #96	@ 0x60
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7ff ff6b 	bl	80052b6 <lis2mdl_read_reg>
 80053e0:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 80053e2:	7a3b      	ldrb	r3, [r7, #8]
 80053e4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b03      	cmp	r3, #3
 80053ec:	d81a      	bhi.n	8005424 <lis2mdl_data_rate_get+0x5c>
 80053ee:	a201      	add	r2, pc, #4	@ (adr r2, 80053f4 <lis2mdl_data_rate_get+0x2c>)
 80053f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f4:	08005405 	.word	0x08005405
 80053f8:	0800540d 	.word	0x0800540d
 80053fc:	08005415 	.word	0x08005415
 8005400:	0800541d 	.word	0x0800541d
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2200      	movs	r2, #0
 8005408:	701a      	strb	r2, [r3, #0]
      break;
 800540a:	e00f      	b.n	800542c <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	2201      	movs	r2, #1
 8005410:	701a      	strb	r2, [r3, #0]
      break;
 8005412:	e00b      	b.n	800542c <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	2202      	movs	r2, #2
 8005418:	701a      	strb	r2, [r3, #0]
      break;
 800541a:	e007      	b.n	800542c <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	2203      	movs	r2, #3
 8005420:	701a      	strb	r2, [r3, #0]
      break;
 8005422:	e003      	b.n	800542c <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2200      	movs	r2, #0
 8005428:	701a      	strb	r2, [r3, #0]
      break;
 800542a:	bf00      	nop
  }

  return ret;
 800542c:	68fb      	ldr	r3, [r7, #12]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop

08005438 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	460b      	mov	r3, r1
 8005442:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005444:	f107 0208 	add.w	r2, r7, #8
 8005448:	2301      	movs	r3, #1
 800544a:	2162      	movs	r1, #98	@ 0x62
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7ff ff32 	bl	80052b6 <lis2mdl_read_reg>
 8005452:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10f      	bne.n	800547a <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800545a:	78fb      	ldrb	r3, [r7, #3]
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	b2da      	uxtb	r2, r3
 8005462:	7a3b      	ldrb	r3, [r7, #8]
 8005464:	f362 1304 	bfi	r3, r2, #4, #1
 8005468:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800546a:	f107 0208 	add.w	r2, r7, #8
 800546e:	2301      	movs	r3, #1
 8005470:	2162      	movs	r1, #98	@ 0x62
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7ff ff3d 	bl	80052f2 <lis2mdl_write_reg>
 8005478:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800547a:	68fb      	ldr	r3, [r7, #12]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 800548e:	f107 020c 	add.w	r2, r7, #12
 8005492:	2306      	movs	r3, #6
 8005494:	2168      	movs	r1, #104	@ 0x68
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7ff ff0d 	bl	80052b6 <lis2mdl_read_reg>
 800549c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800549e:	7b7b      	ldrb	r3, [r7, #13]
 80054a0:	b21a      	sxth	r2, r3
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	021b      	lsls	r3, r3, #8
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	7b3a      	ldrb	r2, [r7, #12]
 80054b4:	4413      	add	r3, r2
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	b21a      	sxth	r2, r3
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80054be:	7bfa      	ldrb	r2, [r7, #15]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	3302      	adds	r3, #2
 80054c4:	b212      	sxth	r2, r2
 80054c6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	3302      	adds	r3, #2
 80054cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	021b      	lsls	r3, r3, #8
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	7bba      	ldrb	r2, [r7, #14]
 80054d8:	4413      	add	r3, r2
 80054da:	b29a      	uxth	r2, r3
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	3302      	adds	r3, #2
 80054e0:	b212      	sxth	r2, r2
 80054e2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80054e4:	7c7a      	ldrb	r2, [r7, #17]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	3304      	adds	r3, #4
 80054ea:	b212      	sxth	r2, r2
 80054ec:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	3304      	adds	r3, #4
 80054f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	021b      	lsls	r3, r3, #8
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	7c3a      	ldrb	r2, [r7, #16]
 80054fe:	4413      	add	r3, r2
 8005500:	b29a      	uxth	r2, r3
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	3304      	adds	r3, #4
 8005506:	b212      	sxth	r2, r2
 8005508:	801a      	strh	r2, [r3, #0]

  return ret;
 800550a:	697b      	ldr	r3, [r7, #20]
}
 800550c:	4618      	mov	r0, r3
 800550e:	3718      	adds	r7, #24
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 800551e:	2301      	movs	r3, #1
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	214f      	movs	r1, #79	@ 0x4f
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff fec6 	bl	80052b6 <lis2mdl_read_reg>
 800552a:	60f8      	str	r0, [r7, #12]

  return ret;
 800552c:	68fb      	ldr	r3, [r7, #12]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b084      	sub	sp, #16
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	460b      	mov	r3, r1
 8005540:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005542:	f107 0208 	add.w	r2, r7, #8
 8005546:	2301      	movs	r3, #1
 8005548:	2162      	movs	r1, #98	@ 0x62
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7ff feb3 	bl	80052b6 <lis2mdl_read_reg>
 8005550:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10f      	bne.n	8005578 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8005558:	78fb      	ldrb	r3, [r7, #3]
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	b2da      	uxtb	r2, r3
 8005560:	7a3b      	ldrb	r3, [r7, #8]
 8005562:	f362 0341 	bfi	r3, r2, #1, #1
 8005566:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005568:	f107 0208 	add.w	r2, r7, #8
 800556c:	2301      	movs	r3, #1
 800556e:	2162      	movs	r1, #98	@ 0x62
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7ff febe 	bl	80052f2 <lis2mdl_write_reg>
 8005576:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005578:	68fb      	ldr	r3, [r7, #12]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(const stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b084      	sub	sp, #16
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	460b      	mov	r3, r1
 800558c:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800558e:	f107 0208 	add.w	r2, r7, #8
 8005592:	2301      	movs	r3, #1
 8005594:	2162      	movs	r1, #98	@ 0x62
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7ff fe8d 	bl	80052b6 <lis2mdl_read_reg>
 800559c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10f      	bne.n	80055c4 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 80055a4:	78fb      	ldrb	r3, [r7, #3]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	7a3b      	ldrb	r3, [r7, #8]
 80055ae:	f362 1345 	bfi	r3, r2, #5, #1
 80055b2:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80055b4:	f107 0208 	add.w	r2, r7, #8
 80055b8:	2301      	movs	r3, #1
 80055ba:	2162      	movs	r1, #98	@ 0x62
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f7ff fe98 	bl	80052f2 <lis2mdl_write_reg>
 80055c2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80055c4:	68fb      	ldr	r3, [r7, #12]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
	...

080055d0 <LPS22DF_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_RegisterBusIO(LPS22DF_Object_t *pObj, LPS22DF_IO_t *pIO)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22DF_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d103      	bne.n	80055ec <LPS22DF_RegisterBusIO+0x1c>
  {
    ret = LPS22DF_ERROR;
 80055e4:	f04f 33ff 	mov.w	r3, #4294967295
 80055e8:	60fb      	str	r3, [r7, #12]
 80055ea:	e051      	b.n	8005690 <LPS22DF_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	7b1a      	ldrb	r2, [r3, #12]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	691a      	ldr	r2, [r3, #16]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	695a      	ldr	r2, [r3, #20]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	699a      	ldr	r2, [r3, #24]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a1d      	ldr	r2, [pc, #116]	@ (800569c <LPS22DF_RegisterBusIO+0xcc>)
 8005628:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a1c      	ldr	r2, [pc, #112]	@ (80056a0 <LPS22DF_RegisterBusIO+0xd0>)
 800562e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	69da      	ldr	r2, [r3, #28]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d103      	bne.n	800564e <LPS22DF_RegisterBusIO+0x7e>
    {
      ret = LPS22DF_ERROR;
 8005646:	f04f 33ff 	mov.w	r3, #4294967295
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	e020      	b.n	8005690 <LPS22DF_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22DF_OK)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4798      	blx	r3
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <LPS22DF_RegisterBusIO+0x92>
    {
      ret = LPS22DF_ERROR;
 800565a:	f04f 33ff 	mov.w	r3, #4294967295
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	e016      	b.n	8005690 <LPS22DF_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22DF_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	2b02      	cmp	r3, #2
 8005668:	d112      	bne.n	8005690 <LPS22DF_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10d      	bne.n	8005690 <LPS22DF_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x20;
 8005674:	2320      	movs	r3, #32
 8005676:	72fb      	strb	r3, [r7, #11]

          if (LPS22DF_Write_Reg(pObj, LPS22DF_IF_CTRL, data) != LPS22DF_OK)
 8005678:	7afb      	ldrb	r3, [r7, #11]
 800567a:	461a      	mov	r2, r3
 800567c:	210e      	movs	r1, #14
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f9f3 	bl	8005a6a <LPS22DF_Write_Reg>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d002      	beq.n	8005690 <LPS22DF_RegisterBusIO+0xc0>
          {
            ret = LPS22DF_ERROR;
 800568a:	f04f 33ff 	mov.w	r3, #4294967295
 800568e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005690:	68fb      	ldr	r3, [r7, #12]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	08005e0d 	.word	0x08005e0d
 80056a0:	08005e43 	.word	0x08005e43

080056a4 <LPS22DF_Init>:
  * @brief  Initialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_Init(LPS22DF_Object_t *pObj)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d108      	bne.n	80056c8 <LPS22DF_Init+0x24>
  {
    if (LPS22DF_Initialize(pObj) != LPS22DF_OK)
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fb4c 	bl	8005d54 <LPS22DF_Initialize>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d002      	beq.n	80056c8 <LPS22DF_Init+0x24>
    {
      return LPS22DF_ERROR;
 80056c2:	f04f 33ff 	mov.w	r3, #4294967295
 80056c6:	e004      	b.n	80056d2 <LPS22DF_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22DF_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <LPS22DF_DeInit>:
  * @brief  Deinitialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_DeInit(LPS22DF_Object_t *pObj)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b082      	sub	sp, #8
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d111      	bne.n	8005710 <LPS22DF_DeInit+0x36>
  {
    if (LPS22DF_PRESS_Disable(pObj) != LPS22DF_OK)
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f882 	bl	80057f6 <LPS22DF_PRESS_Disable>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <LPS22DF_DeInit+0x24>
    {
      return LPS22DF_ERROR;
 80056f8:	f04f 33ff 	mov.w	r3, #4294967295
 80056fc:	e00d      	b.n	800571a <LPS22DF_DeInit+0x40>
    }

    if (LPS22DF_TEMP_Disable(pObj) != LPS22DF_OK)
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f927 	bl	8005952 <LPS22DF_TEMP_Disable>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <LPS22DF_DeInit+0x36>
    {
      return LPS22DF_ERROR;
 800570a:	f04f 33ff 	mov.w	r3, #4294967295
 800570e:	e004      	b.n	800571a <LPS22DF_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22DF_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <LPS22DF_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_ReadID(LPS22DF_Object_t *pObj, uint8_t *Id)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b084      	sub	sp, #16
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
 800572a:	6039      	str	r1, [r7, #0]
  lps22df_id_t val;
  if (lps22df_id_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3320      	adds	r3, #32
 8005730:	f107 020c 	add.w	r2, r7, #12
 8005734:	4611      	mov	r1, r2
 8005736:	4618      	mov	r0, r3
 8005738:	f000 fc22 	bl	8005f80 <lps22df_id_get>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d002      	beq.n	8005748 <LPS22DF_ReadID+0x26>
  {
    return LPS22DF_ERROR;
 8005742:	f04f 33ff 	mov.w	r3, #4294967295
 8005746:	e003      	b.n	8005750 <LPS22DF_ReadID+0x2e>
  }

  *Id = val.whoami;
 8005748:	7b3a      	ldrb	r2, [r7, #12]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	701a      	strb	r2, [r3, #0]

  return LPS22DF_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <LPS22DF_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22DF sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_GetCapabilities(LPS22DF_Object_t *pObj, LPS22DF_Capabilities_t *Capabilities)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2200      	movs	r2, #0
 8005766:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	2201      	movs	r2, #1
 800576c:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2201      	movs	r2, #1
 8005772:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	2200      	movs	r2, #0
 8005778:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2200      	movs	r2, #0
 800577e:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	f04f 0200 	mov.w	r2, #0
 8005786:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	4a08      	ldr	r2, [pc, #32]	@ (80057ac <LPS22DF_GetCapabilities+0x54>)
 800578c:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	4a06      	ldr	r2, [pc, #24]	@ (80057ac <LPS22DF_GetCapabilities+0x54>)
 8005792:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	f04f 0200 	mov.w	r2, #0
 800579a:	615a      	str	r2, [r3, #20]
  return LPS22DF_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	43480000 	.word	0x43480000

080057b0 <LPS22DF_PRESS_Enable>:
  * @brief  Enable the LPS22DF pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_Enable(LPS22DF_Object_t *pObj)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d101      	bne.n	80057c6 <LPS22DF_PRESS_Enable+0x16>
  {
    return LPS22DF_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	e013      	b.n	80057ee <LPS22DF_PRESS_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22df_mode_set(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f103 0220 	add.w	r2, r3, #32
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	3333      	adds	r3, #51	@ 0x33
 80057d0:	4619      	mov	r1, r3
 80057d2:	4610      	mov	r0, r2
 80057d4:	f000 fdb2 	bl	800633c <lps22df_mode_set>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d002      	beq.n	80057e4 <LPS22DF_PRESS_Enable+0x34>
  {
    return LPS22DF_ERROR;
 80057de:	f04f 33ff 	mov.w	r3, #4294967295
 80057e2:	e004      	b.n	80057ee <LPS22DF_PRESS_Enable+0x3e>
  }

  pObj->press_is_enabled = 1;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22DF_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <LPS22DF_PRESS_Disable>:
  * @brief  Disable the LPS22DF pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_Disable(LPS22DF_Object_t *pObj)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <LPS22DF_PRESS_Disable+0x16>
  {
    return LPS22DF_OK;
 8005808:	2300      	movs	r3, #0
 800580a:	e030      	b.n	800586e <LPS22DF_PRESS_Disable+0x78>
  }

  /* Check if the LPS22DF temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005812:	2b00      	cmp	r3, #0
 8005814:	d126      	bne.n	8005864 <LPS22DF_PRESS_Disable+0x6e>
  {
    lps22df_md_t val;

    /* Get current output data rate. */
    if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	3320      	adds	r3, #32
 800581a:	f107 020c 	add.w	r2, r7, #12
 800581e:	4611      	mov	r1, r2
 8005820:	4618      	mov	r0, r3
 8005822:	f000 fde9 	bl	80063f8 <lps22df_mode_get>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <LPS22DF_PRESS_Disable+0x3c>
    {
      return LPS22DF_ERROR;
 800582c:	f04f 33ff 	mov.w	r3, #4294967295
 8005830:	e01d      	b.n	800586e <LPS22DF_PRESS_Disable+0x78>
    }

    (void)memcpy(&pObj->last_odr, &val, sizeof(lps22df_md_t));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	3333      	adds	r3, #51	@ 0x33
 8005836:	461a      	mov	r2, r3
 8005838:	f107 030c 	add.w	r3, r7, #12
 800583c:	8819      	ldrh	r1, [r3, #0]
 800583e:	789b      	ldrb	r3, [r3, #2]
 8005840:	8011      	strh	r1, [r2, #0]
 8005842:	7093      	strb	r3, [r2, #2]

    val.odr = LPS22DF_ONE_SHOT;
 8005844:	2300      	movs	r3, #0
 8005846:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection - power down. */
    if (lps22df_mode_set(&(pObj->Ctx), &val) != LPS22DF_OK)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3320      	adds	r3, #32
 800584c:	f107 020c 	add.w	r2, r7, #12
 8005850:	4611      	mov	r1, r2
 8005852:	4618      	mov	r0, r3
 8005854:	f000 fd72 	bl	800633c <lps22df_mode_set>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d002      	beq.n	8005864 <LPS22DF_PRESS_Disable+0x6e>
    {
      return LPS22DF_ERROR;
 800585e:	f04f 33ff 	mov.w	r3, #4294967295
 8005862:	e004      	b.n	800586e <LPS22DF_PRESS_Disable+0x78>
    }
  }

  pObj->press_is_enabled = 0;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22DF_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <LPS22DF_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_GetOutputDataRate(LPS22DF_Object_t *pObj, float_t *Odr)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b082      	sub	sp, #8
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	6039      	str	r1, [r7, #0]
  return LPS22DF_GetOutputDataRate(pObj, Odr);
 8005880:	6839      	ldr	r1, [r7, #0]
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f90c 	bl	8005aa0 <LPS22DF_GetOutputDataRate>
 8005888:	4603      	mov	r3, r0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <LPS22DF_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_SetOutputDataRate(LPS22DF_Object_t *pObj, float_t Odr)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b082      	sub	sp, #8
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
 800589a:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d106      	bne.n	80058b6 <LPS22DF_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22DF_SetOutputDataRate_When_Enabled(pObj, Odr);
 80058a8:	ed97 0a00 	vldr	s0, [r7]
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f961 	bl	8005b74 <LPS22DF_SetOutputDataRate_When_Enabled>
 80058b2:	4603      	mov	r3, r0
 80058b4:	e005      	b.n	80058c2 <LPS22DF_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22DF_SetOutputDataRate_When_Disabled(pObj, Odr);
 80058b6:	ed97 0a00 	vldr	s0, [r7]
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f9e6 	bl	8005c8c <LPS22DF_SetOutputDataRate_When_Disabled>
 80058c0:	4603      	mov	r3, r0
  }
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <LPS22DF_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_GetPressure(LPS22DF_Object_t *pObj, float_t *Value)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b084      	sub	sp, #16
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	6039      	str	r1, [r7, #0]
  uint32_t pressure_raw;

  if (lps22df_pressure_raw_get(&(pObj->Ctx), &pressure_raw) != LPS22DF_OK)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	3320      	adds	r3, #32
 80058d8:	f107 020c 	add.w	r2, r7, #12
 80058dc:	4611      	mov	r1, r2
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fe56 	bl	8006590 <lps22df_pressure_raw_get>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d002      	beq.n	80058f0 <LPS22DF_PRESS_GetPressure+0x26>
  {
    return LPS22DF_ERROR;
 80058ea:	f04f 33ff 	mov.w	r3, #4294967295
 80058ee:	e009      	b.n	8005904 <LPS22DF_PRESS_GetPressure+0x3a>
  }

  *Value = lps22df_from_lsb_to_hPa((int32_t)pressure_raw);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 fb12 	bl	8005f1c <lps22df_from_lsb_to_hPa>
 80058f8:	eef0 7a40 	vmov.f32	s15, s0
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	edc3 7a00 	vstr	s15, [r3]

  return LPS22DF_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <LPS22DF_TEMP_Enable>:
  * @brief  Enable the LPS22DF temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_Enable(LPS22DF_Object_t *pObj)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800591a:	2b01      	cmp	r3, #1
 800591c:	d101      	bne.n	8005922 <LPS22DF_TEMP_Enable+0x16>
  {
    return LPS22DF_OK;
 800591e:	2300      	movs	r3, #0
 8005920:	e013      	b.n	800594a <LPS22DF_TEMP_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22df_mode_set(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f103 0220 	add.w	r2, r3, #32
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3333      	adds	r3, #51	@ 0x33
 800592c:	4619      	mov	r1, r3
 800592e:	4610      	mov	r0, r2
 8005930:	f000 fd04 	bl	800633c <lps22df_mode_set>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d002      	beq.n	8005940 <LPS22DF_TEMP_Enable+0x34>
  {
    return LPS22DF_ERROR;
 800593a:	f04f 33ff 	mov.w	r3, #4294967295
 800593e:	e004      	b.n	800594a <LPS22DF_TEMP_Enable+0x3e>
  }

  pObj->temp_is_enabled = 1;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22DF_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <LPS22DF_TEMP_Disable>:
  * @brief  Disable the LPS22DF temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_Disable(LPS22DF_Object_t *pObj)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b084      	sub	sp, #16
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <LPS22DF_TEMP_Disable+0x16>
  {
    return LPS22DF_OK;
 8005964:	2300      	movs	r3, #0
 8005966:	e030      	b.n	80059ca <LPS22DF_TEMP_Disable+0x78>
  }

  /* Check if the LPS22DF pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800596e:	2b00      	cmp	r3, #0
 8005970:	d126      	bne.n	80059c0 <LPS22DF_TEMP_Disable+0x6e>
  {
    lps22df_md_t val;

    /* Get current output data rate. */
    if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	3320      	adds	r3, #32
 8005976:	f107 020c 	add.w	r2, r7, #12
 800597a:	4611      	mov	r1, r2
 800597c:	4618      	mov	r0, r3
 800597e:	f000 fd3b 	bl	80063f8 <lps22df_mode_get>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <LPS22DF_TEMP_Disable+0x3c>
    {
      return LPS22DF_ERROR;
 8005988:	f04f 33ff 	mov.w	r3, #4294967295
 800598c:	e01d      	b.n	80059ca <LPS22DF_TEMP_Disable+0x78>
    }

    (void)memcpy(&pObj->last_odr, &val, sizeof(lps22df_md_t));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	3333      	adds	r3, #51	@ 0x33
 8005992:	461a      	mov	r2, r3
 8005994:	f107 030c 	add.w	r3, r7, #12
 8005998:	8819      	ldrh	r1, [r3, #0]
 800599a:	789b      	ldrb	r3, [r3, #2]
 800599c:	8011      	strh	r1, [r2, #0]
 800599e:	7093      	strb	r3, [r2, #2]

    val.odr = LPS22DF_ONE_SHOT;
 80059a0:	2300      	movs	r3, #0
 80059a2:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection - power down. */
    if (lps22df_mode_set(&(pObj->Ctx), &val) != LPS22DF_OK)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	3320      	adds	r3, #32
 80059a8:	f107 020c 	add.w	r2, r7, #12
 80059ac:	4611      	mov	r1, r2
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 fcc4 	bl	800633c <lps22df_mode_set>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d002      	beq.n	80059c0 <LPS22DF_TEMP_Disable+0x6e>
    {
      return LPS22DF_ERROR;
 80059ba:	f04f 33ff 	mov.w	r3, #4294967295
 80059be:	e004      	b.n	80059ca <LPS22DF_TEMP_Disable+0x78>
    }
  }

  pObj->temp_is_enabled = 0;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22DF_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <LPS22DF_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_GetOutputDataRate(LPS22DF_Object_t *pObj, float_t *Odr)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b082      	sub	sp, #8
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	6039      	str	r1, [r7, #0]
  return LPS22DF_GetOutputDataRate(pObj, Odr);
 80059dc:	6839      	ldr	r1, [r7, #0]
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f85e 	bl	8005aa0 <LPS22DF_GetOutputDataRate>
 80059e4:	4603      	mov	r3, r0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <LPS22DF_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_SetOutputDataRate(LPS22DF_Object_t *pObj, float_t Odr)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b082      	sub	sp, #8
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
 80059f6:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d106      	bne.n	8005a12 <LPS22DF_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22DF_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005a04:	ed97 0a00 	vldr	s0, [r7]
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 f8b3 	bl	8005b74 <LPS22DF_SetOutputDataRate_When_Enabled>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	e005      	b.n	8005a1e <LPS22DF_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22DF_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005a12:	ed97 0a00 	vldr	s0, [r7]
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f938 	bl	8005c8c <LPS22DF_SetOutputDataRate_When_Disabled>
 8005a1c:	4603      	mov	r3, r0
  }
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <LPS22DF_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_GetTemperature(LPS22DF_Object_t *pObj, float_t *Value)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b084      	sub	sp, #16
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
 8005a2e:	6039      	str	r1, [r7, #0]
  int16_t temperature_raw;

  if (lps22df_temperature_raw_get(&(pObj->Ctx), &temperature_raw) != LPS22DF_OK)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	3320      	adds	r3, #32
 8005a34:	f107 020e 	add.w	r2, r7, #14
 8005a38:	4611      	mov	r1, r2
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 fdd1 	bl	80065e2 <lps22df_temperature_raw_get>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d002      	beq.n	8005a4c <LPS22DF_TEMP_GetTemperature+0x26>
  {
    return LPS22DF_ERROR;
 8005a46:	f04f 33ff 	mov.w	r3, #4294967295
 8005a4a:	e00a      	b.n	8005a62 <LPS22DF_TEMP_GetTemperature+0x3c>
  }

  *Value = lps22df_from_lsb_to_celsius(temperature_raw);
 8005a4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 fa7b 	bl	8005f4c <lps22df_from_lsb_to_celsius>
 8005a56:	eef0 7a40 	vmov.f32	s15, s0
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	edc3 7a00 	vstr	s15, [r3]

  return LPS22DF_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <LPS22DF_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_Write_Reg(LPS22DF_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b082      	sub	sp, #8
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
 8005a72:	460b      	mov	r3, r1
 8005a74:	70fb      	strb	r3, [r7, #3]
 8005a76:	4613      	mov	r3, r2
 8005a78:	70bb      	strb	r3, [r7, #2]
  if (lps22df_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22DF_OK)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f103 0020 	add.w	r0, r3, #32
 8005a80:	1cba      	adds	r2, r7, #2
 8005a82:	78f9      	ldrb	r1, [r7, #3]
 8005a84:	2301      	movs	r3, #1
 8005a86:	f000 fa15 	bl	8005eb4 <lps22df_write_reg>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <LPS22DF_Write_Reg+0x2c>
  {
    return LPS22DF_ERROR;
 8005a90:	f04f 33ff 	mov.w	r3, #4294967295
 8005a94:	e000      	b.n	8005a98 <LPS22DF_Write_Reg+0x2e>
  }

  return LPS22DF_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3708      	adds	r7, #8
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <LPS22DF_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_GetOutputDataRate(LPS22DF_Object_t *pObj, float_t *Odr)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22DF_OK;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60fb      	str	r3, [r7, #12]
  lps22df_md_t val;

  if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	3320      	adds	r3, #32
 8005ab2:	f107 0208 	add.w	r2, r7, #8
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 fc9d 	bl	80063f8 <lps22df_mode_get>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <LPS22DF_GetOutputDataRate+0x2a>
  {
    return LPS22DF_ERROR;
 8005ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac8:	e044      	b.n	8005b54 <LPS22DF_GetOutputDataRate+0xb4>
  }

  switch (val.odr)
 8005aca:	7a3b      	ldrb	r3, [r7, #8]
 8005acc:	2b08      	cmp	r3, #8
 8005ace:	d83c      	bhi.n	8005b4a <LPS22DF_GetOutputDataRate+0xaa>
 8005ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ad8 <LPS22DF_GetOutputDataRate+0x38>)
 8005ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad6:	bf00      	nop
 8005ad8:	08005afd 	.word	0x08005afd
 8005adc:	08005b07 	.word	0x08005b07
 8005ae0:	08005b11 	.word	0x08005b11
 8005ae4:	08005b1b 	.word	0x08005b1b
 8005ae8:	08005b23 	.word	0x08005b23
 8005aec:	08005b2b 	.word	0x08005b2b
 8005af0:	08005b33 	.word	0x08005b33
 8005af4:	08005b3b 	.word	0x08005b3b
 8005af8:	08005b43 	.word	0x08005b43
  {
    case LPS22DF_ONE_SHOT:
      *Odr = 0.0f;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	f04f 0200 	mov.w	r2, #0
 8005b02:	601a      	str	r2, [r3, #0]
      break;
 8005b04:	e025      	b.n	8005b52 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_1Hz:
      *Odr = 1.0f;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005b0c:	601a      	str	r2, [r3, #0]
      break;
 8005b0e:	e020      	b.n	8005b52 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_4Hz:
      *Odr = 4.0f;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8005b16:	601a      	str	r2, [r3, #0]
      break;
 8005b18:	e01b      	b.n	8005b52 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_10Hz:
      *Odr = 10.0f;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	4a0f      	ldr	r2, [pc, #60]	@ (8005b5c <LPS22DF_GetOutputDataRate+0xbc>)
 8005b1e:	601a      	str	r2, [r3, #0]
      break;
 8005b20:	e017      	b.n	8005b52 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_25Hz:
      *Odr = 25.0f;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	4a0e      	ldr	r2, [pc, #56]	@ (8005b60 <LPS22DF_GetOutputDataRate+0xc0>)
 8005b26:	601a      	str	r2, [r3, #0]
      break;
 8005b28:	e013      	b.n	8005b52 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_50Hz:
      *Odr = 50.0f;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8005b64 <LPS22DF_GetOutputDataRate+0xc4>)
 8005b2e:	601a      	str	r2, [r3, #0]
      break;
 8005b30:	e00f      	b.n	8005b52 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_75Hz:
      *Odr = 75.0f;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	4a0c      	ldr	r2, [pc, #48]	@ (8005b68 <LPS22DF_GetOutputDataRate+0xc8>)
 8005b36:	601a      	str	r2, [r3, #0]
      break;
 8005b38:	e00b      	b.n	8005b52 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_100Hz:
      *Odr = 100.0f;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	4a0b      	ldr	r2, [pc, #44]	@ (8005b6c <LPS22DF_GetOutputDataRate+0xcc>)
 8005b3e:	601a      	str	r2, [r3, #0]
      break;
 8005b40:	e007      	b.n	8005b52 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_200Hz:
      *Odr = 200.0f;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	4a0a      	ldr	r2, [pc, #40]	@ (8005b70 <LPS22DF_GetOutputDataRate+0xd0>)
 8005b46:	601a      	str	r2, [r3, #0]
      break;
 8005b48:	e003      	b.n	8005b52 <LPS22DF_GetOutputDataRate+0xb2>

    default:
      ret = LPS22DF_ERROR;
 8005b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b4e:	60fb      	str	r3, [r7, #12]
      break;
 8005b50:	bf00      	nop
  }

  return ret;
 8005b52:	68fb      	ldr	r3, [r7, #12]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	41200000 	.word	0x41200000
 8005b60:	41c80000 	.word	0x41c80000
 8005b64:	42480000 	.word	0x42480000
 8005b68:	42960000 	.word	0x42960000
 8005b6c:	42c80000 	.word	0x42c80000
 8005b70:	43480000 	.word	0x43480000

08005b74 <LPS22DF_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_SetOutputDataRate_When_Enabled(LPS22DF_Object_t *pObj, float_t Odr)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	ed87 0a00 	vstr	s0, [r7]
  lps22df_md_t new_val;

  if (lps22df_mode_get(&(pObj->Ctx), &new_val) != LPS22DF_OK)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	3320      	adds	r3, #32
 8005b84:	f107 020c 	add.w	r2, r7, #12
 8005b88:	4611      	mov	r1, r2
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 fc34 	bl	80063f8 <lps22df_mode_get>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d002      	beq.n	8005b9c <LPS22DF_SetOutputDataRate_When_Enabled+0x28>
  {
    return LPS22DF_ERROR;
 8005b96:	f04f 33ff 	mov.w	r3, #4294967295
 8005b9a:	e06c      	b.n	8005c76 <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  new_val.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
                : (Odr <=   4.0f) ? LPS22DF_4Hz
 8005b9c:	edd7 7a00 	vldr	s15, [r7]
 8005ba0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ba4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bac:	d801      	bhi.n	8005bb2 <LPS22DF_SetOutputDataRate_When_Enabled+0x3e>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e042      	b.n	8005c38 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005bb2:	edd7 7a00 	vldr	s15, [r7]
 8005bb6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8005bba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bc2:	d801      	bhi.n	8005bc8 <LPS22DF_SetOutputDataRate_When_Enabled+0x54>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	e037      	b.n	8005c38 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005bc8:	edd7 7a00 	vldr	s15, [r7]
 8005bcc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005bd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bd8:	d801      	bhi.n	8005bde <LPS22DF_SetOutputDataRate_When_Enabled+0x6a>
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e02c      	b.n	8005c38 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005bde:	edd7 7a00 	vldr	s15, [r7]
 8005be2:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8005be6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bee:	d801      	bhi.n	8005bf4 <LPS22DF_SetOutputDataRate_When_Enabled+0x80>
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	e021      	b.n	8005c38 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005bf4:	edd7 7a00 	vldr	s15, [r7]
 8005bf8:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8005c80 <LPS22DF_SetOutputDataRate_When_Enabled+0x10c>
 8005bfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c04:	d801      	bhi.n	8005c0a <LPS22DF_SetOutputDataRate_When_Enabled+0x96>
 8005c06:	2305      	movs	r3, #5
 8005c08:	e016      	b.n	8005c38 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005c0a:	edd7 7a00 	vldr	s15, [r7]
 8005c0e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8005c84 <LPS22DF_SetOutputDataRate_When_Enabled+0x110>
 8005c12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c1a:	d801      	bhi.n	8005c20 <LPS22DF_SetOutputDataRate_When_Enabled+0xac>
 8005c1c:	2306      	movs	r3, #6
 8005c1e:	e00b      	b.n	8005c38 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005c20:	edd7 7a00 	vldr	s15, [r7]
 8005c24:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8005c88 <LPS22DF_SetOutputDataRate_When_Enabled+0x114>
 8005c28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c30:	d801      	bhi.n	8005c36 <LPS22DF_SetOutputDataRate_When_Enabled+0xc2>
 8005c32:	2307      	movs	r3, #7
 8005c34:	e000      	b.n	8005c38 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005c36:	2308      	movs	r3, #8
  new_val.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
 8005c38:	733b      	strb	r3, [r7, #12]
                : (Odr <=  50.0f) ? LPS22DF_50Hz
                : (Odr <=  75.0f) ? LPS22DF_75Hz
                : (Odr <= 100.0f) ? LPS22DF_100Hz
                :                   LPS22DF_200Hz;

  if (lps22df_mode_set(&(pObj->Ctx), &new_val) != LPS22DF_OK)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	3320      	adds	r3, #32
 8005c3e:	f107 020c 	add.w	r2, r7, #12
 8005c42:	4611      	mov	r1, r2
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 fb79 	bl	800633c <lps22df_mode_set>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d002      	beq.n	8005c56 <LPS22DF_SetOutputDataRate_When_Enabled+0xe2>
  {
    return LPS22DF_ERROR;
 8005c50:	f04f 33ff 	mov.w	r3, #4294967295
 8005c54:	e00f      	b.n	8005c76 <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  if (lps22df_mode_get(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f103 0220 	add.w	r2, r3, #32
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3333      	adds	r3, #51	@ 0x33
 8005c60:	4619      	mov	r1, r3
 8005c62:	4610      	mov	r0, r2
 8005c64:	f000 fbc8 	bl	80063f8 <lps22df_mode_get>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d002      	beq.n	8005c74 <LPS22DF_SetOutputDataRate_When_Enabled+0x100>
  {
    return LPS22DF_ERROR;
 8005c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c72:	e000      	b.n	8005c76 <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  return LPS22DF_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	42480000 	.word	0x42480000
 8005c84:	42960000 	.word	0x42960000
 8005c88:	42c80000 	.word	0x42c80000

08005c8c <LPS22DF_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_SetOutputDataRate_When_Disabled(LPS22DF_Object_t *pObj, float_t Odr)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
                       : (Odr <=   4.0f) ? LPS22DF_4Hz
 8005c98:	edd7 7a00 	vldr	s15, [r7]
 8005c9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ca0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ca8:	d801      	bhi.n	8005cae <LPS22DF_SetOutputDataRate_When_Disabled+0x22>
 8005caa:	2301      	movs	r3, #1
 8005cac:	e042      	b.n	8005d34 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005cae:	edd7 7a00 	vldr	s15, [r7]
 8005cb2:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8005cb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cbe:	d801      	bhi.n	8005cc4 <LPS22DF_SetOutputDataRate_When_Disabled+0x38>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e037      	b.n	8005d34 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005cc4:	edd7 7a00 	vldr	s15, [r7]
 8005cc8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005ccc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cd4:	d801      	bhi.n	8005cda <LPS22DF_SetOutputDataRate_When_Disabled+0x4e>
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e02c      	b.n	8005d34 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005cda:	edd7 7a00 	vldr	s15, [r7]
 8005cde:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8005ce2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cea:	d801      	bhi.n	8005cf0 <LPS22DF_SetOutputDataRate_When_Disabled+0x64>
 8005cec:	2304      	movs	r3, #4
 8005cee:	e021      	b.n	8005d34 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005cf0:	edd7 7a00 	vldr	s15, [r7]
 8005cf4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8005d48 <LPS22DF_SetOutputDataRate_When_Disabled+0xbc>
 8005cf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d00:	d801      	bhi.n	8005d06 <LPS22DF_SetOutputDataRate_When_Disabled+0x7a>
 8005d02:	2305      	movs	r3, #5
 8005d04:	e016      	b.n	8005d34 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005d06:	edd7 7a00 	vldr	s15, [r7]
 8005d0a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8005d4c <LPS22DF_SetOutputDataRate_When_Disabled+0xc0>
 8005d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d16:	d801      	bhi.n	8005d1c <LPS22DF_SetOutputDataRate_When_Disabled+0x90>
 8005d18:	2306      	movs	r3, #6
 8005d1a:	e00b      	b.n	8005d34 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005d1c:	edd7 7a00 	vldr	s15, [r7]
 8005d20:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8005d50 <LPS22DF_SetOutputDataRate_When_Disabled+0xc4>
 8005d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d2c:	d801      	bhi.n	8005d32 <LPS22DF_SetOutputDataRate_When_Disabled+0xa6>
 8005d2e:	2307      	movs	r3, #7
 8005d30:	e000      	b.n	8005d34 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005d32:	2308      	movs	r3, #8
  pObj->last_odr.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                       : (Odr <=  50.0f) ? LPS22DF_50Hz
                       : (Odr <=  75.0f) ? LPS22DF_75Hz
                       : (Odr <= 100.0f) ? LPS22DF_100Hz
                       :                   LPS22DF_200Hz;

  return LPS22DF_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	42480000 	.word	0x42480000
 8005d4c:	42960000 	.word	0x42960000
 8005d50:	42c80000 	.word	0x42c80000

08005d54 <LPS22DF_Initialize>:
  * @brief  Initialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_Initialize(LPS22DF_Object_t *pObj)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  lps22df_md_t md;
  lps22df_bus_mode_t bus_mode;

  /* Set bdu and if_inc recommended for driver usage */
  if (lps22df_init_set(&(pObj->Ctx), LPS22DF_DRV_RDY) != LPS22DF_OK)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	3320      	adds	r3, #32
 8005d60:	2100      	movs	r1, #0
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 f983 	bl	800606e <lps22df_init_set>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d002      	beq.n	8005d74 <LPS22DF_Initialize+0x20>
  {
    return LPS22DF_ERROR;
 8005d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d72:	e047      	b.n	8005e04 <LPS22DF_Initialize+0xb0>
  }

  /* Select bus interface */
  if (pObj->IO.BusType == LPS22DF_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d102      	bne.n	8005d82 <LPS22DF_Initialize+0x2e>
  {
    bus_mode.interface = LPS22DF_SPI_3W;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	723b      	strb	r3, [r7, #8]
 8005d80:	e008      	b.n	8005d94 <LPS22DF_Initialize+0x40>
  }
  else if (pObj->IO.BusType == LPS22DF_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d102      	bne.n	8005d90 <LPS22DF_Initialize+0x3c>
  {
    bus_mode.interface = LPS22DF_SPI_4W;
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	723b      	strb	r3, [r7, #8]
 8005d8e:	e001      	b.n	8005d94 <LPS22DF_Initialize+0x40>
  }
  else
  {
    bus_mode.interface = LPS22DF_SEL_BY_HW;
 8005d90:	2300      	movs	r3, #0
 8005d92:	723b      	strb	r3, [r7, #8]
  }

  bus_mode.filter = LPS22DF_FILTER_AUTO;
 8005d94:	2300      	movs	r3, #0
 8005d96:	727b      	strb	r3, [r7, #9]
  if (lps22df_bus_mode_set(&(pObj->Ctx), &bus_mode) != LPS22DF_OK)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	3320      	adds	r3, #32
 8005d9c:	f107 0208 	add.w	r2, r7, #8
 8005da0:	4611      	mov	r1, r2
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 f901 	bl	8005faa <lps22df_bus_mode_set>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d002      	beq.n	8005db4 <LPS22DF_Initialize+0x60>
  {
    return LPS22DF_ERROR;
 8005dae:	f04f 33ff 	mov.w	r3, #4294967295
 8005db2:	e027      	b.n	8005e04 <LPS22DF_Initialize+0xb0>
  }

  /* Set Output Data Rate in Power Down */
  md.odr = LPS22DF_ONE_SHOT;
 8005db4:	2300      	movs	r3, #0
 8005db6:	733b      	strb	r3, [r7, #12]
  md.avg = LPS22DF_4_AVG;
 8005db8:	2300      	movs	r3, #0
 8005dba:	737b      	strb	r3, [r7, #13]
  md.lpf = LPS22DF_LPF_ODR_DIV_4;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	73bb      	strb	r3, [r7, #14]

  /* Power down the device */
  if (lps22df_mode_set(&(pObj->Ctx), &md) != LPS22DF_OK)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3320      	adds	r3, #32
 8005dc4:	f107 020c 	add.w	r2, r7, #12
 8005dc8:	4611      	mov	r1, r2
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 fab6 	bl	800633c <lps22df_mode_set>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d002      	beq.n	8005ddc <LPS22DF_Initialize+0x88>
  {
    return LPS22DF_ERROR;
 8005dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dda:	e013      	b.n	8005e04 <LPS22DF_Initialize+0xb0>
  }

  if (lps22df_mode_get(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f103 0220 	add.w	r2, r3, #32
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	3333      	adds	r3, #51	@ 0x33
 8005de6:	4619      	mov	r1, r3
 8005de8:	4610      	mov	r0, r2
 8005dea:	f000 fb05 	bl	80063f8 <lps22df_mode_get>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d002      	beq.n	8005dfa <LPS22DF_Initialize+0xa6>
  {
    return LPS22DF_ERROR;
 8005df4:	f04f 33ff 	mov.w	r3, #4294967295
 8005df8:	e004      	b.n	8005e04 <LPS22DF_Initialize+0xb0>
  }

  pObj->last_odr.odr = LPS22DF_25Hz;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2204      	movs	r2, #4
 8005dfe:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  return LPS22DF_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005e0c:	b590      	push	{r4, r7, lr}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	607a      	str	r2, [r7, #4]
 8005e16:	461a      	mov	r2, r3
 8005e18:	460b      	mov	r3, r1
 8005e1a:	72fb      	strb	r3, [r7, #11]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	813b      	strh	r3, [r7, #8]
  LPS22DF_Object_t *pObj = (LPS22DF_Object_t *)Handle;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	695c      	ldr	r4, [r3, #20]
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	7b1b      	ldrb	r3, [r3, #12]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	7afb      	ldrb	r3, [r7, #11]
 8005e30:	b299      	uxth	r1, r3
 8005e32:	893b      	ldrh	r3, [r7, #8]
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	47a0      	blx	r4
 8005e38:	4603      	mov	r3, r0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	371c      	adds	r7, #28
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd90      	pop	{r4, r7, pc}

08005e42 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005e42:	b590      	push	{r4, r7, lr}
 8005e44:	b087      	sub	sp, #28
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	60f8      	str	r0, [r7, #12]
 8005e4a:	607a      	str	r2, [r7, #4]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	460b      	mov	r3, r1
 8005e50:	72fb      	strb	r3, [r7, #11]
 8005e52:	4613      	mov	r3, r2
 8005e54:	813b      	strh	r3, [r7, #8]
  LPS22DF_Object_t *pObj = (LPS22DF_Object_t *)Handle;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	691c      	ldr	r4, [r3, #16]
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	7b1b      	ldrb	r3, [r3, #12]
 8005e62:	4618      	mov	r0, r3
 8005e64:	7afb      	ldrb	r3, [r7, #11]
 8005e66:	b299      	uxth	r1, r3
 8005e68:	893b      	ldrh	r3, [r7, #8]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	47a0      	blx	r4
 8005e6e:	4603      	mov	r3, r0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	371c      	adds	r7, #28
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd90      	pop	{r4, r7, pc}

08005e78 <lps22df_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lps22df_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                uint16_t len)
{
 8005e78:	b590      	push	{r4, r7, lr}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	607a      	str	r2, [r7, #4]
 8005e82:	461a      	mov	r2, r3
 8005e84:	460b      	mov	r3, r1
 8005e86:	72fb      	strb	r3, [r7, #11]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d102      	bne.n	8005e98 <lps22df_read_reg+0x20>
  {
    return -1;
 8005e92:	f04f 33ff 	mov.w	r3, #4294967295
 8005e96:	e009      	b.n	8005eac <lps22df_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	685c      	ldr	r4, [r3, #4]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	68d8      	ldr	r0, [r3, #12]
 8005ea0:	893b      	ldrh	r3, [r7, #8]
 8005ea2:	7af9      	ldrb	r1, [r7, #11]
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	47a0      	blx	r4
 8005ea8:	6178      	str	r0, [r7, #20]

  return ret;
 8005eaa:	697b      	ldr	r3, [r7, #20]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	371c      	adds	r7, #28
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd90      	pop	{r4, r7, pc}

08005eb4 <lps22df_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lps22df_write_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                 uint16_t len)
{
 8005eb4:	b590      	push	{r4, r7, lr}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	607a      	str	r2, [r7, #4]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	72fb      	strb	r3, [r7, #11]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d102      	bne.n	8005ed4 <lps22df_write_reg+0x20>
  {
    return -1;
 8005ece:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed2:	e009      	b.n	8005ee8 <lps22df_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681c      	ldr	r4, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	68d8      	ldr	r0, [r3, #12]
 8005edc:	893b      	ldrh	r3, [r7, #8]
 8005ede:	7af9      	ldrb	r1, [r7, #11]
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	47a0      	blx	r4
 8005ee4:	6178      	str	r0, [r7, #20]

  return ret;
 8005ee6:	697b      	ldr	r3, [r7, #20]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	371c      	adds	r7, #28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd90      	pop	{r4, r7, pc}

08005ef0 <bytecpy>:
  * @{
  *
  */

static void bytecpy(uint8_t *target, uint8_t *source)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  if ((target != NULL) && (source != NULL))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d006      	beq.n	8005f0e <bytecpy+0x1e>
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <bytecpy+0x1e>
  {
    *target = *source;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	781a      	ldrb	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	701a      	strb	r2, [r3, #0]
  }
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
	...

08005f1c <lps22df_from_lsb_to_hPa>:
  * @{
  *
  */

float_t lps22df_from_lsb_to_hPa(int32_t lsb)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);   /* 4096.0f * 256 */
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f2e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005f48 <lps22df_from_lsb_to_hPa+0x2c>
 8005f32:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f36:	eef0 7a66 	vmov.f32	s15, s13
}
 8005f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	49800000 	.word	0x49800000

08005f4c <lps22df_from_lsb_to_celsius>:

float_t lps22df_from_lsb_to_celsius(int16_t lsb)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	4603      	mov	r3, r0
 8005f54:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 8005f56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f5a:	ee07 3a90 	vmov	s15, r3
 8005f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f62:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005f7c <lps22df_from_lsb_to_celsius+0x30>
 8005f66:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f6a:	eef0 7a66 	vmov.f32	s15, s13
}
 8005f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	42c80000 	.word	0x42c80000

08005f80 <lps22df_id_get>:
  * @param  val   ID values.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_id_get(const stmdev_ctx_t *ctx, lps22df_id_t *val)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  uint8_t reg;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_WHO_AM_I, &reg, 1);
 8005f8a:	f107 020b 	add.w	r2, r7, #11
 8005f8e:	2301      	movs	r3, #1
 8005f90:	210f      	movs	r1, #15
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff ff70 	bl	8005e78 <lps22df_read_reg>
 8005f98:	60f8      	str	r0, [r7, #12]
  val->whoami = reg;
 8005f9a:	7afa      	ldrb	r2, [r7, #11]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	701a      	strb	r2, [r3, #0]

  return ret;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <lps22df_bus_mode_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_bus_mode_set(const stmdev_ctx_t *ctx, lps22df_bus_mode_t *val)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b086      	sub	sp, #24
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	6039      	str	r1, [r7, #0]
  lps22df_i3c_if_ctrl_t i3c_if_ctrl;
  lps22df_if_ctrl_t if_ctrl;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 8005fb4:	f107 020c 	add.w	r2, r7, #12
 8005fb8:	2301      	movs	r3, #1
 8005fba:	210e      	movs	r1, #14
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7ff ff5b 	bl	8005e78 <lps22df_read_reg>
 8005fc2:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d124      	bne.n	8006014 <lps22df_bus_mode_set+0x6a>
  {
    if_ctrl.i2c_i3c_dis = ((uint8_t)val->interface & 0x02U) >> 1;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	085b      	lsrs	r3, r3, #1
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	7b3b      	ldrb	r3, [r7, #12]
 8005fd8:	f362 1386 	bfi	r3, r2, #6, #1
 8005fdc:	733b      	strb	r3, [r7, #12]
    if_ctrl.int_en_i3c = ((uint8_t)val->interface & 0x04U) >> 2;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	089b      	lsrs	r3, r3, #2
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	7b3b      	ldrb	r3, [r7, #12]
 8005fec:	f362 13c7 	bfi	r3, r2, #7, #1
 8005ff0:	733b      	strb	r3, [r7, #12]
    if_ctrl.sim = ((uint8_t)val->interface & 0x01U);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	7b3b      	ldrb	r3, [r7, #12]
 8005ffe:	f362 1345 	bfi	r3, r2, #5, #1
 8006002:	733b      	strb	r3, [r7, #12]
    ret = lps22df_write_reg(ctx, LPS22DF_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 8006004:	f107 020c 	add.w	r2, r7, #12
 8006008:	2301      	movs	r3, #1
 800600a:	210e      	movs	r1, #14
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7ff ff51 	bl	8005eb4 <lps22df_write_reg>
 8006012:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0)
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d107      	bne.n	800602a <lps22df_bus_mode_set+0x80>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_I3C_IF_CTRL,
 800601a:	f107 0210 	add.w	r2, r7, #16
 800601e:	2301      	movs	r3, #1
 8006020:	2119      	movs	r1, #25
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7ff ff28 	bl	8005e78 <lps22df_read_reg>
 8006028:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_if_ctrl, 1);
  }
  if (ret == 0)
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d119      	bne.n	8006064 <lps22df_bus_mode_set+0xba>
  {
    i3c_if_ctrl.asf_on = (uint8_t)val->filter & 0x01U;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	785b      	ldrb	r3, [r3, #1]
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	b2da      	uxtb	r2, r3
 800603a:	7c3b      	ldrb	r3, [r7, #16]
 800603c:	f362 1345 	bfi	r3, r2, #5, #1
 8006040:	743b      	strb	r3, [r7, #16]
    i3c_if_ctrl.i3c_bus_avb_sel = (uint8_t)val->i3c_ibi_time & 0x03U;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	789b      	ldrb	r3, [r3, #2]
 8006046:	f003 0303 	and.w	r3, r3, #3
 800604a:	b2da      	uxtb	r2, r3
 800604c:	7c3b      	ldrb	r3, [r7, #16]
 800604e:	f362 0301 	bfi	r3, r2, #0, #2
 8006052:	743b      	strb	r3, [r7, #16]
    ret = lps22df_write_reg(ctx, LPS22DF_I3C_IF_CTRL,
 8006054:	f107 0210 	add.w	r2, r7, #16
 8006058:	2301      	movs	r3, #1
 800605a:	2119      	movs	r1, #25
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f7ff ff29 	bl	8005eb4 <lps22df_write_reg>
 8006062:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_if_ctrl, 1);
  }
  return ret;
 8006064:	697b      	ldr	r3, [r7, #20]
}
 8006066:	4618      	mov	r0, r3
 8006068:	3718      	adds	r7, #24
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <lps22df_init_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_init_set(const stmdev_ctx_t *ctx, lps22df_init_t val)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b08a      	sub	sp, #40	@ 0x28
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
 8006076:	460b      	mov	r3, r1
 8006078:	70fb      	strb	r3, [r7, #3]
  lps22df_ctrl_reg2_t ctrl_reg2;
  lps22df_ctrl_reg3_t ctrl_reg3;
  lps22df_int_source_t int_src;
  lps22df_stat_t status;
  uint8_t reg[2], cnt = 0;
 800607a:	2300      	movs	r3, #0
 800607c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG2, reg, 2);
 8006080:	f107 020c 	add.w	r2, r7, #12
 8006084:	2302      	movs	r3, #2
 8006086:	2111      	movs	r1, #17
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f7ff fef5 	bl	8005e78 <lps22df_read_reg>
 800608e:	6238      	str	r0, [r7, #32]
  if (ret == 0)
 8006090:	6a3b      	ldr	r3, [r7, #32]
 8006092:	2b00      	cmp	r3, #0
 8006094:	f040 80c8 	bne.w	8006228 <lps22df_init_set+0x1ba>
  {
    bytecpy((uint8_t *)&ctrl_reg2, &reg[0]);
 8006098:	f107 020c 	add.w	r2, r7, #12
 800609c:	f107 031c 	add.w	r3, r7, #28
 80060a0:	4611      	mov	r1, r2
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7ff ff24 	bl	8005ef0 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg3, &reg[1]);
 80060a8:	f107 030c 	add.w	r3, r7, #12
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	f107 0318 	add.w	r3, r7, #24
 80060b2:	4611      	mov	r1, r2
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7ff ff1b 	bl	8005ef0 <bytecpy>

    switch (val)
 80060ba:	78fb      	ldrb	r3, [r7, #3]
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d043      	beq.n	8006148 <lps22df_init_set+0xda>
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	f300 809d 	bgt.w	8006200 <lps22df_init_set+0x192>
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d078      	beq.n	80061bc <lps22df_init_set+0x14e>
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	f040 8098 	bne.w	8006200 <lps22df_init_set+0x192>
    {
      case LPS22DF_BOOT:
        ctrl_reg2.boot = PROPERTY_ENABLE;
 80060d0:	7f3b      	ldrb	r3, [r7, #28]
 80060d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060d6:	773b      	strb	r3, [r7, #28]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 80060d8:	f107 021c 	add.w	r2, r7, #28
 80060dc:	2301      	movs	r3, #1
 80060de:	2111      	movs	r1, #17
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7ff fee7 	bl	8005eb4 <lps22df_write_reg>
 80060e6:	6238      	str	r0, [r7, #32]
                                (uint8_t *)&ctrl_reg2, 1);
        if (ret != 0)
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f040 8095 	bne.w	800621a <lps22df_init_set+0x1ac>
          break;
        }

        do
        {
          ret = lps22df_read_reg(ctx, LPS22DF_INT_SOURCE, (uint8_t *)&int_src, 1);
 80060f0:	f107 0214 	add.w	r2, r7, #20
 80060f4:	2301      	movs	r3, #1
 80060f6:	2124      	movs	r1, #36	@ 0x24
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7ff febd 	bl	8005e78 <lps22df_read_reg>
 80060fe:	6238      	str	r0, [r7, #32]
          if (ret != 0)
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d115      	bne.n	8006132 <lps22df_init_set+0xc4>
          {
            break;
          }

          /* boot procedue ended correctly */
          if (int_src.boot_on == 0U)
 8006106:	7d3b      	ldrb	r3, [r7, #20]
 8006108:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d011      	beq.n	8006136 <lps22df_init_set+0xc8>
          {
            break;
          }

          if (ctx->mdelay != NULL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <lps22df_init_set+0xb4>
          {
            ctx->mdelay(10); /* 10ms of boot time */
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	200a      	movs	r0, #10
 8006120:	4798      	blx	r3
          }
        } while (cnt++ < 5U);
 8006122:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 800612c:	2b04      	cmp	r3, #4
 800612e:	d9df      	bls.n	80060f0 <lps22df_init_set+0x82>
 8006130:	e002      	b.n	8006138 <lps22df_init_set+0xca>
            break;
 8006132:	bf00      	nop
 8006134:	e000      	b.n	8006138 <lps22df_init_set+0xca>
            break;
 8006136:	bf00      	nop

        if (cnt >= 5U)
 8006138:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800613c:	2b04      	cmp	r3, #4
 800613e:	d96e      	bls.n	800621e <lps22df_init_set+0x1b0>
        {
          ret = -1;  /* boot procedure failed */
 8006140:	f04f 33ff 	mov.w	r3, #4294967295
 8006144:	623b      	str	r3, [r7, #32]
        }

        break;
 8006146:	e06a      	b.n	800621e <lps22df_init_set+0x1b0>
      case LPS22DF_RESET:
        ctrl_reg2.swreset = PROPERTY_ENABLE;
 8006148:	7f3b      	ldrb	r3, [r7, #28]
 800614a:	f043 0304 	orr.w	r3, r3, #4
 800614e:	773b      	strb	r3, [r7, #28]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8006150:	f107 021c 	add.w	r2, r7, #28
 8006154:	2301      	movs	r3, #1
 8006156:	2111      	movs	r1, #17
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f7ff feab 	bl	8005eb4 <lps22df_write_reg>
 800615e:	6238      	str	r0, [r7, #32]
                                (uint8_t *)&ctrl_reg2, 1);
        if (ret != 0)
 8006160:	6a3b      	ldr	r3, [r7, #32]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d15d      	bne.n	8006222 <lps22df_init_set+0x1b4>
          break;
        }

        do
        {
          ret = lps22df_status_get(ctx, &status);
 8006166:	f107 0310 	add.w	r3, r7, #16
 800616a:	4619      	mov	r1, r3
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f860 	bl	8006232 <lps22df_status_get>
 8006172:	6238      	str	r0, [r7, #32]
          if (ret != 0)
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d115      	bne.n	80061a6 <lps22df_init_set+0x138>
          {
            break;
          }

          /* sw-reset procedue ended correctly */
          if (status.sw_reset == 0U)
 800617a:	7c3b      	ldrb	r3, [r7, #16]
 800617c:	f003 0301 	and.w	r3, r3, #1
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d011      	beq.n	80061aa <lps22df_init_set+0x13c>
          {
            break;
          }

          if (ctx->mdelay != NULL)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <lps22df_init_set+0x128>
          {
            ctx->mdelay(1); /* should be 50 us */
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	2001      	movs	r0, #1
 8006194:	4798      	blx	r3
          }
        } while (cnt++ < 5U);
 8006196:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 80061a0:	2b04      	cmp	r3, #4
 80061a2:	d9e0      	bls.n	8006166 <lps22df_init_set+0xf8>
 80061a4:	e002      	b.n	80061ac <lps22df_init_set+0x13e>
            break;
 80061a6:	bf00      	nop
 80061a8:	e000      	b.n	80061ac <lps22df_init_set+0x13e>
            break;
 80061aa:	bf00      	nop

        if (cnt >= 5U)
 80061ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061b0:	2b04      	cmp	r3, #4
 80061b2:	d938      	bls.n	8006226 <lps22df_init_set+0x1b8>
        {
          ret = -1;  /* sw-reset procedure failed */
 80061b4:	f04f 33ff 	mov.w	r3, #4294967295
 80061b8:	623b      	str	r3, [r7, #32]
        }

        break;
 80061ba:	e034      	b.n	8006226 <lps22df_init_set+0x1b8>
      case LPS22DF_DRV_RDY:
        ctrl_reg2.bdu = PROPERTY_ENABLE;
 80061bc:	7f3b      	ldrb	r3, [r7, #28]
 80061be:	f043 0308 	orr.w	r3, r3, #8
 80061c2:	773b      	strb	r3, [r7, #28]
        ctrl_reg3.if_add_inc = PROPERTY_ENABLE;
 80061c4:	7e3b      	ldrb	r3, [r7, #24]
 80061c6:	f043 0301 	orr.w	r3, r3, #1
 80061ca:	763b      	strb	r3, [r7, #24]
        bytecpy(&reg[0], (uint8_t *)&ctrl_reg2);
 80061cc:	f107 021c 	add.w	r2, r7, #28
 80061d0:	f107 030c 	add.w	r3, r7, #12
 80061d4:	4611      	mov	r1, r2
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7ff fe8a 	bl	8005ef0 <bytecpy>
        bytecpy(&reg[1], (uint8_t *)&ctrl_reg3);
 80061dc:	f107 0218 	add.w	r2, r7, #24
 80061e0:	f107 030c 	add.w	r3, r7, #12
 80061e4:	3301      	adds	r3, #1
 80061e6:	4611      	mov	r1, r2
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7ff fe81 	bl	8005ef0 <bytecpy>
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2, reg, 2);
 80061ee:	f107 020c 	add.w	r2, r7, #12
 80061f2:	2302      	movs	r3, #2
 80061f4:	2111      	movs	r1, #17
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7ff fe5c 	bl	8005eb4 <lps22df_write_reg>
 80061fc:	6238      	str	r0, [r7, #32]
        break;
 80061fe:	e013      	b.n	8006228 <lps22df_init_set+0x1ba>
      default:
        ctrl_reg2.swreset = PROPERTY_ENABLE;
 8006200:	7f3b      	ldrb	r3, [r7, #28]
 8006202:	f043 0304 	orr.w	r3, r3, #4
 8006206:	773b      	strb	r3, [r7, #28]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8006208:	f107 021c 	add.w	r2, r7, #28
 800620c:	2301      	movs	r3, #1
 800620e:	2111      	movs	r1, #17
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7ff fe4f 	bl	8005eb4 <lps22df_write_reg>
 8006216:	6238      	str	r0, [r7, #32]
                                (uint8_t *)&ctrl_reg2, 1);
        break;
 8006218:	e006      	b.n	8006228 <lps22df_init_set+0x1ba>
          break;
 800621a:	bf00      	nop
 800621c:	e004      	b.n	8006228 <lps22df_init_set+0x1ba>
        break;
 800621e:	bf00      	nop
 8006220:	e002      	b.n	8006228 <lps22df_init_set+0x1ba>
          break;
 8006222:	bf00      	nop
 8006224:	e000      	b.n	8006228 <lps22df_init_set+0x1ba>
        break;
 8006226:	bf00      	nop
    }
  }

  return ret;
 8006228:	6a3b      	ldr	r3, [r7, #32]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3728      	adds	r7, #40	@ 0x28
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <lps22df_status_get>:
  * @param  val   the status of the device.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_status_get(const stmdev_ctx_t *ctx, lps22df_stat_t *val)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b088      	sub	sp, #32
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	6039      	str	r1, [r7, #0]
  lps22df_int_source_t int_source;
  lps22df_ctrl_reg2_t ctrl_reg2;
  lps22df_status_t status;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG2,
 800623c:	f107 0210 	add.w	r2, r7, #16
 8006240:	2301      	movs	r3, #1
 8006242:	2111      	movs	r1, #17
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7ff fe17 	bl	8005e78 <lps22df_read_reg>
 800624a:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg2, 1);
  if (ret == 0)
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d107      	bne.n	8006262 <lps22df_status_get+0x30>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_INT_SOURCE, (uint8_t *)&int_source, 1);
 8006252:	f107 0214 	add.w	r2, r7, #20
 8006256:	2301      	movs	r3, #1
 8006258:	2124      	movs	r1, #36	@ 0x24
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7ff fe0c 	bl	8005e78 <lps22df_read_reg>
 8006260:	61f8      	str	r0, [r7, #28]
  }
  if (ret == 0)
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d107      	bne.n	8006278 <lps22df_status_get+0x46>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_STATUS, (uint8_t *)&status, 1);
 8006268:	f107 020c 	add.w	r2, r7, #12
 800626c:	2301      	movs	r3, #1
 800626e:	2127      	movs	r1, #39	@ 0x27
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7ff fe01 	bl	8005e78 <lps22df_read_reg>
 8006276:	61f8      	str	r0, [r7, #28]
  }
  if (ret == 0)
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d107      	bne.n	800628e <lps22df_status_get+0x5c>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_INTERRUPT_CFG,
 800627e:	f107 0218 	add.w	r2, r7, #24
 8006282:	2301      	movs	r3, #1
 8006284:	210b      	movs	r1, #11
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7ff fdf6 	bl	8005e78 <lps22df_read_reg>
 800628c:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&interrupt_cfg, 1);
  }
  val->sw_reset  = ctrl_reg2.swreset;
 800628e:	7c3b      	ldrb	r3, [r7, #16]
 8006290:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006294:	b2d9      	uxtb	r1, r3
 8006296:	683a      	ldr	r2, [r7, #0]
 8006298:	7813      	ldrb	r3, [r2, #0]
 800629a:	f361 0300 	bfi	r3, r1, #0, #1
 800629e:	7013      	strb	r3, [r2, #0]
  val->boot      = int_source.boot_on;
 80062a0:	7d3b      	ldrb	r3, [r7, #20]
 80062a2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80062a6:	b2d9      	uxtb	r1, r3
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	7813      	ldrb	r3, [r2, #0]
 80062ac:	f361 0341 	bfi	r3, r1, #1, #1
 80062b0:	7013      	strb	r3, [r2, #0]
  val->drdy_pres = status.p_da;
 80062b2:	7b3b      	ldrb	r3, [r7, #12]
 80062b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80062b8:	b2d9      	uxtb	r1, r3
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	7813      	ldrb	r3, [r2, #0]
 80062be:	f361 0382 	bfi	r3, r1, #2, #1
 80062c2:	7013      	strb	r3, [r2, #0]
  val->drdy_temp = status.t_da;
 80062c4:	7b3b      	ldrb	r3, [r7, #12]
 80062c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80062ca:	b2d9      	uxtb	r1, r3
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	7813      	ldrb	r3, [r2, #0]
 80062d0:	f361 03c3 	bfi	r3, r1, #3, #1
 80062d4:	7013      	strb	r3, [r2, #0]
  val->ovr_pres  = status.p_or;
 80062d6:	7b3b      	ldrb	r3, [r7, #12]
 80062d8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80062dc:	b2d9      	uxtb	r1, r3
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	7813      	ldrb	r3, [r2, #0]
 80062e2:	f361 1304 	bfi	r3, r1, #4, #1
 80062e6:	7013      	strb	r3, [r2, #0]
  val->ovr_temp  = status.t_or;
 80062e8:	7b3b      	ldrb	r3, [r7, #12]
 80062ea:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80062ee:	b2d9      	uxtb	r1, r3
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	7813      	ldrb	r3, [r2, #0]
 80062f4:	f361 1345 	bfi	r3, r1, #5, #1
 80062f8:	7013      	strb	r3, [r2, #0]
  val->end_meas  = ~ctrl_reg2.oneshot;
 80062fa:	7c3b      	ldrb	r3, [r7, #16]
 80062fc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006300:	b2db      	uxtb	r3, r3
 8006302:	43db      	mvns	r3, r3
 8006304:	b2db      	uxtb	r3, r3
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	b2d9      	uxtb	r1, r3
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	7813      	ldrb	r3, [r2, #0]
 8006310:	f361 1386 	bfi	r3, r1, #6, #1
 8006314:	7013      	strb	r3, [r2, #0]
  val->ref_done = ~interrupt_cfg.autozero;
 8006316:	7e3b      	ldrb	r3, [r7, #24]
 8006318:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800631c:	b2db      	uxtb	r3, r3
 800631e:	43db      	mvns	r3, r3
 8006320:	b2db      	uxtb	r3, r3
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	b2d9      	uxtb	r1, r3
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	7813      	ldrb	r3, [r2, #0]
 800632c:	f361 13c7 	bfi	r3, r1, #7, #1
 8006330:	7013      	strb	r3, [r2, #0]

  return ret;
 8006332:	69fb      	ldr	r3, [r7, #28]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3720      	adds	r7, #32
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <lps22df_mode_set>:
  * @param  val   set the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_mode_set(const stmdev_ctx_t *ctx, lps22df_md_t *val)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  lps22df_ctrl_reg1_t ctrl_reg1;
  lps22df_ctrl_reg2_t ctrl_reg2;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 8006346:	f107 0208 	add.w	r2, r7, #8
 800634a:	2302      	movs	r3, #2
 800634c:	2110      	movs	r1, #16
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7ff fd92 	bl	8005e78 <lps22df_read_reg>
 8006354:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d148      	bne.n	80063ee <lps22df_mode_set+0xb2>
  {
    bytecpy((uint8_t *)&ctrl_reg1, &reg[0]);
 800635c:	f107 0208 	add.w	r2, r7, #8
 8006360:	f107 0310 	add.w	r3, r7, #16
 8006364:	4611      	mov	r1, r2
 8006366:	4618      	mov	r0, r3
 8006368:	f7ff fdc2 	bl	8005ef0 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg2, &reg[1]);
 800636c:	f107 0308 	add.w	r3, r7, #8
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	f107 030c 	add.w	r3, r7, #12
 8006376:	4611      	mov	r1, r2
 8006378:	4618      	mov	r0, r3
 800637a:	f7ff fdb9 	bl	8005ef0 <bytecpy>

    ctrl_reg1.odr = (uint8_t)val->odr;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	f003 030f 	and.w	r3, r3, #15
 8006386:	b2da      	uxtb	r2, r3
 8006388:	7c3b      	ldrb	r3, [r7, #16]
 800638a:	f362 03c6 	bfi	r3, r2, #3, #4
 800638e:	743b      	strb	r3, [r7, #16]
    ctrl_reg1.avg = (uint8_t)val->avg;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	785b      	ldrb	r3, [r3, #1]
 8006394:	f003 0307 	and.w	r3, r3, #7
 8006398:	b2da      	uxtb	r2, r3
 800639a:	7c3b      	ldrb	r3, [r7, #16]
 800639c:	f362 0302 	bfi	r3, r2, #0, #3
 80063a0:	743b      	strb	r3, [r7, #16]
    ctrl_reg2.en_lpfp = (uint8_t)val->lpf & 0x01U;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	789b      	ldrb	r3, [r3, #2]
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	7b3b      	ldrb	r3, [r7, #12]
 80063ae:	f362 1304 	bfi	r3, r2, #4, #1
 80063b2:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.lfpf_cfg = ((uint8_t)val->lpf & 0x02U) >> 2;
 80063b4:	7b3b      	ldrb	r3, [r7, #12]
 80063b6:	f023 0320 	bic.w	r3, r3, #32
 80063ba:	733b      	strb	r3, [r7, #12]

    bytecpy(&reg[0], (uint8_t *)&ctrl_reg1);
 80063bc:	f107 0210 	add.w	r2, r7, #16
 80063c0:	f107 0308 	add.w	r3, r7, #8
 80063c4:	4611      	mov	r1, r2
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7ff fd92 	bl	8005ef0 <bytecpy>
    bytecpy(&reg[1], (uint8_t *)&ctrl_reg2);
 80063cc:	f107 020c 	add.w	r2, r7, #12
 80063d0:	f107 0308 	add.w	r3, r7, #8
 80063d4:	3301      	adds	r3, #1
 80063d6:	4611      	mov	r1, r2
 80063d8:	4618      	mov	r0, r3
 80063da:	f7ff fd89 	bl	8005ef0 <bytecpy>
    ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 80063de:	f107 0208 	add.w	r2, r7, #8
 80063e2:	2302      	movs	r3, #2
 80063e4:	2110      	movs	r1, #16
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7ff fd64 	bl	8005eb4 <lps22df_write_reg>
 80063ec:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80063ee:	697b      	ldr	r3, [r7, #20]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3718      	adds	r7, #24
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <lps22df_mode_get>:
  * @param  val   get the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_mode_get(const stmdev_ctx_t *ctx, lps22df_md_t *val)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  lps22df_ctrl_reg1_t ctrl_reg1;
  lps22df_ctrl_reg2_t ctrl_reg2;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 8006402:	f107 0208 	add.w	r2, r7, #8
 8006406:	2302      	movs	r3, #2
 8006408:	2110      	movs	r1, #16
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7ff fd34 	bl	8005e78 <lps22df_read_reg>
 8006410:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	2b00      	cmp	r3, #0
 8006416:	f040 80b6 	bne.w	8006586 <lps22df_mode_get+0x18e>
  {
    bytecpy((uint8_t *)&ctrl_reg1, &reg[0]);
 800641a:	f107 0208 	add.w	r2, r7, #8
 800641e:	f107 0310 	add.w	r3, r7, #16
 8006422:	4611      	mov	r1, r2
 8006424:	4618      	mov	r0, r3
 8006426:	f7ff fd63 	bl	8005ef0 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg2, &reg[1]);
 800642a:	f107 0308 	add.w	r3, r7, #8
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	f107 030c 	add.w	r3, r7, #12
 8006434:	4611      	mov	r1, r2
 8006436:	4618      	mov	r0, r3
 8006438:	f7ff fd5a 	bl	8005ef0 <bytecpy>

    switch (ctrl_reg1.odr)
 800643c:	7c3b      	ldrb	r3, [r7, #16]
 800643e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b08      	cmp	r3, #8
 8006446:	d839      	bhi.n	80064bc <lps22df_mode_get+0xc4>
 8006448:	a201      	add	r2, pc, #4	@ (adr r2, 8006450 <lps22df_mode_get+0x58>)
 800644a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644e:	bf00      	nop
 8006450:	08006475 	.word	0x08006475
 8006454:	0800647d 	.word	0x0800647d
 8006458:	08006485 	.word	0x08006485
 800645c:	0800648d 	.word	0x0800648d
 8006460:	08006495 	.word	0x08006495
 8006464:	0800649d 	.word	0x0800649d
 8006468:	080064a5 	.word	0x080064a5
 800646c:	080064ad 	.word	0x080064ad
 8006470:	080064b5 	.word	0x080064b5
    {
      case LPS22DF_ONE_SHOT:
        val->odr = LPS22DF_ONE_SHOT;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2200      	movs	r2, #0
 8006478:	701a      	strb	r2, [r3, #0]
        break;
 800647a:	e023      	b.n	80064c4 <lps22df_mode_get+0xcc>
      case LPS22DF_1Hz:
        val->odr = LPS22DF_1Hz;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	2201      	movs	r2, #1
 8006480:	701a      	strb	r2, [r3, #0]
        break;
 8006482:	e01f      	b.n	80064c4 <lps22df_mode_get+0xcc>
      case LPS22DF_4Hz:
        val->odr = LPS22DF_4Hz;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	2202      	movs	r2, #2
 8006488:	701a      	strb	r2, [r3, #0]
        break;
 800648a:	e01b      	b.n	80064c4 <lps22df_mode_get+0xcc>
      case LPS22DF_10Hz:
        val->odr = LPS22DF_10Hz;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	2203      	movs	r2, #3
 8006490:	701a      	strb	r2, [r3, #0]
        break;
 8006492:	e017      	b.n	80064c4 <lps22df_mode_get+0xcc>
      case LPS22DF_25Hz:
        val->odr = LPS22DF_25Hz;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	2204      	movs	r2, #4
 8006498:	701a      	strb	r2, [r3, #0]
        break;
 800649a:	e013      	b.n	80064c4 <lps22df_mode_get+0xcc>
      case LPS22DF_50Hz:
        val->odr = LPS22DF_50Hz;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	2205      	movs	r2, #5
 80064a0:	701a      	strb	r2, [r3, #0]
        break;
 80064a2:	e00f      	b.n	80064c4 <lps22df_mode_get+0xcc>
      case LPS22DF_75Hz:
        val->odr = LPS22DF_75Hz;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	2206      	movs	r2, #6
 80064a8:	701a      	strb	r2, [r3, #0]
        break;
 80064aa:	e00b      	b.n	80064c4 <lps22df_mode_get+0xcc>
      case LPS22DF_100Hz:
        val->odr = LPS22DF_100Hz;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	2207      	movs	r2, #7
 80064b0:	701a      	strb	r2, [r3, #0]
        break;
 80064b2:	e007      	b.n	80064c4 <lps22df_mode_get+0xcc>
      case LPS22DF_200Hz:
        val->odr = LPS22DF_200Hz;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	2208      	movs	r2, #8
 80064b8:	701a      	strb	r2, [r3, #0]
        break;
 80064ba:	e003      	b.n	80064c4 <lps22df_mode_get+0xcc>
      default:
        val->odr = LPS22DF_ONE_SHOT;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	2200      	movs	r2, #0
 80064c0:	701a      	strb	r2, [r3, #0]
        break;
 80064c2:	bf00      	nop
    }

    switch (ctrl_reg1.avg)
 80064c4:	7c3b      	ldrb	r3, [r7, #16]
 80064c6:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b07      	cmp	r3, #7
 80064ce:	d833      	bhi.n	8006538 <lps22df_mode_get+0x140>
 80064d0:	a201      	add	r2, pc, #4	@ (adr r2, 80064d8 <lps22df_mode_get+0xe0>)
 80064d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d6:	bf00      	nop
 80064d8:	080064f9 	.word	0x080064f9
 80064dc:	08006501 	.word	0x08006501
 80064e0:	08006509 	.word	0x08006509
 80064e4:	08006511 	.word	0x08006511
 80064e8:	08006519 	.word	0x08006519
 80064ec:	08006521 	.word	0x08006521
 80064f0:	08006529 	.word	0x08006529
 80064f4:	08006531 	.word	0x08006531
    {
      case LPS22DF_4_AVG:
        val->avg = LPS22DF_4_AVG;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2200      	movs	r2, #0
 80064fc:	705a      	strb	r2, [r3, #1]
        break;
 80064fe:	e01f      	b.n	8006540 <lps22df_mode_get+0x148>
      case LPS22DF_8_AVG:
        val->avg = LPS22DF_8_AVG;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	2201      	movs	r2, #1
 8006504:	705a      	strb	r2, [r3, #1]
        break;
 8006506:	e01b      	b.n	8006540 <lps22df_mode_get+0x148>
      case LPS22DF_16_AVG:
        val->avg = LPS22DF_16_AVG;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2202      	movs	r2, #2
 800650c:	705a      	strb	r2, [r3, #1]
        break;
 800650e:	e017      	b.n	8006540 <lps22df_mode_get+0x148>
      case LPS22DF_32_AVG:
        val->avg = LPS22DF_32_AVG;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	2203      	movs	r2, #3
 8006514:	705a      	strb	r2, [r3, #1]
        break;
 8006516:	e013      	b.n	8006540 <lps22df_mode_get+0x148>
      case LPS22DF_64_AVG:
        val->avg = LPS22DF_64_AVG;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	2204      	movs	r2, #4
 800651c:	705a      	strb	r2, [r3, #1]
        break;
 800651e:	e00f      	b.n	8006540 <lps22df_mode_get+0x148>
      case LPS22DF_128_AVG:
        val->avg = LPS22DF_128_AVG;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	2205      	movs	r2, #5
 8006524:	705a      	strb	r2, [r3, #1]
        break;
 8006526:	e00b      	b.n	8006540 <lps22df_mode_get+0x148>
      case LPS22DF_256_AVG:
        val->avg = LPS22DF_256_AVG;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	2206      	movs	r2, #6
 800652c:	705a      	strb	r2, [r3, #1]
        break;
 800652e:	e007      	b.n	8006540 <lps22df_mode_get+0x148>
      case LPS22DF_512_AVG:
        val->avg = LPS22DF_512_AVG;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	2207      	movs	r2, #7
 8006534:	705a      	strb	r2, [r3, #1]
        break;
 8006536:	e003      	b.n	8006540 <lps22df_mode_get+0x148>
      default:
        val->avg = LPS22DF_4_AVG;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	2200      	movs	r2, #0
 800653c:	705a      	strb	r2, [r3, #1]
        break;
 800653e:	bf00      	nop
    }

    switch ((ctrl_reg2.lfpf_cfg << 2) | ctrl_reg2.en_lpfp)
 8006540:	7b3b      	ldrb	r3, [r7, #12]
 8006542:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006546:	b2db      	uxtb	r3, r3
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	7b3a      	ldrb	r2, [r7, #12]
 800654c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8006550:	b2d2      	uxtb	r2, r2
 8006552:	4313      	orrs	r3, r2
 8006554:	2b03      	cmp	r3, #3
 8006556:	d00e      	beq.n	8006576 <lps22df_mode_get+0x17e>
 8006558:	2b03      	cmp	r3, #3
 800655a:	dc10      	bgt.n	800657e <lps22df_mode_get+0x186>
 800655c:	2b00      	cmp	r3, #0
 800655e:	d002      	beq.n	8006566 <lps22df_mode_get+0x16e>
 8006560:	2b01      	cmp	r3, #1
 8006562:	d004      	beq.n	800656e <lps22df_mode_get+0x176>
 8006564:	e00b      	b.n	800657e <lps22df_mode_get+0x186>
    {
      case LPS22DF_LPF_DISABLE:
        val->lpf = LPS22DF_LPF_DISABLE;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2200      	movs	r2, #0
 800656a:	709a      	strb	r2, [r3, #2]
        break;
 800656c:	e00b      	b.n	8006586 <lps22df_mode_get+0x18e>
      case LPS22DF_LPF_ODR_DIV_4:
        val->lpf = LPS22DF_LPF_ODR_DIV_4;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2201      	movs	r2, #1
 8006572:	709a      	strb	r2, [r3, #2]
        break;
 8006574:	e007      	b.n	8006586 <lps22df_mode_get+0x18e>
      case LPS22DF_LPF_ODR_DIV_9:
        val->lpf = LPS22DF_LPF_ODR_DIV_9;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2203      	movs	r2, #3
 800657a:	709a      	strb	r2, [r3, #2]
        break;
 800657c:	e003      	b.n	8006586 <lps22df_mode_get+0x18e>
      default:
        val->lpf = LPS22DF_LPF_DISABLE;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2200      	movs	r2, #0
 8006582:	709a      	strb	r2, [r3, #2]
        break;
 8006584:	bf00      	nop
    }
  }
  return ret;
 8006586:	697b      	ldr	r3, [r7, #20]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3718      	adds	r7, #24
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <lps22df_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_pressure_raw_get(const stmdev_ctx_t *ctx, uint32_t *buff)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[3];

  ret =  lps22df_read_reg(ctx, LPS22DF_PRESS_OUT_XL, reg, 3);
 800659a:	f107 0208 	add.w	r2, r7, #8
 800659e:	2303      	movs	r3, #3
 80065a0:	2128      	movs	r1, #40	@ 0x28
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7ff fc68 	bl	8005e78 <lps22df_read_reg>
 80065a8:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80065aa:	7abb      	ldrb	r3, [r7, #10]
 80065ac:	461a      	mov	r2, r3
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[1];
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	021b      	lsls	r3, r3, #8
 80065b8:	7a7a      	ldrb	r2, [r7, #9]
 80065ba:	441a      	add	r2, r3
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[0];
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	021b      	lsls	r3, r3, #8
 80065c6:	7a3a      	ldrb	r2, [r7, #8]
 80065c8:	441a      	add	r2, r3
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	601a      	str	r2, [r3, #0]
  *buff *= 256U;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	021a      	lsls	r2, r3, #8
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	601a      	str	r2, [r3, #0]

  return ret;
 80065d8:	68fb      	ldr	r3, [r7, #12]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <lps22df_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *buff)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b084      	sub	sp, #16
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
 80065ea:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[2];

  ret =  lps22df_read_reg(ctx, LPS22DF_TEMP_OUT_L, reg, 2);
 80065ec:	f107 0208 	add.w	r2, r7, #8
 80065f0:	2302      	movs	r3, #2
 80065f2:	212b      	movs	r1, #43	@ 0x2b
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f7ff fc3f 	bl	8005e78 <lps22df_read_reg>
 80065fa:	60f8      	str	r0, [r7, #12]
  *buff = (int16_t)reg[1];
 80065fc:	7a7b      	ldrb	r3, [r7, #9]
 80065fe:	b21a      	sxth	r2, r3
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + (int16_t)reg[0];
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	f9b3 3000 	ldrsh.w	r3, [r3]
 800660a:	b29b      	uxth	r3, r3
 800660c:	021b      	lsls	r3, r3, #8
 800660e:	b29b      	uxth	r3, r3
 8006610:	7a3a      	ldrb	r2, [r7, #8]
 8006612:	4413      	add	r3, r2
 8006614:	b29b      	uxth	r3, r3
 8006616:	b21a      	sxth	r2, r3
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	801a      	strh	r2, [r3, #0]

  return ret;
 800661c:	68fb      	ldr	r3, [r7, #12]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
	...

08006628 <LSM6DSO16IS_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_RegisterBusIO(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_IO_t *pIO)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d103      	bne.n	8006644 <LSM6DSO16IS_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO16IS_ERROR;
 800663c:	f04f 33ff 	mov.w	r3, #4294967295
 8006640:	60fb      	str	r3, [r7, #12]
 8006642:	e04d      	b.n	80066e0 <LSM6DSO16IS_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	689a      	ldr	r2, [r3, #8]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	7b1a      	ldrb	r2, [r3, #12]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	691a      	ldr	r2, [r3, #16]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	695a      	ldr	r2, [r3, #20]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	699a      	ldr	r2, [r3, #24]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a1b      	ldr	r2, [pc, #108]	@ (80066ec <LSM6DSO16IS_RegisterBusIO+0xc4>)
 8006680:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a1a      	ldr	r2, [pc, #104]	@ (80066f0 <LSM6DSO16IS_RegisterBusIO+0xc8>)
 8006686:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d103      	bne.n	800669e <LSM6DSO16IS_RegisterBusIO+0x76>
    {
      ret = LSM6DSO16IS_ERROR;
 8006696:	f04f 33ff 	mov.w	r3, #4294967295
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	e020      	b.n	80066e0 <LSM6DSO16IS_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO16IS_OK)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4798      	blx	r3
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d003      	beq.n	80066b2 <LSM6DSO16IS_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO16IS_ERROR;
 80066aa:	f04f 33ff 	mov.w	r3, #4294967295
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	e016      	b.n	80066e0 <LSM6DSO16IS_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO16IS_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d112      	bne.n	80066e0 <LSM6DSO16IS_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10d      	bne.n	80066e0 <LSM6DSO16IS_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80066c4:	230c      	movs	r3, #12
 80066c6:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO16IS_Write_Reg(pObj, LSM6DSO16IS_CTRL3_C, data) != LSM6DSO16IS_OK)
 80066c8:	7afb      	ldrb	r3, [r7, #11]
 80066ca:	461a      	mov	r2, r3
 80066cc:	2112      	movs	r1, #18
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 fdbe 	bl	8007250 <LSM6DSO16IS_Write_Reg>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d002      	beq.n	80066e0 <LSM6DSO16IS_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO16IS_ERROR;
 80066da:	f04f 33ff 	mov.w	r3, #4294967295
 80066de:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80066e0:	68fb      	ldr	r3, [r7, #12]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	08007719 	.word	0x08007719
 80066f0:	0800774f 	.word	0x0800774f

080066f4 <LSM6DSO16IS_Init>:
  * @brief  Initialize the LSM6DSO16IS sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Init(LSM6DSO16IS_Object_t *pObj)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 80066fc:	2300      	movs	r3, #0
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Set main memory bank */
  if (LSM6DSO16IS_Set_Mem_Bank(pObj, (uint8_t)LSM6DSO16IS_MAIN_MEM_BANK) != LSM6DSO16IS_OK)
 8006700:	2100      	movs	r1, #0
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fdc1 	bl	800728a <LSM6DSO16IS_Set_Mem_Bank>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d002      	beq.n	8006714 <LSM6DSO16IS_Init+0x20>
  {
    ret = LSM6DSO16IS_ERROR;
 800670e:	f04f 33ff 	mov.w	r3, #4294967295
 8006712:	60fb      	str	r3, [r7, #12]
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso16is_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO16IS_OK)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	3320      	adds	r3, #32
 8006718:	2101      	movs	r1, #1
 800671a:	4618      	mov	r0, r3
 800671c:	f001 fbdc 	bl	8007ed8 <lsm6dso16is_auto_increment_set>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d002      	beq.n	800672c <LSM6DSO16IS_Init+0x38>
  {
    ret = LSM6DSO16IS_ERROR;
 8006726:	f04f 33ff 	mov.w	r3, #4294967295
 800672a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable BDU */
  if (lsm6dso16is_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO16IS_OK)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	3320      	adds	r3, #32
 8006730:	2101      	movs	r1, #1
 8006732:	4618      	mov	r0, r3
 8006734:	f001 fbf6 	bl	8007f24 <lsm6dso16is_block_data_update_set>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d002      	beq.n	8006744 <LSM6DSO16IS_Init+0x50>
  {
    ret = LSM6DSO16IS_ERROR;
 800673e:	f04f 33ff 	mov.w	r3, #4294967295
 8006742:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO16IS_XL_ODR_AT_104Hz_HP;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2204      	movs	r2, #4
 8006748:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_XL_ODR_OFF) != LSM6DSO16IS_OK)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	3320      	adds	r3, #32
 8006750:	2100      	movs	r1, #0
 8006752:	4618      	mov	r0, r3
 8006754:	f001 f910 	bl	8007978 <lsm6dso16is_xl_data_rate_set>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d002      	beq.n	8006764 <LSM6DSO16IS_Init+0x70>
  {
    ret = LSM6DSO16IS_ERROR;
 800675e:	f04f 33ff 	mov.w	r3, #4294967295
 8006762:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (lsm6dso16is_xl_full_scale_set(&(pObj->Ctx), LSM6DSO16IS_2g) != LSM6DSO16IS_OK)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3320      	adds	r3, #32
 8006768:	2100      	movs	r1, #0
 800676a:	4618      	mov	r0, r3
 800676c:	f001 f8a6 	bl	80078bc <lsm6dso16is_xl_full_scale_set>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d002      	beq.n	800677c <LSM6DSO16IS_Init+0x88>
  {
    ret = LSM6DSO16IS_ERROR;
 8006776:	f04f 33ff 	mov.w	r3, #4294967295
 800677a:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO16IS_GY_ODR_AT_104Hz_HP;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2204      	movs	r2, #4
 8006780:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_GY_ODR_OFF) != LSM6DSO16IS_OK)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	3320      	adds	r3, #32
 8006788:	2100      	movs	r1, #0
 800678a:	4618      	mov	r0, r3
 800678c:	f001 faa8 	bl	8007ce0 <lsm6dso16is_gy_data_rate_set>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d002      	beq.n	800679c <LSM6DSO16IS_Init+0xa8>
  {
    ret = LSM6DSO16IS_ERROR;
 8006796:	f04f 33ff 	mov.w	r3, #4294967295
 800679a:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (lsm6dso16is_gy_full_scale_set(&(pObj->Ctx), LSM6DSO16IS_2000dps) != LSM6DSO16IS_OK)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3320      	adds	r3, #32
 80067a0:	2103      	movs	r1, #3
 80067a2:	4618      	mov	r0, r3
 80067a4:	f001 fa10 	bl	8007bc8 <lsm6dso16is_gy_full_scale_set>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d002      	beq.n	80067b4 <LSM6DSO16IS_Init+0xc0>
  {
    ret = LSM6DSO16IS_ERROR;
 80067ae:	f04f 33ff 	mov.w	r3, #4294967295
 80067b2:	60fb      	str	r3, [r7, #12]
  }

  if (ret == LSM6DSO16IS_OK)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d103      	bne.n	80067c2 <LSM6DSO16IS_Init+0xce>
  {
    pObj->is_initialized = 1;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return ret;
 80067c2:	68fb      	ldr	r3, [r7, #12]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <LSM6DSO16IS_DeInit>:
  * @brief  Deinitialize the LSM6DSO16IS sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_DeInit(LSM6DSO16IS_Object_t *pObj)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Disable the component */
  if (LSM6DSO16IS_ACC_Disable(pObj) != LSM6DSO16IS_OK)
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f890 	bl	80068fe <LSM6DSO16IS_ACC_Disable>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d002      	beq.n	80067ea <LSM6DSO16IS_DeInit+0x1e>
  {
    ret = LSM6DSO16IS_ERROR;
 80067e4:	f04f 33ff 	mov.w	r3, #4294967295
 80067e8:	60fb      	str	r3, [r7, #12]
  }

  if (LSM6DSO16IS_GYRO_Disable(pObj) != LSM6DSO16IS_OK)
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 fad0 	bl	8006d90 <LSM6DSO16IS_GYRO_Disable>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d002      	beq.n	80067fc <LSM6DSO16IS_DeInit+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 80067f6:	f04f 33ff 	mov.w	r3, #4294967295
 80067fa:	60fb      	str	r3, [r7, #12]
  }

  if (ret == LSM6DSO16IS_OK)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10b      	bne.n	800681a <LSM6DSO16IS_DeInit+0x4e>
  {
    /* Reset output data rate. */
    pObj->acc_odr = LSM6DSO16IS_XL_ODR_OFF;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    pObj->gyro_odr = LSM6DSO16IS_GY_ODR_OFF;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    pObj->is_initialized = 0;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return ret;
 800681a:	68fb      	ldr	r3, [r7, #12]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <LSM6DSO16IS_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ReadID(LSM6DSO16IS_Object_t *pObj, uint8_t *Id)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 800682e:	2300      	movs	r3, #0
 8006830:	60fb      	str	r3, [r7, #12]

  if (lsm6dso16is_device_id_get(&(pObj->Ctx), Id) != LSM6DSO16IS_OK)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	3320      	adds	r3, #32
 8006836:	6839      	ldr	r1, [r7, #0]
 8006838:	4618      	mov	r0, r3
 800683a:	f001 f808 	bl	800784e <lsm6dso16is_device_id_get>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d002      	beq.n	800684a <LSM6DSO16IS_ReadID+0x26>
  {
    ret = LSM6DSO16IS_ERROR;
 8006844:	f04f 33ff 	mov.w	r3, #4294967295
 8006848:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800684a:	68fb      	ldr	r3, [r7, #12]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <LSM6DSO16IS_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO16IS sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GetCapabilities(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Capabilities_t *Capabilities)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2201      	movs	r2, #1
 8006862:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	2201      	movs	r2, #1
 8006868:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2200      	movs	r2, #0
 800686e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2200      	movs	r2, #0
 8006874:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800687c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2210      	movs	r2, #16
 8006882:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	2200      	movs	r2, #0
 8006888:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 3333.0f;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	4a07      	ldr	r2, [pc, #28]	@ (80068ac <LSM6DSO16IS_GetCapabilities+0x58>)
 800688e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 3333.0f;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	4a06      	ldr	r2, [pc, #24]	@ (80068ac <LSM6DSO16IS_GetCapabilities+0x58>)
 8006894:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	f04f 0200 	mov.w	r2, #0
 800689c:	619a      	str	r2, [r3, #24]

  return LSM6DSO16IS_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	45505000 	.word	0x45505000

080068b0 <LSM6DSO16IS_ACC_Enable>:
  * @brief  Enable the LSM6DSO16IS accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_Enable(LSM6DSO16IS_Object_t *pObj)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 80068b8:	2300      	movs	r3, #0
 80068ba:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d102      	bne.n	80068cc <LSM6DSO16IS_ACC_Enable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	60fb      	str	r3, [r7, #12]
 80068ca:	e013      	b.n	80068f4 <LSM6DSO16IS_ACC_Enable+0x44>
  }
  else
  {
    /* Output data rate selection. */
    if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO16IS_OK)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f103 0220 	add.w	r2, r3, #32
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80068d8:	4619      	mov	r1, r3
 80068da:	4610      	mov	r0, r2
 80068dc:	f001 f84c 	bl	8007978 <lsm6dso16is_xl_data_rate_set>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d002      	beq.n	80068ec <LSM6DSO16IS_ACC_Enable+0x3c>
    {
      ret = LSM6DSO16IS_ERROR;
 80068e6:	f04f 33ff 	mov.w	r3, #4294967295
 80068ea:	60fb      	str	r3, [r7, #12]
    }

    pObj->acc_is_enabled = 1;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }

  return ret;
 80068f4:	68fb      	ldr	r3, [r7, #12]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <LSM6DSO16IS_ACC_Disable>:
  * @brief  Disable the LSM6DSO16IS accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_Disable(LSM6DSO16IS_Object_t *pObj)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b084      	sub	sp, #16
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8006906:	2300      	movs	r3, #0
 8006908:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006910:	2b00      	cmp	r3, #0
 8006912:	d102      	bne.n	800691a <LSM6DSO16IS_ACC_Disable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8006914:	2300      	movs	r3, #0
 8006916:	60fb      	str	r3, [r7, #12]
 8006918:	e01e      	b.n	8006958 <LSM6DSO16IS_ACC_Disable+0x5a>
  }
  else
  {
    /* Get current output data rate. */
    if (lsm6dso16is_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO16IS_OK)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f103 0220 	add.w	r2, r3, #32
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	3333      	adds	r3, #51	@ 0x33
 8006924:	4619      	mov	r1, r3
 8006926:	4610      	mov	r0, r2
 8006928:	f001 f866 	bl	80079f8 <lsm6dso16is_xl_data_rate_get>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d002      	beq.n	8006938 <LSM6DSO16IS_ACC_Disable+0x3a>
    {
      ret = LSM6DSO16IS_ERROR;
 8006932:	f04f 33ff 	mov.w	r3, #4294967295
 8006936:	60fb      	str	r3, [r7, #12]
    }

    /* Output data rate selection - power down. */
    if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_XL_ODR_OFF) != LSM6DSO16IS_OK)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	3320      	adds	r3, #32
 800693c:	2100      	movs	r1, #0
 800693e:	4618      	mov	r0, r3
 8006940:	f001 f81a 	bl	8007978 <lsm6dso16is_xl_data_rate_set>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d002      	beq.n	8006950 <LSM6DSO16IS_ACC_Disable+0x52>
    {
      ret = LSM6DSO16IS_ERROR;
 800694a:	f04f 33ff 	mov.w	r3, #4294967295
 800694e:	60fb      	str	r3, [r7, #12]
    }

    pObj->acc_is_enabled = 0;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }

  return ret;
 8006958:	68fb      	ldr	r3, [r7, #12]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
	...

08006964 <LSM6DSO16IS_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetSensitivity(LSM6DSO16IS_Object_t *pObj, float_t *Sensitivity)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 800696e:	2300      	movs	r3, #0
 8006970:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO16IS_OK)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	3320      	adds	r3, #32
 8006976:	f107 020b 	add.w	r2, r7, #11
 800697a:	4611      	mov	r1, r2
 800697c:	4618      	mov	r0, r3
 800697e:	f000 ffc3 	bl	8007908 <lsm6dso16is_xl_full_scale_get>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <LSM6DSO16IS_ACC_GetSensitivity+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006988:	f04f 33ff 	mov.w	r3, #4294967295
 800698c:	60fb      	str	r3, [r7, #12]
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800698e:	7afb      	ldrb	r3, [r7, #11]
 8006990:	2b03      	cmp	r3, #3
 8006992:	d81b      	bhi.n	80069cc <LSM6DSO16IS_ACC_GetSensitivity+0x68>
 8006994:	a201      	add	r2, pc, #4	@ (adr r2, 800699c <LSM6DSO16IS_ACC_GetSensitivity+0x38>)
 8006996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699a:	bf00      	nop
 800699c:	080069ad 	.word	0x080069ad
 80069a0:	080069c5 	.word	0x080069c5
 80069a4:	080069b5 	.word	0x080069b5
 80069a8:	080069bd 	.word	0x080069bd
  {
    case LSM6DSO16IS_2g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_2G;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	4a0c      	ldr	r2, [pc, #48]	@ (80069e0 <LSM6DSO16IS_ACC_GetSensitivity+0x7c>)
 80069b0:	601a      	str	r2, [r3, #0]
      break;
 80069b2:	e00f      	b.n	80069d4 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_4g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_4G;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	4a0b      	ldr	r2, [pc, #44]	@ (80069e4 <LSM6DSO16IS_ACC_GetSensitivity+0x80>)
 80069b8:	601a      	str	r2, [r3, #0]
      break;
 80069ba:	e00b      	b.n	80069d4 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_8g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_8G;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	4a0a      	ldr	r2, [pc, #40]	@ (80069e8 <LSM6DSO16IS_ACC_GetSensitivity+0x84>)
 80069c0:	601a      	str	r2, [r3, #0]
      break;
 80069c2:	e007      	b.n	80069d4 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_16g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_16G;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	4a09      	ldr	r2, [pc, #36]	@ (80069ec <LSM6DSO16IS_ACC_GetSensitivity+0x88>)
 80069c8:	601a      	str	r2, [r3, #0]
      break;
 80069ca:	e003      	b.n	80069d4 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO16IS_ERROR;
 80069cc:	f04f 33ff 	mov.w	r3, #4294967295
 80069d0:	60fb      	str	r3, [r7, #12]
      break;
 80069d2:	bf00      	nop
  }

  return ret;
 80069d4:	68fb      	ldr	r3, [r7, #12]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	3d79db23 	.word	0x3d79db23
 80069e4:	3df9db23 	.word	0x3df9db23
 80069e8:	3e79db23 	.word	0x3e79db23
 80069ec:	3ef9db23 	.word	0x3ef9db23

080069f0 <LSM6DSO16IS_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t *Odr)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_data_rate_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso16is_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO16IS_OK)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	3320      	adds	r3, #32
 8006a02:	f107 020b 	add.w	r2, r7, #11
 8006a06:	4611      	mov	r1, r2
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 fff5 	bl	80079f8 <lsm6dso16is_xl_data_rate_get>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d002      	beq.n	8006a1a <LSM6DSO16IS_ACC_GetOutputDataRate+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006a14:	f04f 33ff 	mov.w	r3, #4294967295
 8006a18:	60fb      	str	r3, [r7, #12]
  }

  switch (odr_low_level)
 8006a1a:	7afb      	ldrb	r3, [r7, #11]
 8006a1c:	2b1b      	cmp	r3, #27
 8006a1e:	d86c      	bhi.n	8006afa <LSM6DSO16IS_ACC_GetOutputDataRate+0x10a>
 8006a20:	a201      	add	r2, pc, #4	@ (adr r2, 8006a28 <LSM6DSO16IS_ACC_GetOutputDataRate+0x38>)
 8006a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a26:	bf00      	nop
 8006a28:	08006a99 	.word	0x08006a99
 8006a2c:	08006aab 	.word	0x08006aab
 8006a30:	08006ab3 	.word	0x08006ab3
 8006a34:	08006abb 	.word	0x08006abb
 8006a38:	08006ac3 	.word	0x08006ac3
 8006a3c:	08006acb 	.word	0x08006acb
 8006a40:	08006ad3 	.word	0x08006ad3
 8006a44:	08006adb 	.word	0x08006adb
 8006a48:	08006ae3 	.word	0x08006ae3
 8006a4c:	08006aeb 	.word	0x08006aeb
 8006a50:	08006af3 	.word	0x08006af3
 8006a54:	08006afb 	.word	0x08006afb
 8006a58:	08006afb 	.word	0x08006afb
 8006a5c:	08006afb 	.word	0x08006afb
 8006a60:	08006afb 	.word	0x08006afb
 8006a64:	08006afb 	.word	0x08006afb
 8006a68:	08006afb 	.word	0x08006afb
 8006a6c:	08006aab 	.word	0x08006aab
 8006a70:	08006ab3 	.word	0x08006ab3
 8006a74:	08006abb 	.word	0x08006abb
 8006a78:	08006ac3 	.word	0x08006ac3
 8006a7c:	08006acb 	.word	0x08006acb
 8006a80:	08006ad3 	.word	0x08006ad3
 8006a84:	08006adb 	.word	0x08006adb
 8006a88:	08006ae3 	.word	0x08006ae3
 8006a8c:	08006aeb 	.word	0x08006aeb
 8006a90:	08006af3 	.word	0x08006af3
 8006a94:	08006aa3 	.word	0x08006aa3
  {
    case LSM6DSO16IS_XL_ODR_OFF:
      *Odr = 0.0f;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	f04f 0200 	mov.w	r2, #0
 8006a9e:	601a      	str	r2, [r3, #0]
      break;
 8006aa0:	e02f      	b.n	8006b02 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_1Hz6_LP:
      *Odr = 1.6f;
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	4a19      	ldr	r2, [pc, #100]	@ (8006b0c <LSM6DSO16IS_ACC_GetOutputDataRate+0x11c>)
 8006aa6:	601a      	str	r2, [r3, #0]
      break;
 8006aa8:	e02b      	b.n	8006b02 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_LP:
    case LSM6DSO16IS_XL_ODR_AT_12Hz5_HP:
      *Odr = 12.5f;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	4a18      	ldr	r2, [pc, #96]	@ (8006b10 <LSM6DSO16IS_ACC_GetOutputDataRate+0x120>)
 8006aae:	601a      	str	r2, [r3, #0]
      break;
 8006ab0:	e027      	b.n	8006b02 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_26H_LP:
    case LSM6DSO16IS_XL_ODR_AT_26H_HP:
      *Odr = 26.0f;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	4a17      	ldr	r2, [pc, #92]	@ (8006b14 <LSM6DSO16IS_ACC_GetOutputDataRate+0x124>)
 8006ab6:	601a      	str	r2, [r3, #0]
      break;
 8006ab8:	e023      	b.n	8006b02 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_52Hz_HP:
      *Odr = 52.0f;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	4a16      	ldr	r2, [pc, #88]	@ (8006b18 <LSM6DSO16IS_ACC_GetOutputDataRate+0x128>)
 8006abe:	601a      	str	r2, [r3, #0]
      break;
 8006ac0:	e01f      	b.n	8006b02 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_104Hz_HP:
      *Odr = 104.0f;
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	4a15      	ldr	r2, [pc, #84]	@ (8006b1c <LSM6DSO16IS_ACC_GetOutputDataRate+0x12c>)
 8006ac6:	601a      	str	r2, [r3, #0]
      break;
 8006ac8:	e01b      	b.n	8006b02 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_208Hz_HP:
      *Odr = 208.0f;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	4a14      	ldr	r2, [pc, #80]	@ (8006b20 <LSM6DSO16IS_ACC_GetOutputDataRate+0x130>)
 8006ace:	601a      	str	r2, [r3, #0]
      break;
 8006ad0:	e017      	b.n	8006b02 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_416Hz_HP:
      *Odr = 416.0f;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	4a13      	ldr	r2, [pc, #76]	@ (8006b24 <LSM6DSO16IS_ACC_GetOutputDataRate+0x134>)
 8006ad6:	601a      	str	r2, [r3, #0]
      break;
 8006ad8:	e013      	b.n	8006b02 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_833Hz_HP:
      *Odr = 833.0f;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	4a12      	ldr	r2, [pc, #72]	@ (8006b28 <LSM6DSO16IS_ACC_GetOutputDataRate+0x138>)
 8006ade:	601a      	str	r2, [r3, #0]
      break;
 8006ae0:	e00f      	b.n	8006b02 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_1667Hz_HP:
      *Odr = 1667.0f;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	4a11      	ldr	r2, [pc, #68]	@ (8006b2c <LSM6DSO16IS_ACC_GetOutputDataRate+0x13c>)
 8006ae6:	601a      	str	r2, [r3, #0]
      break;
 8006ae8:	e00b      	b.n	8006b02 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_3333Hz_HP:
      *Odr = 3333.0f;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	4a10      	ldr	r2, [pc, #64]	@ (8006b30 <LSM6DSO16IS_ACC_GetOutputDataRate+0x140>)
 8006aee:	601a      	str	r2, [r3, #0]
      break;
 8006af0:	e007      	b.n	8006b02 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_6667Hz_HP:
      *Odr = 6667.0f;
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	4a0f      	ldr	r2, [pc, #60]	@ (8006b34 <LSM6DSO16IS_ACC_GetOutputDataRate+0x144>)
 8006af6:	601a      	str	r2, [r3, #0]
      break;
 8006af8:	e003      	b.n	8006b02 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    default:
      ret = LSM6DSO16IS_ERROR;
 8006afa:	f04f 33ff 	mov.w	r3, #4294967295
 8006afe:	60fb      	str	r3, [r7, #12]
      break;
 8006b00:	bf00      	nop
  }

  return ret;
 8006b02:	68fb      	ldr	r3, [r7, #12]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	3fcccccd 	.word	0x3fcccccd
 8006b10:	41480000 	.word	0x41480000
 8006b14:	41d00000 	.word	0x41d00000
 8006b18:	42500000 	.word	0x42500000
 8006b1c:	42d00000 	.word	0x42d00000
 8006b20:	43500000 	.word	0x43500000
 8006b24:	43d00000 	.word	0x43d00000
 8006b28:	44504000 	.word	0x44504000
 8006b2c:	44d06000 	.word	0x44d06000
 8006b30:	45505000 	.word	0x45505000
 8006b34:	45d05800 	.word	0x45d05800

08006b38 <LSM6DSO16IS_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_SetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret;

  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d106      	bne.n	8006b5c <LSM6DSO16IS_ACC_SetOutputDataRate+0x24>
  {
    ret = LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006b4e:	ed97 0a00 	vldr	s0, [r7]
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fbc0 	bl	80072d8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled>
 8006b58:	60f8      	str	r0, [r7, #12]
 8006b5a:	e005      	b.n	8006b68 <LSM6DSO16IS_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    ret = LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006b5c:	ed97 0a00 	vldr	s0, [r7]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fc47 	bl	80073f4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled>
 8006b66:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006b68:	68fb      	ldr	r3, [r7, #12]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
	...

08006b74 <LSM6DSO16IS_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t *FullScale)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO16IS_OK)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	3320      	adds	r3, #32
 8006b86:	f107 020b 	add.w	r2, r7, #11
 8006b8a:	4611      	mov	r1, r2
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 febb 	bl	8007908 <lsm6dso16is_xl_full_scale_get>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d002      	beq.n	8006b9e <LSM6DSO16IS_ACC_GetFullScale+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006b98:	f04f 33ff 	mov.w	r3, #4294967295
 8006b9c:	60fb      	str	r3, [r7, #12]
  }

  switch (fs_low_level)
 8006b9e:	7afb      	ldrb	r3, [r7, #11]
 8006ba0:	2b03      	cmp	r3, #3
 8006ba2:	d81b      	bhi.n	8006bdc <LSM6DSO16IS_ACC_GetFullScale+0x68>
 8006ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8006bac <LSM6DSO16IS_ACC_GetFullScale+0x38>)
 8006ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006baa:	bf00      	nop
 8006bac:	08006bbd 	.word	0x08006bbd
 8006bb0:	08006bd5 	.word	0x08006bd5
 8006bb4:	08006bc5 	.word	0x08006bc5
 8006bb8:	08006bcd 	.word	0x08006bcd
  {
    case LSM6DSO16IS_2g:
      *FullScale =  2;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	601a      	str	r2, [r3, #0]
      break;
 8006bc2:	e00f      	b.n	8006be4 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_4g:
      *FullScale =  4;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	2204      	movs	r2, #4
 8006bc8:	601a      	str	r2, [r3, #0]
      break;
 8006bca:	e00b      	b.n	8006be4 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_8g:
      *FullScale =  8;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	2208      	movs	r2, #8
 8006bd0:	601a      	str	r2, [r3, #0]
      break;
 8006bd2:	e007      	b.n	8006be4 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_16g:
      *FullScale = 16;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	2210      	movs	r2, #16
 8006bd8:	601a      	str	r2, [r3, #0]
      break;
 8006bda:	e003      	b.n	8006be4 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO16IS_ERROR;
 8006bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8006be0:	60fb      	str	r3, [r7, #12]
      break;
 8006be2:	bf00      	nop
  }

  return ret;
 8006be4:	68fb      	ldr	r3, [r7, #12]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop

08006bf0 <LSM6DSO16IS_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_SetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t FullScale)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t new_fs;

  new_fs = (FullScale <= 2) ? LSM6DSO16IS_2g
           : (FullScale <= 4) ? LSM6DSO16IS_4g
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	dd0b      	ble.n	8006c1c <LSM6DSO16IS_ACC_SetFullScale+0x2c>
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	2b04      	cmp	r3, #4
 8006c08:	dd06      	ble.n	8006c18 <LSM6DSO16IS_ACC_SetFullScale+0x28>
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	2b08      	cmp	r3, #8
 8006c0e:	dc01      	bgt.n	8006c14 <LSM6DSO16IS_ACC_SetFullScale+0x24>
 8006c10:	2303      	movs	r3, #3
 8006c12:	e004      	b.n	8006c1e <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 8006c14:	2301      	movs	r3, #1
 8006c16:	e002      	b.n	8006c1e <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 8006c18:	2302      	movs	r3, #2
 8006c1a:	e000      	b.n	8006c1e <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 8006c1c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO16IS_2g
 8006c1e:	72fb      	strb	r3, [r7, #11]
           : (FullScale <= 8) ? LSM6DSO16IS_8g
           :                    LSM6DSO16IS_16g;

  if (lsm6dso16is_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO16IS_OK)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	3320      	adds	r3, #32
 8006c24:	7afa      	ldrb	r2, [r7, #11]
 8006c26:	4611      	mov	r1, r2
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 fe47 	bl	80078bc <lsm6dso16is_xl_full_scale_set>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d002      	beq.n	8006c3a <LSM6DSO16IS_ACC_SetFullScale+0x4a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006c34:	f04f 33ff 	mov.w	r3, #4294967295
 8006c38:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <LSM6DSO16IS_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetAxesRaw(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_AxesRaw_t *Value)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];

  /* Read raw data values. */
  if (lsm6dso16is_acceleration_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	3320      	adds	r3, #32
 8006c56:	f107 020c 	add.w	r2, r7, #12
 8006c5a:	4611      	mov	r1, r2
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f001 f9cf 	bl	8008000 <lsm6dso16is_acceleration_raw_get>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d002      	beq.n	8006c6e <LSM6DSO16IS_ACC_GetAxesRaw+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006c68:	f04f 33ff 	mov.w	r3, #4294967295
 8006c6c:	617b      	str	r3, [r7, #20]
  }

  /* Format the data. */
  Value->x = data_raw[0];
 8006c6e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw[1];
 8006c76:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw[2];
 8006c7e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	809a      	strh	r2, [r3, #4]

  return ret;
 8006c86:	697b      	ldr	r3, [r7, #20]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3718      	adds	r7, #24
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <LSM6DSO16IS_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetAxes(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Axes_t *Acceleration)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];
  float_t sensitivity = 0.0f;
 8006c9e:	f04f 0300 	mov.w	r3, #0
 8006ca2:	60bb      	str	r3, [r7, #8]

  /* Read raw data values. */
  if (lsm6dso16is_acceleration_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	3320      	adds	r3, #32
 8006ca8:	f107 020c 	add.w	r2, r7, #12
 8006cac:	4611      	mov	r1, r2
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f001 f9a6 	bl	8008000 <lsm6dso16is_acceleration_raw_get>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d002      	beq.n	8006cc0 <LSM6DSO16IS_ACC_GetAxes+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8006cba:	f04f 33ff 	mov.w	r3, #4294967295
 8006cbe:	617b      	str	r3, [r7, #20]
  }

  /* Get LSM6DSO16IS actual sensitivity. */
  if (LSM6DSO16IS_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO16IS_OK)
 8006cc0:	f107 0308 	add.w	r3, r7, #8
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f7ff fe4c 	bl	8006964 <LSM6DSO16IS_ACC_GetSensitivity>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d002      	beq.n	8006cd8 <LSM6DSO16IS_ACC_GetAxes+0x48>
  {
    ret = LSM6DSO16IS_ERROR;
 8006cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd6:	617b      	str	r3, [r7, #20]
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw[0] * sensitivity));
 8006cd8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006cdc:	ee07 3a90 	vmov	s15, r3
 8006ce0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ce4:	edd7 7a02 	vldr	s15, [r7, #8]
 8006ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006cf0:	ee17 2a90 	vmov	r2, s15
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw[1] * sensitivity));
 8006cf8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006cfc:	ee07 3a90 	vmov	s15, r3
 8006d00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d04:	edd7 7a02 	vldr	s15, [r7, #8]
 8006d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d10:	ee17 2a90 	vmov	r2, s15
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw[2] * sensitivity));
 8006d18:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006d1c:	ee07 3a90 	vmov	s15, r3
 8006d20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d24:	edd7 7a02 	vldr	s15, [r7, #8]
 8006d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d30:	ee17 2a90 	vmov	r2, s15
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	609a      	str	r2, [r3, #8]

  return ret;
 8006d38:	697b      	ldr	r3, [r7, #20]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <LSM6DSO16IS_GYRO_Enable>:
  * @brief  Enable the LSM6DSO16IS gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_Enable(LSM6DSO16IS_Object_t *pObj)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b084      	sub	sp, #16
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d102      	bne.n	8006d5e <LSM6DSO16IS_GYRO_Enable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	e013      	b.n	8006d86 <LSM6DSO16IS_GYRO_Enable+0x44>
  }
  else
  {
    /* Output data rate selection. */
    if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO16IS_OK)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f103 0220 	add.w	r2, r3, #32
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	f000 ffb7 	bl	8007ce0 <lsm6dso16is_gy_data_rate_set>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d002      	beq.n	8006d7e <LSM6DSO16IS_GYRO_Enable+0x3c>
    {
      ret = LSM6DSO16IS_ERROR;
 8006d78:	f04f 33ff 	mov.w	r3, #4294967295
 8006d7c:	60fb      	str	r3, [r7, #12]
    }

    pObj->gyro_is_enabled = 1;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  }

  return ret;
 8006d86:	68fb      	ldr	r3, [r7, #12]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <LSM6DSO16IS_GYRO_Disable>:
  * @brief  Disable the LSM6DSO16IS gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_Disable(LSM6DSO16IS_Object_t *pObj)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d102      	bne.n	8006dac <LSM6DSO16IS_GYRO_Disable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8006da6:	2300      	movs	r3, #0
 8006da8:	60fb      	str	r3, [r7, #12]
 8006daa:	e01e      	b.n	8006dea <LSM6DSO16IS_GYRO_Disable+0x5a>
  }
  else
  {
    /* Get current output data rate. */
    if (lsm6dso16is_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO16IS_OK)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f103 0220 	add.w	r2, r3, #32
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	3334      	adds	r3, #52	@ 0x34
 8006db6:	4619      	mov	r1, r3
 8006db8:	4610      	mov	r0, r2
 8006dba:	f000 ffd1 	bl	8007d60 <lsm6dso16is_gy_data_rate_get>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d002      	beq.n	8006dca <LSM6DSO16IS_GYRO_Disable+0x3a>
    {
      ret = LSM6DSO16IS_ERROR;
 8006dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc8:	60fb      	str	r3, [r7, #12]
    }

    /* Output data rate selection - power down. */
    if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_GY_ODR_OFF) != LSM6DSO16IS_OK)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	3320      	adds	r3, #32
 8006dce:	2100      	movs	r1, #0
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f000 ff85 	bl	8007ce0 <lsm6dso16is_gy_data_rate_set>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d002      	beq.n	8006de2 <LSM6DSO16IS_GYRO_Disable+0x52>
    {
      ret = LSM6DSO16IS_ERROR;
 8006ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8006de0:	60fb      	str	r3, [r7, #12]
    }

    pObj->gyro_is_enabled = 0;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  }

  return ret;
 8006dea:	68fb      	ldr	r3, [r7, #12]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <LSM6DSO16IS_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetSensitivity(LSM6DSO16IS_Object_t *pObj, float_t *Sensitivity)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO16IS_OK)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	3320      	adds	r3, #32
 8006e06:	f107 020b 	add.w	r2, r7, #11
 8006e0a:	4611      	mov	r1, r2
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f000 ff0b 	bl	8007c28 <lsm6dso16is_gy_full_scale_get>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d002      	beq.n	8006e1e <LSM6DSO16IS_GYRO_GetSensitivity+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006e18:	f04f 33ff 	mov.w	r3, #4294967295
 8006e1c:	60fb      	str	r3, [r7, #12]
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8006e1e:	7afb      	ldrb	r3, [r7, #11]
 8006e20:	2b10      	cmp	r3, #16
 8006e22:	d839      	bhi.n	8006e98 <LSM6DSO16IS_GYRO_GetSensitivity+0xa4>
 8006e24:	a201      	add	r2, pc, #4	@ (adr r2, 8006e2c <LSM6DSO16IS_GYRO_GetSensitivity+0x38>)
 8006e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2a:	bf00      	nop
 8006e2c:	08006e79 	.word	0x08006e79
 8006e30:	08006e81 	.word	0x08006e81
 8006e34:	08006e89 	.word	0x08006e89
 8006e38:	08006e91 	.word	0x08006e91
 8006e3c:	08006e99 	.word	0x08006e99
 8006e40:	08006e99 	.word	0x08006e99
 8006e44:	08006e99 	.word	0x08006e99
 8006e48:	08006e99 	.word	0x08006e99
 8006e4c:	08006e99 	.word	0x08006e99
 8006e50:	08006e99 	.word	0x08006e99
 8006e54:	08006e99 	.word	0x08006e99
 8006e58:	08006e99 	.word	0x08006e99
 8006e5c:	08006e99 	.word	0x08006e99
 8006e60:	08006e99 	.word	0x08006e99
 8006e64:	08006e99 	.word	0x08006e99
 8006e68:	08006e99 	.word	0x08006e99
 8006e6c:	08006e71 	.word	0x08006e71
  {
    case LSM6DSO16IS_125dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_125DPS;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	4a0e      	ldr	r2, [pc, #56]	@ (8006eac <LSM6DSO16IS_GYRO_GetSensitivity+0xb8>)
 8006e74:	601a      	str	r2, [r3, #0]
      break;
 8006e76:	e013      	b.n	8006ea0 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_250dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_250DPS;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	4a0d      	ldr	r2, [pc, #52]	@ (8006eb0 <LSM6DSO16IS_GYRO_GetSensitivity+0xbc>)
 8006e7c:	601a      	str	r2, [r3, #0]
      break;
 8006e7e:	e00f      	b.n	8006ea0 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_500dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_500DPS;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	4a0c      	ldr	r2, [pc, #48]	@ (8006eb4 <LSM6DSO16IS_GYRO_GetSensitivity+0xc0>)
 8006e84:	601a      	str	r2, [r3, #0]
      break;
 8006e86:	e00b      	b.n	8006ea0 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_1000dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_1000DPS;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	4a0b      	ldr	r2, [pc, #44]	@ (8006eb8 <LSM6DSO16IS_GYRO_GetSensitivity+0xc4>)
 8006e8c:	601a      	str	r2, [r3, #0]
      break;
 8006e8e:	e007      	b.n	8006ea0 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_2000dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_2000DPS;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	4a0a      	ldr	r2, [pc, #40]	@ (8006ebc <LSM6DSO16IS_GYRO_GetSensitivity+0xc8>)
 8006e94:	601a      	str	r2, [r3, #0]
      break;
 8006e96:	e003      	b.n	8006ea0 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    default:
      ret = LSM6DSO16IS_ERROR;
 8006e98:	f04f 33ff 	mov.w	r3, #4294967295
 8006e9c:	60fb      	str	r3, [r7, #12]
      break;
 8006e9e:	bf00      	nop
  }

  return ret;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	408c0000 	.word	0x408c0000
 8006eb0:	410c0000 	.word	0x410c0000
 8006eb4:	418c0000 	.word	0x418c0000
 8006eb8:	420c0000 	.word	0x420c0000
 8006ebc:	428c0000 	.word	0x428c0000

08006ec0 <LSM6DSO16IS_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t *Odr)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_data_rate_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso16is_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO16IS_OK)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	3320      	adds	r3, #32
 8006ed2:	f107 020b 	add.w	r2, r7, #11
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f000 ff41 	bl	8007d60 <lsm6dso16is_gy_data_rate_get>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d002      	beq.n	8006eea <LSM6DSO16IS_GYRO_GetOutputDataRate+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ee8:	60fb      	str	r3, [r7, #12]
  }

  switch (odr_low_level)
 8006eea:	7afb      	ldrb	r3, [r7, #11]
 8006eec:	2b1a      	cmp	r3, #26
 8006eee:	d866      	bhi.n	8006fbe <LSM6DSO16IS_GYRO_GetOutputDataRate+0xfe>
 8006ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef8 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x38>)
 8006ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef6:	bf00      	nop
 8006ef8:	08006f65 	.word	0x08006f65
 8006efc:	08006f6f 	.word	0x08006f6f
 8006f00:	08006f77 	.word	0x08006f77
 8006f04:	08006f7f 	.word	0x08006f7f
 8006f08:	08006f87 	.word	0x08006f87
 8006f0c:	08006f8f 	.word	0x08006f8f
 8006f10:	08006f97 	.word	0x08006f97
 8006f14:	08006f9f 	.word	0x08006f9f
 8006f18:	08006fa7 	.word	0x08006fa7
 8006f1c:	08006faf 	.word	0x08006faf
 8006f20:	08006fb7 	.word	0x08006fb7
 8006f24:	08006fbf 	.word	0x08006fbf
 8006f28:	08006fbf 	.word	0x08006fbf
 8006f2c:	08006fbf 	.word	0x08006fbf
 8006f30:	08006fbf 	.word	0x08006fbf
 8006f34:	08006fbf 	.word	0x08006fbf
 8006f38:	08006fbf 	.word	0x08006fbf
 8006f3c:	08006f6f 	.word	0x08006f6f
 8006f40:	08006f77 	.word	0x08006f77
 8006f44:	08006f7f 	.word	0x08006f7f
 8006f48:	08006f87 	.word	0x08006f87
 8006f4c:	08006f8f 	.word	0x08006f8f
 8006f50:	08006f97 	.word	0x08006f97
 8006f54:	08006f9f 	.word	0x08006f9f
 8006f58:	08006fa7 	.word	0x08006fa7
 8006f5c:	08006faf 	.word	0x08006faf
 8006f60:	08006fb7 	.word	0x08006fb7
  {
    case LSM6DSO16IS_GY_ODR_OFF:
      *Odr = 0.0f;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	f04f 0200 	mov.w	r2, #0
 8006f6a:	601a      	str	r2, [r3, #0]
      break;
 8006f6c:	e02b      	b.n	8006fc6 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_LP:
    case LSM6DSO16IS_GY_ODR_AT_12Hz5_HP:
      *Odr = 12.5f;
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	4a17      	ldr	r2, [pc, #92]	@ (8006fd0 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x110>)
 8006f72:	601a      	str	r2, [r3, #0]
      break;
 8006f74:	e027      	b.n	8006fc6 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_26H_LP:
    case LSM6DSO16IS_GY_ODR_AT_26H_HP:
      *Odr = 26.0f;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	4a16      	ldr	r2, [pc, #88]	@ (8006fd4 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x114>)
 8006f7a:	601a      	str	r2, [r3, #0]
      break;
 8006f7c:	e023      	b.n	8006fc6 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_52Hz_HP:
      *Odr = 52.0f;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	4a15      	ldr	r2, [pc, #84]	@ (8006fd8 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x118>)
 8006f82:	601a      	str	r2, [r3, #0]
      break;
 8006f84:	e01f      	b.n	8006fc6 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_104Hz_HP:
      *Odr = 104.0f;
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	4a14      	ldr	r2, [pc, #80]	@ (8006fdc <LSM6DSO16IS_GYRO_GetOutputDataRate+0x11c>)
 8006f8a:	601a      	str	r2, [r3, #0]
      break;
 8006f8c:	e01b      	b.n	8006fc6 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_208Hz_HP:
      *Odr = 208.0f;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	4a13      	ldr	r2, [pc, #76]	@ (8006fe0 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x120>)
 8006f92:	601a      	str	r2, [r3, #0]
      break;
 8006f94:	e017      	b.n	8006fc6 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_416Hz_HP:
      *Odr = 416.0f;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	4a12      	ldr	r2, [pc, #72]	@ (8006fe4 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x124>)
 8006f9a:	601a      	str	r2, [r3, #0]
      break;
 8006f9c:	e013      	b.n	8006fc6 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_833Hz_HP:
      *Odr = 833.0f;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	4a11      	ldr	r2, [pc, #68]	@ (8006fe8 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x128>)
 8006fa2:	601a      	str	r2, [r3, #0]
      break;
 8006fa4:	e00f      	b.n	8006fc6 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_1667Hz_HP:
      *Odr =  1667.0f;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	4a10      	ldr	r2, [pc, #64]	@ (8006fec <LSM6DSO16IS_GYRO_GetOutputDataRate+0x12c>)
 8006faa:	601a      	str	r2, [r3, #0]
      break;
 8006fac:	e00b      	b.n	8006fc6 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_3333Hz_HP:
      *Odr =  3333.0f;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	4a0f      	ldr	r2, [pc, #60]	@ (8006ff0 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x130>)
 8006fb2:	601a      	str	r2, [r3, #0]
      break;
 8006fb4:	e007      	b.n	8006fc6 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_6667Hz_HP:
      *Odr =  6667.0f;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	4a0e      	ldr	r2, [pc, #56]	@ (8006ff4 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x134>)
 8006fba:	601a      	str	r2, [r3, #0]
      break;
 8006fbc:	e003      	b.n	8006fc6 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    default:
      ret = LSM6DSO16IS_ERROR;
 8006fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8006fc2:	60fb      	str	r3, [r7, #12]
      break;
 8006fc4:	bf00      	nop
  }

  return ret;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	41480000 	.word	0x41480000
 8006fd4:	41d00000 	.word	0x41d00000
 8006fd8:	42500000 	.word	0x42500000
 8006fdc:	42d00000 	.word	0x42d00000
 8006fe0:	43500000 	.word	0x43500000
 8006fe4:	43d00000 	.word	0x43d00000
 8006fe8:	44504000 	.word	0x44504000
 8006fec:	44d06000 	.word	0x44d06000
 8006ff0:	45505000 	.word	0x45505000
 8006ff4:	45d05800 	.word	0x45d05800

08006ff8 <LSM6DSO16IS_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_SetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret;

  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800700a:	2b01      	cmp	r3, #1
 800700c:	d106      	bne.n	800701c <LSM6DSO16IS_GYRO_SetOutputDataRate+0x24>
  {
    ret = LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 800700e:	ed97 0a00 	vldr	s0, [r7]
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fa70 	bl	80074f8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled>
 8007018:	60f8      	str	r0, [r7, #12]
 800701a:	e005      	b.n	8007028 <LSM6DSO16IS_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    ret = LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 800701c:	ed97 0a00 	vldr	s0, [r7]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 faf7 	bl	8007614 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled>
 8007026:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007028:	68fb      	ldr	r3, [r7, #12]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
	...

08007034 <LSM6DSO16IS_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t  *FullScale)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 800703e:	2300      	movs	r3, #0
 8007040:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO16IS_OK)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	3320      	adds	r3, #32
 8007046:	f107 020b 	add.w	r2, r7, #11
 800704a:	4611      	mov	r1, r2
 800704c:	4618      	mov	r0, r3
 800704e:	f000 fdeb 	bl	8007c28 <lsm6dso16is_gy_full_scale_get>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d002      	beq.n	800705e <LSM6DSO16IS_GYRO_GetFullScale+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8007058:	f04f 33ff 	mov.w	r3, #4294967295
 800705c:	60fb      	str	r3, [r7, #12]
  }

  switch (fs_low_level)
 800705e:	7afb      	ldrb	r3, [r7, #11]
 8007060:	2b10      	cmp	r3, #16
 8007062:	d83c      	bhi.n	80070de <LSM6DSO16IS_GYRO_GetFullScale+0xaa>
 8007064:	a201      	add	r2, pc, #4	@ (adr r2, 800706c <LSM6DSO16IS_GYRO_GetFullScale+0x38>)
 8007066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706a:	bf00      	nop
 800706c:	080070b9 	.word	0x080070b9
 8007070:	080070c1 	.word	0x080070c1
 8007074:	080070cb 	.word	0x080070cb
 8007078:	080070d5 	.word	0x080070d5
 800707c:	080070df 	.word	0x080070df
 8007080:	080070df 	.word	0x080070df
 8007084:	080070df 	.word	0x080070df
 8007088:	080070df 	.word	0x080070df
 800708c:	080070df 	.word	0x080070df
 8007090:	080070df 	.word	0x080070df
 8007094:	080070df 	.word	0x080070df
 8007098:	080070df 	.word	0x080070df
 800709c:	080070df 	.word	0x080070df
 80070a0:	080070df 	.word	0x080070df
 80070a4:	080070df 	.word	0x080070df
 80070a8:	080070df 	.word	0x080070df
 80070ac:	080070b1 	.word	0x080070b1
  {
    case LSM6DSO16IS_125dps:
      *FullScale =  125;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	227d      	movs	r2, #125	@ 0x7d
 80070b4:	601a      	str	r2, [r3, #0]
      break;
 80070b6:	e016      	b.n	80070e6 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_250dps:
      *FullScale =  250;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	22fa      	movs	r2, #250	@ 0xfa
 80070bc:	601a      	str	r2, [r3, #0]
      break;
 80070be:	e012      	b.n	80070e6 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_500dps:
      *FullScale =  500;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80070c6:	601a      	str	r2, [r3, #0]
      break;
 80070c8:	e00d      	b.n	80070e6 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_1000dps:
      *FullScale = 1000;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80070d0:	601a      	str	r2, [r3, #0]
      break;
 80070d2:	e008      	b.n	80070e6 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_2000dps:
      *FullScale = 2000;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80070da:	601a      	str	r2, [r3, #0]
      break;
 80070dc:	e003      	b.n	80070e6 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    default:
      ret = LSM6DSO16IS_ERROR;
 80070de:	f04f 33ff 	mov.w	r3, #4294967295
 80070e2:	60fb      	str	r3, [r7, #12]
      break;
 80070e4:	bf00      	nop
  }

  return ret;
 80070e6:	68fb      	ldr	r3, [r7, #12]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <LSM6DSO16IS_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_SetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t FullScale)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80070fa:	2300      	movs	r3, #0
 80070fc:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO16IS_125dps
           : (FullScale <= 250)  ? LSM6DSO16IS_250dps
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	2b7d      	cmp	r3, #125	@ 0x7d
 8007102:	dd12      	ble.n	800712a <LSM6DSO16IS_GYRO_SetFullScale+0x3a>
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	2bfa      	cmp	r3, #250	@ 0xfa
 8007108:	dd0d      	ble.n	8007126 <LSM6DSO16IS_GYRO_SetFullScale+0x36>
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007110:	dd07      	ble.n	8007122 <LSM6DSO16IS_GYRO_SetFullScale+0x32>
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007118:	dc01      	bgt.n	800711e <LSM6DSO16IS_GYRO_SetFullScale+0x2e>
 800711a:	2302      	movs	r3, #2
 800711c:	e006      	b.n	800712c <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 800711e:	2303      	movs	r3, #3
 8007120:	e004      	b.n	800712c <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8007122:	2301      	movs	r3, #1
 8007124:	e002      	b.n	800712c <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8007126:	2300      	movs	r3, #0
 8007128:	e000      	b.n	800712c <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 800712a:	2310      	movs	r3, #16
  new_fs = (FullScale <= 125)  ? LSM6DSO16IS_125dps
 800712c:	72fb      	strb	r3, [r7, #11]
           : (FullScale <= 500)  ? LSM6DSO16IS_500dps
           : (FullScale <= 1000) ? LSM6DSO16IS_1000dps
           :                       LSM6DSO16IS_2000dps;

  if (lsm6dso16is_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO16IS_OK)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	3320      	adds	r3, #32
 8007132:	7afa      	ldrb	r2, [r7, #11]
 8007134:	4611      	mov	r1, r2
 8007136:	4618      	mov	r0, r3
 8007138:	f000 fd46 	bl	8007bc8 <lsm6dso16is_gy_full_scale_set>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d002      	beq.n	8007148 <LSM6DSO16IS_GYRO_SetFullScale+0x58>
  {
    ret = LSM6DSO16IS_ERROR;
 8007142:	f04f 33ff 	mov.w	r3, #4294967295
 8007146:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007148:	68fb      	ldr	r3, [r7, #12]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <LSM6DSO16IS_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetAxesRaw(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_AxesRaw_t *Value)
{
 8007152:	b580      	push	{r7, lr}
 8007154:	b086      	sub	sp, #24
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 800715c:	2300      	movs	r3, #0
 800715e:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];

  /* Read raw data values. */
  if (lsm6dso16is_angular_rate_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	3320      	adds	r3, #32
 8007164:	f107 020c 	add.w	r2, r7, #12
 8007168:	4611      	mov	r1, r2
 800716a:	4618      	mov	r0, r3
 800716c:	f000 ff00 	bl	8007f70 <lsm6dso16is_angular_rate_raw_get>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d002      	beq.n	800717c <LSM6DSO16IS_GYRO_GetAxesRaw+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8007176:	f04f 33ff 	mov.w	r3, #4294967295
 800717a:	617b      	str	r3, [r7, #20]
  }

  /* Format the data. */
  Value->x = data_raw[0];
 800717c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw[1];
 8007184:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw[2];
 800718c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	809a      	strh	r2, [r3, #4]

  return ret;
 8007194:	697b      	ldr	r3, [r7, #20]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3718      	adds	r7, #24
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <LSM6DSO16IS_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetAxes(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Axes_t *AngularRate)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b086      	sub	sp, #24
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];
  float_t sensitivity = 0.0f;
 80071ac:	f04f 0300 	mov.w	r3, #0
 80071b0:	60bb      	str	r3, [r7, #8]

  /* Read raw data values. */
  if (lsm6dso16is_angular_rate_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	3320      	adds	r3, #32
 80071b6:	f107 020c 	add.w	r2, r7, #12
 80071ba:	4611      	mov	r1, r2
 80071bc:	4618      	mov	r0, r3
 80071be:	f000 fed7 	bl	8007f70 <lsm6dso16is_angular_rate_raw_get>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d002      	beq.n	80071ce <LSM6DSO16IS_GYRO_GetAxes+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 80071c8:	f04f 33ff 	mov.w	r3, #4294967295
 80071cc:	617b      	str	r3, [r7, #20]
  }

  /* Get LSM6DSO16IS actual sensitivity. */
  if (LSM6DSO16IS_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO16IS_OK)
 80071ce:	f107 0308 	add.w	r3, r7, #8
 80071d2:	4619      	mov	r1, r3
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f7ff fe0d 	bl	8006df4 <LSM6DSO16IS_GYRO_GetSensitivity>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <LSM6DSO16IS_GYRO_GetAxes+0x48>
  {
    ret = LSM6DSO16IS_ERROR;
 80071e0:	f04f 33ff 	mov.w	r3, #4294967295
 80071e4:	617b      	str	r3, [r7, #20]
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw[0] * sensitivity));
 80071e6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80071ea:	ee07 3a90 	vmov	s15, r3
 80071ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80071f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071fe:	ee17 2a90 	vmov	r2, s15
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw[1] * sensitivity));
 8007206:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007212:	edd7 7a02 	vldr	s15, [r7, #8]
 8007216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800721a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800721e:	ee17 2a90 	vmov	r2, s15
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw[2] * sensitivity));
 8007226:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800722a:	ee07 3a90 	vmov	s15, r3
 800722e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007232:	edd7 7a02 	vldr	s15, [r7, #8]
 8007236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800723a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800723e:	ee17 2a90 	vmov	r2, s15
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	609a      	str	r2, [r3, #8]

  return ret;
 8007246:	697b      	ldr	r3, [r7, #20]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3718      	adds	r7, #24
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <LSM6DSO16IS_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Write_Reg(LSM6DSO16IS_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	70fb      	strb	r3, [r7, #3]
 800725c:	4613      	mov	r3, r2
 800725e:	70bb      	strb	r3, [r7, #2]
  int32_t ret = LSM6DSO16IS_OK;
 8007260:	2300      	movs	r3, #0
 8007262:	60fb      	str	r3, [r7, #12]

  if (lsm6dso16is_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO16IS_OK)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f103 0020 	add.w	r0, r3, #32
 800726a:	1cba      	adds	r2, r7, #2
 800726c:	78f9      	ldrb	r1, [r7, #3]
 800726e:	2301      	movs	r3, #1
 8007270:	f000 faa6 	bl	80077c0 <lsm6dso16is_write_reg>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d002      	beq.n	8007280 <LSM6DSO16IS_Write_Reg+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 800727a:	f04f 33ff 	mov.w	r3, #4294967295
 800727e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007280:	68fb      	ldr	r3, [r7, #12]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <LSM6DSO16IS_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LSM6DSO16IS_MAIN_MEM_BANK, 2 - LSM6DSO16IS_SENSOR_HUB_MEM_BANK, 3 - LSM6DSO16IS_ISPU_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Set_Mem_Bank(LSM6DSO16IS_Object_t *pObj, uint8_t Val)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	460b      	mov	r3, r1
 8007294:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSO16IS_OK;
 8007296:	2300      	movs	r3, #0
 8007298:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_mem_bank_t reg;

  reg = (Val == 2U) ? LSM6DSO16IS_SENSOR_HUB_MEM_BANK
        : (Val == 3U) ? LSM6DSO16IS_ISPU_MEM_BANK
 800729a:	78fb      	ldrb	r3, [r7, #3]
 800729c:	2b02      	cmp	r3, #2
 800729e:	d006      	beq.n	80072ae <LSM6DSO16IS_Set_Mem_Bank+0x24>
 80072a0:	78fb      	ldrb	r3, [r7, #3]
 80072a2:	2b03      	cmp	r3, #3
 80072a4:	d101      	bne.n	80072aa <LSM6DSO16IS_Set_Mem_Bank+0x20>
 80072a6:	2303      	movs	r3, #3
 80072a8:	e002      	b.n	80072b0 <LSM6DSO16IS_Set_Mem_Bank+0x26>
 80072aa:	2300      	movs	r3, #0
 80072ac:	e000      	b.n	80072b0 <LSM6DSO16IS_Set_Mem_Bank+0x26>
 80072ae:	2302      	movs	r3, #2
  reg = (Val == 2U) ? LSM6DSO16IS_SENSOR_HUB_MEM_BANK
 80072b0:	72fb      	strb	r3, [r7, #11]
        :               LSM6DSO16IS_MAIN_MEM_BANK;

  if (lsm6dso16is_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSO16IS_OK)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	3320      	adds	r3, #32
 80072b6:	7afa      	ldrb	r2, [r7, #11]
 80072b8:	4611      	mov	r1, r2
 80072ba:	4618      	mov	r0, r3
 80072bc:	f000 fa9e 	bl	80077fc <lsm6dso16is_mem_bank_set>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d002      	beq.n	80072cc <LSM6DSO16IS_Set_Mem_Bank+0x42>
  {
    ret = LSM6DSO16IS_ERROR;
 80072c6:	f04f 33ff 	mov.w	r3, #4294967295
 80072ca:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80072cc:	68fb      	ldr	r3, [r7, #12]
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
	...

080072d8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret = LSM6DSO16IS_OK;
 80072e4:	2300      	movs	r3, #0
 80072e6:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_data_rate_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
            : (Odr <=   26.0f) ? LSM6DSO16IS_XL_ODR_AT_26H_HP
 80072e8:	edd7 7a00 	vldr	s15, [r7]
 80072ec:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80072f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072f8:	d801      	bhi.n	80072fe <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x26>
 80072fa:	2301      	movs	r3, #1
 80072fc:	e058      	b.n	80073b0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80072fe:	edd7 7a00 	vldr	s15, [r7]
 8007302:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8007306:	eef4 7ac7 	vcmpe.f32	s15, s14
 800730a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800730e:	d801      	bhi.n	8007314 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x3c>
 8007310:	2302      	movs	r3, #2
 8007312:	e04d      	b.n	80073b0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007314:	edd7 7a00 	vldr	s15, [r7]
 8007318:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80073d8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x100>
 800731c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007324:	d801      	bhi.n	800732a <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x52>
 8007326:	2303      	movs	r3, #3
 8007328:	e042      	b.n	80073b0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 800732a:	edd7 7a00 	vldr	s15, [r7]
 800732e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80073dc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x104>
 8007332:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800733a:	d801      	bhi.n	8007340 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x68>
 800733c:	2304      	movs	r3, #4
 800733e:	e037      	b.n	80073b0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007340:	edd7 7a00 	vldr	s15, [r7]
 8007344:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80073e0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x108>
 8007348:	eef4 7ac7 	vcmpe.f32	s15, s14
 800734c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007350:	d801      	bhi.n	8007356 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x7e>
 8007352:	2305      	movs	r3, #5
 8007354:	e02c      	b.n	80073b0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007356:	edd7 7a00 	vldr	s15, [r7]
 800735a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80073e4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x10c>
 800735e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007366:	d801      	bhi.n	800736c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x94>
 8007368:	2306      	movs	r3, #6
 800736a:	e021      	b.n	80073b0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 800736c:	edd7 7a00 	vldr	s15, [r7]
 8007370:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80073e8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x110>
 8007374:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800737c:	d801      	bhi.n	8007382 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xaa>
 800737e:	2307      	movs	r3, #7
 8007380:	e016      	b.n	80073b0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007382:	edd7 7a00 	vldr	s15, [r7]
 8007386:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80073ec <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x114>
 800738a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800738e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007392:	d801      	bhi.n	8007398 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007394:	2308      	movs	r3, #8
 8007396:	e00b      	b.n	80073b0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007398:	edd7 7a00 	vldr	s15, [r7]
 800739c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80073f0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x118>
 80073a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a8:	d801      	bhi.n	80073ae <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd6>
 80073aa:	2309      	movs	r3, #9
 80073ac:	e000      	b.n	80073b0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80073ae:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
 80073b0:	72fb      	strb	r3, [r7, #11]
            : (Odr <= 1667.0f) ? LSM6DSO16IS_XL_ODR_AT_1667Hz_HP
            : (Odr <= 3333.0f) ? LSM6DSO16IS_XL_ODR_AT_3333Hz_HP
            :                    LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;

  /* Output data rate selection. */
  if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO16IS_OK)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	3320      	adds	r3, #32
 80073b6:	7afa      	ldrb	r2, [r7, #11]
 80073b8:	4611      	mov	r1, r2
 80073ba:	4618      	mov	r0, r3
 80073bc:	f000 fadc 	bl	8007978 <lsm6dso16is_xl_data_rate_set>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d002      	beq.n	80073cc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xf4>
  {
    ret = LSM6DSO16IS_ERROR;
 80073c6:	f04f 33ff 	mov.w	r3, #4294967295
 80073ca:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80073cc:	68fb      	ldr	r3, [r7, #12]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	42500000 	.word	0x42500000
 80073dc:	42d00000 	.word	0x42d00000
 80073e0:	43500000 	.word	0x43500000
 80073e4:	43d00000 	.word	0x43d00000
 80073e8:	44504000 	.word	0x44504000
 80073ec:	44d06000 	.word	0x44d06000
 80073f0:	45505000 	.word	0x45505000

080073f4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
                  : (Odr <=   26.0f) ? LSM6DSO16IS_XL_ODR_AT_26H_HP
 8007400:	edd7 7a00 	vldr	s15, [r7]
 8007404:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8007408:	eef4 7ac7 	vcmpe.f32	s15, s14
 800740c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007410:	d801      	bhi.n	8007416 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x22>
 8007412:	2301      	movs	r3, #1
 8007414:	e058      	b.n	80074c8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007416:	edd7 7a00 	vldr	s15, [r7]
 800741a:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800741e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007426:	d801      	bhi.n	800742c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x38>
 8007428:	2302      	movs	r3, #2
 800742a:	e04d      	b.n	80074c8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800742c:	edd7 7a00 	vldr	s15, [r7]
 8007430:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80074dc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8007434:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800743c:	d801      	bhi.n	8007442 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800743e:	2303      	movs	r3, #3
 8007440:	e042      	b.n	80074c8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007442:	edd7 7a00 	vldr	s15, [r7]
 8007446:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80074e0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xec>
 800744a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800744e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007452:	d801      	bhi.n	8007458 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x64>
 8007454:	2304      	movs	r3, #4
 8007456:	e037      	b.n	80074c8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007458:	edd7 7a00 	vldr	s15, [r7]
 800745c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80074e4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8007460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007468:	d801      	bhi.n	800746e <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800746a:	2305      	movs	r3, #5
 800746c:	e02c      	b.n	80074c8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800746e:	edd7 7a00 	vldr	s15, [r7]
 8007472:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80074e8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8007476:	eef4 7ac7 	vcmpe.f32	s15, s14
 800747a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800747e:	d801      	bhi.n	8007484 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x90>
 8007480:	2306      	movs	r3, #6
 8007482:	e021      	b.n	80074c8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007484:	edd7 7a00 	vldr	s15, [r7]
 8007488:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80074ec <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf8>
 800748c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007494:	d801      	bhi.n	800749a <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8007496:	2307      	movs	r3, #7
 8007498:	e016      	b.n	80074c8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800749a:	edd7 7a00 	vldr	s15, [r7]
 800749e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80074f0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80074a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074aa:	d801      	bhi.n	80074b0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80074ac:	2308      	movs	r3, #8
 80074ae:	e00b      	b.n	80074c8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80074b0:	edd7 7a00 	vldr	s15, [r7]
 80074b4:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80074f4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x100>
 80074b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074c0:	d801      	bhi.n	80074c6 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80074c2:	2309      	movs	r3, #9
 80074c4:	e000      	b.n	80074c8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80074c6:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO16IS_XL_ODR_AT_833Hz_HP
                  : (Odr <= 1667.0f) ? LSM6DSO16IS_XL_ODR_AT_1667Hz_HP
                  : (Odr <= 3333.0f) ? LSM6DSO16IS_XL_ODR_AT_3333Hz_HP
                  :                    LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;

  return LSM6DSO16IS_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr
 80074dc:	42500000 	.word	0x42500000
 80074e0:	42d00000 	.word	0x42d00000
 80074e4:	43500000 	.word	0x43500000
 80074e8:	43d00000 	.word	0x43d00000
 80074ec:	44504000 	.word	0x44504000
 80074f0:	44d06000 	.word	0x44d06000
 80074f4:	45505000 	.word	0x45505000

080074f8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret = LSM6DSO16IS_OK;
 8007504:	2300      	movs	r3, #0
 8007506:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_data_rate_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
            : (Odr <=   26.0f) ? LSM6DSO16IS_GY_ODR_AT_26H_HP
 8007508:	edd7 7a00 	vldr	s15, [r7]
 800750c:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8007510:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007518:	d801      	bhi.n	800751e <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x26>
 800751a:	2301      	movs	r3, #1
 800751c:	e058      	b.n	80075d0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800751e:	edd7 7a00 	vldr	s15, [r7]
 8007522:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8007526:	eef4 7ac7 	vcmpe.f32	s15, s14
 800752a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800752e:	d801      	bhi.n	8007534 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x3c>
 8007530:	2302      	movs	r3, #2
 8007532:	e04d      	b.n	80075d0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007534:	edd7 7a00 	vldr	s15, [r7]
 8007538:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80075f8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800753c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007544:	d801      	bhi.n	800754a <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x52>
 8007546:	2303      	movs	r3, #3
 8007548:	e042      	b.n	80075d0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800754a:	edd7 7a00 	vldr	s15, [r7]
 800754e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80075fc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8007552:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800755a:	d801      	bhi.n	8007560 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x68>
 800755c:	2304      	movs	r3, #4
 800755e:	e037      	b.n	80075d0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007560:	edd7 7a00 	vldr	s15, [r7]
 8007564:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8007600 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8007568:	eef4 7ac7 	vcmpe.f32	s15, s14
 800756c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007570:	d801      	bhi.n	8007576 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x7e>
 8007572:	2305      	movs	r3, #5
 8007574:	e02c      	b.n	80075d0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007576:	edd7 7a00 	vldr	s15, [r7]
 800757a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8007604 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 800757e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007586:	d801      	bhi.n	800758c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x94>
 8007588:	2306      	movs	r3, #6
 800758a:	e021      	b.n	80075d0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800758c:	edd7 7a00 	vldr	s15, [r7]
 8007590:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8007608 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8007594:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800759c:	d801      	bhi.n	80075a2 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xaa>
 800759e:	2307      	movs	r3, #7
 80075a0:	e016      	b.n	80075d0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80075a2:	edd7 7a00 	vldr	s15, [r7]
 80075a6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800760c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80075aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075b2:	d801      	bhi.n	80075b8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xc0>
 80075b4:	2308      	movs	r3, #8
 80075b6:	e00b      	b.n	80075d0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80075b8:	edd7 7a00 	vldr	s15, [r7]
 80075bc:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8007610 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x118>
 80075c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075c8:	d801      	bhi.n	80075ce <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd6>
 80075ca:	2309      	movs	r3, #9
 80075cc:	e000      	b.n	80075d0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80075ce:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
 80075d0:	72fb      	strb	r3, [r7, #11]
            : (Odr <= 1667.0f) ? LSM6DSO16IS_GY_ODR_AT_1667Hz_HP
            : (Odr <= 3333.0f) ? LSM6DSO16IS_GY_ODR_AT_3333Hz_HP
            :                    LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;

  /* Output data rate selection. */
  if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO16IS_OK)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	3320      	adds	r3, #32
 80075d6:	7afa      	ldrb	r2, [r7, #11]
 80075d8:	4611      	mov	r1, r2
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 fb80 	bl	8007ce0 <lsm6dso16is_gy_data_rate_set>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d002      	beq.n	80075ec <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xf4>
  {
    ret = LSM6DSO16IS_ERROR;
 80075e6:	f04f 33ff 	mov.w	r3, #4294967295
 80075ea:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80075ec:	68fb      	ldr	r3, [r7, #12]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	42500000 	.word	0x42500000
 80075fc:	42d00000 	.word	0x42d00000
 8007600:	43500000 	.word	0x43500000
 8007604:	43d00000 	.word	0x43d00000
 8007608:	44504000 	.word	0x44504000
 800760c:	44d06000 	.word	0x44d06000
 8007610:	45505000 	.word	0x45505000

08007614 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
                   : (Odr <=   26.0f) ? LSM6DSO16IS_GY_ODR_AT_26H_HP
 8007620:	edd7 7a00 	vldr	s15, [r7]
 8007624:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8007628:	eef4 7ac7 	vcmpe.f32	s15, s14
 800762c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007630:	d801      	bhi.n	8007636 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8007632:	2301      	movs	r3, #1
 8007634:	e058      	b.n	80076e8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007636:	edd7 7a00 	vldr	s15, [r7]
 800763a:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800763e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007646:	d801      	bhi.n	800764c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8007648:	2302      	movs	r3, #2
 800764a:	e04d      	b.n	80076e8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800764c:	edd7 7a00 	vldr	s15, [r7]
 8007650:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80076fc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8007654:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800765c:	d801      	bhi.n	8007662 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800765e:	2303      	movs	r3, #3
 8007660:	e042      	b.n	80076e8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007662:	edd7 7a00 	vldr	s15, [r7]
 8007666:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8007700 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800766a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800766e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007672:	d801      	bhi.n	8007678 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8007674:	2304      	movs	r3, #4
 8007676:	e037      	b.n	80076e8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007678:	edd7 7a00 	vldr	s15, [r7]
 800767c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8007704 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8007680:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007688:	d801      	bhi.n	800768e <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800768a:	2305      	movs	r3, #5
 800768c:	e02c      	b.n	80076e8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800768e:	edd7 7a00 	vldr	s15, [r7]
 8007692:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8007708 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8007696:	eef4 7ac7 	vcmpe.f32	s15, s14
 800769a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800769e:	d801      	bhi.n	80076a4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80076a0:	2306      	movs	r3, #6
 80076a2:	e021      	b.n	80076e8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80076a4:	edd7 7a00 	vldr	s15, [r7]
 80076a8:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800770c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80076ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076b4:	d801      	bhi.n	80076ba <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80076b6:	2307      	movs	r3, #7
 80076b8:	e016      	b.n	80076e8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80076ba:	edd7 7a00 	vldr	s15, [r7]
 80076be:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8007710 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80076c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ca:	d801      	bhi.n	80076d0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80076cc:	2308      	movs	r3, #8
 80076ce:	e00b      	b.n	80076e8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80076d0:	edd7 7a00 	vldr	s15, [r7]
 80076d4:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8007714 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80076d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076e0:	d801      	bhi.n	80076e6 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80076e2:	2309      	movs	r3, #9
 80076e4:	e000      	b.n	80076e8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80076e6:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSO16IS_GY_ODR_AT_833Hz_HP
                   : (Odr <= 1667.0f) ? LSM6DSO16IS_GY_ODR_AT_1667Hz_HP
                   : (Odr <= 3333.0f) ? LSM6DSO16IS_GY_ODR_AT_3333Hz_HP
                   :                    LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;

  return LSM6DSO16IS_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	42500000 	.word	0x42500000
 8007700:	42d00000 	.word	0x42d00000
 8007704:	43500000 	.word	0x43500000
 8007708:	43d00000 	.word	0x43d00000
 800770c:	44504000 	.word	0x44504000
 8007710:	44d06000 	.word	0x44d06000
 8007714:	45505000 	.word	0x45505000

08007718 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007718:	b590      	push	{r4, r7, lr}
 800771a:	b087      	sub	sp, #28
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	607a      	str	r2, [r7, #4]
 8007722:	461a      	mov	r2, r3
 8007724:	460b      	mov	r3, r1
 8007726:	72fb      	strb	r3, [r7, #11]
 8007728:	4613      	mov	r3, r2
 800772a:	813b      	strh	r3, [r7, #8]
  LSM6DSO16IS_Object_t *pObj = (LSM6DSO16IS_Object_t *)Handle;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	695c      	ldr	r4, [r3, #20]
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	7b1b      	ldrb	r3, [r3, #12]
 8007738:	4618      	mov	r0, r3
 800773a:	7afb      	ldrb	r3, [r7, #11]
 800773c:	b299      	uxth	r1, r3
 800773e:	893b      	ldrh	r3, [r7, #8]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	47a0      	blx	r4
 8007744:	4603      	mov	r3, r0
}
 8007746:	4618      	mov	r0, r3
 8007748:	371c      	adds	r7, #28
 800774a:	46bd      	mov	sp, r7
 800774c:	bd90      	pop	{r4, r7, pc}

0800774e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800774e:	b590      	push	{r4, r7, lr}
 8007750:	b087      	sub	sp, #28
 8007752:	af00      	add	r7, sp, #0
 8007754:	60f8      	str	r0, [r7, #12]
 8007756:	607a      	str	r2, [r7, #4]
 8007758:	461a      	mov	r2, r3
 800775a:	460b      	mov	r3, r1
 800775c:	72fb      	strb	r3, [r7, #11]
 800775e:	4613      	mov	r3, r2
 8007760:	813b      	strh	r3, [r7, #8]
  LSM6DSO16IS_Object_t *pObj = (LSM6DSO16IS_Object_t *)Handle;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	691c      	ldr	r4, [r3, #16]
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	7b1b      	ldrb	r3, [r3, #12]
 800776e:	4618      	mov	r0, r3
 8007770:	7afb      	ldrb	r3, [r7, #11]
 8007772:	b299      	uxth	r1, r3
 8007774:	893b      	ldrh	r3, [r7, #8]
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	47a0      	blx	r4
 800777a:	4603      	mov	r3, r0
}
 800777c:	4618      	mov	r0, r3
 800777e:	371c      	adds	r7, #28
 8007780:	46bd      	mov	sp, r7
 8007782:	bd90      	pop	{r4, r7, pc}

08007784 <lsm6dso16is_read_reg>:
  *
  */
int32_t __weak lsm6dso16is_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8007784:	b590      	push	{r4, r7, lr}
 8007786:	b087      	sub	sp, #28
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	607a      	str	r2, [r7, #4]
 800778e:	461a      	mov	r2, r3
 8007790:	460b      	mov	r3, r1
 8007792:	72fb      	strb	r3, [r7, #11]
 8007794:	4613      	mov	r3, r2
 8007796:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d102      	bne.n	80077a4 <lsm6dso16is_read_reg+0x20>
  {
    return -1;
 800779e:	f04f 33ff 	mov.w	r3, #4294967295
 80077a2:	e009      	b.n	80077b8 <lsm6dso16is_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	685c      	ldr	r4, [r3, #4]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	68d8      	ldr	r0, [r3, #12]
 80077ac:	893b      	ldrh	r3, [r7, #8]
 80077ae:	7af9      	ldrb	r1, [r7, #11]
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	47a0      	blx	r4
 80077b4:	6178      	str	r0, [r7, #20]

  return ret;
 80077b6:	697b      	ldr	r3, [r7, #20]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	371c      	adds	r7, #28
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd90      	pop	{r4, r7, pc}

080077c0 <lsm6dso16is_write_reg>:
  *
  */
int32_t __weak lsm6dso16is_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                     uint8_t *data,
                                     uint16_t len)
{
 80077c0:	b590      	push	{r4, r7, lr}
 80077c2:	b087      	sub	sp, #28
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	607a      	str	r2, [r7, #4]
 80077ca:	461a      	mov	r2, r3
 80077cc:	460b      	mov	r3, r1
 80077ce:	72fb      	strb	r3, [r7, #11]
 80077d0:	4613      	mov	r3, r2
 80077d2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d102      	bne.n	80077e0 <lsm6dso16is_write_reg+0x20>
  {
    return -1;
 80077da:	f04f 33ff 	mov.w	r3, #4294967295
 80077de:	e009      	b.n	80077f4 <lsm6dso16is_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681c      	ldr	r4, [r3, #0]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	68d8      	ldr	r0, [r3, #12]
 80077e8:	893b      	ldrh	r3, [r7, #8]
 80077ea:	7af9      	ldrb	r1, [r7, #11]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	47a0      	blx	r4
 80077f0:	6178      	str	r0, [r7, #20]

  return ret;
 80077f2:	697b      	ldr	r3, [r7, #20]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	371c      	adds	r7, #28
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd90      	pop	{r4, r7, pc}

080077fc <lsm6dso16is_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK, SENSOR_HUB_MEM_BANK, ISPU_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_mem_bank_set(const stmdev_ctx_t *ctx, lsm6dso16is_mem_bank_t val)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	460b      	mov	r3, r1
 8007806:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_func_cfg_access_t func_cfg_access = {0x0};
 8007808:	2300      	movs	r3, #0
 800780a:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /* no need to read it first as the only other field is a ispu reset bit */
  func_cfg_access.shub_reg_access = (val == LSM6DSO16IS_SENSOR_HUB_MEM_BANK) ? 0x1U : 0x0U;
 800780c:	78fb      	ldrb	r3, [r7, #3]
 800780e:	2b02      	cmp	r3, #2
 8007810:	d101      	bne.n	8007816 <lsm6dso16is_mem_bank_set+0x1a>
 8007812:	2201      	movs	r2, #1
 8007814:	e000      	b.n	8007818 <lsm6dso16is_mem_bank_set+0x1c>
 8007816:	2200      	movs	r2, #0
 8007818:	7a3b      	ldrb	r3, [r7, #8]
 800781a:	f362 1386 	bfi	r3, r2, #6, #1
 800781e:	723b      	strb	r3, [r7, #8]
  func_cfg_access.ispu_reg_access = (val == LSM6DSO16IS_ISPU_MEM_BANK) ? 0x1U : 0x0U;
 8007820:	78fb      	ldrb	r3, [r7, #3]
 8007822:	2b03      	cmp	r3, #3
 8007824:	d101      	bne.n	800782a <lsm6dso16is_mem_bank_set+0x2e>
 8007826:	2201      	movs	r2, #1
 8007828:	e000      	b.n	800782c <lsm6dso16is_mem_bank_set+0x30>
 800782a:	2200      	movs	r2, #0
 800782c:	7a3b      	ldrb	r3, [r7, #8]
 800782e:	f362 13c7 	bfi	r3, r2, #7, #1
 8007832:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8007834:	f107 0208 	add.w	r2, r7, #8
 8007838:	2301      	movs	r3, #1
 800783a:	2101      	movs	r1, #1
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f7ff ffbf 	bl	80077c0 <lsm6dso16is_write_reg>
 8007842:	60f8      	str	r0, [r7, #12]

  return ret;
 8007844:	68fb      	ldr	r3, [r7, #12]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <lsm6dso16is_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 800784e:	b580      	push	{r7, lr}
 8007850:	b084      	sub	sp, #16
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
 8007856:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_WHO_AM_I, (uint8_t *)val, 1);
 8007858:	2301      	movs	r3, #1
 800785a:	683a      	ldr	r2, [r7, #0]
 800785c:	210f      	movs	r1, #15
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7ff ff90 	bl	8007784 <lsm6dso16is_read_reg>
 8007864:	60f8      	str	r0, [r7, #12]

  return ret;
 8007866:	68fb      	ldr	r3, [r7, #12]
}
 8007868:	4618      	mov	r0, r3
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <lsm6dso16is_xl_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_hm_mode_set(const stmdev_ctx_t *ctx, lsm6dso16is_hm_mode_t val)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	460b      	mov	r3, r1
 800787a:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 800787c:	f107 0208 	add.w	r2, r7, #8
 8007880:	2301      	movs	r3, #1
 8007882:	2115      	movs	r1, #21
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f7ff ff7d 	bl	8007784 <lsm6dso16is_read_reg>
 800788a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10f      	bne.n	80078b2 <lsm6dso16is_xl_hm_mode_set+0x42>
  {
    ctrl6_c.xl_hm_mode = ((uint8_t)val & 0x1U);
 8007892:	78fb      	ldrb	r3, [r7, #3]
 8007894:	f003 0301 	and.w	r3, r3, #1
 8007898:	b2da      	uxtb	r2, r3
 800789a:	7a3b      	ldrb	r3, [r7, #8]
 800789c:	f362 1304 	bfi	r3, r2, #4, #1
 80078a0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80078a2:	f107 0208 	add.w	r2, r7, #8
 80078a6:	2301      	movs	r3, #1
 80078a8:	2115      	movs	r1, #21
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7ff ff88 	bl	80077c0 <lsm6dso16is_write_reg>
 80078b0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80078b2:	68fb      	ldr	r3, [r7, #12]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <lsm6dso16is_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_xl_full_scale_t val)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	460b      	mov	r3, r1
 80078c6:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80078c8:	f107 0208 	add.w	r2, r7, #8
 80078cc:	2301      	movs	r3, #1
 80078ce:	2110      	movs	r1, #16
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f7ff ff57 	bl	8007784 <lsm6dso16is_read_reg>
 80078d6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d10f      	bne.n	80078fe <lsm6dso16is_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = ((uint8_t)val & 0x3U);
 80078de:	78fb      	ldrb	r3, [r7, #3]
 80078e0:	f003 0303 	and.w	r3, r3, #3
 80078e4:	b2da      	uxtb	r2, r3
 80078e6:	7a3b      	ldrb	r3, [r7, #8]
 80078e8:	f362 0383 	bfi	r3, r2, #2, #2
 80078ec:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80078ee:	f107 0208 	add.w	r2, r7, #8
 80078f2:	2301      	movs	r3, #1
 80078f4:	2110      	movs	r1, #16
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7ff ff62 	bl	80077c0 <lsm6dso16is_write_reg>
 80078fc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80078fe:	68fb      	ldr	r3, [r7, #12]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <lsm6dso16is_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_full_scale_get(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_xl_full_scale_t *val)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007912:	f107 0208 	add.w	r2, r7, #8
 8007916:	2301      	movs	r3, #1
 8007918:	2110      	movs	r1, #16
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7ff ff32 	bl	8007784 <lsm6dso16is_read_reg>
 8007920:	60f8      	str	r0, [r7, #12]

  switch ((ctrl1_xl.fs_xl))
 8007922:	7a3b      	ldrb	r3, [r7, #8]
 8007924:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b03      	cmp	r3, #3
 800792c:	d81a      	bhi.n	8007964 <lsm6dso16is_xl_full_scale_get+0x5c>
 800792e:	a201      	add	r2, pc, #4	@ (adr r2, 8007934 <lsm6dso16is_xl_full_scale_get+0x2c>)
 8007930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007934:	08007945 	.word	0x08007945
 8007938:	0800795d 	.word	0x0800795d
 800793c:	0800794d 	.word	0x0800794d
 8007940:	08007955 	.word	0x08007955
  {
    case LSM6DSO16IS_2g:
      *val = LSM6DSO16IS_2g;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	2200      	movs	r2, #0
 8007948:	701a      	strb	r2, [r3, #0]
      break;
 800794a:	e00f      	b.n	800796c <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_4g:
      *val = LSM6DSO16IS_4g;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2202      	movs	r2, #2
 8007950:	701a      	strb	r2, [r3, #0]
      break;
 8007952:	e00b      	b.n	800796c <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_8g:
      *val = LSM6DSO16IS_8g;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	2203      	movs	r2, #3
 8007958:	701a      	strb	r2, [r3, #0]
      break;
 800795a:	e007      	b.n	800796c <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_16g:
      *val = LSM6DSO16IS_16g;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	2201      	movs	r2, #1
 8007960:	701a      	strb	r2, [r3, #0]
      break;
 8007962:	e003      	b.n	800796c <lsm6dso16is_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO16IS_2g;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	2200      	movs	r2, #0
 8007968:	701a      	strb	r2, [r3, #0]
      break;
 800796a:	bf00      	nop
  }
  return ret;
 800796c:	68fb      	ldr	r3, [r7, #12]
}
 800796e:	4618      	mov	r0, r3
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop

08007978 <lsm6dso16is_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_xl_data_rate_t val)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	460b      	mov	r3, r1
 8007982:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007984:	f107 0208 	add.w	r2, r7, #8
 8007988:	2301      	movs	r3, #1
 800798a:	2110      	movs	r1, #16
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f7ff fef9 	bl	8007784 <lsm6dso16is_read_reg>
 8007992:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d128      	bne.n	80079ec <lsm6dso16is_xl_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 800799a:	78fb      	ldrb	r3, [r7, #3]
 800799c:	f003 0310 	and.w	r3, r3, #16
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d008      	beq.n	80079b6 <lsm6dso16is_xl_data_rate_set+0x3e>
    {
      ret += lsm6dso16is_xl_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_DISABLED);
 80079a4:	2101      	movs	r1, #1
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7ff ff62 	bl	8007870 <lsm6dso16is_xl_hm_mode_set>
 80079ac:	4602      	mov	r2, r0
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	4413      	add	r3, r2
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	e007      	b.n	80079c6 <lsm6dso16is_xl_data_rate_set+0x4e>
    }
    else
    {
      ret += lsm6dso16is_xl_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_ENABLED);
 80079b6:	2100      	movs	r1, #0
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f7ff ff59 	bl	8007870 <lsm6dso16is_xl_hm_mode_set>
 80079be:	4602      	mov	r2, r0
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	4413      	add	r3, r2
 80079c4:	60fb      	str	r3, [r7, #12]
    }

    ctrl1_xl.odr_xl = ((uint8_t)val & 0xfU);
 80079c6:	78fb      	ldrb	r3, [r7, #3]
 80079c8:	f003 030f 	and.w	r3, r3, #15
 80079cc:	b2da      	uxtb	r2, r3
 80079ce:	7a3b      	ldrb	r3, [r7, #8]
 80079d0:	f362 1307 	bfi	r3, r2, #4, #4
 80079d4:	723b      	strb	r3, [r7, #8]
    ret += lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80079d6:	f107 0208 	add.w	r2, r7, #8
 80079da:	2301      	movs	r3, #1
 80079dc:	2110      	movs	r1, #16
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7ff feee 	bl	80077c0 <lsm6dso16is_write_reg>
 80079e4:	4602      	mov	r2, r0
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	4413      	add	r3, r2
 80079ea:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80079ec:	68fb      	ldr	r3, [r7, #12]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
	...

080079f8 <lsm6dso16is_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_data_rate_get(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_xl_data_rate_t *val)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  lsm6dso16is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007a02:	f107 0210 	add.w	r2, r7, #16
 8007a06:	2301      	movs	r3, #1
 8007a08:	2110      	movs	r1, #16
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7ff feba 	bl	8007784 <lsm6dso16is_read_reg>
 8007a10:	6178      	str	r0, [r7, #20]
  ret += lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8007a12:	f107 020c 	add.w	r2, r7, #12
 8007a16:	2301      	movs	r3, #1
 8007a18:	2115      	movs	r1, #21
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f7ff feb2 	bl	8007784 <lsm6dso16is_read_reg>
 8007a20:	4602      	mov	r2, r0
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	4413      	add	r3, r2
 8007a26:	617b      	str	r3, [r7, #20]

  switch ((ctrl6_c.xl_hm_mode << 4) | (ctrl1_xl.odr_xl))
 8007a28:	7b3b      	ldrb	r3, [r7, #12]
 8007a2a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	011b      	lsls	r3, r3, #4
 8007a32:	7c3a      	ldrb	r2, [r7, #16]
 8007a34:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007a38:	b2d2      	uxtb	r2, r2
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	2b1b      	cmp	r3, #27
 8007a3e:	f200 8093 	bhi.w	8007b68 <lsm6dso16is_xl_data_rate_get+0x170>
 8007a42:	a201      	add	r2, pc, #4	@ (adr r2, 8007a48 <lsm6dso16is_xl_data_rate_get+0x50>)
 8007a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a48:	08007ab9 	.word	0x08007ab9
 8007a4c:	08007ac1 	.word	0x08007ac1
 8007a50:	08007ac9 	.word	0x08007ac9
 8007a54:	08007ad1 	.word	0x08007ad1
 8007a58:	08007ad9 	.word	0x08007ad9
 8007a5c:	08007ae1 	.word	0x08007ae1
 8007a60:	08007ae9 	.word	0x08007ae9
 8007a64:	08007af1 	.word	0x08007af1
 8007a68:	08007af9 	.word	0x08007af9
 8007a6c:	08007b01 	.word	0x08007b01
 8007a70:	08007b09 	.word	0x08007b09
 8007a74:	08007b69 	.word	0x08007b69
 8007a78:	08007b69 	.word	0x08007b69
 8007a7c:	08007b69 	.word	0x08007b69
 8007a80:	08007b69 	.word	0x08007b69
 8007a84:	08007b69 	.word	0x08007b69
 8007a88:	08007b69 	.word	0x08007b69
 8007a8c:	08007b11 	.word	0x08007b11
 8007a90:	08007b19 	.word	0x08007b19
 8007a94:	08007b21 	.word	0x08007b21
 8007a98:	08007b29 	.word	0x08007b29
 8007a9c:	08007b31 	.word	0x08007b31
 8007aa0:	08007b39 	.word	0x08007b39
 8007aa4:	08007b41 	.word	0x08007b41
 8007aa8:	08007b49 	.word	0x08007b49
 8007aac:	08007b51 	.word	0x08007b51
 8007ab0:	08007b59 	.word	0x08007b59
 8007ab4:	08007b61 	.word	0x08007b61
  {
    case LSM6DSO16IS_XL_ODR_OFF:
      *val = LSM6DSO16IS_XL_ODR_OFF;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	2200      	movs	r2, #0
 8007abc:	701a      	strb	r2, [r3, #0]
      break;
 8007abe:	e057      	b.n	8007b70 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_12Hz5_HP;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	701a      	strb	r2, [r3, #0]
      break;
 8007ac6:	e053      	b.n	8007b70 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_26H_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_26H_HP;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	2202      	movs	r2, #2
 8007acc:	701a      	strb	r2, [r3, #0]
      break;
 8007ace:	e04f      	b.n	8007b70 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_52Hz_HP;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	2203      	movs	r2, #3
 8007ad4:	701a      	strb	r2, [r3, #0]
      break;
 8007ad6:	e04b      	b.n	8007b70 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_104Hz_HP;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	2204      	movs	r2, #4
 8007adc:	701a      	strb	r2, [r3, #0]
      break;
 8007ade:	e047      	b.n	8007b70 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_208Hz_HP;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	2205      	movs	r2, #5
 8007ae4:	701a      	strb	r2, [r3, #0]
      break;
 8007ae6:	e043      	b.n	8007b70 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_416Hz_HP;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	2206      	movs	r2, #6
 8007aec:	701a      	strb	r2, [r3, #0]
      break;
 8007aee:	e03f      	b.n	8007b70 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_833Hz_HP;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	2207      	movs	r2, #7
 8007af4:	701a      	strb	r2, [r3, #0]
      break;
 8007af6:	e03b      	b.n	8007b70 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_1667Hz_HP;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	2208      	movs	r2, #8
 8007afc:	701a      	strb	r2, [r3, #0]
      break;
 8007afe:	e037      	b.n	8007b70 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_3333Hz_HP;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	2209      	movs	r2, #9
 8007b04:	701a      	strb	r2, [r3, #0]
      break;
 8007b06:	e033      	b.n	8007b70 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	220a      	movs	r2, #10
 8007b0c:	701a      	strb	r2, [r3, #0]
      break;
 8007b0e:	e02f      	b.n	8007b70 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_12Hz5_LP;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	2211      	movs	r2, #17
 8007b14:	701a      	strb	r2, [r3, #0]
      break;
 8007b16:	e02b      	b.n	8007b70 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_26H_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_26H_LP;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	2212      	movs	r2, #18
 8007b1c:	701a      	strb	r2, [r3, #0]
      break;
 8007b1e:	e027      	b.n	8007b70 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_52Hz_LP;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	2213      	movs	r2, #19
 8007b24:	701a      	strb	r2, [r3, #0]
      break;
 8007b26:	e023      	b.n	8007b70 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_104Hz_LP;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	2214      	movs	r2, #20
 8007b2c:	701a      	strb	r2, [r3, #0]
      break;
 8007b2e:	e01f      	b.n	8007b70 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_208Hz_LP;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	2215      	movs	r2, #21
 8007b34:	701a      	strb	r2, [r3, #0]
      break;
 8007b36:	e01b      	b.n	8007b70 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_416Hz_LP;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	2216      	movs	r2, #22
 8007b3c:	701a      	strb	r2, [r3, #0]
      break;
 8007b3e:	e017      	b.n	8007b70 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_833Hz_LP;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	2217      	movs	r2, #23
 8007b44:	701a      	strb	r2, [r3, #0]
      break;
 8007b46:	e013      	b.n	8007b70 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_1667Hz_LP;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	2218      	movs	r2, #24
 8007b4c:	701a      	strb	r2, [r3, #0]
      break;
 8007b4e:	e00f      	b.n	8007b70 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_3333Hz_LP;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	2219      	movs	r2, #25
 8007b54:	701a      	strb	r2, [r3, #0]
      break;
 8007b56:	e00b      	b.n	8007b70 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_6667Hz_LP;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	221a      	movs	r2, #26
 8007b5c:	701a      	strb	r2, [r3, #0]
      break;
 8007b5e:	e007      	b.n	8007b70 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1Hz6_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_1Hz6_LP;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	221b      	movs	r2, #27
 8007b64:	701a      	strb	r2, [r3, #0]
      break;
 8007b66:	e003      	b.n	8007b70 <lsm6dso16is_xl_data_rate_get+0x178>

    default:
      *val = LSM6DSO16IS_XL_ODR_OFF;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	701a      	strb	r2, [r3, #0]
      break;
 8007b6e:	bf00      	nop
  }

  return ret;
 8007b70:	697b      	ldr	r3, [r7, #20]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3718      	adds	r7, #24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop

08007b7c <lsm6dso16is_gy_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_hm_mode_set(const stmdev_ctx_t *ctx, lsm6dso16is_hm_mode_t val)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	460b      	mov	r3, r1
 8007b86:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8007b88:	f107 0208 	add.w	r2, r7, #8
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	2116      	movs	r1, #22
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f7ff fdf7 	bl	8007784 <lsm6dso16is_read_reg>
 8007b96:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10f      	bne.n	8007bbe <lsm6dso16is_gy_hm_mode_set+0x42>
  {
    ctrl7_g.g_hm_mode = ((uint8_t)val & 0x1U);
 8007b9e:	78fb      	ldrb	r3, [r7, #3]
 8007ba0:	f003 0301 	and.w	r3, r3, #1
 8007ba4:	b2da      	uxtb	r2, r3
 8007ba6:	7a3b      	ldrb	r3, [r7, #8]
 8007ba8:	f362 13c7 	bfi	r3, r2, #7, #1
 8007bac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8007bae:	f107 0208 	add.w	r2, r7, #8
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	2116      	movs	r1, #22
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f7ff fe02 	bl	80077c0 <lsm6dso16is_write_reg>
 8007bbc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <lsm6dso16is_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_gy_full_scale_t val)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007bd4:	f107 0208 	add.w	r2, r7, #8
 8007bd8:	2301      	movs	r3, #1
 8007bda:	2111      	movs	r1, #17
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7ff fdd1 	bl	8007784 <lsm6dso16is_read_reg>
 8007be2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d119      	bne.n	8007c1e <lsm6dso16is_gy_full_scale_set+0x56>
  {
    ctrl2_g.fs_g = ((uint8_t)val & 0x3U);
 8007bea:	78fb      	ldrb	r3, [r7, #3]
 8007bec:	f003 0303 	and.w	r3, r3, #3
 8007bf0:	b2da      	uxtb	r2, r3
 8007bf2:	7a3b      	ldrb	r3, [r7, #8]
 8007bf4:	f362 0383 	bfi	r3, r2, #2, #2
 8007bf8:	723b      	strb	r3, [r7, #8]
    ctrl2_g.fs_125 = ((uint8_t)val >> 4);
 8007bfa:	78fb      	ldrb	r3, [r7, #3]
 8007bfc:	091b      	lsrs	r3, r3, #4
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	f003 0301 	and.w	r3, r3, #1
 8007c04:	b2da      	uxtb	r2, r3
 8007c06:	7a3b      	ldrb	r3, [r7, #8]
 8007c08:	f362 0341 	bfi	r3, r2, #1, #1
 8007c0c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007c0e:	f107 0208 	add.w	r2, r7, #8
 8007c12:	2301      	movs	r3, #1
 8007c14:	2111      	movs	r1, #17
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f7ff fdd2 	bl	80077c0 <lsm6dso16is_write_reg>
 8007c1c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <lsm6dso16is_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_full_scale_get(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_gy_full_scale_t *val)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007c32:	f107 0208 	add.w	r2, r7, #8
 8007c36:	2301      	movs	r3, #1
 8007c38:	2111      	movs	r1, #17
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f7ff fda2 	bl	8007784 <lsm6dso16is_read_reg>
 8007c40:	60f8      	str	r0, [r7, #12]

  switch ((ctrl2_g.fs_125 << 4) | (ctrl2_g.fs_g))
 8007c42:	7a3b      	ldrb	r3, [r7, #8]
 8007c44:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	011b      	lsls	r3, r3, #4
 8007c4c:	7a3a      	ldrb	r2, [r7, #8]
 8007c4e:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8007c52:	b2d2      	uxtb	r2, r2
 8007c54:	4313      	orrs	r3, r2
 8007c56:	2b10      	cmp	r3, #16
 8007c58:	d838      	bhi.n	8007ccc <lsm6dso16is_gy_full_scale_get+0xa4>
 8007c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c60 <lsm6dso16is_gy_full_scale_get+0x38>)
 8007c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c60:	08007cad 	.word	0x08007cad
 8007c64:	08007cb5 	.word	0x08007cb5
 8007c68:	08007cbd 	.word	0x08007cbd
 8007c6c:	08007cc5 	.word	0x08007cc5
 8007c70:	08007ccd 	.word	0x08007ccd
 8007c74:	08007ccd 	.word	0x08007ccd
 8007c78:	08007ccd 	.word	0x08007ccd
 8007c7c:	08007ccd 	.word	0x08007ccd
 8007c80:	08007ccd 	.word	0x08007ccd
 8007c84:	08007ccd 	.word	0x08007ccd
 8007c88:	08007ccd 	.word	0x08007ccd
 8007c8c:	08007ccd 	.word	0x08007ccd
 8007c90:	08007ccd 	.word	0x08007ccd
 8007c94:	08007ccd 	.word	0x08007ccd
 8007c98:	08007ccd 	.word	0x08007ccd
 8007c9c:	08007ccd 	.word	0x08007ccd
 8007ca0:	08007ca5 	.word	0x08007ca5
  {
    case LSM6DSO16IS_125dps:
      *val = LSM6DSO16IS_125dps;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	2210      	movs	r2, #16
 8007ca8:	701a      	strb	r2, [r3, #0]
      break;
 8007caa:	e013      	b.n	8007cd4 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_250dps:
      *val = LSM6DSO16IS_250dps;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	701a      	strb	r2, [r3, #0]
      break;
 8007cb2:	e00f      	b.n	8007cd4 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_500dps:
      *val = LSM6DSO16IS_500dps;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	701a      	strb	r2, [r3, #0]
      break;
 8007cba:	e00b      	b.n	8007cd4 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_1000dps:
      *val = LSM6DSO16IS_1000dps;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	701a      	strb	r2, [r3, #0]
      break;
 8007cc2:	e007      	b.n	8007cd4 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_2000dps:
      *val = LSM6DSO16IS_2000dps;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	2203      	movs	r2, #3
 8007cc8:	701a      	strb	r2, [r3, #0]
      break;
 8007cca:	e003      	b.n	8007cd4 <lsm6dso16is_gy_full_scale_get+0xac>

    default:
      *val = LSM6DSO16IS_125dps;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	2210      	movs	r2, #16
 8007cd0:	701a      	strb	r2, [r3, #0]
      break;
 8007cd2:	bf00      	nop
  }
  return ret;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop

08007ce0 <lsm6dso16is_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_gy_data_rate_t val)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007cec:	f107 0208 	add.w	r2, r7, #8
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	2111      	movs	r1, #17
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f7ff fd45 	bl	8007784 <lsm6dso16is_read_reg>
 8007cfa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d128      	bne.n	8007d54 <lsm6dso16is_gy_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 8007d02:	78fb      	ldrb	r3, [r7, #3]
 8007d04:	f003 0310 	and.w	r3, r3, #16
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d008      	beq.n	8007d1e <lsm6dso16is_gy_data_rate_set+0x3e>
    {
      ret += lsm6dso16is_gy_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_DISABLED);
 8007d0c:	2101      	movs	r1, #1
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f7ff ff34 	bl	8007b7c <lsm6dso16is_gy_hm_mode_set>
 8007d14:	4602      	mov	r2, r0
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	4413      	add	r3, r2
 8007d1a:	60fb      	str	r3, [r7, #12]
 8007d1c:	e007      	b.n	8007d2e <lsm6dso16is_gy_data_rate_set+0x4e>
    }
    else
    {
      ret += lsm6dso16is_gy_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_ENABLED);
 8007d1e:	2100      	movs	r1, #0
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7ff ff2b 	bl	8007b7c <lsm6dso16is_gy_hm_mode_set>
 8007d26:	4602      	mov	r2, r0
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	60fb      	str	r3, [r7, #12]
    }

    ctrl2_g.odr_g = ((uint8_t)val & 0xfU);
 8007d2e:	78fb      	ldrb	r3, [r7, #3]
 8007d30:	f003 030f 	and.w	r3, r3, #15
 8007d34:	b2da      	uxtb	r2, r3
 8007d36:	7a3b      	ldrb	r3, [r7, #8]
 8007d38:	f362 1307 	bfi	r3, r2, #4, #4
 8007d3c:	723b      	strb	r3, [r7, #8]
    ret += lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007d3e:	f107 0208 	add.w	r2, r7, #8
 8007d42:	2301      	movs	r3, #1
 8007d44:	2111      	movs	r1, #17
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f7ff fd3a 	bl	80077c0 <lsm6dso16is_write_reg>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	4413      	add	r3, r2
 8007d52:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007d54:	68fb      	ldr	r3, [r7, #12]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
	...

08007d60 <lsm6dso16is_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_data_rate_get(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_gy_data_rate_t *val)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  lsm6dso16is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007d6a:	f107 0210 	add.w	r2, r7, #16
 8007d6e:	2301      	movs	r3, #1
 8007d70:	2111      	movs	r1, #17
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7ff fd06 	bl	8007784 <lsm6dso16is_read_reg>
 8007d78:	6178      	str	r0, [r7, #20]
  ret += lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8007d7a:	f107 020c 	add.w	r2, r7, #12
 8007d7e:	2301      	movs	r3, #1
 8007d80:	2116      	movs	r1, #22
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f7ff fcfe 	bl	8007784 <lsm6dso16is_read_reg>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	617b      	str	r3, [r7, #20]

  switch ((ctrl7_g.g_hm_mode << 4) | (ctrl2_g.odr_g))
 8007d90:	7b3b      	ldrb	r3, [r7, #12]
 8007d92:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	011b      	lsls	r3, r3, #4
 8007d9a:	7c3a      	ldrb	r2, [r7, #16]
 8007d9c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007da0:	b2d2      	uxtb	r2, r2
 8007da2:	4313      	orrs	r3, r2
 8007da4:	2b1a      	cmp	r3, #26
 8007da6:	f200 808d 	bhi.w	8007ec4 <lsm6dso16is_gy_data_rate_get+0x164>
 8007daa:	a201      	add	r2, pc, #4	@ (adr r2, 8007db0 <lsm6dso16is_gy_data_rate_get+0x50>)
 8007dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db0:	08007e1d 	.word	0x08007e1d
 8007db4:	08007e25 	.word	0x08007e25
 8007db8:	08007e2d 	.word	0x08007e2d
 8007dbc:	08007e35 	.word	0x08007e35
 8007dc0:	08007e3d 	.word	0x08007e3d
 8007dc4:	08007e45 	.word	0x08007e45
 8007dc8:	08007e4d 	.word	0x08007e4d
 8007dcc:	08007e55 	.word	0x08007e55
 8007dd0:	08007e5d 	.word	0x08007e5d
 8007dd4:	08007e65 	.word	0x08007e65
 8007dd8:	08007e6d 	.word	0x08007e6d
 8007ddc:	08007ec5 	.word	0x08007ec5
 8007de0:	08007ec5 	.word	0x08007ec5
 8007de4:	08007ec5 	.word	0x08007ec5
 8007de8:	08007ec5 	.word	0x08007ec5
 8007dec:	08007ec5 	.word	0x08007ec5
 8007df0:	08007ec5 	.word	0x08007ec5
 8007df4:	08007e75 	.word	0x08007e75
 8007df8:	08007e7d 	.word	0x08007e7d
 8007dfc:	08007e85 	.word	0x08007e85
 8007e00:	08007e8d 	.word	0x08007e8d
 8007e04:	08007e95 	.word	0x08007e95
 8007e08:	08007e9d 	.word	0x08007e9d
 8007e0c:	08007ea5 	.word	0x08007ea5
 8007e10:	08007ead 	.word	0x08007ead
 8007e14:	08007eb5 	.word	0x08007eb5
 8007e18:	08007ebd 	.word	0x08007ebd
  {
    case LSM6DSO16IS_GY_ODR_OFF:
      *val = LSM6DSO16IS_GY_ODR_OFF;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	701a      	strb	r2, [r3, #0]
      break;
 8007e22:	e053      	b.n	8007ecc <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_12Hz5_HP;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	2201      	movs	r2, #1
 8007e28:	701a      	strb	r2, [r3, #0]
      break;
 8007e2a:	e04f      	b.n	8007ecc <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_26H_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_26H_HP;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	2202      	movs	r2, #2
 8007e30:	701a      	strb	r2, [r3, #0]
      break;
 8007e32:	e04b      	b.n	8007ecc <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_52Hz_HP;
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	2203      	movs	r2, #3
 8007e38:	701a      	strb	r2, [r3, #0]
      break;
 8007e3a:	e047      	b.n	8007ecc <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_104Hz_HP;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	2204      	movs	r2, #4
 8007e40:	701a      	strb	r2, [r3, #0]
      break;
 8007e42:	e043      	b.n	8007ecc <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_208Hz_HP;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	2205      	movs	r2, #5
 8007e48:	701a      	strb	r2, [r3, #0]
      break;
 8007e4a:	e03f      	b.n	8007ecc <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_416Hz_HP;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	2206      	movs	r2, #6
 8007e50:	701a      	strb	r2, [r3, #0]
      break;
 8007e52:	e03b      	b.n	8007ecc <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_833Hz_HP;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	2207      	movs	r2, #7
 8007e58:	701a      	strb	r2, [r3, #0]
      break;
 8007e5a:	e037      	b.n	8007ecc <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_1667Hz_HP;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	2208      	movs	r2, #8
 8007e60:	701a      	strb	r2, [r3, #0]
      break;
 8007e62:	e033      	b.n	8007ecc <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_3333Hz_HP;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	2209      	movs	r2, #9
 8007e68:	701a      	strb	r2, [r3, #0]
      break;
 8007e6a:	e02f      	b.n	8007ecc <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	220a      	movs	r2, #10
 8007e70:	701a      	strb	r2, [r3, #0]
      break;
 8007e72:	e02b      	b.n	8007ecc <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_12Hz5_LP;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	2211      	movs	r2, #17
 8007e78:	701a      	strb	r2, [r3, #0]
      break;
 8007e7a:	e027      	b.n	8007ecc <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_26H_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_26H_LP;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	2212      	movs	r2, #18
 8007e80:	701a      	strb	r2, [r3, #0]
      break;
 8007e82:	e023      	b.n	8007ecc <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_52Hz_LP;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	2213      	movs	r2, #19
 8007e88:	701a      	strb	r2, [r3, #0]
      break;
 8007e8a:	e01f      	b.n	8007ecc <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_104Hz_LP;
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	2214      	movs	r2, #20
 8007e90:	701a      	strb	r2, [r3, #0]
      break;
 8007e92:	e01b      	b.n	8007ecc <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_208Hz_LP;
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	2215      	movs	r2, #21
 8007e98:	701a      	strb	r2, [r3, #0]
      break;
 8007e9a:	e017      	b.n	8007ecc <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_416Hz_LP;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	2216      	movs	r2, #22
 8007ea0:	701a      	strb	r2, [r3, #0]
      break;
 8007ea2:	e013      	b.n	8007ecc <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_833Hz_LP;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	2217      	movs	r2, #23
 8007ea8:	701a      	strb	r2, [r3, #0]
      break;
 8007eaa:	e00f      	b.n	8007ecc <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_1667Hz_LP;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	2218      	movs	r2, #24
 8007eb0:	701a      	strb	r2, [r3, #0]
      break;
 8007eb2:	e00b      	b.n	8007ecc <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_3333Hz_LP;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	2219      	movs	r2, #25
 8007eb8:	701a      	strb	r2, [r3, #0]
      break;
 8007eba:	e007      	b.n	8007ecc <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_6667Hz_LP;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	221a      	movs	r2, #26
 8007ec0:	701a      	strb	r2, [r3, #0]
      break;
 8007ec2:	e003      	b.n	8007ecc <lsm6dso16is_gy_data_rate_get+0x16c>

    default:
      *val = LSM6DSO16IS_GY_ODR_OFF;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	701a      	strb	r2, [r3, #0]
      break;
 8007eca:	bf00      	nop
  }

  return ret;
 8007ecc:	697b      	ldr	r3, [r7, #20]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3718      	adds	r7, #24
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop

08007ed8 <lsm6dso16is_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007ee4:	f107 0208 	add.w	r2, r7, #8
 8007ee8:	2301      	movs	r3, #1
 8007eea:	2112      	movs	r1, #18
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f7ff fc49 	bl	8007784 <lsm6dso16is_read_reg>
 8007ef2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d10f      	bne.n	8007f1a <lsm6dso16is_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8007efa:	78fb      	ldrb	r3, [r7, #3]
 8007efc:	f003 0301 	and.w	r3, r3, #1
 8007f00:	b2da      	uxtb	r2, r3
 8007f02:	7a3b      	ldrb	r3, [r7, #8]
 8007f04:	f362 0382 	bfi	r3, r2, #2, #1
 8007f08:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007f0a:	f107 0208 	add.w	r2, r7, #8
 8007f0e:	2301      	movs	r3, #1
 8007f10:	2112      	movs	r1, #18
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f7ff fc54 	bl	80077c0 <lsm6dso16is_write_reg>
 8007f18:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <lsm6dso16is_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007f30:	f107 0208 	add.w	r2, r7, #8
 8007f34:	2301      	movs	r3, #1
 8007f36:	2112      	movs	r1, #18
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f7ff fc23 	bl	8007784 <lsm6dso16is_read_reg>
 8007f3e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d10f      	bne.n	8007f66 <lsm6dso16is_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8007f46:	78fb      	ldrb	r3, [r7, #3]
 8007f48:	f003 0301 	and.w	r3, r3, #1
 8007f4c:	b2da      	uxtb	r2, r3
 8007f4e:	7a3b      	ldrb	r3, [r7, #8]
 8007f50:	f362 1386 	bfi	r3, r2, #6, #1
 8007f54:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007f56:	f107 0208 	add.w	r2, r7, #8
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	2112      	movs	r1, #18
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f7ff fc2e 	bl	80077c0 <lsm6dso16is_write_reg>
 8007f64:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007f66:	68fb      	ldr	r3, [r7, #12]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <lsm6dso16is_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_OUTX_L_G, buff, 6);
 8007f7a:	f107 020c 	add.w	r2, r7, #12
 8007f7e:	2306      	movs	r3, #6
 8007f80:	2122      	movs	r1, #34	@ 0x22
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7ff fbfe 	bl	8007784 <lsm6dso16is_read_reg>
 8007f88:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007f8a:	7b7b      	ldrb	r3, [r7, #13]
 8007f8c:	b21a      	sxth	r2, r3
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	021b      	lsls	r3, r3, #8
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	7b3a      	ldrb	r2, [r7, #12]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	b21a      	sxth	r2, r3
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007faa:	7bfa      	ldrb	r2, [r7, #15]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	3302      	adds	r3, #2
 8007fb0:	b212      	sxth	r2, r2
 8007fb2:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	3302      	adds	r3, #2
 8007fb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	021b      	lsls	r3, r3, #8
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	7bba      	ldrb	r2, [r7, #14]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	3302      	adds	r3, #2
 8007fcc:	b212      	sxth	r2, r2
 8007fce:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007fd0:	7c7a      	ldrb	r2, [r7, #17]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	3304      	adds	r3, #4
 8007fd6:	b212      	sxth	r2, r2
 8007fd8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	3304      	adds	r3, #4
 8007fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	021b      	lsls	r3, r3, #8
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	7c3a      	ldrb	r2, [r7, #16]
 8007fea:	4413      	add	r3, r2
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	b212      	sxth	r2, r2
 8007ff4:	801a      	strh	r2, [r3, #0]

  return ret;
 8007ff6:	697b      	ldr	r3, [r7, #20]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3718      	adds	r7, #24
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <lsm6dso16is_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_OUTX_L_A, buff, 6);
 800800a:	f107 020c 	add.w	r2, r7, #12
 800800e:	2306      	movs	r3, #6
 8008010:	2128      	movs	r1, #40	@ 0x28
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7ff fbb6 	bl	8007784 <lsm6dso16is_read_reg>
 8008018:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800801a:	7b7b      	ldrb	r3, [r7, #13]
 800801c:	b21a      	sxth	r2, r3
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008028:	b29b      	uxth	r3, r3
 800802a:	021b      	lsls	r3, r3, #8
 800802c:	b29b      	uxth	r3, r3
 800802e:	7b3a      	ldrb	r2, [r7, #12]
 8008030:	4413      	add	r3, r2
 8008032:	b29b      	uxth	r3, r3
 8008034:	b21a      	sxth	r2, r3
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800803a:	7bfa      	ldrb	r2, [r7, #15]
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	3302      	adds	r3, #2
 8008040:	b212      	sxth	r2, r2
 8008042:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	3302      	adds	r3, #2
 8008048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800804c:	b29b      	uxth	r3, r3
 800804e:	021b      	lsls	r3, r3, #8
 8008050:	b29b      	uxth	r3, r3
 8008052:	7bba      	ldrb	r2, [r7, #14]
 8008054:	4413      	add	r3, r2
 8008056:	b29a      	uxth	r2, r3
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	3302      	adds	r3, #2
 800805c:	b212      	sxth	r2, r2
 800805e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8008060:	7c7a      	ldrb	r2, [r7, #17]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	3304      	adds	r3, #4
 8008066:	b212      	sxth	r2, r2
 8008068:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	3304      	adds	r3, #4
 800806e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008072:	b29b      	uxth	r3, r3
 8008074:	021b      	lsls	r3, r3, #8
 8008076:	b29b      	uxth	r3, r3
 8008078:	7c3a      	ldrb	r2, [r7, #16]
 800807a:	4413      	add	r3, r2
 800807c:	b29a      	uxth	r2, r3
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	3304      	adds	r3, #4
 8008082:	b212      	sxth	r2, r2
 8008084:	801a      	strh	r2, [r3, #0]

  return ret;
 8008086:	697b      	ldr	r3, [r7, #20]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3718      	adds	r7, #24
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <LSM6DSV16X_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_RegisterBusIO(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_IO_t *pIO)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d103      	bne.n	80080ac <LSM6DSV16X_RegisterBusIO+0x1c>
  {
    ret = LSM6DSV16X_ERROR;
 80080a4:	f04f 33ff 	mov.w	r3, #4294967295
 80080a8:	60fb      	str	r3, [r7, #12]
 80080aa:	e05d      	b.n	8008168 <LSM6DSV16X_RegisterBusIO+0xd8>
  }
  else
  {
    pObj->IO.Init       = pIO->Init;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit     = pIO->DeInit;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	685a      	ldr	r2, [r3, #4]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType    = pIO->BusType;
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	689a      	ldr	r2, [r3, #8]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address    = pIO->Address;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	7b1a      	ldrb	r2, [r3, #12]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg   = pIO->WriteReg;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	691a      	ldr	r2, [r3, #16]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg    = pIO->ReadReg;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	695a      	ldr	r2, [r3, #20]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick    = pIO->GetTick;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	699a      	ldr	r2, [r3, #24]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a23      	ldr	r2, [pc, #140]	@ (8008174 <LSM6DSV16X_RegisterBusIO+0xe4>)
 80080e8:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a22      	ldr	r2, [pc, #136]	@ (8008178 <LSM6DSV16X_RegisterBusIO+0xe8>)
 80080ee:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	69da      	ldr	r2, [r3, #28]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d103      	bne.n	800810e <LSM6DSV16X_RegisterBusIO+0x7e>
    {
      ret = LSM6DSV16X_ERROR;
 8008106:	f04f 33ff 	mov.w	r3, #4294967295
 800810a:	60fb      	str	r3, [r7, #12]
 800810c:	e02c      	b.n	8008168 <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else if (pObj->IO.Init() != LSM6DSV16X_OK)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4798      	blx	r3
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d003      	beq.n	8008122 <LSM6DSV16X_RegisterBusIO+0x92>
    {
      ret = LSM6DSV16X_ERROR;
 800811a:	f04f 33ff 	mov.w	r3, #4294967295
 800811e:	60fb      	str	r3, [r7, #12]
 8008120:	e022      	b.n	8008168 <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSV16X_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	2b02      	cmp	r3, #2
 8008128:	d11e      	bne.n	8008168 <LSM6DSV16X_RegisterBusIO+0xd8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008130:	2b00      	cmp	r3, #0
 8008132:	d119      	bne.n	8008168 <LSM6DSV16X_RegisterBusIO+0xd8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x04;
 8008134:	2304      	movs	r3, #4
 8008136:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_CTRL3, data) != LSM6DSV16X_OK)
 8008138:	7afb      	ldrb	r3, [r7, #11]
 800813a:	461a      	mov	r2, r3
 800813c:	2112      	movs	r1, #18
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 ff18 	bl	8008f74 <LSM6DSV16X_Write_Reg>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d002      	beq.n	8008150 <LSM6DSV16X_RegisterBusIO+0xc0>
          {
            ret = LSM6DSV16X_ERROR;
 800814a:	f04f 33ff 	mov.w	r3, #4294967295
 800814e:	60fb      	str	r3, [r7, #12]
          }

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_IF_CFG, data) != LSM6DSV16X_OK)
 8008150:	7afb      	ldrb	r3, [r7, #11]
 8008152:	461a      	mov	r2, r3
 8008154:	2103      	movs	r1, #3
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 ff0c 	bl	8008f74 <LSM6DSV16X_Write_Reg>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d002      	beq.n	8008168 <LSM6DSV16X_RegisterBusIO+0xd8>
          {
            ret = LSM6DSV16X_ERROR;
 8008162:	f04f 33ff 	mov.w	r3, #4294967295
 8008166:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8008168:	68fb      	ldr	r3, [r7, #12]
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	080094b5 	.word	0x080094b5
 8008178:	080094eb 	.word	0x080094eb

0800817c <LSM6DSV16X_Init>:
  * @brief  Initialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Init(LSM6DSV16X_Object_t *pObj)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  /* Set main memory bank */
  if (LSM6DSV16X_Set_Mem_Bank(pObj, (uint8_t)LSM6DSV16X_MAIN_MEM_BANK) != LSM6DSV16X_OK)
 8008184:	2100      	movs	r1, #0
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 ff0f 	bl	8008faa <LSM6DSV16X_Set_Mem_Bank>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d002      	beq.n	8008198 <LSM6DSV16X_Init+0x1c>
  {
    return LSM6DSV16X_ERROR;
 8008192:	f04f 33ff 	mov.w	r3, #4294967295
 8008196:	e070      	b.n	800827a <LSM6DSV16X_Init+0xfe>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface */
  if (lsm6dsv16x_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	3320      	adds	r3, #32
 800819c:	2101      	movs	r1, #1
 800819e:	4618      	mov	r0, r3
 80081a0:	f001 fcfe 	bl	8009ba0 <lsm6dsv16x_auto_increment_set>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d002      	beq.n	80081b0 <LSM6DSV16X_Init+0x34>
  {
    return LSM6DSV16X_ERROR;
 80081aa:	f04f 33ff 	mov.w	r3, #4294967295
 80081ae:	e064      	b.n	800827a <LSM6DSV16X_Init+0xfe>
  }

  /* Enable BDU */
  if (lsm6dsv16x_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	3320      	adds	r3, #32
 80081b4:	2101      	movs	r1, #1
 80081b6:	4618      	mov	r0, r3
 80081b8:	f001 fd18 	bl	8009bec <lsm6dsv16x_block_data_update_set>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d002      	beq.n	80081c8 <LSM6DSV16X_Init+0x4c>
  {
    return LSM6DSV16X_ERROR;
 80081c2:	f04f 33ff 	mov.w	r3, #4294967295
 80081c6:	e058      	b.n	800827a <LSM6DSV16X_Init+0xfe>
  }

  /* WAKE_UP mode selection */
  if (lsm6dsv16x_fifo_mode_set(&(pObj->Ctx), LSM6DSV16X_BYPASS_MODE) != LSM6DSV16X_OK)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	3320      	adds	r3, #32
 80081cc:	2100      	movs	r1, #0
 80081ce:	4618      	mov	r0, r3
 80081d0:	f001 feae 	bl	8009f30 <lsm6dsv16x_fifo_mode_set>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d002      	beq.n	80081e0 <LSM6DSV16X_Init+0x64>
  {
    return LSM6DSV16X_ERROR;
 80081da:	f04f 33ff 	mov.w	r3, #4294967295
 80081de:	e04c      	b.n	800827a <LSM6DSV16X_Init+0xfe>
  }

  /* Select default output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_AT_120Hz;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2206      	movs	r2, #6
 80081e4:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	3320      	adds	r3, #32
 80081ec:	2100      	movs	r1, #0
 80081ee:	4618      	mov	r0, r3
 80081f0:	f001 fa14 	bl	800961c <lsm6dsv16x_xl_data_rate_set>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d002      	beq.n	8008200 <LSM6DSV16X_Init+0x84>
  {
    return LSM6DSV16X_ERROR;
 80081fa:	f04f 33ff 	mov.w	r3, #4294967295
 80081fe:	e03c      	b.n	800827a <LSM6DSV16X_Init+0xfe>
  }

  /* Full scale selection */
  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2g) != LSM6DSV16X_OK)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	3320      	adds	r3, #32
 8008204:	2100      	movs	r1, #0
 8008206:	4618      	mov	r0, r3
 8008208:	f001 fd94 	bl	8009d34 <lsm6dsv16x_xl_full_scale_set>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d002      	beq.n	8008218 <LSM6DSV16X_Init+0x9c>
  {
    return LSM6DSV16X_ERROR;
 8008212:	f04f 33ff 	mov.w	r3, #4294967295
 8008216:	e030      	b.n	800827a <LSM6DSV16X_Init+0xfe>
  }

  /* Select default output data rate */
  pObj->gyro_odr = LSM6DSV16X_ODR_AT_120Hz;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2206      	movs	r2, #6
 800821c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	3320      	adds	r3, #32
 8008224:	2100      	movs	r1, #0
 8008226:	4618      	mov	r0, r3
 8008228:	f001 fb5a 	bl	80098e0 <lsm6dsv16x_gy_data_rate_set>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d002      	beq.n	8008238 <LSM6DSV16X_Init+0xbc>
  {
    return LSM6DSV16X_ERROR;
 8008232:	f04f 33ff 	mov.w	r3, #4294967295
 8008236:	e020      	b.n	800827a <LSM6DSV16X_Init+0xfe>
  }

  /* Full scale selection */
  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2000dps) != LSM6DSV16X_OK)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	3320      	adds	r3, #32
 800823c:	2104      	movs	r1, #4
 800823e:	4618      	mov	r0, r3
 8008240:	f001 fcfa 	bl	8009c38 <lsm6dsv16x_gy_full_scale_set>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d002      	beq.n	8008250 <LSM6DSV16X_Init+0xd4>
  {
    return LSM6DSV16X_ERROR;
 800824a:	f04f 33ff 	mov.w	r3, #4294967295
 800824e:	e014      	b.n	800827a <LSM6DSV16X_Init+0xfe>
  }

  /* Enable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 1;
 8008250:	7b3b      	ldrb	r3, [r7, #12]
 8008252:	f043 0301 	orr.w	r3, r3, #1
 8008256:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	3320      	adds	r3, #32
 800825c:	7b39      	ldrb	r1, [r7, #12]
 800825e:	4618      	mov	r0, r3
 8008260:	f001 fe8c 	bl	8009f7c <lsm6dsv16x_ah_qvar_mode_set>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d002      	beq.n	8008270 <LSM6DSV16X_Init+0xf4>
  {
    return LSM6DSV16X_ERROR;
 800826a:	f04f 33ff 	mov.w	r3, #4294967295
 800826e:	e004      	b.n	800827a <LSM6DSV16X_Init+0xfe>
  }

  pObj->is_initialized = 1;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <LSM6DSV16X_DeInit>:
  * @brief  Deinitialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_DeInit(LSM6DSV16X_Object_t *pObj)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b084      	sub	sp, #16
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSV16X_ACC_Disable(pObj) != LSM6DSV16X_OK)
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f898 	bl	80083c0 <LSM6DSV16X_ACC_Disable>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d002      	beq.n	800829c <LSM6DSV16X_DeInit+0x1a>
  {
    return LSM6DSV16X_ERROR;
 8008296:	f04f 33ff 	mov.w	r3, #4294967295
 800829a:	e025      	b.n	80082e8 <LSM6DSV16X_DeInit+0x66>
  }

  if (LSM6DSV16X_GYRO_Disable(pObj) != LSM6DSV16X_OK)
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fb6a 	bl	8008976 <LSM6DSV16X_GYRO_Disable>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d002      	beq.n	80082ae <LSM6DSV16X_DeInit+0x2c>
  {
    return LSM6DSV16X_ERROR;
 80082a8:	f04f 33ff 	mov.w	r3, #4294967295
 80082ac:	e01c      	b.n	80082e8 <LSM6DSV16X_DeInit+0x66>
  }

  /* Reset output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_OFF;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSV16X_ODR_OFF;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 0;
 80082be:	7b3b      	ldrb	r3, [r7, #12]
 80082c0:	f023 0301 	bic.w	r3, r3, #1
 80082c4:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	3320      	adds	r3, #32
 80082ca:	7b39      	ldrb	r1, [r7, #12]
 80082cc:	4618      	mov	r0, r3
 80082ce:	f001 fe55 	bl	8009f7c <lsm6dsv16x_ah_qvar_mode_set>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d002      	beq.n	80082de <LSM6DSV16X_DeInit+0x5c>
  {
    return LSM6DSV16X_ERROR;
 80082d8:	f04f 33ff 	mov.w	r3, #4294967295
 80082dc:	e004      	b.n	80082e8 <LSM6DSV16X_DeInit+0x66>
  }

  pObj->is_initialized = 0;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <LSM6DSV16X_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ReadID(LSM6DSV16X_Object_t *pObj, uint8_t *Id)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  if (lsm6dsv16x_device_id_get(&(pObj->Ctx), Id) != LSM6DSV16X_OK)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	3320      	adds	r3, #32
 80082fe:	6839      	ldr	r1, [r7, #0]
 8008300:	4618      	mov	r0, r3
 8008302:	f001 f97a 	bl	80095fa <lsm6dsv16x_device_id_get>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d002      	beq.n	8008312 <LSM6DSV16X_ReadID+0x22>
  {
    return LSM6DSV16X_ERROR;
 800830c:	f04f 33ff 	mov.w	r3, #4294967295
 8008310:	e000      	b.n	8008314 <LSM6DSV16X_ReadID+0x24>
  }

  return LSM6DSV16X_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <LSM6DSV16X_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSV16X sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GetCapabilities(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Capabilities_t *Capabilities)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	2201      	movs	r2, #1
 800832a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	2201      	movs	r2, #1
 8008330:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	2200      	movs	r2, #0
 8008336:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 1;
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	2201      	movs	r2, #1
 800833c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 4000;
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8008344:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2210      	movs	r2, #16
 800834a:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	2200      	movs	r2, #0
 8008350:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 7680.0f;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	4a07      	ldr	r2, [pc, #28]	@ (8008374 <LSM6DSV16X_GetCapabilities+0x58>)
 8008356:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 7680.0f;
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	4a06      	ldr	r2, [pc, #24]	@ (8008374 <LSM6DSV16X_GetCapabilities+0x58>)
 800835c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	f04f 0200 	mov.w	r2, #0
 8008364:	619a      	str	r2, [r3, #24]
  return LSM6DSV16X_OK;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	45f00000 	.word	0x45f00000

08008378 <LSM6DSV16X_ACC_Enable>:
  * @brief  Enable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Enable(LSM6DSV16X_Object_t *pObj)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008386:	2b01      	cmp	r3, #1
 8008388:	d101      	bne.n	800838e <LSM6DSV16X_ACC_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 800838a:	2300      	movs	r3, #0
 800838c:	e014      	b.n	80083b8 <LSM6DSV16X_ACC_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSV16X_OK)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f103 0220 	add.w	r2, r3, #32
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800839a:	4619      	mov	r1, r3
 800839c:	4610      	mov	r0, r2
 800839e:	f001 f93d 	bl	800961c <lsm6dsv16x_xl_data_rate_set>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d002      	beq.n	80083ae <LSM6DSV16X_ACC_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 80083a8:	f04f 33ff 	mov.w	r3, #4294967295
 80083ac:	e004      	b.n	80083b8 <LSM6DSV16X_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <LSM6DSV16X_ACC_Disable>:
  * @brief  Disable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Disable(LSM6DSV16X_Object_t *pObj)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d101      	bne.n	80083d6 <LSM6DSV16X_ACC_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 80083d2:	2300      	movs	r3, #0
 80083d4:	e01f      	b.n	8008416 <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSV16X_OK)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f103 0220 	add.w	r2, r3, #32
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	3333      	adds	r3, #51	@ 0x33
 80083e0:	4619      	mov	r1, r3
 80083e2:	4610      	mov	r0, r2
 80083e4:	f001 f96c 	bl	80096c0 <lsm6dsv16x_xl_data_rate_get>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d002      	beq.n	80083f4 <LSM6DSV16X_ACC_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 80083ee:	f04f 33ff 	mov.w	r3, #4294967295
 80083f2:	e010      	b.n	8008416 <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	3320      	adds	r3, #32
 80083f8:	2100      	movs	r1, #0
 80083fa:	4618      	mov	r0, r3
 80083fc:	f001 f90e 	bl	800961c <lsm6dsv16x_xl_data_rate_set>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d002      	beq.n	800840c <LSM6DSV16X_ACC_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 8008406:	f04f 33ff 	mov.w	r3, #4294967295
 800840a:	e004      	b.n	8008416 <LSM6DSV16X_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
	...

08008420 <LSM6DSV16X_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800842a:	2300      	movs	r3, #0
 800842c:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	3320      	adds	r3, #32
 8008432:	f107 020b 	add.w	r2, r7, #11
 8008436:	4611      	mov	r1, r2
 8008438:	4618      	mov	r0, r3
 800843a:	f001 fca1 	bl	8009d80 <lsm6dsv16x_xl_full_scale_get>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d002      	beq.n	800844a <LSM6DSV16X_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008444:	f04f 33ff 	mov.w	r3, #4294967295
 8008448:	e023      	b.n	8008492 <LSM6DSV16X_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale */
  switch (full_scale)
 800844a:	7afb      	ldrb	r3, [r7, #11]
 800844c:	2b03      	cmp	r3, #3
 800844e:	d81b      	bhi.n	8008488 <LSM6DSV16X_ACC_GetSensitivity+0x68>
 8008450:	a201      	add	r2, pc, #4	@ (adr r2, 8008458 <LSM6DSV16X_ACC_GetSensitivity+0x38>)
 8008452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008456:	bf00      	nop
 8008458:	08008469 	.word	0x08008469
 800845c:	08008471 	.word	0x08008471
 8008460:	08008479 	.word	0x08008479
 8008464:	08008481 	.word	0x08008481
  {
    case LSM6DSV16X_2g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_2G;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	4a0c      	ldr	r2, [pc, #48]	@ (800849c <LSM6DSV16X_ACC_GetSensitivity+0x7c>)
 800846c:	601a      	str	r2, [r3, #0]
      break;
 800846e:	e00f      	b.n	8008490 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_4g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_4G;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	4a0b      	ldr	r2, [pc, #44]	@ (80084a0 <LSM6DSV16X_ACC_GetSensitivity+0x80>)
 8008474:	601a      	str	r2, [r3, #0]
      break;
 8008476:	e00b      	b.n	8008490 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_8g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_8G;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	4a0a      	ldr	r2, [pc, #40]	@ (80084a4 <LSM6DSV16X_ACC_GetSensitivity+0x84>)
 800847c:	601a      	str	r2, [r3, #0]
      break;
 800847e:	e007      	b.n	8008490 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_16g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_16G;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	4a09      	ldr	r2, [pc, #36]	@ (80084a8 <LSM6DSV16X_ACC_GetSensitivity+0x88>)
 8008484:	601a      	str	r2, [r3, #0]
      break;
 8008486:	e003      	b.n	8008490 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 8008488:	f04f 33ff 	mov.w	r3, #4294967295
 800848c:	60fb      	str	r3, [r7, #12]
      break;
 800848e:	bf00      	nop
  }

  return ret;
 8008490:	68fb      	ldr	r3, [r7, #12]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	3d79db23 	.word	0x3d79db23
 80084a0:	3df9db23 	.word	0x3df9db23
 80084a4:	3e79db23 	.word	0x3e79db23
 80084a8:	3ef9db23 	.word	0x3ef9db23

080084ac <LSM6DSV16X_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 80084b6:	2300      	movs	r3, #0
 80084b8:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	3320      	adds	r3, #32
 80084be:	f107 020b 	add.w	r2, r7, #11
 80084c2:	4611      	mov	r1, r2
 80084c4:	4618      	mov	r0, r3
 80084c6:	f001 f8fb 	bl	80096c0 <lsm6dsv16x_xl_data_rate_get>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d002      	beq.n	80084d6 <LSM6DSV16X_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 80084d0:	f04f 33ff 	mov.w	r3, #4294967295
 80084d4:	e0ea      	b.n	80086ac <LSM6DSV16X_ACC_GetOutputDataRate+0x200>
  }

  switch (odr_low_level)
 80084d6:	7afb      	ldrb	r3, [r7, #11]
 80084d8:	2b2c      	cmp	r3, #44	@ 0x2c
 80084da:	f200 80e2 	bhi.w	80086a2 <LSM6DSV16X_ACC_GetOutputDataRate+0x1f6>
 80084de:	a201      	add	r2, pc, #4	@ (adr r2, 80084e4 <LSM6DSV16X_ACC_GetOutputDataRate+0x38>)
 80084e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e4:	08008599 	.word	0x08008599
 80084e8:	080085a3 	.word	0x080085a3
 80084ec:	080085ab 	.word	0x080085ab
 80084f0:	080085bb 	.word	0x080085bb
 80084f4:	080085d3 	.word	0x080085d3
 80084f8:	080085eb 	.word	0x080085eb
 80084fc:	08008603 	.word	0x08008603
 8008500:	0800861b 	.word	0x0800861b
 8008504:	08008633 	.word	0x08008633
 8008508:	0800864b 	.word	0x0800864b
 800850c:	08008663 	.word	0x08008663
 8008510:	0800867b 	.word	0x0800867b
 8008514:	08008693 	.word	0x08008693
 8008518:	080086a3 	.word	0x080086a3
 800851c:	080086a3 	.word	0x080086a3
 8008520:	080086a3 	.word	0x080086a3
 8008524:	080086a3 	.word	0x080086a3
 8008528:	080086a3 	.word	0x080086a3
 800852c:	080086a3 	.word	0x080086a3
 8008530:	080085c3 	.word	0x080085c3
 8008534:	080085db 	.word	0x080085db
 8008538:	080085f3 	.word	0x080085f3
 800853c:	0800860b 	.word	0x0800860b
 8008540:	08008623 	.word	0x08008623
 8008544:	0800863b 	.word	0x0800863b
 8008548:	08008653 	.word	0x08008653
 800854c:	0800866b 	.word	0x0800866b
 8008550:	08008683 	.word	0x08008683
 8008554:	0800869b 	.word	0x0800869b
 8008558:	080086a3 	.word	0x080086a3
 800855c:	080086a3 	.word	0x080086a3
 8008560:	080086a3 	.word	0x080086a3
 8008564:	080086a3 	.word	0x080086a3
 8008568:	080086a3 	.word	0x080086a3
 800856c:	080086a3 	.word	0x080086a3
 8008570:	080085b3 	.word	0x080085b3
 8008574:	080085cb 	.word	0x080085cb
 8008578:	080085e3 	.word	0x080085e3
 800857c:	080085fb 	.word	0x080085fb
 8008580:	08008613 	.word	0x08008613
 8008584:	0800862b 	.word	0x0800862b
 8008588:	08008643 	.word	0x08008643
 800858c:	0800865b 	.word	0x0800865b
 8008590:	08008673 	.word	0x08008673
 8008594:	0800868b 	.word	0x0800868b
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	f04f 0200 	mov.w	r2, #0
 800859e:	601a      	str	r2, [r3, #0]
      break;
 80085a0:	e083      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *Odr = 1.875f;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	4a43      	ldr	r2, [pc, #268]	@ (80086b4 <LSM6DSV16X_ACC_GetOutputDataRate+0x208>)
 80085a6:	601a      	str	r2, [r3, #0]
      break;
 80085a8:	e07f      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	4a42      	ldr	r2, [pc, #264]	@ (80086b8 <LSM6DSV16X_ACC_GetOutputDataRate+0x20c>)
 80085ae:	601a      	str	r2, [r3, #0]
      break;
 80085b0:	e07b      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_12Hz5:
      *Odr = 12.5f;
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	4a41      	ldr	r2, [pc, #260]	@ (80086bc <LSM6DSV16X_ACC_GetOutputDataRate+0x210>)
 80085b6:	601a      	str	r2, [r3, #0]
      break;
 80085b8:	e077      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	4a40      	ldr	r2, [pc, #256]	@ (80086c0 <LSM6DSV16X_ACC_GetOutputDataRate+0x214>)
 80085be:	601a      	str	r2, [r3, #0]
      break;
 80085c0:	e073      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_15Hz625:
      *Odr = 15.625f;
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	4a3f      	ldr	r2, [pc, #252]	@ (80086c4 <LSM6DSV16X_ACC_GetOutputDataRate+0x218>)
 80085c6:	601a      	str	r2, [r3, #0]
      break;
 80085c8:	e06f      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_25Hz:
      *Odr = 25.0f;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	4a3e      	ldr	r2, [pc, #248]	@ (80086c8 <LSM6DSV16X_ACC_GetOutputDataRate+0x21c>)
 80085ce:	601a      	str	r2, [r3, #0]
      break;
 80085d0:	e06b      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	4a3d      	ldr	r2, [pc, #244]	@ (80086cc <LSM6DSV16X_ACC_GetOutputDataRate+0x220>)
 80085d6:	601a      	str	r2, [r3, #0]
      break;
 80085d8:	e067      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_31Hz25:
      *Odr = 31.25f;
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	4a3c      	ldr	r2, [pc, #240]	@ (80086d0 <LSM6DSV16X_ACC_GetOutputDataRate+0x224>)
 80085de:	601a      	str	r2, [r3, #0]
      break;
 80085e0:	e063      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_50Hz:
      *Odr = 50.0f;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	4a3b      	ldr	r2, [pc, #236]	@ (80086d4 <LSM6DSV16X_ACC_GetOutputDataRate+0x228>)
 80085e6:	601a      	str	r2, [r3, #0]
      break;
 80085e8:	e05f      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	4a3a      	ldr	r2, [pc, #232]	@ (80086d8 <LSM6DSV16X_ACC_GetOutputDataRate+0x22c>)
 80085ee:	601a      	str	r2, [r3, #0]
      break;
 80085f0:	e05b      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_62Hz5:
      *Odr = 62.5f;
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	4a39      	ldr	r2, [pc, #228]	@ (80086dc <LSM6DSV16X_ACC_GetOutputDataRate+0x230>)
 80085f6:	601a      	str	r2, [r3, #0]
      break;
 80085f8:	e057      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_100Hz:
      *Odr = 100.0f;
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	4a38      	ldr	r2, [pc, #224]	@ (80086e0 <LSM6DSV16X_ACC_GetOutputDataRate+0x234>)
 80085fe:	601a      	str	r2, [r3, #0]
      break;
 8008600:	e053      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	4a37      	ldr	r2, [pc, #220]	@ (80086e4 <LSM6DSV16X_ACC_GetOutputDataRate+0x238>)
 8008606:	601a      	str	r2, [r3, #0]
      break;
 8008608:	e04f      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_125Hz:
      *Odr = 125.0f;
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	4a36      	ldr	r2, [pc, #216]	@ (80086e8 <LSM6DSV16X_ACC_GetOutputDataRate+0x23c>)
 800860e:	601a      	str	r2, [r3, #0]
      break;
 8008610:	e04b      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_200Hz:
      *Odr = 200.0f;
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	4a35      	ldr	r2, [pc, #212]	@ (80086ec <LSM6DSV16X_ACC_GetOutputDataRate+0x240>)
 8008616:	601a      	str	r2, [r3, #0]
      break;
 8008618:	e047      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	4a34      	ldr	r2, [pc, #208]	@ (80086f0 <LSM6DSV16X_ACC_GetOutputDataRate+0x244>)
 800861e:	601a      	str	r2, [r3, #0]
      break;
 8008620:	e043      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_250Hz:
      *Odr = 250.0f;
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	4a33      	ldr	r2, [pc, #204]	@ (80086f4 <LSM6DSV16X_ACC_GetOutputDataRate+0x248>)
 8008626:	601a      	str	r2, [r3, #0]
      break;
 8008628:	e03f      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_400Hz:
      *Odr = 400.0f;
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	4a32      	ldr	r2, [pc, #200]	@ (80086f8 <LSM6DSV16X_ACC_GetOutputDataRate+0x24c>)
 800862e:	601a      	str	r2, [r3, #0]
      break;
 8008630:	e03b      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	4a31      	ldr	r2, [pc, #196]	@ (80086fc <LSM6DSV16X_ACC_GetOutputDataRate+0x250>)
 8008636:	601a      	str	r2, [r3, #0]
      break;
 8008638:	e037      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_500Hz:
      *Odr = 500.0f;
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	4a30      	ldr	r2, [pc, #192]	@ (8008700 <LSM6DSV16X_ACC_GetOutputDataRate+0x254>)
 800863e:	601a      	str	r2, [r3, #0]
      break;
 8008640:	e033      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_800Hz:
      *Odr = 800.0f;
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	4a2f      	ldr	r2, [pc, #188]	@ (8008704 <LSM6DSV16X_ACC_GetOutputDataRate+0x258>)
 8008646:	601a      	str	r2, [r3, #0]
      break;
 8008648:	e02f      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	4a2e      	ldr	r2, [pc, #184]	@ (8008708 <LSM6DSV16X_ACC_GetOutputDataRate+0x25c>)
 800864e:	601a      	str	r2, [r3, #0]
      break;
 8008650:	e02b      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_1000Hz:
      *Odr = 1000.0f;
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	4a2d      	ldr	r2, [pc, #180]	@ (800870c <LSM6DSV16X_ACC_GetOutputDataRate+0x260>)
 8008656:	601a      	str	r2, [r3, #0]
      break;
 8008658:	e027      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_1600Hz:
      *Odr = 1600.0f;
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	4a2c      	ldr	r2, [pc, #176]	@ (8008710 <LSM6DSV16X_ACC_GetOutputDataRate+0x264>)
 800865e:	601a      	str	r2, [r3, #0]
      break;
 8008660:	e023      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	4a2b      	ldr	r2, [pc, #172]	@ (8008714 <LSM6DSV16X_ACC_GetOutputDataRate+0x268>)
 8008666:	601a      	str	r2, [r3, #0]
      break;
 8008668:	e01f      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_2000Hz:
      *Odr = 2000.0f;
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	4a2a      	ldr	r2, [pc, #168]	@ (8008718 <LSM6DSV16X_ACC_GetOutputDataRate+0x26c>)
 800866e:	601a      	str	r2, [r3, #0]
      break;
 8008670:	e01b      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_3200Hz:
      *Odr = 3200.0f;
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	4a29      	ldr	r2, [pc, #164]	@ (800871c <LSM6DSV16X_ACC_GetOutputDataRate+0x270>)
 8008676:	601a      	str	r2, [r3, #0]
      break;
 8008678:	e017      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	4a28      	ldr	r2, [pc, #160]	@ (8008720 <LSM6DSV16X_ACC_GetOutputDataRate+0x274>)
 800867e:	601a      	str	r2, [r3, #0]
      break;
 8008680:	e013      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_4000Hz:
      *Odr = 4000.0f;
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	4a27      	ldr	r2, [pc, #156]	@ (8008724 <LSM6DSV16X_ACC_GetOutputDataRate+0x278>)
 8008686:	601a      	str	r2, [r3, #0]
      break;
 8008688:	e00f      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_6400Hz:
      *Odr = 6400.0f;
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	4a26      	ldr	r2, [pc, #152]	@ (8008728 <LSM6DSV16X_ACC_GetOutputDataRate+0x27c>)
 800868e:	601a      	str	r2, [r3, #0]
      break;
 8008690:	e00b      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	4a25      	ldr	r2, [pc, #148]	@ (800872c <LSM6DSV16X_ACC_GetOutputDataRate+0x280>)
 8008696:	601a      	str	r2, [r3, #0]
      break;
 8008698:	e007      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_8000Hz:
      *Odr = 8000.0f;
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	4a24      	ldr	r2, [pc, #144]	@ (8008730 <LSM6DSV16X_ACC_GetOutputDataRate+0x284>)
 800869e:	601a      	str	r2, [r3, #0]
      break;
 80086a0:	e003      	b.n	80086aa <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    default:
      ret = LSM6DSV16X_ERROR;
 80086a2:	f04f 33ff 	mov.w	r3, #4294967295
 80086a6:	60fb      	str	r3, [r7, #12]
      break;
 80086a8:	bf00      	nop
  }

  return ret;
 80086aa:	68fb      	ldr	r3, [r7, #12]
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3710      	adds	r7, #16
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	3ff00000 	.word	0x3ff00000
 80086b8:	40f00000 	.word	0x40f00000
 80086bc:	41480000 	.word	0x41480000
 80086c0:	41700000 	.word	0x41700000
 80086c4:	417a0000 	.word	0x417a0000
 80086c8:	41c80000 	.word	0x41c80000
 80086cc:	41f00000 	.word	0x41f00000
 80086d0:	41fa0000 	.word	0x41fa0000
 80086d4:	42480000 	.word	0x42480000
 80086d8:	42700000 	.word	0x42700000
 80086dc:	427a0000 	.word	0x427a0000
 80086e0:	42c80000 	.word	0x42c80000
 80086e4:	42f00000 	.word	0x42f00000
 80086e8:	42fa0000 	.word	0x42fa0000
 80086ec:	43480000 	.word	0x43480000
 80086f0:	43700000 	.word	0x43700000
 80086f4:	437a0000 	.word	0x437a0000
 80086f8:	43c80000 	.word	0x43c80000
 80086fc:	43f00000 	.word	0x43f00000
 8008700:	43fa0000 	.word	0x43fa0000
 8008704:	44480000 	.word	0x44480000
 8008708:	44700000 	.word	0x44700000
 800870c:	447a0000 	.word	0x447a0000
 8008710:	44c80000 	.word	0x44c80000
 8008714:	44f00000 	.word	0x44f00000
 8008718:	44fa0000 	.word	0x44fa0000
 800871c:	45480000 	.word	0x45480000
 8008720:	45700000 	.word	0x45700000
 8008724:	457a0000 	.word	0x457a0000
 8008728:	45c80000 	.word	0x45c80000
 800872c:	45f00000 	.word	0x45f00000
 8008730:	45fa0000 	.word	0x45fa0000

08008734 <LSM6DSV16X_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->acc_is_enabled == 1U)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008746:	2b01      	cmp	r3, #1
 8008748:	d106      	bne.n	8008758 <LSM6DSV16X_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800874a:	ed97 0a00 	vldr	s0, [r7]
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 fc52 	bl	8008ff8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>
 8008754:	4603      	mov	r3, r0
 8008756:	e005      	b.n	8008764 <LSM6DSV16X_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8008758:	ed97 0a00 	vldr	s0, [r7]
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fced 	bl	800913c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>
 8008762:	4603      	mov	r3, r0
  }
}
 8008764:	4618      	mov	r0, r3
 8008766:	3708      	adds	r7, #8
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <LSM6DSV16X_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t *FullScale)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	3320      	adds	r3, #32
 800877e:	f107 020b 	add.w	r2, r7, #11
 8008782:	4611      	mov	r1, r2
 8008784:	4618      	mov	r0, r3
 8008786:	f001 fafb 	bl	8009d80 <lsm6dsv16x_xl_full_scale_get>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d002      	beq.n	8008796 <LSM6DSV16X_ACC_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008790:	f04f 33ff 	mov.w	r3, #4294967295
 8008794:	e023      	b.n	80087de <LSM6DSV16X_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8008796:	7afb      	ldrb	r3, [r7, #11]
 8008798:	2b03      	cmp	r3, #3
 800879a:	d81b      	bhi.n	80087d4 <LSM6DSV16X_ACC_GetFullScale+0x68>
 800879c:	a201      	add	r2, pc, #4	@ (adr r2, 80087a4 <LSM6DSV16X_ACC_GetFullScale+0x38>)
 800879e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a2:	bf00      	nop
 80087a4:	080087b5 	.word	0x080087b5
 80087a8:	080087bd 	.word	0x080087bd
 80087ac:	080087c5 	.word	0x080087c5
 80087b0:	080087cd 	.word	0x080087cd
  {
    case LSM6DSV16X_2g:
      *FullScale =  2;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	2202      	movs	r2, #2
 80087b8:	601a      	str	r2, [r3, #0]
      break;
 80087ba:	e00f      	b.n	80087dc <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_4g:
      *FullScale =  4;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	2204      	movs	r2, #4
 80087c0:	601a      	str	r2, [r3, #0]
      break;
 80087c2:	e00b      	b.n	80087dc <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_8g:
      *FullScale =  8;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	2208      	movs	r2, #8
 80087c8:	601a      	str	r2, [r3, #0]
      break;
 80087ca:	e007      	b.n	80087dc <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_16g:
      *FullScale = 16;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	2210      	movs	r2, #16
 80087d0:	601a      	str	r2, [r3, #0]
      break;
 80087d2:	e003      	b.n	80087dc <LSM6DSV16X_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 80087d4:	f04f 33ff 	mov.w	r3, #4294967295
 80087d8:	60fb      	str	r3, [r7, #12]
      break;
 80087da:	bf00      	nop
  }

  return ret;
 80087dc:	68fb      	ldr	r3, [r7, #12]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop

080087e8 <LSM6DSV16X_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_xl_full_scale_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
           : (FullScale <= 4) ? LSM6DSV16X_4g
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	dd0b      	ble.n	8008810 <LSM6DSV16X_ACC_SetFullScale+0x28>
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	2b04      	cmp	r3, #4
 80087fc:	dd06      	ble.n	800880c <LSM6DSV16X_ACC_SetFullScale+0x24>
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	2b08      	cmp	r3, #8
 8008802:	dc01      	bgt.n	8008808 <LSM6DSV16X_ACC_SetFullScale+0x20>
 8008804:	2302      	movs	r3, #2
 8008806:	e004      	b.n	8008812 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 8008808:	2303      	movs	r3, #3
 800880a:	e002      	b.n	8008812 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 800880c:	2301      	movs	r3, #1
 800880e:	e000      	b.n	8008812 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 8008810:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
 8008812:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSV16X_8g
           :                    LSM6DSV16X_16g;

  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	3320      	adds	r3, #32
 8008818:	7bfa      	ldrb	r2, [r7, #15]
 800881a:	4611      	mov	r1, r2
 800881c:	4618      	mov	r0, r3
 800881e:	f001 fa89 	bl	8009d34 <lsm6dsv16x_xl_full_scale_set>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d002      	beq.n	800882e <LSM6DSV16X_ACC_SetFullScale+0x46>
  {
    return LSM6DSV16X_ERROR;
 8008828:	f04f 33ff 	mov.w	r3, #4294967295
 800882c:	e000      	b.n	8008830 <LSM6DSV16X_ACC_SetFullScale+0x48>
  }

  return LSM6DSV16X_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <LSM6DSV16X_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	3320      	adds	r3, #32
 8008846:	f107 0208 	add.w	r2, r7, #8
 800884a:	4611      	mov	r1, r2
 800884c:	4618      	mov	r0, r3
 800884e:	f001 fb22 	bl	8009e96 <lsm6dsv16x_acceleration_raw_get>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d002      	beq.n	800885e <LSM6DSV16X_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 8008858:	f04f 33ff 	mov.w	r3, #4294967295
 800885c:	e00c      	b.n	8008878 <LSM6DSV16X_ACC_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 800885e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8008866:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800886e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <LSM6DSV16X_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *Acceleration)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 800888a:	f04f 0300 	mov.w	r3, #0
 800888e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	3320      	adds	r3, #32
 8008894:	f107 0210 	add.w	r2, r7, #16
 8008898:	4611      	mov	r1, r2
 800889a:	4618      	mov	r0, r3
 800889c:	f001 fafb 	bl	8009e96 <lsm6dsv16x_acceleration_raw_get>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d002      	beq.n	80088ac <LSM6DSV16X_ACC_GetAxes+0x2c>
  {
    return LSM6DSV16X_ERROR;
 80088a6:	f04f 33ff 	mov.w	r3, #4294967295
 80088aa:	e03c      	b.n	8008926 <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 80088ac:	f107 030c 	add.w	r3, r7, #12
 80088b0:	4619      	mov	r1, r3
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7ff fdb4 	bl	8008420 <LSM6DSV16X_ACC_GetSensitivity>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d002      	beq.n	80088c4 <LSM6DSV16X_ACC_GetAxes+0x44>
  {
    return LSM6DSV16X_ERROR;
 80088be:	f04f 33ff 	mov.w	r3, #4294967295
 80088c2:	e030      	b.n	8008926 <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Calculate the data */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80088c4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80088c8:	ee07 3a90 	vmov	s15, r3
 80088cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80088d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80088d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088dc:	ee17 2a90 	vmov	r2, s15
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80088e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80088e8:	ee07 3a90 	vmov	s15, r3
 80088ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80088f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80088f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088fc:	ee17 2a90 	vmov	r2, s15
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8008904:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008908:	ee07 3a90 	vmov	s15, r3
 800890c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008910:	edd7 7a03 	vldr	s15, [r7, #12]
 8008914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008918:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800891c:	ee17 2a90 	vmov	r2, s15
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3718      	adds	r7, #24
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <LSM6DSV16X_GYRO_Enable>:
  * @brief  Enable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Enable(LSM6DSV16X_Object_t *pObj)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b082      	sub	sp, #8
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800893c:	2b01      	cmp	r3, #1
 800893e:	d101      	bne.n	8008944 <LSM6DSV16X_GYRO_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 8008940:	2300      	movs	r3, #0
 8008942:	e014      	b.n	800896e <LSM6DSV16X_GYRO_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSV16X_OK)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f103 0220 	add.w	r2, r3, #32
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008950:	4619      	mov	r1, r3
 8008952:	4610      	mov	r0, r2
 8008954:	f000 ffc4 	bl	80098e0 <lsm6dsv16x_gy_data_rate_set>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d002      	beq.n	8008964 <LSM6DSV16X_GYRO_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 800895e:	f04f 33ff 	mov.w	r3, #4294967295
 8008962:	e004      	b.n	800896e <LSM6DSV16X_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <LSM6DSV16X_GYRO_Disable>:
  * @brief  Disable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Disable(LSM6DSV16X_Object_t *pObj)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b082      	sub	sp, #8
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008984:	2b00      	cmp	r3, #0
 8008986:	d101      	bne.n	800898c <LSM6DSV16X_GYRO_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 8008988:	2300      	movs	r3, #0
 800898a:	e01f      	b.n	80089cc <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSV16X_OK)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f103 0220 	add.w	r2, r3, #32
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	3334      	adds	r3, #52	@ 0x34
 8008996:	4619      	mov	r1, r3
 8008998:	4610      	mov	r0, r2
 800899a:	f000 fff1 	bl	8009980 <lsm6dsv16x_gy_data_rate_get>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d002      	beq.n	80089aa <LSM6DSV16X_GYRO_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 80089a4:	f04f 33ff 	mov.w	r3, #4294967295
 80089a8:	e010      	b.n	80089cc <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	3320      	adds	r3, #32
 80089ae:	2100      	movs	r1, #0
 80089b0:	4618      	mov	r0, r3
 80089b2:	f000 ff95 	bl	80098e0 <lsm6dsv16x_gy_data_rate_set>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d002      	beq.n	80089c2 <LSM6DSV16X_GYRO_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 80089bc:	f04f 33ff 	mov.w	r3, #4294967295
 80089c0:	e004      	b.n	80089cc <LSM6DSV16X_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <LSM6DSV16X_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 80089de:	2300      	movs	r3, #0
 80089e0:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	3320      	adds	r3, #32
 80089e6:	f107 020b 	add.w	r2, r7, #11
 80089ea:	4611      	mov	r1, r2
 80089ec:	4618      	mov	r0, r3
 80089ee:	f001 f949 	bl	8009c84 <lsm6dsv16x_gy_full_scale_get>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <LSM6DSV16X_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 80089f8:	f04f 33ff 	mov.w	r3, #4294967295
 80089fc:	e03d      	b.n	8008a7a <LSM6DSV16X_GYRO_GetSensitivity+0xa6>
  }

  /* Store the sensitivity based on actual full scale */
  switch (full_scale)
 80089fe:	7afb      	ldrb	r3, [r7, #11]
 8008a00:	2b0c      	cmp	r3, #12
 8008a02:	d835      	bhi.n	8008a70 <LSM6DSV16X_GYRO_GetSensitivity+0x9c>
 8008a04:	a201      	add	r2, pc, #4	@ (adr r2, 8008a0c <LSM6DSV16X_GYRO_GetSensitivity+0x38>)
 8008a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0a:	bf00      	nop
 8008a0c:	08008a41 	.word	0x08008a41
 8008a10:	08008a49 	.word	0x08008a49
 8008a14:	08008a51 	.word	0x08008a51
 8008a18:	08008a59 	.word	0x08008a59
 8008a1c:	08008a61 	.word	0x08008a61
 8008a20:	08008a71 	.word	0x08008a71
 8008a24:	08008a71 	.word	0x08008a71
 8008a28:	08008a71 	.word	0x08008a71
 8008a2c:	08008a71 	.word	0x08008a71
 8008a30:	08008a71 	.word	0x08008a71
 8008a34:	08008a71 	.word	0x08008a71
 8008a38:	08008a71 	.word	0x08008a71
 8008a3c:	08008a69 	.word	0x08008a69
  {
    case LSM6DSV16X_125dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_125DPS;
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	4a10      	ldr	r2, [pc, #64]	@ (8008a84 <LSM6DSV16X_GYRO_GetSensitivity+0xb0>)
 8008a44:	601a      	str	r2, [r3, #0]
      break;
 8008a46:	e017      	b.n	8008a78 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_250dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_250DPS;
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	4a0f      	ldr	r2, [pc, #60]	@ (8008a88 <LSM6DSV16X_GYRO_GetSensitivity+0xb4>)
 8008a4c:	601a      	str	r2, [r3, #0]
      break;
 8008a4e:	e013      	b.n	8008a78 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_500dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_500DPS;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	4a0e      	ldr	r2, [pc, #56]	@ (8008a8c <LSM6DSV16X_GYRO_GetSensitivity+0xb8>)
 8008a54:	601a      	str	r2, [r3, #0]
      break;
 8008a56:	e00f      	b.n	8008a78 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_1000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_1000DPS;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	4a0d      	ldr	r2, [pc, #52]	@ (8008a90 <LSM6DSV16X_GYRO_GetSensitivity+0xbc>)
 8008a5c:	601a      	str	r2, [r3, #0]
      break;
 8008a5e:	e00b      	b.n	8008a78 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_2000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_2000DPS;
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	4a0c      	ldr	r2, [pc, #48]	@ (8008a94 <LSM6DSV16X_GYRO_GetSensitivity+0xc0>)
 8008a64:	601a      	str	r2, [r3, #0]
      break;
 8008a66:	e007      	b.n	8008a78 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_4000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_4000DPS;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	4a0b      	ldr	r2, [pc, #44]	@ (8008a98 <LSM6DSV16X_GYRO_GetSensitivity+0xc4>)
 8008a6c:	601a      	str	r2, [r3, #0]
      break;
 8008a6e:	e003      	b.n	8008a78 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    default:
      ret = LSM6DSV16X_ERROR;
 8008a70:	f04f 33ff 	mov.w	r3, #4294967295
 8008a74:	60fb      	str	r3, [r7, #12]
      break;
 8008a76:	bf00      	nop
  }

  return ret;
 8008a78:	68fb      	ldr	r3, [r7, #12]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	408c0000 	.word	0x408c0000
 8008a88:	410c0000 	.word	0x410c0000
 8008a8c:	418c0000 	.word	0x418c0000
 8008a90:	420c0000 	.word	0x420c0000
 8008a94:	428c0000 	.word	0x428c0000
 8008a98:	430c0000 	.word	0x430c0000

08008a9c <LSM6DSV16X_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	3320      	adds	r3, #32
 8008aae:	f107 020b 	add.w	r2, r7, #11
 8008ab2:	4611      	mov	r1, r2
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f000 ff63 	bl	8009980 <lsm6dsv16x_gy_data_rate_get>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d002      	beq.n	8008ac6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ac4:	e0ea      	b.n	8008c9c <LSM6DSV16X_GYRO_GetOutputDataRate+0x200>
  }

  switch (odr_low_level)
 8008ac6:	7afb      	ldrb	r3, [r7, #11]
 8008ac8:	2b2c      	cmp	r3, #44	@ 0x2c
 8008aca:	f200 80e2 	bhi.w	8008c92 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1f6>
 8008ace:	a201      	add	r2, pc, #4	@ (adr r2, 8008ad4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x38>)
 8008ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad4:	08008b89 	.word	0x08008b89
 8008ad8:	08008b93 	.word	0x08008b93
 8008adc:	08008b9b 	.word	0x08008b9b
 8008ae0:	08008bab 	.word	0x08008bab
 8008ae4:	08008bc3 	.word	0x08008bc3
 8008ae8:	08008bdb 	.word	0x08008bdb
 8008aec:	08008bf3 	.word	0x08008bf3
 8008af0:	08008c0b 	.word	0x08008c0b
 8008af4:	08008c23 	.word	0x08008c23
 8008af8:	08008c3b 	.word	0x08008c3b
 8008afc:	08008c53 	.word	0x08008c53
 8008b00:	08008c6b 	.word	0x08008c6b
 8008b04:	08008c83 	.word	0x08008c83
 8008b08:	08008c93 	.word	0x08008c93
 8008b0c:	08008c93 	.word	0x08008c93
 8008b10:	08008c93 	.word	0x08008c93
 8008b14:	08008c93 	.word	0x08008c93
 8008b18:	08008c93 	.word	0x08008c93
 8008b1c:	08008c93 	.word	0x08008c93
 8008b20:	08008bb3 	.word	0x08008bb3
 8008b24:	08008bcb 	.word	0x08008bcb
 8008b28:	08008be3 	.word	0x08008be3
 8008b2c:	08008bfb 	.word	0x08008bfb
 8008b30:	08008c13 	.word	0x08008c13
 8008b34:	08008c2b 	.word	0x08008c2b
 8008b38:	08008c43 	.word	0x08008c43
 8008b3c:	08008c5b 	.word	0x08008c5b
 8008b40:	08008c73 	.word	0x08008c73
 8008b44:	08008c8b 	.word	0x08008c8b
 8008b48:	08008c93 	.word	0x08008c93
 8008b4c:	08008c93 	.word	0x08008c93
 8008b50:	08008c93 	.word	0x08008c93
 8008b54:	08008c93 	.word	0x08008c93
 8008b58:	08008c93 	.word	0x08008c93
 8008b5c:	08008c93 	.word	0x08008c93
 8008b60:	08008ba3 	.word	0x08008ba3
 8008b64:	08008bbb 	.word	0x08008bbb
 8008b68:	08008bd3 	.word	0x08008bd3
 8008b6c:	08008beb 	.word	0x08008beb
 8008b70:	08008c03 	.word	0x08008c03
 8008b74:	08008c1b 	.word	0x08008c1b
 8008b78:	08008c33 	.word	0x08008c33
 8008b7c:	08008c4b 	.word	0x08008c4b
 8008b80:	08008c63 	.word	0x08008c63
 8008b84:	08008c7b 	.word	0x08008c7b
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	f04f 0200 	mov.w	r2, #0
 8008b8e:	601a      	str	r2, [r3, #0]
      break;
 8008b90:	e083      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *Odr = 1.875f;
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	4a43      	ldr	r2, [pc, #268]	@ (8008ca4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x208>)
 8008b96:	601a      	str	r2, [r3, #0]
      break;
 8008b98:	e07f      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	4a42      	ldr	r2, [pc, #264]	@ (8008ca8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x20c>)
 8008b9e:	601a      	str	r2, [r3, #0]
      break;
 8008ba0:	e07b      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_12Hz5:
      *Odr = 12.5f;
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	4a41      	ldr	r2, [pc, #260]	@ (8008cac <LSM6DSV16X_GYRO_GetOutputDataRate+0x210>)
 8008ba6:	601a      	str	r2, [r3, #0]
      break;
 8008ba8:	e077      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	4a40      	ldr	r2, [pc, #256]	@ (8008cb0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x214>)
 8008bae:	601a      	str	r2, [r3, #0]
      break;
 8008bb0:	e073      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_15Hz625:
      *Odr = 15.625f;
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	4a3f      	ldr	r2, [pc, #252]	@ (8008cb4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x218>)
 8008bb6:	601a      	str	r2, [r3, #0]
      break;
 8008bb8:	e06f      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_25Hz:
      *Odr = 25.0f;
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	4a3e      	ldr	r2, [pc, #248]	@ (8008cb8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x21c>)
 8008bbe:	601a      	str	r2, [r3, #0]
      break;
 8008bc0:	e06b      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	4a3d      	ldr	r2, [pc, #244]	@ (8008cbc <LSM6DSV16X_GYRO_GetOutputDataRate+0x220>)
 8008bc6:	601a      	str	r2, [r3, #0]
      break;
 8008bc8:	e067      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_31Hz25:
      *Odr = 31.25f;
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	4a3c      	ldr	r2, [pc, #240]	@ (8008cc0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x224>)
 8008bce:	601a      	str	r2, [r3, #0]
      break;
 8008bd0:	e063      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_50Hz:
      *Odr = 50.0f;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	4a3b      	ldr	r2, [pc, #236]	@ (8008cc4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x228>)
 8008bd6:	601a      	str	r2, [r3, #0]
      break;
 8008bd8:	e05f      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	4a3a      	ldr	r2, [pc, #232]	@ (8008cc8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x22c>)
 8008bde:	601a      	str	r2, [r3, #0]
      break;
 8008be0:	e05b      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_62Hz5:
      *Odr = 62.5f;
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	4a39      	ldr	r2, [pc, #228]	@ (8008ccc <LSM6DSV16X_GYRO_GetOutputDataRate+0x230>)
 8008be6:	601a      	str	r2, [r3, #0]
      break;
 8008be8:	e057      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_100Hz:
      *Odr = 100.0f;
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	4a38      	ldr	r2, [pc, #224]	@ (8008cd0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x234>)
 8008bee:	601a      	str	r2, [r3, #0]
      break;
 8008bf0:	e053      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	4a37      	ldr	r2, [pc, #220]	@ (8008cd4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x238>)
 8008bf6:	601a      	str	r2, [r3, #0]
      break;
 8008bf8:	e04f      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_125Hz:
      *Odr = 125.0f;
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	4a36      	ldr	r2, [pc, #216]	@ (8008cd8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x23c>)
 8008bfe:	601a      	str	r2, [r3, #0]
      break;
 8008c00:	e04b      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_200Hz:
      *Odr = 200.0f;
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	4a35      	ldr	r2, [pc, #212]	@ (8008cdc <LSM6DSV16X_GYRO_GetOutputDataRate+0x240>)
 8008c06:	601a      	str	r2, [r3, #0]
      break;
 8008c08:	e047      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	4a34      	ldr	r2, [pc, #208]	@ (8008ce0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x244>)
 8008c0e:	601a      	str	r2, [r3, #0]
      break;
 8008c10:	e043      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_250Hz:
      *Odr = 250.0f;
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	4a33      	ldr	r2, [pc, #204]	@ (8008ce4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x248>)
 8008c16:	601a      	str	r2, [r3, #0]
      break;
 8008c18:	e03f      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_400Hz:
      *Odr = 400.0f;
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	4a32      	ldr	r2, [pc, #200]	@ (8008ce8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x24c>)
 8008c1e:	601a      	str	r2, [r3, #0]
      break;
 8008c20:	e03b      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	4a31      	ldr	r2, [pc, #196]	@ (8008cec <LSM6DSV16X_GYRO_GetOutputDataRate+0x250>)
 8008c26:	601a      	str	r2, [r3, #0]
      break;
 8008c28:	e037      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_500Hz:
      *Odr = 500.0f;
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	4a30      	ldr	r2, [pc, #192]	@ (8008cf0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x254>)
 8008c2e:	601a      	str	r2, [r3, #0]
      break;
 8008c30:	e033      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_800Hz:
      *Odr = 800.0f;
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	4a2f      	ldr	r2, [pc, #188]	@ (8008cf4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x258>)
 8008c36:	601a      	str	r2, [r3, #0]
      break;
 8008c38:	e02f      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	4a2e      	ldr	r2, [pc, #184]	@ (8008cf8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x25c>)
 8008c3e:	601a      	str	r2, [r3, #0]
      break;
 8008c40:	e02b      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_1000Hz:
      *Odr = 1000.0f;
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	4a2d      	ldr	r2, [pc, #180]	@ (8008cfc <LSM6DSV16X_GYRO_GetOutputDataRate+0x260>)
 8008c46:	601a      	str	r2, [r3, #0]
      break;
 8008c48:	e027      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_1600Hz:
      *Odr = 1600.0f;
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	4a2c      	ldr	r2, [pc, #176]	@ (8008d00 <LSM6DSV16X_GYRO_GetOutputDataRate+0x264>)
 8008c4e:	601a      	str	r2, [r3, #0]
      break;
 8008c50:	e023      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	4a2b      	ldr	r2, [pc, #172]	@ (8008d04 <LSM6DSV16X_GYRO_GetOutputDataRate+0x268>)
 8008c56:	601a      	str	r2, [r3, #0]
      break;
 8008c58:	e01f      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_2000Hz:
      *Odr = 2000.0f;
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	4a2a      	ldr	r2, [pc, #168]	@ (8008d08 <LSM6DSV16X_GYRO_GetOutputDataRate+0x26c>)
 8008c5e:	601a      	str	r2, [r3, #0]
      break;
 8008c60:	e01b      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_3200Hz:
      *Odr = 3200.0f;
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	4a29      	ldr	r2, [pc, #164]	@ (8008d0c <LSM6DSV16X_GYRO_GetOutputDataRate+0x270>)
 8008c66:	601a      	str	r2, [r3, #0]
      break;
 8008c68:	e017      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	4a28      	ldr	r2, [pc, #160]	@ (8008d10 <LSM6DSV16X_GYRO_GetOutputDataRate+0x274>)
 8008c6e:	601a      	str	r2, [r3, #0]
      break;
 8008c70:	e013      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_4000Hz:
      *Odr = 4000.0f;
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	4a27      	ldr	r2, [pc, #156]	@ (8008d14 <LSM6DSV16X_GYRO_GetOutputDataRate+0x278>)
 8008c76:	601a      	str	r2, [r3, #0]
      break;
 8008c78:	e00f      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_6400Hz:
      *Odr = 6400.0f;
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	4a26      	ldr	r2, [pc, #152]	@ (8008d18 <LSM6DSV16X_GYRO_GetOutputDataRate+0x27c>)
 8008c7e:	601a      	str	r2, [r3, #0]
      break;
 8008c80:	e00b      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	4a25      	ldr	r2, [pc, #148]	@ (8008d1c <LSM6DSV16X_GYRO_GetOutputDataRate+0x280>)
 8008c86:	601a      	str	r2, [r3, #0]
      break;
 8008c88:	e007      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_8000Hz:
      *Odr = 8000.0f;
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	4a24      	ldr	r2, [pc, #144]	@ (8008d20 <LSM6DSV16X_GYRO_GetOutputDataRate+0x284>)
 8008c8e:	601a      	str	r2, [r3, #0]
      break;
 8008c90:	e003      	b.n	8008c9a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    default:
      ret = LSM6DSV16X_ERROR;
 8008c92:	f04f 33ff 	mov.w	r3, #4294967295
 8008c96:	60fb      	str	r3, [r7, #12]
      break;
 8008c98:	bf00      	nop
  }

  return ret;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3710      	adds	r7, #16
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	3ff00000 	.word	0x3ff00000
 8008ca8:	40f00000 	.word	0x40f00000
 8008cac:	41480000 	.word	0x41480000
 8008cb0:	41700000 	.word	0x41700000
 8008cb4:	417a0000 	.word	0x417a0000
 8008cb8:	41c80000 	.word	0x41c80000
 8008cbc:	41f00000 	.word	0x41f00000
 8008cc0:	41fa0000 	.word	0x41fa0000
 8008cc4:	42480000 	.word	0x42480000
 8008cc8:	42700000 	.word	0x42700000
 8008ccc:	427a0000 	.word	0x427a0000
 8008cd0:	42c80000 	.word	0x42c80000
 8008cd4:	42f00000 	.word	0x42f00000
 8008cd8:	42fa0000 	.word	0x42fa0000
 8008cdc:	43480000 	.word	0x43480000
 8008ce0:	43700000 	.word	0x43700000
 8008ce4:	437a0000 	.word	0x437a0000
 8008ce8:	43c80000 	.word	0x43c80000
 8008cec:	43f00000 	.word	0x43f00000
 8008cf0:	43fa0000 	.word	0x43fa0000
 8008cf4:	44480000 	.word	0x44480000
 8008cf8:	44700000 	.word	0x44700000
 8008cfc:	447a0000 	.word	0x447a0000
 8008d00:	44c80000 	.word	0x44c80000
 8008d04:	44f00000 	.word	0x44f00000
 8008d08:	44fa0000 	.word	0x44fa0000
 8008d0c:	45480000 	.word	0x45480000
 8008d10:	45700000 	.word	0x45700000
 8008d14:	457a0000 	.word	0x457a0000
 8008d18:	45c80000 	.word	0x45c80000
 8008d1c:	45f00000 	.word	0x45f00000
 8008d20:	45fa0000 	.word	0x45fa0000

08008d24 <LSM6DSV16X_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->gyro_is_enabled == 1U)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d106      	bne.n	8008d48 <LSM6DSV16X_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8008d3a:	ed97 0a00 	vldr	s0, [r7]
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fa94 	bl	800926c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>
 8008d44:	4603      	mov	r3, r0
 8008d46:	e005      	b.n	8008d54 <LSM6DSV16X_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8008d48:	ed97 0a00 	vldr	s0, [r7]
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 fb23 	bl	8009398 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>
 8008d52:	4603      	mov	r3, r0
  }
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3708      	adds	r7, #8
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <LSM6DSV16X_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t  *FullScale)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8008d66:	2300      	movs	r3, #0
 8008d68:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	3320      	adds	r3, #32
 8008d6e:	f107 020b 	add.w	r2, r7, #11
 8008d72:	4611      	mov	r1, r2
 8008d74:	4618      	mov	r0, r3
 8008d76:	f000 ff85 	bl	8009c84 <lsm6dsv16x_gy_full_scale_get>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d002      	beq.n	8008d86 <LSM6DSV16X_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008d80:	f04f 33ff 	mov.w	r3, #4294967295
 8008d84:	e041      	b.n	8008e0a <LSM6DSV16X_GYRO_GetFullScale+0xae>
  }

  switch (fs_low_level)
 8008d86:	7afb      	ldrb	r3, [r7, #11]
 8008d88:	2b0c      	cmp	r3, #12
 8008d8a:	d839      	bhi.n	8008e00 <LSM6DSV16X_GYRO_GetFullScale+0xa4>
 8008d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8008d94 <LSM6DSV16X_GYRO_GetFullScale+0x38>)
 8008d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d92:	bf00      	nop
 8008d94:	08008dc9 	.word	0x08008dc9
 8008d98:	08008dd1 	.word	0x08008dd1
 8008d9c:	08008dd9 	.word	0x08008dd9
 8008da0:	08008de3 	.word	0x08008de3
 8008da4:	08008ded 	.word	0x08008ded
 8008da8:	08008e01 	.word	0x08008e01
 8008dac:	08008e01 	.word	0x08008e01
 8008db0:	08008e01 	.word	0x08008e01
 8008db4:	08008e01 	.word	0x08008e01
 8008db8:	08008e01 	.word	0x08008e01
 8008dbc:	08008e01 	.word	0x08008e01
 8008dc0:	08008e01 	.word	0x08008e01
 8008dc4:	08008df7 	.word	0x08008df7
  {
    case LSM6DSV16X_125dps:
      *FullScale =  125;
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	227d      	movs	r2, #125	@ 0x7d
 8008dcc:	601a      	str	r2, [r3, #0]
      break;
 8008dce:	e01b      	b.n	8008e08 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_250dps:
      *FullScale =  250;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	22fa      	movs	r2, #250	@ 0xfa
 8008dd4:	601a      	str	r2, [r3, #0]
      break;
 8008dd6:	e017      	b.n	8008e08 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_500dps:
      *FullScale =  500;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8008dde:	601a      	str	r2, [r3, #0]
      break;
 8008de0:	e012      	b.n	8008e08 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_1000dps:
      *FullScale = 1000;
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008de8:	601a      	str	r2, [r3, #0]
      break;
 8008dea:	e00d      	b.n	8008e08 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_2000dps:
      *FullScale = 2000;
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8008df2:	601a      	str	r2, [r3, #0]
      break;
 8008df4:	e008      	b.n	8008e08 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_4000dps:
      *FullScale = 4000;
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8008dfc:	601a      	str	r2, [r3, #0]
      break;
 8008dfe:	e003      	b.n	8008e08 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    default:
      ret = LSM6DSV16X_ERROR;
 8008e00:	f04f 33ff 	mov.w	r3, #4294967295
 8008e04:	60fb      	str	r3, [r7, #12]
      break;
 8008e06:	bf00      	nop
  }

  return ret;
 8008e08:	68fb      	ldr	r3, [r7, #12]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop

08008e14 <LSM6DSV16X_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_gy_full_scale_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
           : (FullScale <= 250)  ? LSM6DSV16X_250dps
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	2b7d      	cmp	r3, #125	@ 0x7d
 8008e22:	dd18      	ble.n	8008e56 <LSM6DSV16X_GYRO_SetFullScale+0x42>
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	2bfa      	cmp	r3, #250	@ 0xfa
 8008e28:	dd13      	ble.n	8008e52 <LSM6DSV16X_GYRO_SetFullScale+0x3e>
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008e30:	dd0d      	ble.n	8008e4e <LSM6DSV16X_GYRO_SetFullScale+0x3a>
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e38:	dd07      	ble.n	8008e4a <LSM6DSV16X_GYRO_SetFullScale+0x36>
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8008e40:	dc01      	bgt.n	8008e46 <LSM6DSV16X_GYRO_SetFullScale+0x32>
 8008e42:	2304      	movs	r3, #4
 8008e44:	e008      	b.n	8008e58 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008e46:	230c      	movs	r3, #12
 8008e48:	e006      	b.n	8008e58 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	e004      	b.n	8008e58 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008e4e:	2302      	movs	r3, #2
 8008e50:	e002      	b.n	8008e58 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008e52:	2301      	movs	r3, #1
 8008e54:	e000      	b.n	8008e58 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008e56:	2300      	movs	r3, #0
  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
 8008e58:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSV16X_500dps
           : (FullScale <= 1000) ? LSM6DSV16X_1000dps
           : (FullScale <= 2000) ? LSM6DSV16X_2000dps
           :                       LSM6DSV16X_4000dps;

  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	3320      	adds	r3, #32
 8008e5e:	7bfa      	ldrb	r2, [r7, #15]
 8008e60:	4611      	mov	r1, r2
 8008e62:	4618      	mov	r0, r3
 8008e64:	f000 fee8 	bl	8009c38 <lsm6dsv16x_gy_full_scale_set>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d002      	beq.n	8008e74 <LSM6DSV16X_GYRO_SetFullScale+0x60>
  {
    return LSM6DSV16X_ERROR;
 8008e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e72:	e000      	b.n	8008e76 <LSM6DSV16X_GYRO_SetFullScale+0x62>
  }

  return LSM6DSV16X_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <LSM6DSV16X_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b084      	sub	sp, #16
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
 8008e86:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	3320      	adds	r3, #32
 8008e8c:	f107 0208 	add.w	r2, r7, #8
 8008e90:	4611      	mov	r1, r2
 8008e92:	4618      	mov	r0, r3
 8008e94:	f000 ffb2 	bl	8009dfc <lsm6dsv16x_angular_rate_raw_get>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d002      	beq.n	8008ea4 <LSM6DSV16X_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 8008e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008ea2:	e00c      	b.n	8008ebe <LSM6DSV16X_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 8008ea4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8008eac:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8008eb4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <LSM6DSV16X_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *AngularRate)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b086      	sub	sp, #24
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
 8008ece:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8008ed0:	f04f 0300 	mov.w	r3, #0
 8008ed4:	60fb      	str	r3, [r7, #12]

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	3320      	adds	r3, #32
 8008eda:	f107 0210 	add.w	r2, r7, #16
 8008ede:	4611      	mov	r1, r2
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f000 ff8b 	bl	8009dfc <lsm6dsv16x_angular_rate_raw_get>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d002      	beq.n	8008ef2 <LSM6DSV16X_GYRO_GetAxes+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8008eec:	f04f 33ff 	mov.w	r3, #4294967295
 8008ef0:	e03c      	b.n	8008f6c <LSM6DSV16X_GYRO_GetAxes+0xa6>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 8008ef2:	f107 030c 	add.w	r3, r7, #12
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f7ff fd6b 	bl	80089d4 <LSM6DSV16X_GYRO_GetSensitivity>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d002      	beq.n	8008f0a <LSM6DSV16X_GYRO_GetAxes+0x44>
  {
    return LSM6DSV16X_ERROR;
 8008f04:	f04f 33ff 	mov.w	r3, #4294967295
 8008f08:	e030      	b.n	8008f6c <LSM6DSV16X_GYRO_GetAxes+0xa6>
  }

  /* Calculate the data */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8008f0a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008f0e:	ee07 3a90 	vmov	s15, r3
 8008f12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008f16:	edd7 7a03 	vldr	s15, [r7, #12]
 8008f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f22:	ee17 2a90 	vmov	r2, s15
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8008f2a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008f2e:	ee07 3a90 	vmov	s15, r3
 8008f32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008f36:	edd7 7a03 	vldr	s15, [r7, #12]
 8008f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f42:	ee17 2a90 	vmov	r2, s15
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8008f4a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008f4e:	ee07 3a90 	vmov	s15, r3
 8008f52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008f56:	edd7 7a03 	vldr	s15, [r7, #12]
 8008f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f62:	ee17 2a90 	vmov	r2, s15
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3718      	adds	r7, #24
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <LSM6DSV16X_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Write_Reg(LSM6DSV16X_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	70fb      	strb	r3, [r7, #3]
 8008f80:	4613      	mov	r3, r2
 8008f82:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsv16x_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSV16X_OK)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f103 0020 	add.w	r0, r3, #32
 8008f8a:	1cba      	adds	r2, r7, #2
 8008f8c:	78f9      	ldrb	r1, [r7, #3]
 8008f8e:	2301      	movs	r3, #1
 8008f90:	f000 fae4 	bl	800955c <lsm6dsv16x_write_reg>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d002      	beq.n	8008fa0 <LSM6DSV16X_Write_Reg+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8008f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f9e:	e000      	b.n	8008fa2 <LSM6DSV16X_Write_Reg+0x2e>
  }

  return LSM6DSV16X_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <LSM6DSV16X_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LSM6DSV16X_MAIN_MEM_BANK, 1 - LSM6DSV16X_EMBED_FUNC_MEM_BANK, 2 - LSM6DSV16X_SENSOR_HUB_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Set_Mem_Bank(LSM6DSV16X_Object_t *pObj, uint8_t Val)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b084      	sub	sp, #16
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSV16X_OK;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_mem_bank_t reg;

  reg = (Val == 1U) ? LSM6DSV16X_EMBED_FUNC_MEM_BANK
        : (Val == 2U) ? LSM6DSV16X_SENSOR_HUB_MEM_BANK
 8008fba:	78fb      	ldrb	r3, [r7, #3]
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d006      	beq.n	8008fce <LSM6DSV16X_Set_Mem_Bank+0x24>
 8008fc0:	78fb      	ldrb	r3, [r7, #3]
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d101      	bne.n	8008fca <LSM6DSV16X_Set_Mem_Bank+0x20>
 8008fc6:	2302      	movs	r3, #2
 8008fc8:	e002      	b.n	8008fd0 <LSM6DSV16X_Set_Mem_Bank+0x26>
 8008fca:	2300      	movs	r3, #0
 8008fcc:	e000      	b.n	8008fd0 <LSM6DSV16X_Set_Mem_Bank+0x26>
 8008fce:	2301      	movs	r3, #1
  reg = (Val == 1U) ? LSM6DSV16X_EMBED_FUNC_MEM_BANK
 8008fd0:	72fb      	strb	r3, [r7, #11]
        :               LSM6DSV16X_MAIN_MEM_BANK;

  if (lsm6dsv16x_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSV16X_OK)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	3320      	adds	r3, #32
 8008fd6:	7afa      	ldrb	r2, [r7, #11]
 8008fd8:	4611      	mov	r1, r2
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 fadc 	bl	8009598 <lsm6dsv16x_mem_bank_set>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d002      	beq.n	8008fec <LSM6DSV16X_Set_Mem_Bank+0x42>
  {
    ret = LSM6DSV16X_ERROR;
 8008fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8008fea:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008fec:	68fb      	ldr	r3, [r7, #12]
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
	...

08008ff8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
            : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8009004:	edd7 7a00 	vldr	s15, [r7]
 8009008:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 800900c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009014:	d801      	bhi.n	800901a <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x22>
 8009016:	2301      	movs	r3, #1
 8009018:	e06e      	b.n	80090f8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800901a:	edd7 7a00 	vldr	s15, [r7]
 800901e:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8009022:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800902a:	d801      	bhi.n	8009030 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x38>
 800902c:	2302      	movs	r3, #2
 800902e:	e063      	b.n	80090f8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8009030:	edd7 7a00 	vldr	s15, [r7]
 8009034:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8009038:	eef4 7ac7 	vcmpe.f32	s15, s14
 800903c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009040:	d801      	bhi.n	8009046 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8009042:	2303      	movs	r3, #3
 8009044:	e058      	b.n	80090f8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8009046:	edd7 7a00 	vldr	s15, [r7]
 800904a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800904e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009056:	d801      	bhi.n	800905c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x64>
 8009058:	2304      	movs	r3, #4
 800905a:	e04d      	b.n	80090f8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800905c:	edd7 7a00 	vldr	s15, [r7]
 8009060:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8009120 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x128>
 8009064:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800906c:	d801      	bhi.n	8009072 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800906e:	2305      	movs	r3, #5
 8009070:	e042      	b.n	80090f8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8009072:	edd7 7a00 	vldr	s15, [r7]
 8009076:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8009124 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x12c>
 800907a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800907e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009082:	d801      	bhi.n	8009088 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x90>
 8009084:	2306      	movs	r3, #6
 8009086:	e037      	b.n	80090f8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8009088:	edd7 7a00 	vldr	s15, [r7]
 800908c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8009128 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x130>
 8009090:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009098:	d801      	bhi.n	800909e <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800909a:	2307      	movs	r3, #7
 800909c:	e02c      	b.n	80090f8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800909e:	edd7 7a00 	vldr	s15, [r7]
 80090a2:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800912c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x134>
 80090a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ae:	d801      	bhi.n	80090b4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80090b0:	2308      	movs	r3, #8
 80090b2:	e021      	b.n	80090f8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 80090b4:	edd7 7a00 	vldr	s15, [r7]
 80090b8:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8009130 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x138>
 80090bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090c4:	d801      	bhi.n	80090ca <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80090c6:	2309      	movs	r3, #9
 80090c8:	e016      	b.n	80090f8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 80090ca:	edd7 7a00 	vldr	s15, [r7]
 80090ce:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8009134 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x13c>
 80090d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090da:	d801      	bhi.n	80090e0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xe8>
 80090dc:	230a      	movs	r3, #10
 80090de:	e00b      	b.n	80090f8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 80090e0:	edd7 7a00 	vldr	s15, [r7]
 80090e4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8009138 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x140>
 80090e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090f0:	d801      	bhi.n	80090f6 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xfe>
 80090f2:	230b      	movs	r3, #11
 80090f4:	e000      	b.n	80090f8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 80090f6:	230c      	movs	r3, #12
  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 80090f8:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	3320      	adds	r3, #32
 80090fe:	7bfa      	ldrb	r2, [r7, #15]
 8009100:	4611      	mov	r1, r2
 8009102:	4618      	mov	r0, r3
 8009104:	f000 fa8a 	bl	800961c <lsm6dsv16x_xl_data_rate_set>
 8009108:	4603      	mov	r3, r0
 800910a:	2b00      	cmp	r3, #0
 800910c:	d002      	beq.n	8009114 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11c>
  {
    return LSM6DSV16X_ERROR;
 800910e:	f04f 33ff 	mov.w	r3, #4294967295
 8009112:	e000      	b.n	8009116 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11e>
  }

  return LSM6DSV16X_OK;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	42700000 	.word	0x42700000
 8009124:	42f00000 	.word	0x42f00000
 8009128:	43700000 	.word	0x43700000
 800912c:	43f00000 	.word	0x43f00000
 8009130:	44700000 	.word	0x44700000
 8009134:	44f00000 	.word	0x44f00000
 8009138:	45700000 	.word	0x45700000

0800913c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
                  : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8009148:	edd7 7a00 	vldr	s15, [r7]
 800914c:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 8009150:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009158:	d801      	bhi.n	800915e <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x22>
 800915a:	2301      	movs	r3, #1
 800915c:	e06e      	b.n	800923c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800915e:	edd7 7a00 	vldr	s15, [r7]
 8009162:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8009166:	eef4 7ac7 	vcmpe.f32	s15, s14
 800916a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800916e:	d801      	bhi.n	8009174 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x38>
 8009170:	2302      	movs	r3, #2
 8009172:	e063      	b.n	800923c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8009174:	edd7 7a00 	vldr	s15, [r7]
 8009178:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800917c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009184:	d801      	bhi.n	800918a <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8009186:	2303      	movs	r3, #3
 8009188:	e058      	b.n	800923c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800918a:	edd7 7a00 	vldr	s15, [r7]
 800918e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8009192:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800919a:	d801      	bhi.n	80091a0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x64>
 800919c:	2304      	movs	r3, #4
 800919e:	e04d      	b.n	800923c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 80091a0:	edd7 7a00 	vldr	s15, [r7]
 80091a4:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8009250 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x114>
 80091a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091b0:	d801      	bhi.n	80091b6 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80091b2:	2305      	movs	r3, #5
 80091b4:	e042      	b.n	800923c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 80091b6:	edd7 7a00 	vldr	s15, [r7]
 80091ba:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8009254 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x118>
 80091be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091c6:	d801      	bhi.n	80091cc <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x90>
 80091c8:	2306      	movs	r3, #6
 80091ca:	e037      	b.n	800923c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 80091cc:	edd7 7a00 	vldr	s15, [r7]
 80091d0:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8009258 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x11c>
 80091d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091dc:	d801      	bhi.n	80091e2 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80091de:	2307      	movs	r3, #7
 80091e0:	e02c      	b.n	800923c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 80091e2:	edd7 7a00 	vldr	s15, [r7]
 80091e6:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800925c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x120>
 80091ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091f2:	d801      	bhi.n	80091f8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80091f4:	2308      	movs	r3, #8
 80091f6:	e021      	b.n	800923c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 80091f8:	edd7 7a00 	vldr	s15, [r7]
 80091fc:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8009260 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x124>
 8009200:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009208:	d801      	bhi.n	800920e <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800920a:	2309      	movs	r3, #9
 800920c:	e016      	b.n	800923c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800920e:	edd7 7a00 	vldr	s15, [r7]
 8009212:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8009264 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x128>
 8009216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800921a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800921e:	d801      	bhi.n	8009224 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8009220:	230a      	movs	r3, #10
 8009222:	e00b      	b.n	800923c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8009224:	edd7 7a00 	vldr	s15, [r7]
 8009228:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8009268 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x12c>
 800922c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009234:	d801      	bhi.n	800923a <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xfe>
 8009236:	230b      	movs	r3, #11
 8009238:	e000      	b.n	800923c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800923a:	230c      	movs	r3, #12
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                  : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                  : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                  :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr
 8009250:	42700000 	.word	0x42700000
 8009254:	42f00000 	.word	0x42f00000
 8009258:	43700000 	.word	0x43700000
 800925c:	43f00000 	.word	0x43f00000
 8009260:	44700000 	.word	0x44700000
 8009264:	44f00000 	.word	0x44f00000
 8009268:	45700000 	.word	0x45700000

0800926c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
            : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 8009278:	edd7 7a00 	vldr	s15, [r7]
 800927c:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8009280:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009288:	d801      	bhi.n	800928e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800928a:	2302      	movs	r3, #2
 800928c:	e063      	b.n	8009356 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800928e:	edd7 7a00 	vldr	s15, [r7]
 8009292:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8009296:	eef4 7ac7 	vcmpe.f32	s15, s14
 800929a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800929e:	d801      	bhi.n	80092a4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80092a0:	2303      	movs	r3, #3
 80092a2:	e058      	b.n	8009356 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80092a4:	edd7 7a00 	vldr	s15, [r7]
 80092a8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80092ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092b4:	d801      	bhi.n	80092ba <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80092b6:	2304      	movs	r3, #4
 80092b8:	e04d      	b.n	8009356 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80092ba:	edd7 7a00 	vldr	s15, [r7]
 80092be:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800937c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80092c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092ca:	d801      	bhi.n	80092d0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80092cc:	2305      	movs	r3, #5
 80092ce:	e042      	b.n	8009356 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80092d0:	edd7 7a00 	vldr	s15, [r7]
 80092d4:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8009380 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80092d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092e0:	d801      	bhi.n	80092e6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80092e2:	2306      	movs	r3, #6
 80092e4:	e037      	b.n	8009356 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80092e6:	edd7 7a00 	vldr	s15, [r7]
 80092ea:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8009384 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x118>
 80092ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092f6:	d801      	bhi.n	80092fc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80092f8:	2307      	movs	r3, #7
 80092fa:	e02c      	b.n	8009356 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80092fc:	edd7 7a00 	vldr	s15, [r7]
 8009300:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8009388 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x11c>
 8009304:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800930c:	d801      	bhi.n	8009312 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800930e:	2308      	movs	r3, #8
 8009310:	e021      	b.n	8009356 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8009312:	edd7 7a00 	vldr	s15, [r7]
 8009316:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800938c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x120>
 800931a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800931e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009322:	d801      	bhi.n	8009328 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8009324:	2309      	movs	r3, #9
 8009326:	e016      	b.n	8009356 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8009328:	edd7 7a00 	vldr	s15, [r7]
 800932c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8009390 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x124>
 8009330:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009338:	d801      	bhi.n	800933e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800933a:	230a      	movs	r3, #10
 800933c:	e00b      	b.n	8009356 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800933e:	edd7 7a00 	vldr	s15, [r7]
 8009342:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8009394 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x128>
 8009346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800934a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800934e:	d801      	bhi.n	8009354 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xe8>
 8009350:	230b      	movs	r3, #11
 8009352:	e000      	b.n	8009356 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8009354:	230c      	movs	r3, #12
  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8009356:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	3320      	adds	r3, #32
 800935c:	7bfa      	ldrb	r2, [r7, #15]
 800935e:	4611      	mov	r1, r2
 8009360:	4618      	mov	r0, r3
 8009362:	f000 fabd 	bl	80098e0 <lsm6dsv16x_gy_data_rate_set>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d002      	beq.n	8009372 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSV16X_ERROR;
 800936c:	f04f 33ff 	mov.w	r3, #4294967295
 8009370:	e000      	b.n	8009374 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSV16X_OK;
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	42700000 	.word	0x42700000
 8009380:	42f00000 	.word	0x42f00000
 8009384:	43700000 	.word	0x43700000
 8009388:	43f00000 	.word	0x43f00000
 800938c:	44700000 	.word	0x44700000
 8009390:	44f00000 	.word	0x44f00000
 8009394:	45700000 	.word	0x45700000

08009398 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
                   : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 80093a4:	edd7 7a00 	vldr	s15, [r7]
 80093a8:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 80093ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093b4:	d801      	bhi.n	80093ba <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80093b6:	2302      	movs	r3, #2
 80093b8:	e063      	b.n	8009482 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80093ba:	edd7 7a00 	vldr	s15, [r7]
 80093be:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80093c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093ca:	d801      	bhi.n	80093d0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80093cc:	2303      	movs	r3, #3
 80093ce:	e058      	b.n	8009482 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80093d0:	edd7 7a00 	vldr	s15, [r7]
 80093d4:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80093d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093e0:	d801      	bhi.n	80093e6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80093e2:	2304      	movs	r3, #4
 80093e4:	e04d      	b.n	8009482 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80093e6:	edd7 7a00 	vldr	s15, [r7]
 80093ea:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8009498 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80093ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093f6:	d801      	bhi.n	80093fc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80093f8:	2305      	movs	r3, #5
 80093fa:	e042      	b.n	8009482 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80093fc:	edd7 7a00 	vldr	s15, [r7]
 8009400:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800949c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x104>
 8009404:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800940c:	d801      	bhi.n	8009412 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800940e:	2306      	movs	r3, #6
 8009410:	e037      	b.n	8009482 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009412:	edd7 7a00 	vldr	s15, [r7]
 8009416:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80094a0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x108>
 800941a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800941e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009422:	d801      	bhi.n	8009428 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8009424:	2307      	movs	r3, #7
 8009426:	e02c      	b.n	8009482 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009428:	edd7 7a00 	vldr	s15, [r7]
 800942c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80094a4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x10c>
 8009430:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009438:	d801      	bhi.n	800943e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800943a:	2308      	movs	r3, #8
 800943c:	e021      	b.n	8009482 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800943e:	edd7 7a00 	vldr	s15, [r7]
 8009442:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80094a8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x110>
 8009446:	eef4 7ac7 	vcmpe.f32	s15, s14
 800944a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800944e:	d801      	bhi.n	8009454 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8009450:	2309      	movs	r3, #9
 8009452:	e016      	b.n	8009482 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009454:	edd7 7a00 	vldr	s15, [r7]
 8009458:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80094ac <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x114>
 800945c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009464:	d801      	bhi.n	800946a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8009466:	230a      	movs	r3, #10
 8009468:	e00b      	b.n	8009482 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800946a:	edd7 7a00 	vldr	s15, [r7]
 800946e:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80094b0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x118>
 8009472:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800947a:	d801      	bhi.n	8009480 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 800947c:	230b      	movs	r3, #11
 800947e:	e000      	b.n	8009482 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009480:	230c      	movs	r3, #12
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                   : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                   : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                   :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	370c      	adds	r7, #12
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	42700000 	.word	0x42700000
 800949c:	42f00000 	.word	0x42f00000
 80094a0:	43700000 	.word	0x43700000
 80094a4:	43f00000 	.word	0x43f00000
 80094a8:	44700000 	.word	0x44700000
 80094ac:	44f00000 	.word	0x44f00000
 80094b0:	45700000 	.word	0x45700000

080094b4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80094b4:	b590      	push	{r4, r7, lr}
 80094b6:	b087      	sub	sp, #28
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	607a      	str	r2, [r7, #4]
 80094be:	461a      	mov	r2, r3
 80094c0:	460b      	mov	r3, r1
 80094c2:	72fb      	strb	r3, [r7, #11]
 80094c4:	4613      	mov	r3, r2
 80094c6:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	695c      	ldr	r4, [r3, #20]
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	7b1b      	ldrb	r3, [r3, #12]
 80094d4:	4618      	mov	r0, r3
 80094d6:	7afb      	ldrb	r3, [r7, #11]
 80094d8:	b299      	uxth	r1, r3
 80094da:	893b      	ldrh	r3, [r7, #8]
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	47a0      	blx	r4
 80094e0:	4603      	mov	r3, r0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	371c      	adds	r7, #28
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd90      	pop	{r4, r7, pc}

080094ea <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80094ea:	b590      	push	{r4, r7, lr}
 80094ec:	b087      	sub	sp, #28
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	60f8      	str	r0, [r7, #12]
 80094f2:	607a      	str	r2, [r7, #4]
 80094f4:	461a      	mov	r2, r3
 80094f6:	460b      	mov	r3, r1
 80094f8:	72fb      	strb	r3, [r7, #11]
 80094fa:	4613      	mov	r3, r2
 80094fc:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	691c      	ldr	r4, [r3, #16]
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	7b1b      	ldrb	r3, [r3, #12]
 800950a:	4618      	mov	r0, r3
 800950c:	7afb      	ldrb	r3, [r7, #11]
 800950e:	b299      	uxth	r1, r3
 8009510:	893b      	ldrh	r3, [r7, #8]
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	47a0      	blx	r4
 8009516:	4603      	mov	r3, r0
}
 8009518:	4618      	mov	r0, r3
 800951a:	371c      	adds	r7, #28
 800951c:	46bd      	mov	sp, r7
 800951e:	bd90      	pop	{r4, r7, pc}

08009520 <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8009520:	b590      	push	{r4, r7, lr}
 8009522:	b087      	sub	sp, #28
 8009524:	af00      	add	r7, sp, #0
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	607a      	str	r2, [r7, #4]
 800952a:	461a      	mov	r2, r3
 800952c:	460b      	mov	r3, r1
 800952e:	72fb      	strb	r3, [r7, #11]
 8009530:	4613      	mov	r3, r2
 8009532:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d102      	bne.n	8009540 <lsm6dsv16x_read_reg+0x20>
  {
    return -1;
 800953a:	f04f 33ff 	mov.w	r3, #4294967295
 800953e:	e009      	b.n	8009554 <lsm6dsv16x_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	685c      	ldr	r4, [r3, #4]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	68d8      	ldr	r0, [r3, #12]
 8009548:	893b      	ldrh	r3, [r7, #8]
 800954a:	7af9      	ldrb	r1, [r7, #11]
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	47a0      	blx	r4
 8009550:	6178      	str	r0, [r7, #20]

  return ret;
 8009552:	697b      	ldr	r3, [r7, #20]
}
 8009554:	4618      	mov	r0, r3
 8009556:	371c      	adds	r7, #28
 8009558:	46bd      	mov	sp, r7
 800955a:	bd90      	pop	{r4, r7, pc}

0800955c <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 800955c:	b590      	push	{r4, r7, lr}
 800955e:	b087      	sub	sp, #28
 8009560:	af00      	add	r7, sp, #0
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	607a      	str	r2, [r7, #4]
 8009566:	461a      	mov	r2, r3
 8009568:	460b      	mov	r3, r1
 800956a:	72fb      	strb	r3, [r7, #11]
 800956c:	4613      	mov	r3, r2
 800956e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d102      	bne.n	800957c <lsm6dsv16x_write_reg+0x20>
  {
    return -1;
 8009576:	f04f 33ff 	mov.w	r3, #4294967295
 800957a:	e009      	b.n	8009590 <lsm6dsv16x_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681c      	ldr	r4, [r3, #0]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	68d8      	ldr	r0, [r3, #12]
 8009584:	893b      	ldrh	r3, [r7, #8]
 8009586:	7af9      	ldrb	r1, [r7, #11]
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	47a0      	blx	r4
 800958c:	6178      	str	r0, [r7, #20]

  return ret;
 800958e:	697b      	ldr	r3, [r7, #20]
}
 8009590:	4618      	mov	r0, r3
 8009592:	371c      	adds	r7, #28
 8009594:	46bd      	mov	sp, r7
 8009596:	bd90      	pop	{r4, r7, pc}

08009598 <lsm6dsv16x_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_mem_bank_set(const stmdev_ctx_t *ctx, lsm6dsv16x_mem_bank_t val)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	460b      	mov	r3, r1
 80095a2:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80095a4:	f107 0208 	add.w	r2, r7, #8
 80095a8:	2301      	movs	r3, #1
 80095aa:	2101      	movs	r1, #1
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f7ff ffb7 	bl	8009520 <lsm6dsv16x_read_reg>
 80095b2:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d001      	beq.n	80095be <lsm6dsv16x_mem_bank_set+0x26>
  {
    return ret;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	e019      	b.n	80095f2 <lsm6dsv16x_mem_bank_set+0x5a>
  }

  func_cfg_access.shub_reg_access = ((uint8_t)val & 0x02U) >> 1;
 80095be:	78fb      	ldrb	r3, [r7, #3]
 80095c0:	085b      	lsrs	r3, r3, #1
 80095c2:	f003 0301 	and.w	r3, r3, #1
 80095c6:	b2da      	uxtb	r2, r3
 80095c8:	7a3b      	ldrb	r3, [r7, #8]
 80095ca:	f362 1386 	bfi	r3, r2, #6, #1
 80095ce:	723b      	strb	r3, [r7, #8]
  func_cfg_access.emb_func_reg_access = (uint8_t)val & 0x01U;
 80095d0:	78fb      	ldrb	r3, [r7, #3]
 80095d2:	f003 0301 	and.w	r3, r3, #1
 80095d6:	b2da      	uxtb	r2, r3
 80095d8:	7a3b      	ldrb	r3, [r7, #8]
 80095da:	f362 13c7 	bfi	r3, r2, #7, #1
 80095de:	723b      	strb	r3, [r7, #8]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80095e0:	f107 0208 	add.w	r2, r7, #8
 80095e4:	2301      	movs	r3, #1
 80095e6:	2101      	movs	r1, #1
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f7ff ffb7 	bl	800955c <lsm6dsv16x_write_reg>
 80095ee:	60f8      	str	r0, [r7, #12]

  return ret;
 80095f0:	68fb      	ldr	r3, [r7, #12]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b084      	sub	sp, #16
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
 8009602:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 8009604:	2301      	movs	r3, #1
 8009606:	683a      	ldr	r2, [r7, #0]
 8009608:	210f      	movs	r1, #15
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f7ff ff88 	bl	8009520 <lsm6dsv16x_read_reg>
 8009610:	60f8      	str	r0, [r7, #12]

  return ret;
 8009612:	68fb      	ldr	r3, [r7, #12]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b086      	sub	sp, #24
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	460b      	mov	r3, r1
 8009626:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8009628:	f107 0210 	add.w	r2, r7, #16
 800962c:	2301      	movs	r3, #1
 800962e:	2110      	movs	r1, #16
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f7ff ff75 	bl	8009520 <lsm6dsv16x_read_reg>
 8009636:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d001      	beq.n	8009642 <lsm6dsv16x_xl_data_rate_set+0x26>
  {
    return ret;
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	e039      	b.n	80096b6 <lsm6dsv16x_xl_data_rate_set+0x9a>
  }

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 8009642:	78fb      	ldrb	r3, [r7, #3]
 8009644:	f003 030f 	and.w	r3, r3, #15
 8009648:	b2da      	uxtb	r2, r3
 800964a:	7c3b      	ldrb	r3, [r7, #16]
 800964c:	f362 0303 	bfi	r3, r2, #0, #4
 8009650:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8009652:	f107 0210 	add.w	r2, r7, #16
 8009656:	2301      	movs	r3, #1
 8009658:	2110      	movs	r1, #16
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f7ff ff7e 	bl	800955c <lsm6dsv16x_write_reg>
 8009660:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d001      	beq.n	800966c <lsm6dsv16x_xl_data_rate_set+0x50>
  {
    return ret;
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	e024      	b.n	80096b6 <lsm6dsv16x_xl_data_rate_set+0x9a>
  }

  sel = ((uint8_t)val >> 4) & 0xFU;
 800966c:	78fb      	ldrb	r3, [r7, #3]
 800966e:	091b      	lsrs	r3, r3, #4
 8009670:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8009672:	7cfb      	ldrb	r3, [r7, #19]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d01d      	beq.n	80096b4 <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8009678:	f107 020c 	add.w	r2, r7, #12
 800967c:	2301      	movs	r3, #1
 800967e:	2162      	movs	r1, #98	@ 0x62
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f7ff ff4d 	bl	8009520 <lsm6dsv16x_read_reg>
 8009686:	4602      	mov	r2, r0
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	4413      	add	r3, r2
 800968c:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 800968e:	7cfb      	ldrb	r3, [r7, #19]
 8009690:	f003 0303 	and.w	r3, r3, #3
 8009694:	b2da      	uxtb	r2, r3
 8009696:	7b3b      	ldrb	r3, [r7, #12]
 8009698:	f362 0301 	bfi	r3, r2, #0, #2
 800969c:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800969e:	f107 020c 	add.w	r2, r7, #12
 80096a2:	2301      	movs	r3, #1
 80096a4:	2162      	movs	r1, #98	@ 0x62
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f7ff ff58 	bl	800955c <lsm6dsv16x_write_reg>
 80096ac:	4602      	mov	r2, r0
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	4413      	add	r3, r2
 80096b2:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80096b4:	697b      	ldr	r3, [r7, #20]
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3718      	adds	r7, #24
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
	...

080096c0 <lsm6dsv16x_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_get(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80096ca:	f107 0210 	add.w	r2, r7, #16
 80096ce:	2301      	movs	r3, #1
 80096d0:	2110      	movs	r1, #16
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f7ff ff24 	bl	8009520 <lsm6dsv16x_read_reg>
 80096d8:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80096da:	f107 020c 	add.w	r2, r7, #12
 80096de:	2301      	movs	r3, #1
 80096e0:	2162      	movs	r1, #98	@ 0x62
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f7ff ff1c 	bl	8009520 <lsm6dsv16x_read_reg>
 80096e8:	4602      	mov	r2, r0
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	4413      	add	r3, r2
 80096ee:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d001      	beq.n	80096fa <lsm6dsv16x_xl_data_rate_get+0x3a>
  {
    return ret;
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	e0ed      	b.n	80098d6 <lsm6dsv16x_xl_data_rate_get+0x216>
  }

  sel = haodr.haodr_sel;
 80096fa:	7b3b      	ldrb	r3, [r7, #12]
 80096fc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009700:	b2db      	uxtb	r3, r3
 8009702:	74fb      	strb	r3, [r7, #19]

  switch (ctrl1.odr_xl)
 8009704:	7c3b      	ldrb	r3, [r7, #16]
 8009706:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800970a:	b2db      	uxtb	r3, r3
 800970c:	2b0c      	cmp	r3, #12
 800970e:	f200 80dd 	bhi.w	80098cc <lsm6dsv16x_xl_data_rate_get+0x20c>
 8009712:	a201      	add	r2, pc, #4	@ (adr r2, 8009718 <lsm6dsv16x_xl_data_rate_get+0x58>)
 8009714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009718:	0800974d 	.word	0x0800974d
 800971c:	08009755 	.word	0x08009755
 8009720:	0800975d 	.word	0x0800975d
 8009724:	08009765 	.word	0x08009765
 8009728:	08009789 	.word	0x08009789
 800972c:	080097ad 	.word	0x080097ad
 8009730:	080097d1 	.word	0x080097d1
 8009734:	080097f5 	.word	0x080097f5
 8009738:	08009819 	.word	0x08009819
 800973c:	0800983d 	.word	0x0800983d
 8009740:	08009861 	.word	0x08009861
 8009744:	08009885 	.word	0x08009885
 8009748:	080098a9 	.word	0x080098a9
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	2200      	movs	r2, #0
 8009750:	701a      	strb	r2, [r3, #0]
      break;
 8009752:	e0bf      	b.n	80098d4 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	2201      	movs	r2, #1
 8009758:	701a      	strb	r2, [r3, #0]
      break;
 800975a:	e0bb      	b.n	80098d4 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	2202      	movs	r2, #2
 8009760:	701a      	strb	r2, [r3, #0]
      break;
 8009762:	e0b7      	b.n	80098d4 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel)
 8009764:	7cfb      	ldrb	r3, [r7, #19]
 8009766:	2b01      	cmp	r3, #1
 8009768:	d005      	beq.n	8009776 <lsm6dsv16x_xl_data_rate_get+0xb6>
 800976a:	2b02      	cmp	r3, #2
 800976c:	d007      	beq.n	800977e <lsm6dsv16x_xl_data_rate_get+0xbe>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_15Hz;
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	2203      	movs	r2, #3
 8009772:	701a      	strb	r2, [r3, #0]
          break;
 8009774:	e007      	b.n	8009786 <lsm6dsv16x_xl_data_rate_get+0xc6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	2213      	movs	r2, #19
 800977a:	701a      	strb	r2, [r3, #0]
          break;
 800977c:	e003      	b.n	8009786 <lsm6dsv16x_xl_data_rate_get+0xc6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	2223      	movs	r2, #35	@ 0x23
 8009782:	701a      	strb	r2, [r3, #0]
          break;
 8009784:	bf00      	nop
      }
      break;
 8009786:	e0a5      	b.n	80098d4 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel)
 8009788:	7cfb      	ldrb	r3, [r7, #19]
 800978a:	2b01      	cmp	r3, #1
 800978c:	d005      	beq.n	800979a <lsm6dsv16x_xl_data_rate_get+0xda>
 800978e:	2b02      	cmp	r3, #2
 8009790:	d007      	beq.n	80097a2 <lsm6dsv16x_xl_data_rate_get+0xe2>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_30Hz;
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	2204      	movs	r2, #4
 8009796:	701a      	strb	r2, [r3, #0]
          break;
 8009798:	e007      	b.n	80097aa <lsm6dsv16x_xl_data_rate_get+0xea>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	2214      	movs	r2, #20
 800979e:	701a      	strb	r2, [r3, #0]
          break;
 80097a0:	e003      	b.n	80097aa <lsm6dsv16x_xl_data_rate_get+0xea>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	2224      	movs	r2, #36	@ 0x24
 80097a6:	701a      	strb	r2, [r3, #0]
          break;
 80097a8:	bf00      	nop
      }
      break;
 80097aa:	e093      	b.n	80098d4 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel)
 80097ac:	7cfb      	ldrb	r3, [r7, #19]
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d005      	beq.n	80097be <lsm6dsv16x_xl_data_rate_get+0xfe>
 80097b2:	2b02      	cmp	r3, #2
 80097b4:	d007      	beq.n	80097c6 <lsm6dsv16x_xl_data_rate_get+0x106>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_60Hz;
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	2205      	movs	r2, #5
 80097ba:	701a      	strb	r2, [r3, #0]
          break;
 80097bc:	e007      	b.n	80097ce <lsm6dsv16x_xl_data_rate_get+0x10e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	2215      	movs	r2, #21
 80097c2:	701a      	strb	r2, [r3, #0]
          break;
 80097c4:	e003      	b.n	80097ce <lsm6dsv16x_xl_data_rate_get+0x10e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	2225      	movs	r2, #37	@ 0x25
 80097ca:	701a      	strb	r2, [r3, #0]
          break;
 80097cc:	bf00      	nop
      }
      break;
 80097ce:	e081      	b.n	80098d4 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel)
 80097d0:	7cfb      	ldrb	r3, [r7, #19]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d005      	beq.n	80097e2 <lsm6dsv16x_xl_data_rate_get+0x122>
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	d007      	beq.n	80097ea <lsm6dsv16x_xl_data_rate_get+0x12a>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_120Hz;
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	2206      	movs	r2, #6
 80097de:	701a      	strb	r2, [r3, #0]
          break;
 80097e0:	e007      	b.n	80097f2 <lsm6dsv16x_xl_data_rate_get+0x132>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	2216      	movs	r2, #22
 80097e6:	701a      	strb	r2, [r3, #0]
          break;
 80097e8:	e003      	b.n	80097f2 <lsm6dsv16x_xl_data_rate_get+0x132>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	2226      	movs	r2, #38	@ 0x26
 80097ee:	701a      	strb	r2, [r3, #0]
          break;
 80097f0:	bf00      	nop
      }
      break;
 80097f2:	e06f      	b.n	80098d4 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel)
 80097f4:	7cfb      	ldrb	r3, [r7, #19]
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d005      	beq.n	8009806 <lsm6dsv16x_xl_data_rate_get+0x146>
 80097fa:	2b02      	cmp	r3, #2
 80097fc:	d007      	beq.n	800980e <lsm6dsv16x_xl_data_rate_get+0x14e>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_240Hz;
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	2207      	movs	r2, #7
 8009802:	701a      	strb	r2, [r3, #0]
          break;
 8009804:	e007      	b.n	8009816 <lsm6dsv16x_xl_data_rate_get+0x156>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	2217      	movs	r2, #23
 800980a:	701a      	strb	r2, [r3, #0]
          break;
 800980c:	e003      	b.n	8009816 <lsm6dsv16x_xl_data_rate_get+0x156>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	2227      	movs	r2, #39	@ 0x27
 8009812:	701a      	strb	r2, [r3, #0]
          break;
 8009814:	bf00      	nop
      }
      break;
 8009816:	e05d      	b.n	80098d4 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel)
 8009818:	7cfb      	ldrb	r3, [r7, #19]
 800981a:	2b01      	cmp	r3, #1
 800981c:	d005      	beq.n	800982a <lsm6dsv16x_xl_data_rate_get+0x16a>
 800981e:	2b02      	cmp	r3, #2
 8009820:	d007      	beq.n	8009832 <lsm6dsv16x_xl_data_rate_get+0x172>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_480Hz;
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	2208      	movs	r2, #8
 8009826:	701a      	strb	r2, [r3, #0]
          break;
 8009828:	e007      	b.n	800983a <lsm6dsv16x_xl_data_rate_get+0x17a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	2218      	movs	r2, #24
 800982e:	701a      	strb	r2, [r3, #0]
          break;
 8009830:	e003      	b.n	800983a <lsm6dsv16x_xl_data_rate_get+0x17a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	2228      	movs	r2, #40	@ 0x28
 8009836:	701a      	strb	r2, [r3, #0]
          break;
 8009838:	bf00      	nop
      }
      break;
 800983a:	e04b      	b.n	80098d4 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel)
 800983c:	7cfb      	ldrb	r3, [r7, #19]
 800983e:	2b01      	cmp	r3, #1
 8009840:	d005      	beq.n	800984e <lsm6dsv16x_xl_data_rate_get+0x18e>
 8009842:	2b02      	cmp	r3, #2
 8009844:	d007      	beq.n	8009856 <lsm6dsv16x_xl_data_rate_get+0x196>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_960Hz;
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	2209      	movs	r2, #9
 800984a:	701a      	strb	r2, [r3, #0]
          break;
 800984c:	e007      	b.n	800985e <lsm6dsv16x_xl_data_rate_get+0x19e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	2219      	movs	r2, #25
 8009852:	701a      	strb	r2, [r3, #0]
          break;
 8009854:	e003      	b.n	800985e <lsm6dsv16x_xl_data_rate_get+0x19e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	2229      	movs	r2, #41	@ 0x29
 800985a:	701a      	strb	r2, [r3, #0]
          break;
 800985c:	bf00      	nop
      }
      break;
 800985e:	e039      	b.n	80098d4 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel)
 8009860:	7cfb      	ldrb	r3, [r7, #19]
 8009862:	2b01      	cmp	r3, #1
 8009864:	d005      	beq.n	8009872 <lsm6dsv16x_xl_data_rate_get+0x1b2>
 8009866:	2b02      	cmp	r3, #2
 8009868:	d007      	beq.n	800987a <lsm6dsv16x_xl_data_rate_get+0x1ba>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_1920Hz;
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	220a      	movs	r2, #10
 800986e:	701a      	strb	r2, [r3, #0]
          break;
 8009870:	e007      	b.n	8009882 <lsm6dsv16x_xl_data_rate_get+0x1c2>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	221a      	movs	r2, #26
 8009876:	701a      	strb	r2, [r3, #0]
          break;
 8009878:	e003      	b.n	8009882 <lsm6dsv16x_xl_data_rate_get+0x1c2>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	222a      	movs	r2, #42	@ 0x2a
 800987e:	701a      	strb	r2, [r3, #0]
          break;
 8009880:	bf00      	nop
      }
      break;
 8009882:	e027      	b.n	80098d4 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel)
 8009884:	7cfb      	ldrb	r3, [r7, #19]
 8009886:	2b01      	cmp	r3, #1
 8009888:	d005      	beq.n	8009896 <lsm6dsv16x_xl_data_rate_get+0x1d6>
 800988a:	2b02      	cmp	r3, #2
 800988c:	d007      	beq.n	800989e <lsm6dsv16x_xl_data_rate_get+0x1de>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_3840Hz;
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	220b      	movs	r2, #11
 8009892:	701a      	strb	r2, [r3, #0]
          break;
 8009894:	e007      	b.n	80098a6 <lsm6dsv16x_xl_data_rate_get+0x1e6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	221b      	movs	r2, #27
 800989a:	701a      	strb	r2, [r3, #0]
          break;
 800989c:	e003      	b.n	80098a6 <lsm6dsv16x_xl_data_rate_get+0x1e6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	222b      	movs	r2, #43	@ 0x2b
 80098a2:	701a      	strb	r2, [r3, #0]
          break;
 80098a4:	bf00      	nop
      }
      break;
 80098a6:	e015      	b.n	80098d4 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel)
 80098a8:	7cfb      	ldrb	r3, [r7, #19]
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d005      	beq.n	80098ba <lsm6dsv16x_xl_data_rate_get+0x1fa>
 80098ae:	2b02      	cmp	r3, #2
 80098b0:	d007      	beq.n	80098c2 <lsm6dsv16x_xl_data_rate_get+0x202>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_7680Hz;
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	220c      	movs	r2, #12
 80098b6:	701a      	strb	r2, [r3, #0]
          break;
 80098b8:	e007      	b.n	80098ca <lsm6dsv16x_xl_data_rate_get+0x20a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	221c      	movs	r2, #28
 80098be:	701a      	strb	r2, [r3, #0]
          break;
 80098c0:	e003      	b.n	80098ca <lsm6dsv16x_xl_data_rate_get+0x20a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	222c      	movs	r2, #44	@ 0x2c
 80098c6:	701a      	strb	r2, [r3, #0]
          break;
 80098c8:	bf00      	nop
      }
      break;
 80098ca:	e003      	b.n	80098d4 <lsm6dsv16x_xl_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	2200      	movs	r2, #0
 80098d0:	701a      	strb	r2, [r3, #0]
      break;
 80098d2:	bf00      	nop
  }

  return ret;
 80098d4:	697b      	ldr	r3, [r7, #20]
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3718      	adds	r7, #24
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop

080098e0 <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	460b      	mov	r3, r1
 80098ea:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 80098ec:	f107 0210 	add.w	r2, r7, #16
 80098f0:	2301      	movs	r3, #1
 80098f2:	2111      	movs	r1, #17
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f7ff fe13 	bl	8009520 <lsm6dsv16x_read_reg>
 80098fa:	6178      	str	r0, [r7, #20]

  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 80098fc:	78fb      	ldrb	r3, [r7, #3]
 80098fe:	f003 030f 	and.w	r3, r3, #15
 8009902:	b2da      	uxtb	r2, r3
 8009904:	7c3b      	ldrb	r3, [r7, #16]
 8009906:	f362 0303 	bfi	r3, r2, #0, #4
 800990a:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 800990c:	f107 0210 	add.w	r2, r7, #16
 8009910:	2301      	movs	r3, #1
 8009912:	2111      	movs	r1, #17
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f7ff fe21 	bl	800955c <lsm6dsv16x_write_reg>
 800991a:	4602      	mov	r2, r0
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	4413      	add	r3, r2
 8009920:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d001      	beq.n	800992c <lsm6dsv16x_gy_data_rate_set+0x4c>
  {
    return ret;
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	e024      	b.n	8009976 <lsm6dsv16x_gy_data_rate_set+0x96>
  }

  sel = ((uint8_t)val >> 4) & 0xFU;
 800992c:	78fb      	ldrb	r3, [r7, #3]
 800992e:	091b      	lsrs	r3, r3, #4
 8009930:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8009932:	7cfb      	ldrb	r3, [r7, #19]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d01d      	beq.n	8009974 <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8009938:	f107 020c 	add.w	r2, r7, #12
 800993c:	2301      	movs	r3, #1
 800993e:	2162      	movs	r1, #98	@ 0x62
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f7ff fded 	bl	8009520 <lsm6dsv16x_read_reg>
 8009946:	4602      	mov	r2, r0
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	4413      	add	r3, r2
 800994c:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 800994e:	7cfb      	ldrb	r3, [r7, #19]
 8009950:	f003 0303 	and.w	r3, r3, #3
 8009954:	b2da      	uxtb	r2, r3
 8009956:	7b3b      	ldrb	r3, [r7, #12]
 8009958:	f362 0301 	bfi	r3, r2, #0, #2
 800995c:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800995e:	f107 020c 	add.w	r2, r7, #12
 8009962:	2301      	movs	r3, #1
 8009964:	2162      	movs	r1, #98	@ 0x62
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f7ff fdf8 	bl	800955c <lsm6dsv16x_write_reg>
 800996c:	4602      	mov	r2, r0
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	4413      	add	r3, r2
 8009972:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8009974:	697b      	ldr	r3, [r7, #20]
}
 8009976:	4618      	mov	r0, r3
 8009978:	3718      	adds	r7, #24
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
	...

08009980 <lsm6dsv16x_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_get(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b086      	sub	sp, #24
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 800998a:	f107 0210 	add.w	r2, r7, #16
 800998e:	2301      	movs	r3, #1
 8009990:	2111      	movs	r1, #17
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f7ff fdc4 	bl	8009520 <lsm6dsv16x_read_reg>
 8009998:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800999a:	f107 020c 	add.w	r2, r7, #12
 800999e:	2301      	movs	r3, #1
 80099a0:	2162      	movs	r1, #98	@ 0x62
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f7ff fdbc 	bl	8009520 <lsm6dsv16x_read_reg>
 80099a8:	4602      	mov	r2, r0
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	4413      	add	r3, r2
 80099ae:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d001      	beq.n	80099ba <lsm6dsv16x_gy_data_rate_get+0x3a>
  {
    return ret;
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	e0ed      	b.n	8009b96 <lsm6dsv16x_gy_data_rate_get+0x216>
  }

  sel = haodr.haodr_sel;
 80099ba:	7b3b      	ldrb	r3, [r7, #12]
 80099bc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	74fb      	strb	r3, [r7, #19]

  switch (ctrl2.odr_g)
 80099c4:	7c3b      	ldrb	r3, [r7, #16]
 80099c6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	2b0c      	cmp	r3, #12
 80099ce:	f200 80dd 	bhi.w	8009b8c <lsm6dsv16x_gy_data_rate_get+0x20c>
 80099d2:	a201      	add	r2, pc, #4	@ (adr r2, 80099d8 <lsm6dsv16x_gy_data_rate_get+0x58>)
 80099d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d8:	08009a0d 	.word	0x08009a0d
 80099dc:	08009a15 	.word	0x08009a15
 80099e0:	08009a1d 	.word	0x08009a1d
 80099e4:	08009a25 	.word	0x08009a25
 80099e8:	08009a49 	.word	0x08009a49
 80099ec:	08009a6d 	.word	0x08009a6d
 80099f0:	08009a91 	.word	0x08009a91
 80099f4:	08009ab5 	.word	0x08009ab5
 80099f8:	08009ad9 	.word	0x08009ad9
 80099fc:	08009afd 	.word	0x08009afd
 8009a00:	08009b21 	.word	0x08009b21
 8009a04:	08009b45 	.word	0x08009b45
 8009a08:	08009b69 	.word	0x08009b69
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	701a      	strb	r2, [r3, #0]
      break;
 8009a12:	e0bf      	b.n	8009b94 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	2201      	movs	r2, #1
 8009a18:	701a      	strb	r2, [r3, #0]
      break;
 8009a1a:	e0bb      	b.n	8009b94 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	2202      	movs	r2, #2
 8009a20:	701a      	strb	r2, [r3, #0]
      break;
 8009a22:	e0b7      	b.n	8009b94 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel)
 8009a24:	7cfb      	ldrb	r3, [r7, #19]
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d005      	beq.n	8009a36 <lsm6dsv16x_gy_data_rate_get+0xb6>
 8009a2a:	2b02      	cmp	r3, #2
 8009a2c:	d007      	beq.n	8009a3e <lsm6dsv16x_gy_data_rate_get+0xbe>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_15Hz;
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	2203      	movs	r2, #3
 8009a32:	701a      	strb	r2, [r3, #0]
          break;
 8009a34:	e007      	b.n	8009a46 <lsm6dsv16x_gy_data_rate_get+0xc6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	2213      	movs	r2, #19
 8009a3a:	701a      	strb	r2, [r3, #0]
          break;
 8009a3c:	e003      	b.n	8009a46 <lsm6dsv16x_gy_data_rate_get+0xc6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	2223      	movs	r2, #35	@ 0x23
 8009a42:	701a      	strb	r2, [r3, #0]
          break;
 8009a44:	bf00      	nop
      }
      break;
 8009a46:	e0a5      	b.n	8009b94 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel)
 8009a48:	7cfb      	ldrb	r3, [r7, #19]
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d005      	beq.n	8009a5a <lsm6dsv16x_gy_data_rate_get+0xda>
 8009a4e:	2b02      	cmp	r3, #2
 8009a50:	d007      	beq.n	8009a62 <lsm6dsv16x_gy_data_rate_get+0xe2>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_30Hz;
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	2204      	movs	r2, #4
 8009a56:	701a      	strb	r2, [r3, #0]
          break;
 8009a58:	e007      	b.n	8009a6a <lsm6dsv16x_gy_data_rate_get+0xea>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	2214      	movs	r2, #20
 8009a5e:	701a      	strb	r2, [r3, #0]
          break;
 8009a60:	e003      	b.n	8009a6a <lsm6dsv16x_gy_data_rate_get+0xea>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	2224      	movs	r2, #36	@ 0x24
 8009a66:	701a      	strb	r2, [r3, #0]
          break;
 8009a68:	bf00      	nop
      }
      break;
 8009a6a:	e093      	b.n	8009b94 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel)
 8009a6c:	7cfb      	ldrb	r3, [r7, #19]
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d005      	beq.n	8009a7e <lsm6dsv16x_gy_data_rate_get+0xfe>
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d007      	beq.n	8009a86 <lsm6dsv16x_gy_data_rate_get+0x106>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_60Hz;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	2205      	movs	r2, #5
 8009a7a:	701a      	strb	r2, [r3, #0]
          break;
 8009a7c:	e007      	b.n	8009a8e <lsm6dsv16x_gy_data_rate_get+0x10e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	2215      	movs	r2, #21
 8009a82:	701a      	strb	r2, [r3, #0]
          break;
 8009a84:	e003      	b.n	8009a8e <lsm6dsv16x_gy_data_rate_get+0x10e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	2225      	movs	r2, #37	@ 0x25
 8009a8a:	701a      	strb	r2, [r3, #0]
          break;
 8009a8c:	bf00      	nop
      }
      break;
 8009a8e:	e081      	b.n	8009b94 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel)
 8009a90:	7cfb      	ldrb	r3, [r7, #19]
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d005      	beq.n	8009aa2 <lsm6dsv16x_gy_data_rate_get+0x122>
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	d007      	beq.n	8009aaa <lsm6dsv16x_gy_data_rate_get+0x12a>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_120Hz;
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	2206      	movs	r2, #6
 8009a9e:	701a      	strb	r2, [r3, #0]
          break;
 8009aa0:	e007      	b.n	8009ab2 <lsm6dsv16x_gy_data_rate_get+0x132>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	2216      	movs	r2, #22
 8009aa6:	701a      	strb	r2, [r3, #0]
          break;
 8009aa8:	e003      	b.n	8009ab2 <lsm6dsv16x_gy_data_rate_get+0x132>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	2226      	movs	r2, #38	@ 0x26
 8009aae:	701a      	strb	r2, [r3, #0]
          break;
 8009ab0:	bf00      	nop
      }
      break;
 8009ab2:	e06f      	b.n	8009b94 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel)
 8009ab4:	7cfb      	ldrb	r3, [r7, #19]
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d005      	beq.n	8009ac6 <lsm6dsv16x_gy_data_rate_get+0x146>
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	d007      	beq.n	8009ace <lsm6dsv16x_gy_data_rate_get+0x14e>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_240Hz;
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	2207      	movs	r2, #7
 8009ac2:	701a      	strb	r2, [r3, #0]
          break;
 8009ac4:	e007      	b.n	8009ad6 <lsm6dsv16x_gy_data_rate_get+0x156>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	2217      	movs	r2, #23
 8009aca:	701a      	strb	r2, [r3, #0]
          break;
 8009acc:	e003      	b.n	8009ad6 <lsm6dsv16x_gy_data_rate_get+0x156>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	2227      	movs	r2, #39	@ 0x27
 8009ad2:	701a      	strb	r2, [r3, #0]
          break;
 8009ad4:	bf00      	nop
      }
      break;
 8009ad6:	e05d      	b.n	8009b94 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel)
 8009ad8:	7cfb      	ldrb	r3, [r7, #19]
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d005      	beq.n	8009aea <lsm6dsv16x_gy_data_rate_get+0x16a>
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	d007      	beq.n	8009af2 <lsm6dsv16x_gy_data_rate_get+0x172>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_480Hz;
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	2208      	movs	r2, #8
 8009ae6:	701a      	strb	r2, [r3, #0]
          break;
 8009ae8:	e007      	b.n	8009afa <lsm6dsv16x_gy_data_rate_get+0x17a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	2218      	movs	r2, #24
 8009aee:	701a      	strb	r2, [r3, #0]
          break;
 8009af0:	e003      	b.n	8009afa <lsm6dsv16x_gy_data_rate_get+0x17a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	2228      	movs	r2, #40	@ 0x28
 8009af6:	701a      	strb	r2, [r3, #0]
          break;
 8009af8:	bf00      	nop
      }
      break;
 8009afa:	e04b      	b.n	8009b94 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel)
 8009afc:	7cfb      	ldrb	r3, [r7, #19]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d005      	beq.n	8009b0e <lsm6dsv16x_gy_data_rate_get+0x18e>
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d007      	beq.n	8009b16 <lsm6dsv16x_gy_data_rate_get+0x196>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_960Hz;
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	2209      	movs	r2, #9
 8009b0a:	701a      	strb	r2, [r3, #0]
          break;
 8009b0c:	e007      	b.n	8009b1e <lsm6dsv16x_gy_data_rate_get+0x19e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	2219      	movs	r2, #25
 8009b12:	701a      	strb	r2, [r3, #0]
          break;
 8009b14:	e003      	b.n	8009b1e <lsm6dsv16x_gy_data_rate_get+0x19e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	2229      	movs	r2, #41	@ 0x29
 8009b1a:	701a      	strb	r2, [r3, #0]
          break;
 8009b1c:	bf00      	nop
      }
      break;
 8009b1e:	e039      	b.n	8009b94 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel)
 8009b20:	7cfb      	ldrb	r3, [r7, #19]
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d005      	beq.n	8009b32 <lsm6dsv16x_gy_data_rate_get+0x1b2>
 8009b26:	2b02      	cmp	r3, #2
 8009b28:	d007      	beq.n	8009b3a <lsm6dsv16x_gy_data_rate_get+0x1ba>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_1920Hz;
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	220a      	movs	r2, #10
 8009b2e:	701a      	strb	r2, [r3, #0]
          break;
 8009b30:	e007      	b.n	8009b42 <lsm6dsv16x_gy_data_rate_get+0x1c2>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	221a      	movs	r2, #26
 8009b36:	701a      	strb	r2, [r3, #0]
          break;
 8009b38:	e003      	b.n	8009b42 <lsm6dsv16x_gy_data_rate_get+0x1c2>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	222a      	movs	r2, #42	@ 0x2a
 8009b3e:	701a      	strb	r2, [r3, #0]
          break;
 8009b40:	bf00      	nop
      }
      break;
 8009b42:	e027      	b.n	8009b94 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel)
 8009b44:	7cfb      	ldrb	r3, [r7, #19]
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d005      	beq.n	8009b56 <lsm6dsv16x_gy_data_rate_get+0x1d6>
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	d007      	beq.n	8009b5e <lsm6dsv16x_gy_data_rate_get+0x1de>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_3840Hz;
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	220b      	movs	r2, #11
 8009b52:	701a      	strb	r2, [r3, #0]
          break;
 8009b54:	e007      	b.n	8009b66 <lsm6dsv16x_gy_data_rate_get+0x1e6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	221b      	movs	r2, #27
 8009b5a:	701a      	strb	r2, [r3, #0]
          break;
 8009b5c:	e003      	b.n	8009b66 <lsm6dsv16x_gy_data_rate_get+0x1e6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	222b      	movs	r2, #43	@ 0x2b
 8009b62:	701a      	strb	r2, [r3, #0]
          break;
 8009b64:	bf00      	nop
      }
      break;
 8009b66:	e015      	b.n	8009b94 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel)
 8009b68:	7cfb      	ldrb	r3, [r7, #19]
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d005      	beq.n	8009b7a <lsm6dsv16x_gy_data_rate_get+0x1fa>
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d007      	beq.n	8009b82 <lsm6dsv16x_gy_data_rate_get+0x202>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_7680Hz;
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	220c      	movs	r2, #12
 8009b76:	701a      	strb	r2, [r3, #0]
          break;
 8009b78:	e007      	b.n	8009b8a <lsm6dsv16x_gy_data_rate_get+0x20a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	221c      	movs	r2, #28
 8009b7e:	701a      	strb	r2, [r3, #0]
          break;
 8009b80:	e003      	b.n	8009b8a <lsm6dsv16x_gy_data_rate_get+0x20a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	222c      	movs	r2, #44	@ 0x2c
 8009b86:	701a      	strb	r2, [r3, #0]
          break;
 8009b88:	bf00      	nop
      }
      break;
 8009b8a:	e003      	b.n	8009b94 <lsm6dsv16x_gy_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	701a      	strb	r2, [r3, #0]
      break;
 8009b92:	bf00      	nop
  }

  return ret;
 8009b94:	697b      	ldr	r3, [r7, #20]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3718      	adds	r7, #24
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop

08009ba0 <lsm6dsv16x_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	460b      	mov	r3, r1
 8009baa:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8009bac:	f107 0208 	add.w	r2, r7, #8
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	2112      	movs	r1, #18
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f7ff fcb3 	bl	8009520 <lsm6dsv16x_read_reg>
 8009bba:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d10f      	bne.n	8009be2 <lsm6dsv16x_auto_increment_set+0x42>
  {
    ctrl3.if_inc = val;
 8009bc2:	78fb      	ldrb	r3, [r7, #3]
 8009bc4:	f003 0301 	and.w	r3, r3, #1
 8009bc8:	b2da      	uxtb	r2, r3
 8009bca:	7a3b      	ldrb	r3, [r7, #8]
 8009bcc:	f362 0382 	bfi	r3, r2, #2, #1
 8009bd0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8009bd2:	f107 0208 	add.w	r2, r7, #8
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	2112      	movs	r1, #18
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f7ff fcbe 	bl	800955c <lsm6dsv16x_write_reg>
 8009be0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009be2:	68fb      	ldr	r3, [r7, #12]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3710      	adds	r7, #16
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8009bf8:	f107 0208 	add.w	r2, r7, #8
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	2112      	movs	r1, #18
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f7ff fc8d 	bl	8009520 <lsm6dsv16x_read_reg>
 8009c06:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d10f      	bne.n	8009c2e <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 8009c0e:	78fb      	ldrb	r3, [r7, #3]
 8009c10:	f003 0301 	and.w	r3, r3, #1
 8009c14:	b2da      	uxtb	r2, r3
 8009c16:	7a3b      	ldrb	r3, [r7, #8]
 8009c18:	f362 1386 	bfi	r3, r2, #6, #1
 8009c1c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8009c1e:	f107 0208 	add.w	r2, r7, #8
 8009c22:	2301      	movs	r3, #1
 8009c24:	2112      	movs	r1, #18
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f7ff fc98 	bl	800955c <lsm6dsv16x_write_reg>
 8009c2c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3710      	adds	r7, #16
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	460b      	mov	r3, r1
 8009c42:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8009c44:	f107 0208 	add.w	r2, r7, #8
 8009c48:	2301      	movs	r3, #1
 8009c4a:	2115      	movs	r1, #21
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f7ff fc67 	bl	8009520 <lsm6dsv16x_read_reg>
 8009c52:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d10f      	bne.n	8009c7a <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 8009c5a:	78fb      	ldrb	r3, [r7, #3]
 8009c5c:	f003 030f 	and.w	r3, r3, #15
 8009c60:	b2da      	uxtb	r2, r3
 8009c62:	7a3b      	ldrb	r3, [r7, #8]
 8009c64:	f362 0303 	bfi	r3, r2, #0, #4
 8009c68:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8009c6a:	f107 0208 	add.w	r2, r7, #8
 8009c6e:	2301      	movs	r3, #1
 8009c70:	2115      	movs	r1, #21
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f7ff fc72 	bl	800955c <lsm6dsv16x_write_reg>
 8009c78:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3710      	adds	r7, #16
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <lsm6dsv16x_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_get(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t *val)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8009c8e:	f107 0208 	add.w	r2, r7, #8
 8009c92:	2301      	movs	r3, #1
 8009c94:	2115      	movs	r1, #21
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f7ff fc42 	bl	8009520 <lsm6dsv16x_read_reg>
 8009c9c:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d001      	beq.n	8009ca8 <lsm6dsv16x_gy_full_scale_get+0x24>
  {
    return ret;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	e040      	b.n	8009d2a <lsm6dsv16x_gy_full_scale_get+0xa6>
  }

  switch (ctrl6.fs_g)
 8009ca8:	7a3b      	ldrb	r3, [r7, #8]
 8009caa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	2b0c      	cmp	r3, #12
 8009cb2:	d835      	bhi.n	8009d20 <lsm6dsv16x_gy_full_scale_get+0x9c>
 8009cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8009cbc <lsm6dsv16x_gy_full_scale_get+0x38>)
 8009cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cba:	bf00      	nop
 8009cbc:	08009cf1 	.word	0x08009cf1
 8009cc0:	08009cf9 	.word	0x08009cf9
 8009cc4:	08009d01 	.word	0x08009d01
 8009cc8:	08009d09 	.word	0x08009d09
 8009ccc:	08009d11 	.word	0x08009d11
 8009cd0:	08009d21 	.word	0x08009d21
 8009cd4:	08009d21 	.word	0x08009d21
 8009cd8:	08009d21 	.word	0x08009d21
 8009cdc:	08009d21 	.word	0x08009d21
 8009ce0:	08009d21 	.word	0x08009d21
 8009ce4:	08009d21 	.word	0x08009d21
 8009ce8:	08009d21 	.word	0x08009d21
 8009cec:	08009d19 	.word	0x08009d19
  {
    case LSM6DSV16X_125dps:
      *val = LSM6DSV16X_125dps;
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	701a      	strb	r2, [r3, #0]
      break;
 8009cf6:	e017      	b.n	8009d28 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_250dps:
      *val = LSM6DSV16X_250dps;
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	701a      	strb	r2, [r3, #0]
      break;
 8009cfe:	e013      	b.n	8009d28 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_500dps:
      *val = LSM6DSV16X_500dps;
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	2202      	movs	r2, #2
 8009d04:	701a      	strb	r2, [r3, #0]
      break;
 8009d06:	e00f      	b.n	8009d28 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_1000dps:
      *val = LSM6DSV16X_1000dps;
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	2203      	movs	r2, #3
 8009d0c:	701a      	strb	r2, [r3, #0]
      break;
 8009d0e:	e00b      	b.n	8009d28 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_2000dps:
      *val = LSM6DSV16X_2000dps;
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	2204      	movs	r2, #4
 8009d14:	701a      	strb	r2, [r3, #0]
      break;
 8009d16:	e007      	b.n	8009d28 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_4000dps:
      *val = LSM6DSV16X_4000dps;
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	220c      	movs	r2, #12
 8009d1c:	701a      	strb	r2, [r3, #0]
      break;
 8009d1e:	e003      	b.n	8009d28 <lsm6dsv16x_gy_full_scale_get+0xa4>

    default:
      *val = LSM6DSV16X_125dps;
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	2200      	movs	r2, #0
 8009d24:	701a      	strb	r2, [r3, #0]
      break;
 8009d26:	bf00      	nop
  }

  return ret;
 8009d28:	68fb      	ldr	r3, [r7, #12]
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3710      	adds	r7, #16
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop

08009d34 <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8009d40:	f107 0208 	add.w	r2, r7, #8
 8009d44:	2301      	movs	r3, #1
 8009d46:	2117      	movs	r1, #23
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f7ff fbe9 	bl	8009520 <lsm6dsv16x_read_reg>
 8009d4e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d10f      	bne.n	8009d76 <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 8009d56:	78fb      	ldrb	r3, [r7, #3]
 8009d58:	f003 0303 	and.w	r3, r3, #3
 8009d5c:	b2da      	uxtb	r2, r3
 8009d5e:	7a3b      	ldrb	r3, [r7, #8]
 8009d60:	f362 0301 	bfi	r3, r2, #0, #2
 8009d64:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8009d66:	f107 0208 	add.w	r2, r7, #8
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	2117      	movs	r1, #23
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f7ff fbf4 	bl	800955c <lsm6dsv16x_write_reg>
 8009d74:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009d76:	68fb      	ldr	r3, [r7, #12]
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3710      	adds	r7, #16
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <lsm6dsv16x_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_get(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t *val)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8009d8a:	f107 0208 	add.w	r2, r7, #8
 8009d8e:	2301      	movs	r3, #1
 8009d90:	2117      	movs	r1, #23
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f7ff fbc4 	bl	8009520 <lsm6dsv16x_read_reg>
 8009d98:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d001      	beq.n	8009da4 <lsm6dsv16x_xl_full_scale_get+0x24>
  {
    return ret;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	e026      	b.n	8009df2 <lsm6dsv16x_xl_full_scale_get+0x72>
  }

  switch (ctrl8.fs_xl)
 8009da4:	7a3b      	ldrb	r3, [r7, #8]
 8009da6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	2b03      	cmp	r3, #3
 8009dae:	d81b      	bhi.n	8009de8 <lsm6dsv16x_xl_full_scale_get+0x68>
 8009db0:	a201      	add	r2, pc, #4	@ (adr r2, 8009db8 <lsm6dsv16x_xl_full_scale_get+0x38>)
 8009db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db6:	bf00      	nop
 8009db8:	08009dc9 	.word	0x08009dc9
 8009dbc:	08009dd1 	.word	0x08009dd1
 8009dc0:	08009dd9 	.word	0x08009dd9
 8009dc4:	08009de1 	.word	0x08009de1
  {
    case LSM6DSV16X_2g:
      *val = LSM6DSV16X_2g;
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	701a      	strb	r2, [r3, #0]
      break;
 8009dce:	e00f      	b.n	8009df0 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_4g:
      *val = LSM6DSV16X_4g;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	701a      	strb	r2, [r3, #0]
      break;
 8009dd6:	e00b      	b.n	8009df0 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_8g:
      *val = LSM6DSV16X_8g;
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	2202      	movs	r2, #2
 8009ddc:	701a      	strb	r2, [r3, #0]
      break;
 8009dde:	e007      	b.n	8009df0 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_16g:
      *val = LSM6DSV16X_16g;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	2203      	movs	r2, #3
 8009de4:	701a      	strb	r2, [r3, #0]
      break;
 8009de6:	e003      	b.n	8009df0 <lsm6dsv16x_xl_full_scale_get+0x70>

    default:
      *val = LSM6DSV16X_2g;
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	2200      	movs	r2, #0
 8009dec:	701a      	strb	r2, [r3, #0]
      break;
 8009dee:	bf00      	nop
  }

  return ret;
 8009df0:	68fb      	ldr	r3, [r7, #12]
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3710      	adds	r7, #16
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop

08009dfc <lsm6dsv16x_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b086      	sub	sp, #24
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_G, &buff[0], 6);
 8009e06:	f107 020c 	add.w	r2, r7, #12
 8009e0a:	2306      	movs	r3, #6
 8009e0c:	2122      	movs	r1, #34	@ 0x22
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f7ff fb86 	bl	8009520 <lsm6dsv16x_read_reg>
 8009e14:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d001      	beq.n	8009e20 <lsm6dsv16x_angular_rate_raw_get+0x24>
  {
    return ret;
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	e036      	b.n	8009e8e <lsm6dsv16x_angular_rate_raw_get+0x92>
  }

  val[0] = (int16_t)buff[1];
 8009e20:	7b7b      	ldrb	r3, [r7, #13]
 8009e22:	b21a      	sxth	r2, r3
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	021b      	lsls	r3, r3, #8
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	7b3a      	ldrb	r2, [r7, #12]
 8009e36:	4413      	add	r3, r2
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	b21a      	sxth	r2, r3
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8009e40:	7bfa      	ldrb	r2, [r7, #15]
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	3302      	adds	r3, #2
 8009e46:	b212      	sxth	r2, r2
 8009e48:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	3302      	adds	r3, #2
 8009e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	021b      	lsls	r3, r3, #8
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	7bba      	ldrb	r2, [r7, #14]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	b29a      	uxth	r2, r3
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	3302      	adds	r3, #2
 8009e62:	b212      	sxth	r2, r2
 8009e64:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8009e66:	7c7a      	ldrb	r2, [r7, #17]
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	3304      	adds	r3, #4
 8009e6c:	b212      	sxth	r2, r2
 8009e6e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	3304      	adds	r3, #4
 8009e74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	021b      	lsls	r3, r3, #8
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	7c3a      	ldrb	r2, [r7, #16]
 8009e80:	4413      	add	r3, r2
 8009e82:	b29a      	uxth	r2, r3
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	3304      	adds	r3, #4
 8009e88:	b212      	sxth	r2, r2
 8009e8a:	801a      	strh	r2, [r3, #0]

  return ret;
 8009e8c:	697b      	ldr	r3, [r7, #20]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3718      	adds	r7, #24
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <lsm6dsv16x_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b086      	sub	sp, #24
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_A, &buff[0], 6);
 8009ea0:	f107 020c 	add.w	r2, r7, #12
 8009ea4:	2306      	movs	r3, #6
 8009ea6:	2128      	movs	r1, #40	@ 0x28
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f7ff fb39 	bl	8009520 <lsm6dsv16x_read_reg>
 8009eae:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d001      	beq.n	8009eba <lsm6dsv16x_acceleration_raw_get+0x24>
  {
    return ret;
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	e036      	b.n	8009f28 <lsm6dsv16x_acceleration_raw_get+0x92>
  }

  val[0] = (int16_t)buff[1];
 8009eba:	7b7b      	ldrb	r3, [r7, #13]
 8009ebc:	b21a      	sxth	r2, r3
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	021b      	lsls	r3, r3, #8
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	7b3a      	ldrb	r2, [r7, #12]
 8009ed0:	4413      	add	r3, r2
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	b21a      	sxth	r2, r3
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8009eda:	7bfa      	ldrb	r2, [r7, #15]
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	3302      	adds	r3, #2
 8009ee0:	b212      	sxth	r2, r2
 8009ee2:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	3302      	adds	r3, #2
 8009ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	021b      	lsls	r3, r3, #8
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	7bba      	ldrb	r2, [r7, #14]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	b29a      	uxth	r2, r3
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	3302      	adds	r3, #2
 8009efc:	b212      	sxth	r2, r2
 8009efe:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8009f00:	7c7a      	ldrb	r2, [r7, #17]
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	3304      	adds	r3, #4
 8009f06:	b212      	sxth	r2, r2
 8009f08:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	3304      	adds	r3, #4
 8009f0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	021b      	lsls	r3, r3, #8
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	7c3a      	ldrb	r2, [r7, #16]
 8009f1a:	4413      	add	r3, r2
 8009f1c:	b29a      	uxth	r2, r3
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	3304      	adds	r3, #4
 8009f22:	b212      	sxth	r2, r2
 8009f24:	801a      	strh	r2, [r3, #0]

  return ret;
 8009f26:	697b      	ldr	r3, [r7, #20]
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3718      	adds	r7, #24
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(const stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	460b      	mov	r3, r1
 8009f3a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8009f3c:	f107 0208 	add.w	r2, r7, #8
 8009f40:	2301      	movs	r3, #1
 8009f42:	210a      	movs	r1, #10
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f7ff faeb 	bl	8009520 <lsm6dsv16x_read_reg>
 8009f4a:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d10f      	bne.n	8009f72 <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 8009f52:	78fb      	ldrb	r3, [r7, #3]
 8009f54:	f003 0307 	and.w	r3, r3, #7
 8009f58:	b2da      	uxtb	r2, r3
 8009f5a:	7a3b      	ldrb	r3, [r7, #8]
 8009f5c:	f362 0302 	bfi	r3, r2, #0, #3
 8009f60:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8009f62:	f107 0208 	add.w	r2, r7, #8
 8009f66:	2301      	movs	r3, #1
 8009f68:	210a      	movs	r1, #10
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f7ff faf6 	bl	800955c <lsm6dsv16x_write_reg>
 8009f70:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009f72:	68fb      	ldr	r3, [r7, #12]
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <lsm6dsv16x_ah_qvar_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ah_qvar_mode_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_ah_qvar_mode_t val)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	7039      	strb	r1, [r7, #0]
  lsm6dsv16x_ctrl7_t ctrl7;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 8009f86:	f107 0208 	add.w	r2, r7, #8
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	2116      	movs	r1, #22
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f7ff fac6 	bl	8009520 <lsm6dsv16x_read_reg>
 8009f94:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d10f      	bne.n	8009fbc <lsm6dsv16x_ah_qvar_mode_set+0x40>
  {
    ctrl7.ah_qvar_en = val.ah_qvar_en;
 8009f9c:	783b      	ldrb	r3, [r7, #0]
 8009f9e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009fa2:	b2da      	uxtb	r2, r3
 8009fa4:	7a3b      	ldrb	r3, [r7, #8]
 8009fa6:	f362 13c7 	bfi	r3, r2, #7, #1
 8009faa:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 8009fac:	f107 0208 	add.w	r2, r7, #8
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	2116      	movs	r1, #22
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f7ff fad1 	bl	800955c <lsm6dsv16x_write_reg>
 8009fba:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
	...

08009fc8 <SHT40AD1B_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_RegisterBusIO(SHT40AD1B_Object_t *pObj, SHT40AD1B_IO_t *pIO)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d103      	bne.n	8009fe0 <SHT40AD1B_RegisterBusIO+0x18>
  {
    ret = SHT40AD1B_ERROR;
 8009fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8009fdc:	60fb      	str	r3, [r7, #12]
 8009fde:	e034      	b.n	800a04a <SHT40AD1B_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init    = pIO->Init;
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit  = pIO->DeInit;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	685a      	ldr	r2, [r3, #4]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType = pIO->BusType;
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	689a      	ldr	r2, [r3, #8]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address = pIO->Address;
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	7b1a      	ldrb	r2, [r3, #12]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	731a      	strb	r2, [r3, #12]
    pObj->IO.Write   = pIO->Write;
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	691a      	ldr	r2, [r3, #16]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	611a      	str	r2, [r3, #16]
    pObj->IO.Read    = pIO->Read;
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	695a      	ldr	r2, [r3, #20]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick = pIO->GetTick;
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	699a      	ldr	r2, [r3, #24]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	4a0e      	ldr	r2, [pc, #56]	@ (800a054 <SHT40AD1B_RegisterBusIO+0x8c>)
 800a01c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4a0d      	ldr	r2, [pc, #52]	@ (800a058 <SHT40AD1B_RegisterBusIO+0x90>)
 800a022:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	69da      	ldr	r2, [r3, #28]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d004      	beq.n	800a044 <SHT40AD1B_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4798      	blx	r3
 800a040:	60f8      	str	r0, [r7, #12]
 800a042:	e002      	b.n	800a04a <SHT40AD1B_RegisterBusIO+0x82>
    }
    else
    {
      ret = SHT40AD1B_ERROR;
 800a044:	f04f 33ff 	mov.w	r3, #4294967295
 800a048:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a04a:	68fb      	ldr	r3, [r7, #12]
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3710      	adds	r7, #16
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	0800a2d9 	.word	0x0800a2d9
 800a058:	0800a319 	.word	0x0800a319

0800a05c <SHT40AD1B_Init>:
  * @brief  Initialize the SHT40AD1B sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_Init(SHT40AD1B_Object_t *pObj)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  /* This device doesn't support ODR, works more like one-shot measurement */
  pObj->hum_odr  = 0.0f;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f04f 0200 	mov.w	r2, #0
 800a06a:	635a      	str	r2, [r3, #52]	@ 0x34
  pObj->temp_odr = 0.0f;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f04f 0200 	mov.w	r2, #0
 800a072:	639a      	str	r2, [r3, #56]	@ 0x38

  pObj->is_initialized = 1;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2201      	movs	r2, #1
 800a078:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return SHT40AD1B_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	370c      	adds	r7, #12
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr

0800a08a <SHT40AD1B_DeInit>:
  * @brief  Deinitialize the SHT40AD1B sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_DeInit(SHT40AD1B_Object_t *pObj)
{
 800a08a:	b480      	push	{r7}
 800a08c:	b083      	sub	sp, #12
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
  pObj->is_initialized = 0;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return SHT40AD1B_OK;
 800a09a:	2300      	movs	r3, #0
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	370c      	adds	r7, #12
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <SHT40AD1B_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_ReadID(SHT40AD1B_Object_t *pObj, uint8_t *Id)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  return sht40ad1b_device_id_get(&(pObj->Ctx), Id);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	3320      	adds	r3, #32
 800a0b6:	6839      	ldr	r1, [r7, #0]
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f000 fa23 	bl	800a504 <sht40ad1b_device_id_get>
 800a0be:	4603      	mov	r3, r0
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3708      	adds	r7, #8
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <SHT40AD1B_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to SHT40AD1B sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_GetCapabilities(SHT40AD1B_Object_t *pObj, SHT40AD1B_Capabilities_t *Capabilities)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	f04f 0200 	mov.w	r2, #0
 800a0f6:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 0.0f;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	f04f 0200 	mov.w	r2, #0
 800a0fe:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	f04f 0200 	mov.w	r2, #0
 800a106:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	f04f 0200 	mov.w	r2, #0
 800a10e:	615a      	str	r2, [r3, #20]
  return SHT40AD1B_OK;
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	370c      	adds	r7, #12
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr

0800a11e <SHT40AD1B_HUM_Enable>:
  * @brief  Enable the SHT40AD1B humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_Enable(SHT40AD1B_Object_t *pObj)
{
 800a11e:	b480      	push	{r7}
 800a120:	b083      	sub	sp, #12
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d101      	bne.n	800a134 <SHT40AD1B_HUM_Enable+0x16>
  {
    return SHT40AD1B_OK;
 800a130:	2300      	movs	r3, #0
 800a132:	e004      	b.n	800a13e <SHT40AD1B_HUM_Enable+0x20>
  }

  pObj->hum_is_enabled = 1;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2201      	movs	r2, #1
 800a138:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return SHT40AD1B_OK;
 800a13c:	2300      	movs	r3, #0
}
 800a13e:	4618      	mov	r0, r3
 800a140:	370c      	adds	r7, #12
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr

0800a14a <SHT40AD1B_HUM_Disable>:
  * @brief  Disable the SHT40AD1B humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_Disable(SHT40AD1B_Object_t *pObj)
{
 800a14a:	b480      	push	{r7}
 800a14c:	b083      	sub	sp, #12
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d101      	bne.n	800a160 <SHT40AD1B_HUM_Disable+0x16>
  {
    return SHT40AD1B_OK;
 800a15c:	2300      	movs	r3, #0
 800a15e:	e004      	b.n	800a16a <SHT40AD1B_HUM_Disable+0x20>
  }

  pObj->hum_is_enabled = 0;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return SHT40AD1B_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	370c      	adds	r7, #12
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr

0800a176 <SHT40AD1B_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_GetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t *Odr)
{
 800a176:	b480      	push	{r7}
 800a178:	b083      	sub	sp, #12
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
 800a17e:	6039      	str	r1, [r7, #0]
  *Odr = pObj->hum_odr;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 800a188:	2300      	movs	r3, #0
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	370c      	adds	r7, #12
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr

0800a196 <SHT40AD1B_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_SetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t Odr)
{
 800a196:	b480      	push	{r7}
 800a198:	b083      	sub	sp, #12
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
 800a19e:	ed87 0a00 	vstr	s0, [r7]
  /* This device doesn't support ODR, works more like one-shot measurement */
  return SHT40AD1B_OK;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	370c      	adds	r7, #12
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <SHT40AD1B_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_GetHumidity(SHT40AD1B_Object_t *pObj, float_t *Value)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
  if (GetData(pObj) != SHT40AD1B_OK)
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 f86f 	bl	800a29e <GetData>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d002      	beq.n	800a1cc <SHT40AD1B_HUM_GetHumidity+0x1c>
  {
    return SHT40AD1B_ERROR;
 800a1c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a1ca:	e004      	b.n	800a1d6 <SHT40AD1B_HUM_GetHumidity+0x26>
  }

  *Value = pObj->hum_value;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 800a1d4:	2300      	movs	r3, #0
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3708      	adds	r7, #8
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <SHT40AD1B_TEMP_Enable>:
  * @brief  Enable the SHT40AD1B temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_Enable(SHT40AD1B_Object_t *pObj)
{
 800a1de:	b480      	push	{r7}
 800a1e0:	b083      	sub	sp, #12
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d101      	bne.n	800a1f4 <SHT40AD1B_TEMP_Enable+0x16>
  {
    return SHT40AD1B_OK;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	e004      	b.n	800a1fe <SHT40AD1B_TEMP_Enable+0x20>
  }

  pObj->temp_is_enabled = 1;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return SHT40AD1B_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	370c      	adds	r7, #12
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr

0800a20a <SHT40AD1B_TEMP_Disable>:
  * @brief  Disable the SHT40AD1B temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_Disable(SHT40AD1B_Object_t *pObj)
{
 800a20a:	b480      	push	{r7}
 800a20c:	b083      	sub	sp, #12
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d101      	bne.n	800a220 <SHT40AD1B_TEMP_Disable+0x16>
  {
    return SHT40AD1B_OK;
 800a21c:	2300      	movs	r3, #0
 800a21e:	e004      	b.n	800a22a <SHT40AD1B_TEMP_Disable+0x20>
  }

  pObj->temp_is_enabled = 0;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return SHT40AD1B_OK;
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	370c      	adds	r7, #12
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr

0800a236 <SHT40AD1B_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_GetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t *Odr)
{
 800a236:	b480      	push	{r7}
 800a238:	b083      	sub	sp, #12
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
 800a23e:	6039      	str	r1, [r7, #0]
  *Odr = pObj->temp_odr;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	370c      	adds	r7, #12
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr

0800a256 <SHT40AD1B_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_SetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t Odr)
{
 800a256:	b480      	push	{r7}
 800a258:	b083      	sub	sp, #12
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
 800a25e:	ed87 0a00 	vstr	s0, [r7]
  /* This device doesn't support ODR, works more like one-shot measurement */
  return SHT40AD1B_OK;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <SHT40AD1B_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_GetTemperature(SHT40AD1B_Object_t *pObj, float_t *Value)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
  if (GetData(pObj) != SHT40AD1B_OK)
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 f80f 	bl	800a29e <GetData>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d002      	beq.n	800a28c <SHT40AD1B_TEMP_GetTemperature+0x1c>
  {
    return SHT40AD1B_ERROR;
 800a286:	f04f 33ff 	mov.w	r3, #4294967295
 800a28a:	e004      	b.n	800a296 <SHT40AD1B_TEMP_GetTemperature+0x26>
  }

  *Value = pObj->temp_value;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 800a294:	2300      	movs	r3, #0
}
 800a296:	4618      	mov	r0, r3
 800a298:	3708      	adds	r7, #8
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <GetData>:
  * @param  pObj the device pObj
  * @param  Status the new data status
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t GetData(SHT40AD1B_Object_t *pObj)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b084      	sub	sp, #16
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
  float_t data[2];  /* humidity, temperature */

  if (sht40ad1b_data_get(&(pObj->Ctx), data) != 0)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	3320      	adds	r3, #32
 800a2aa:	f107 0208 	add.w	r2, r7, #8
 800a2ae:	4611      	mov	r1, r2
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f000 f881 	bl	800a3b8 <sht40ad1b_data_get>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d002      	beq.n	800a2c2 <GetData+0x24>
  {
    return SHT40AD1B_ERROR;
 800a2bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a2c0:	e006      	b.n	800a2d0 <GetData+0x32>
  }

  pObj->hum_value = data[0];
 800a2c2:	68ba      	ldr	r2, [r7, #8]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  pObj->temp_value = data[1];
 800a2c8:	68fa      	ldr	r2, [r7, #12]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	641a      	str	r2, [r3, #64]	@ 0x40

  return SHT40AD1B_OK;
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3710      	adds	r7, #16
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	607a      	str	r2, [r7, #4]
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	72fb      	strb	r3, [r7, #11]
 800a2e8:	4613      	mov	r3, r2
 800a2ea:	813b      	strh	r3, [r7, #8]
  SHT40AD1B_Object_t *pObj = (SHT40AD1B_Object_t *)Handle;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	617b      	str	r3, [r7, #20]
  (void)Reg;

  if (pObj->IO.BusType == (uint32_t)SHT40AD1B_I2C_BUS) /* I2C */
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d109      	bne.n	800a30c <ReadRegWrap+0x34>
  {
    return pObj->IO.Read(pObj->IO.Address, pData, Length);
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	695b      	ldr	r3, [r3, #20]
 800a2fc:	697a      	ldr	r2, [r7, #20]
 800a2fe:	7b12      	ldrb	r2, [r2, #12]
 800a300:	4610      	mov	r0, r2
 800a302:	893a      	ldrh	r2, [r7, #8]
 800a304:	6879      	ldr	r1, [r7, #4]
 800a306:	4798      	blx	r3
 800a308:	4603      	mov	r3, r0
 800a30a:	e001      	b.n	800a310 <ReadRegWrap+0x38>
  }
  else
  {
    return SHT40AD1B_ERROR;
 800a30c:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800a310:	4618      	mov	r0, r3
 800a312:	3718      	adds	r7, #24
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	607a      	str	r2, [r7, #4]
 800a322:	461a      	mov	r2, r3
 800a324:	460b      	mov	r3, r1
 800a326:	72fb      	strb	r3, [r7, #11]
 800a328:	4613      	mov	r3, r2
 800a32a:	813b      	strh	r3, [r7, #8]
  SHT40AD1B_Object_t *pObj = (SHT40AD1B_Object_t *)Handle;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	617b      	str	r3, [r7, #20]
  (void)Reg;

  if (pObj->IO.BusType == (uint32_t)SHT40AD1B_I2C_BUS) /* I2C */
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d109      	bne.n	800a34c <WriteRegWrap+0x34>
  {
    return pObj->IO.Write(pObj->IO.Address, pData, Length);
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	691b      	ldr	r3, [r3, #16]
 800a33c:	697a      	ldr	r2, [r7, #20]
 800a33e:	7b12      	ldrb	r2, [r2, #12]
 800a340:	4610      	mov	r0, r2
 800a342:	893a      	ldrh	r2, [r7, #8]
 800a344:	6879      	ldr	r1, [r7, #4]
 800a346:	4798      	blx	r3
 800a348:	4603      	mov	r3, r0
 800a34a:	e001      	b.n	800a350 <WriteRegWrap+0x38>
  }
  else
  {
    return SHT40AD1B_ERROR;
 800a34c:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800a350:	4618      	mov	r0, r3
 800a352:	3718      	adds	r7, #24
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <sht40ad1b_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak sht40ad1b_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data, uint16_t len)
{
 800a358:	b590      	push	{r4, r7, lr}
 800a35a:	b087      	sub	sp, #28
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	607a      	str	r2, [r7, #4]
 800a362:	461a      	mov	r2, r3
 800a364:	460b      	mov	r3, r1
 800a366:	72fb      	strb	r3, [r7, #11]
 800a368:	4613      	mov	r3, r2
 800a36a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	685c      	ldr	r4, [r3, #4]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	68d8      	ldr	r0, [r3, #12]
 800a374:	893b      	ldrh	r3, [r7, #8]
 800a376:	7af9      	ldrb	r1, [r7, #11]
 800a378:	687a      	ldr	r2, [r7, #4]
 800a37a:	47a0      	blx	r4
 800a37c:	6178      	str	r0, [r7, #20]

  return ret;
 800a37e:	697b      	ldr	r3, [r7, #20]
}
 800a380:	4618      	mov	r0, r3
 800a382:	371c      	adds	r7, #28
 800a384:	46bd      	mov	sp, r7
 800a386:	bd90      	pop	{r4, r7, pc}

0800a388 <sht40ad1b_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak sht40ad1b_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data, uint16_t len)
{
 800a388:	b590      	push	{r4, r7, lr}
 800a38a:	b087      	sub	sp, #28
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	607a      	str	r2, [r7, #4]
 800a392:	461a      	mov	r2, r3
 800a394:	460b      	mov	r3, r1
 800a396:	72fb      	strb	r3, [r7, #11]
 800a398:	4613      	mov	r3, r2
 800a39a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681c      	ldr	r4, [r3, #0]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	68d8      	ldr	r0, [r3, #12]
 800a3a4:	893b      	ldrh	r3, [r7, #8]
 800a3a6:	7af9      	ldrb	r1, [r7, #11]
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	47a0      	blx	r4
 800a3ac:	6178      	str	r0, [r7, #20]

  return ret;
 800a3ae:	697b      	ldr	r3, [r7, #20]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	371c      	adds	r7, #28
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd90      	pop	{r4, r7, pc}

0800a3b8 <sht40ad1b_data_get>:
  * @param  buffer  buffer to store humidity and temperature values pair
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sht40ad1b_data_get(stmdev_ctx_t *ctx, float_t *buffer)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b088      	sub	sp, #32
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
  uint8_t command = 0xFD;
 800a3c2:	23fd      	movs	r3, #253	@ 0xfd
 800a3c4:	73fb      	strb	r3, [r7, #15]
  uint8_t data[6] = {0};
 800a3c6:	f107 0308 	add.w	r3, r7, #8
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	601a      	str	r2, [r3, #0]
 800a3ce:	809a      	strh	r2, [r3, #4]

  if (sht40ad1b_write_reg(ctx, 0, &command, 1) != 0)
 800a3d0:	f107 020f 	add.w	r2, r7, #15
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	2100      	movs	r1, #0
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f7ff ffd5 	bl	800a388 <sht40ad1b_write_reg>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d001      	beq.n	800a3e8 <sht40ad1b_data_get+0x30>
  {
    return 1;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	e07d      	b.n	800a4e4 <sht40ad1b_data_get+0x12c>
  }

  /* Wait 10 ms */
  ctx->mdelay(10);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	200a      	movs	r0, #10
 800a3ee:	4798      	blx	r3

  if (sht40ad1b_read_reg(ctx, 0, data, 6) != 0)
 800a3f0:	f107 0208 	add.w	r2, r7, #8
 800a3f4:	2306      	movs	r3, #6
 800a3f6:	2100      	movs	r1, #0
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f7ff ffad 	bl	800a358 <sht40ad1b_read_reg>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d001      	beq.n	800a408 <sht40ad1b_data_get+0x50>
  {
    return 1;
 800a404:	2301      	movs	r3, #1
 800a406:	e06d      	b.n	800a4e4 <sht40ad1b_data_get+0x12c>
  }

  uint16_t temp_value_raw = (data[0] * 0x100U) + data[1];
 800a408:	7a3b      	ldrb	r3, [r7, #8]
 800a40a:	021b      	lsls	r3, r3, #8
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	7a7a      	ldrb	r2, [r7, #9]
 800a410:	4413      	add	r3, r2
 800a412:	83fb      	strh	r3, [r7, #30]
  uint8_t temp_value_crc  = data[2];
 800a414:	7abb      	ldrb	r3, [r7, #10]
 800a416:	777b      	strb	r3, [r7, #29]
  uint16_t hum_value_raw  = (data[3] * 0x100U) + data[4];
 800a418:	7afb      	ldrb	r3, [r7, #11]
 800a41a:	021b      	lsls	r3, r3, #8
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	7b3a      	ldrb	r2, [r7, #12]
 800a420:	4413      	add	r3, r2
 800a422:	837b      	strh	r3, [r7, #26]
  uint8_t hum_value_crc   = data[5];
 800a424:	7b7b      	ldrb	r3, [r7, #13]
 800a426:	767b      	strb	r3, [r7, #25]

  /* Check CRC for temperature value */
  if (crc_check(&data[0], 2, temp_value_crc) != 0U)
 800a428:	7f7a      	ldrb	r2, [r7, #29]
 800a42a:	f107 0308 	add.w	r3, r7, #8
 800a42e:	2102      	movs	r1, #2
 800a430:	4618      	mov	r0, r3
 800a432:	f000 f8b3 	bl	800a59c <crc_check>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d001      	beq.n	800a440 <sht40ad1b_data_get+0x88>
  {
    return 1;
 800a43c:	2301      	movs	r3, #1
 800a43e:	e051      	b.n	800a4e4 <sht40ad1b_data_get+0x12c>
  }

  /* Check CRC for humidity value */
  if (crc_check(&data[3], 2, hum_value_crc) != 0U)
 800a440:	7e7a      	ldrb	r2, [r7, #25]
 800a442:	f107 0308 	add.w	r3, r7, #8
 800a446:	3303      	adds	r3, #3
 800a448:	2102      	movs	r1, #2
 800a44a:	4618      	mov	r0, r3
 800a44c:	f000 f8a6 	bl	800a59c <crc_check>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d001      	beq.n	800a45a <sht40ad1b_data_get+0xa2>
  {
    return 1;
 800a456:	2301      	movs	r3, #1
 800a458:	e044      	b.n	800a4e4 <sht40ad1b_data_get+0x12c>
  }

  float_t temp_value = -45.0f + (175.0f * (float_t)temp_value_raw / (float_t)0xFFFF);
 800a45a:	8bfb      	ldrh	r3, [r7, #30]
 800a45c:	ee07 3a90 	vmov	s15, r3
 800a460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a464:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800a4ec <sht40ad1b_data_get+0x134>
 800a468:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a46c:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800a4f0 <sht40ad1b_data_get+0x138>
 800a470:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a474:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800a4f4 <sht40ad1b_data_get+0x13c>
 800a478:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a47c:	edc7 7a05 	vstr	s15, [r7, #20]
  float_t hum_value  =  -6.0f + (125.0f * (float_t)hum_value_raw  / (float_t)0xFFFF);
 800a480:	8b7b      	ldrh	r3, [r7, #26]
 800a482:	ee07 3a90 	vmov	s15, r3
 800a486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a48a:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800a4f8 <sht40ad1b_data_get+0x140>
 800a48e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a492:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800a4f0 <sht40ad1b_data_get+0x138>
 800a496:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a49a:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 800a49e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a4a2:	edc7 7a04 	vstr	s15, [r7, #16]

  hum_value = (hum_value > 100.0f) ? 100.0f
              : (hum_value <   0.0f) ?   0.0f
 800a4a6:	edd7 7a04 	vldr	s15, [r7, #16]
 800a4aa:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800a4fc <sht40ad1b_data_get+0x144>
 800a4ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4b6:	dd01      	ble.n	800a4bc <sht40ad1b_data_get+0x104>
 800a4b8:	4b11      	ldr	r3, [pc, #68]	@ (800a500 <sht40ad1b_data_get+0x148>)
 800a4ba:	e00a      	b.n	800a4d2 <sht40ad1b_data_get+0x11a>
              :                        hum_value;
 800a4bc:	edd7 7a04 	vldr	s15, [r7, #16]
 800a4c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4c8:	d502      	bpl.n	800a4d0 <sht40ad1b_data_get+0x118>
 800a4ca:	f04f 0300 	mov.w	r3, #0
 800a4ce:	e000      	b.n	800a4d2 <sht40ad1b_data_get+0x11a>
 800a4d0:	693b      	ldr	r3, [r7, #16]
  hum_value = (hum_value > 100.0f) ? 100.0f
 800a4d2:	613b      	str	r3, [r7, #16]

  buffer[0] = hum_value;
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	693a      	ldr	r2, [r7, #16]
 800a4d8:	601a      	str	r2, [r3, #0]
  buffer[1] = temp_value;
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	3304      	adds	r3, #4
 800a4de:	697a      	ldr	r2, [r7, #20]
 800a4e0:	601a      	str	r2, [r3, #0]
  return 0;
 800a4e2:	2300      	movs	r3, #0
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3720      	adds	r7, #32
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	432f0000 	.word	0x432f0000
 800a4f0:	477fff00 	.word	0x477fff00
 800a4f4:	42340000 	.word	0x42340000
 800a4f8:	42fa0000 	.word	0x42fa0000
 800a4fc:	42c80000 	.word	0x42c80000
 800a500:	42c80000 	.word	0x42c80000

0800a504 <sht40ad1b_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sht40ad1b_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
  (void)ctx;
  *buff = SHT40AD1B_ID;
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	2200      	movs	r2, #0
 800a512:	701a      	strb	r2, [r3, #0]
  return 0;
 800a514:	2300      	movs	r3, #0
}
 800a516:	4618      	mov	r0, r3
 800a518:	370c      	adds	r7, #12
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr

0800a522 <crc_calculate>:
  * @param  count  number of data bytes
  * @retval        CRC check sum of data stream
  *
  */
static uint8_t crc_calculate(const uint8_t *data, uint16_t count)
{
 800a522:	b480      	push	{r7}
 800a524:	b085      	sub	sp, #20
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
 800a52a:	460b      	mov	r3, r1
 800a52c:	807b      	strh	r3, [r7, #2]
  const uint8_t crc8_polynomial = 0x31;
 800a52e:	2331      	movs	r3, #49	@ 0x31
 800a530:	72bb      	strb	r3, [r7, #10]
  uint8_t crc = 0xFF;
 800a532:	23ff      	movs	r3, #255	@ 0xff
 800a534:	73fb      	strb	r3, [r7, #15]

  /* Calculate 8-bit checksum for given polynomial */
  for (uint16_t index = 0; index < count; index++)
 800a536:	2300      	movs	r3, #0
 800a538:	81bb      	strh	r3, [r7, #12]
 800a53a:	e024      	b.n	800a586 <crc_calculate+0x64>
  {
    crc ^= data[index];
 800a53c:	89bb      	ldrh	r3, [r7, #12]
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	4413      	add	r3, r2
 800a542:	781a      	ldrb	r2, [r3, #0]
 800a544:	7bfb      	ldrb	r3, [r7, #15]
 800a546:	4053      	eors	r3, r2
 800a548:	73fb      	strb	r3, [r7, #15]
    for (uint8_t crc_bit = 8U; crc_bit > 0U; crc_bit--)
 800a54a:	2308      	movs	r3, #8
 800a54c:	72fb      	strb	r3, [r7, #11]
 800a54e:	e014      	b.n	800a57a <crc_calculate+0x58>
    {
      crc = ((crc & 0x80U) != 0U) ? ((crc << 1) ^ crc8_polynomial) : (crc << 1);
 800a550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a554:	2b00      	cmp	r3, #0
 800a556:	da09      	bge.n	800a56c <crc_calculate+0x4a>
 800a558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a55c:	005b      	lsls	r3, r3, #1
 800a55e:	b25a      	sxtb	r2, r3
 800a560:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800a564:	4053      	eors	r3, r2
 800a566:	b25b      	sxtb	r3, r3
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	e002      	b.n	800a572 <crc_calculate+0x50>
 800a56c:	7bfb      	ldrb	r3, [r7, #15]
 800a56e:	005b      	lsls	r3, r3, #1
 800a570:	b2db      	uxtb	r3, r3
 800a572:	73fb      	strb	r3, [r7, #15]
    for (uint8_t crc_bit = 8U; crc_bit > 0U; crc_bit--)
 800a574:	7afb      	ldrb	r3, [r7, #11]
 800a576:	3b01      	subs	r3, #1
 800a578:	72fb      	strb	r3, [r7, #11]
 800a57a:	7afb      	ldrb	r3, [r7, #11]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d1e7      	bne.n	800a550 <crc_calculate+0x2e>
  for (uint16_t index = 0; index < count; index++)
 800a580:	89bb      	ldrh	r3, [r7, #12]
 800a582:	3301      	adds	r3, #1
 800a584:	81bb      	strh	r3, [r7, #12]
 800a586:	89ba      	ldrh	r2, [r7, #12]
 800a588:	887b      	ldrh	r3, [r7, #2]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d3d6      	bcc.n	800a53c <crc_calculate+0x1a>
    }
  }

  return crc;
 800a58e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a590:	4618      	mov	r0, r3
 800a592:	3714      	adds	r7, #20
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <crc_check>:
  * @param  crc    CRC check sum of data stream
  * @retval        0 if CRC is OK else 1
  *
  */
static uint8_t crc_check(const uint8_t *data, uint16_t count, uint8_t crc)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	807b      	strh	r3, [r7, #2]
 800a5a8:	4613      	mov	r3, r2
 800a5aa:	707b      	strb	r3, [r7, #1]
  return (crc_calculate(data, count) == crc) ? 0U : 1U;
 800a5ac:	887b      	ldrh	r3, [r7, #2]
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f7ff ffb6 	bl	800a522 <crc_calculate>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	787b      	ldrb	r3, [r7, #1]
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	bf14      	ite	ne
 800a5c0:	2301      	movne	r3, #1
 800a5c2:	2300      	moveq	r3, #0
 800a5c4:	b2db      	uxtb	r3, r3
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3708      	adds	r7, #8
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
	...

0800a5d0 <STTS22H_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_RegisterBusIO(STTS22H_Object_t *pObj, STTS22H_IO_t *pIO)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d103      	bne.n	800a5e8 <STTS22H_RegisterBusIO+0x18>
  {
    ret = STTS22H_ERROR;
 800a5e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a5e4:	60fb      	str	r3, [r7, #12]
 800a5e6:	e034      	b.n	800a652 <STTS22H_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	685a      	ldr	r2, [r3, #4]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	689a      	ldr	r2, [r3, #8]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	7b1a      	ldrb	r2, [r3, #12]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	691a      	ldr	r2, [r3, #16]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	695a      	ldr	r2, [r3, #20]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	699a      	ldr	r2, [r3, #24]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	4a0e      	ldr	r2, [pc, #56]	@ (800a65c <STTS22H_RegisterBusIO+0x8c>)
 800a624:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4a0d      	ldr	r2, [pc, #52]	@ (800a660 <STTS22H_RegisterBusIO+0x90>)
 800a62a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	69da      	ldr	r2, [r3, #28]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	687a      	ldr	r2, [r7, #4]
 800a638:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d004      	beq.n	800a64c <STTS22H_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4798      	blx	r3
 800a648:	60f8      	str	r0, [r7, #12]
 800a64a:	e002      	b.n	800a652 <STTS22H_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS22H_ERROR;
 800a64c:	f04f 33ff 	mov.w	r3, #4294967295
 800a650:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a652:	68fb      	ldr	r3, [r7, #12]
}
 800a654:	4618      	mov	r0, r3
 800a656:	3710      	adds	r7, #16
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	0800aa6d 	.word	0x0800aa6d
 800a660:	0800aadb 	.word	0x0800aadb

0800a664 <STTS22H_Init>:
  * @brief  Initialize the STTS22H sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_Init(STTS22H_Object_t *pObj)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a672:	2b00      	cmp	r3, #0
 800a674:	d127      	bne.n	800a6c6 <STTS22H_Init+0x62>
  {
    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800a67c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable BDU */
    if (stts22h_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	3320      	adds	r3, #32
 800a682:	2101      	movs	r1, #1
 800a684:	4618      	mov	r0, r3
 800a686:	f000 fbad 	bl	800ade4 <stts22h_block_data_update_set>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d002      	beq.n	800a696 <STTS22H_Init+0x32>
    {
      return STTS22H_ERROR;
 800a690:	f04f 33ff 	mov.w	r3, #4294967295
 800a694:	e01c      	b.n	800a6d0 <STTS22H_Init+0x6c>
    }

    /* Enable Automatic Address Increment */
    if (stts22h_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	3320      	adds	r3, #32
 800a69a:	2101      	movs	r1, #1
 800a69c:	4618      	mov	r0, r3
 800a69e:	f000 fbfa 	bl	800ae96 <stts22h_auto_increment_set>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d002      	beq.n	800a6ae <STTS22H_Init+0x4a>
    {
      return STTS22H_ERROR;
 800a6a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ac:	e010      	b.n	800a6d0 <STTS22H_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	3320      	adds	r3, #32
 800a6b2:	2100      	movs	r1, #0
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f000 fa9d 	bl	800abf4 <stts22h_temp_data_rate_set>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d002      	beq.n	800a6c6 <STTS22H_Init+0x62>
    {
      return STTS22H_ERROR;
 800a6c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a6c4:	e004      	b.n	800a6d0 <STTS22H_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS22H_OK;
 800a6ce:	2300      	movs	r3, #0
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3708      	adds	r7, #8
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <STTS22H_DeInit>:
  * @brief  Deinitialize the STTS22H sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_DeInit(STTS22H_Object_t *pObj)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d108      	bne.n	800a6fc <STTS22H_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS22H_TEMP_Disable(pObj) != STTS22H_OK)
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 f878 	bl	800a7e0 <STTS22H_TEMP_Disable>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d002      	beq.n	800a6fc <STTS22H_DeInit+0x24>
    {
      return STTS22H_ERROR;
 800a6f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a6fa:	e004      	b.n	800a706 <STTS22H_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS22H_OK;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	3708      	adds	r7, #8
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <STTS22H_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_ReadID(STTS22H_Object_t *pObj, uint8_t *Id)
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b084      	sub	sp, #16
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
 800a716:	6039      	str	r1, [r7, #0]
  uint8_t buf;

  if (stts22h_dev_id_get(&(pObj->Ctx), &buf) != STTS22H_OK)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	3320      	adds	r3, #32
 800a71c:	f107 020f 	add.w	r2, r7, #15
 800a720:	4611      	mov	r1, r2
 800a722:	4618      	mov	r0, r3
 800a724:	f000 fba6 	bl	800ae74 <stts22h_dev_id_get>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d002      	beq.n	800a734 <STTS22H_ReadID+0x26>
  {
    return STTS22H_ERROR;
 800a72e:	f04f 33ff 	mov.w	r3, #4294967295
 800a732:	e003      	b.n	800a73c <STTS22H_ReadID+0x2e>
  }

  *Id = buf;
 800a734:	7bfa      	ldrb	r2, [r7, #15]
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	701a      	strb	r2, [r3, #0]

  return STTS22H_OK;
 800a73a:	2300      	movs	r3, #0
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3710      	adds	r7, #16
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <STTS22H_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS22H sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_GetCapabilities(STTS22H_Object_t *pObj, STTS22H_Capabilities_t *Capabilities)
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	2200      	movs	r2, #0
 800a752:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	2200      	movs	r2, #0
 800a758:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	2201      	movs	r2, #1
 800a75e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	2200      	movs	r2, #0
 800a764:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	2200      	movs	r2, #0
 800a76a:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	f04f 0200 	mov.w	r2, #0
 800a772:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	4a08      	ldr	r2, [pc, #32]	@ (800a798 <STTS22H_GetCapabilities+0x54>)
 800a778:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	f04f 0200 	mov.w	r2, #0
 800a780:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	f04f 0200 	mov.w	r2, #0
 800a788:	615a      	str	r2, [r3, #20]
  return STTS22H_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr
 800a798:	43480000 	.word	0x43480000

0800a79c <STTS22H_TEMP_Enable>:
  * @brief  Enable the STTS22H temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_Enable(STTS22H_Object_t *pObj)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	d101      	bne.n	800a7b2 <STTS22H_TEMP_Enable+0x16>
  {
    return STTS22H_OK;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	e012      	b.n	800a7d8 <STTS22H_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS22H_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS22H_OK)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800a7b8:	eeb0 0a67 	vmov.f32	s0, s15
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 f8e9 	bl	800a994 <STTS22H_TEMP_SetOutputDataRate>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d002      	beq.n	800a7ce <STTS22H_TEMP_Enable+0x32>
  {
    return STTS22H_ERROR;
 800a7c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a7cc:	e004      	b.n	800a7d8 <STTS22H_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS22H_OK;
 800a7d6:	2300      	movs	r3, #0
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3708      	adds	r7, #8
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <STTS22H_TEMP_Disable>:
  * @brief  Disable the STTS22H temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_Disable(STTS22H_Object_t *pObj)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d101      	bne.n	800a7f6 <STTS22H_TEMP_Disable+0x16>
  {
    return STTS22H_OK;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	e01c      	b.n	800a830 <STTS22H_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS22H_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS22H_OK)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	3334      	adds	r3, #52	@ 0x34
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 f81b 	bl	800a838 <STTS22H_TEMP_GetOutputDataRate>
 800a802:	4603      	mov	r3, r0
 800a804:	2b00      	cmp	r3, #0
 800a806:	d002      	beq.n	800a80e <STTS22H_TEMP_Disable+0x2e>
  {
    return STTS22H_ERROR;
 800a808:	f04f 33ff 	mov.w	r3, #4294967295
 800a80c:	e010      	b.n	800a830 <STTS22H_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	3320      	adds	r3, #32
 800a812:	2100      	movs	r1, #0
 800a814:	4618      	mov	r0, r3
 800a816:	f000 f9ed 	bl	800abf4 <stts22h_temp_data_rate_set>
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d002      	beq.n	800a826 <STTS22H_TEMP_Disable+0x46>
  {
    return STTS22H_ERROR;
 800a820:	f04f 33ff 	mov.w	r3, #4294967295
 800a824:	e004      	b.n	800a830 <STTS22H_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS22H_OK;
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	3708      	adds	r7, #8
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <STTS22H_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_GetOutputDataRate(STTS22H_Object_t *pObj, float *Odr)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS22H_OK;
 800a842:	2300      	movs	r3, #0
 800a844:	60fb      	str	r3, [r7, #12]
  stts22h_odr_temp_t odr_low_level;

  if (stts22h_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS22H_OK)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	3320      	adds	r3, #32
 800a84a:	f107 020b 	add.w	r2, r7, #11
 800a84e:	4611      	mov	r1, r2
 800a850:	4618      	mov	r0, r3
 800a852:	f000 fa11 	bl	800ac78 <stts22h_temp_data_rate_get>
 800a856:	4603      	mov	r3, r0
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d002      	beq.n	800a862 <STTS22H_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS22H_ERROR;
 800a85c:	f04f 33ff 	mov.w	r3, #4294967295
 800a860:	e08b      	b.n	800a97a <STTS22H_TEMP_GetOutputDataRate+0x142>
  }

  switch (odr_low_level)
 800a862:	7afb      	ldrb	r3, [r7, #11]
 800a864:	2b32      	cmp	r3, #50	@ 0x32
 800a866:	f200 8083 	bhi.w	800a970 <STTS22H_TEMP_GetOutputDataRate+0x138>
 800a86a:	a201      	add	r2, pc, #4	@ (adr r2, 800a870 <STTS22H_TEMP_GetOutputDataRate+0x38>)
 800a86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a870:	0800a93d 	.word	0x0800a93d
 800a874:	0800a93d 	.word	0x0800a93d
 800a878:	0800a951 	.word	0x0800a951
 800a87c:	0800a971 	.word	0x0800a971
 800a880:	0800a947 	.word	0x0800a947
 800a884:	0800a971 	.word	0x0800a971
 800a888:	0800a971 	.word	0x0800a971
 800a88c:	0800a971 	.word	0x0800a971
 800a890:	0800a971 	.word	0x0800a971
 800a894:	0800a971 	.word	0x0800a971
 800a898:	0800a971 	.word	0x0800a971
 800a89c:	0800a971 	.word	0x0800a971
 800a8a0:	0800a971 	.word	0x0800a971
 800a8a4:	0800a971 	.word	0x0800a971
 800a8a8:	0800a971 	.word	0x0800a971
 800a8ac:	0800a971 	.word	0x0800a971
 800a8b0:	0800a971 	.word	0x0800a971
 800a8b4:	0800a971 	.word	0x0800a971
 800a8b8:	0800a959 	.word	0x0800a959
 800a8bc:	0800a971 	.word	0x0800a971
 800a8c0:	0800a971 	.word	0x0800a971
 800a8c4:	0800a971 	.word	0x0800a971
 800a8c8:	0800a971 	.word	0x0800a971
 800a8cc:	0800a971 	.word	0x0800a971
 800a8d0:	0800a971 	.word	0x0800a971
 800a8d4:	0800a971 	.word	0x0800a971
 800a8d8:	0800a971 	.word	0x0800a971
 800a8dc:	0800a971 	.word	0x0800a971
 800a8e0:	0800a971 	.word	0x0800a971
 800a8e4:	0800a971 	.word	0x0800a971
 800a8e8:	0800a971 	.word	0x0800a971
 800a8ec:	0800a971 	.word	0x0800a971
 800a8f0:	0800a971 	.word	0x0800a971
 800a8f4:	0800a971 	.word	0x0800a971
 800a8f8:	0800a961 	.word	0x0800a961
 800a8fc:	0800a971 	.word	0x0800a971
 800a900:	0800a971 	.word	0x0800a971
 800a904:	0800a971 	.word	0x0800a971
 800a908:	0800a971 	.word	0x0800a971
 800a90c:	0800a971 	.word	0x0800a971
 800a910:	0800a971 	.word	0x0800a971
 800a914:	0800a971 	.word	0x0800a971
 800a918:	0800a971 	.word	0x0800a971
 800a91c:	0800a971 	.word	0x0800a971
 800a920:	0800a971 	.word	0x0800a971
 800a924:	0800a971 	.word	0x0800a971
 800a928:	0800a971 	.word	0x0800a971
 800a92c:	0800a971 	.word	0x0800a971
 800a930:	0800a971 	.word	0x0800a971
 800a934:	0800a971 	.word	0x0800a971
 800a938:	0800a969 	.word	0x0800a969
  {
    case STTS22H_POWER_DOWN:
    case STTS22H_ONE_SHOT:
      *Odr = 0.0f;
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	f04f 0200 	mov.w	r2, #0
 800a942:	601a      	str	r2, [r3, #0]
      break;
 800a944:	e018      	b.n	800a978 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_1Hz:
      *Odr = 1.0f;
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800a94c:	601a      	str	r2, [r3, #0]
      break;
 800a94e:	e013      	b.n	800a978 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_25Hz:
      *Odr = 25.0f;
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	4a0c      	ldr	r2, [pc, #48]	@ (800a984 <STTS22H_TEMP_GetOutputDataRate+0x14c>)
 800a954:	601a      	str	r2, [r3, #0]
      break;
 800a956:	e00f      	b.n	800a978 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_50Hz:
      *Odr = 50.0f;
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	4a0b      	ldr	r2, [pc, #44]	@ (800a988 <STTS22H_TEMP_GetOutputDataRate+0x150>)
 800a95c:	601a      	str	r2, [r3, #0]
      break;
 800a95e:	e00b      	b.n	800a978 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_100Hz:
      *Odr = 100.0f;
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	4a0a      	ldr	r2, [pc, #40]	@ (800a98c <STTS22H_TEMP_GetOutputDataRate+0x154>)
 800a964:	601a      	str	r2, [r3, #0]
      break;
 800a966:	e007      	b.n	800a978 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_200Hz:
      *Odr = 200.0f;
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	4a09      	ldr	r2, [pc, #36]	@ (800a990 <STTS22H_TEMP_GetOutputDataRate+0x158>)
 800a96c:	601a      	str	r2, [r3, #0]
      break;
 800a96e:	e003      	b.n	800a978 <STTS22H_TEMP_GetOutputDataRate+0x140>

    default:
      ret = STTS22H_ERROR;
 800a970:	f04f 33ff 	mov.w	r3, #4294967295
 800a974:	60fb      	str	r3, [r7, #12]
      break;
 800a976:	bf00      	nop
  }

  return ret;
 800a978:	68fb      	ldr	r3, [r7, #12]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	41c80000 	.word	0x41c80000
 800a988:	42480000 	.word	0x42480000
 800a98c:	42c80000 	.word	0x42c80000
 800a990:	43480000 	.word	0x43480000

0800a994 <STTS22H_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_SetOutputDataRate(STTS22H_Object_t *pObj, float Odr)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	ed87 0a00 	vstr	s0, [r7]
  stts22h_odr_temp_t new_odr;

  new_odr = (Odr <= 1.0f) ? STTS22H_1Hz
            : (Odr <= 25.0f) ? STTS22H_25Hz
 800a9a0:	edd7 7a00 	vldr	s15, [r7]
 800a9a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a9a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9b0:	d801      	bhi.n	800a9b6 <STTS22H_TEMP_SetOutputDataRate+0x22>
 800a9b2:	2304      	movs	r3, #4
 800a9b4:	e021      	b.n	800a9fa <STTS22H_TEMP_SetOutputDataRate+0x66>
 800a9b6:	edd7 7a00 	vldr	s15, [r7]
 800a9ba:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800a9be:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a9c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9c6:	d801      	bhi.n	800a9cc <STTS22H_TEMP_SetOutputDataRate+0x38>
 800a9c8:	2302      	movs	r3, #2
 800a9ca:	e016      	b.n	800a9fa <STTS22H_TEMP_SetOutputDataRate+0x66>
 800a9cc:	edd7 7a00 	vldr	s15, [r7]
 800a9d0:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800aa20 <STTS22H_TEMP_SetOutputDataRate+0x8c>
 800a9d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a9d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9dc:	d801      	bhi.n	800a9e2 <STTS22H_TEMP_SetOutputDataRate+0x4e>
 800a9de:	2312      	movs	r3, #18
 800a9e0:	e00b      	b.n	800a9fa <STTS22H_TEMP_SetOutputDataRate+0x66>
 800a9e2:	edd7 7a00 	vldr	s15, [r7]
 800a9e6:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800aa24 <STTS22H_TEMP_SetOutputDataRate+0x90>
 800a9ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a9ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9f2:	d801      	bhi.n	800a9f8 <STTS22H_TEMP_SetOutputDataRate+0x64>
 800a9f4:	2322      	movs	r3, #34	@ 0x22
 800a9f6:	e000      	b.n	800a9fa <STTS22H_TEMP_SetOutputDataRate+0x66>
 800a9f8:	2332      	movs	r3, #50	@ 0x32
  new_odr = (Odr <= 1.0f) ? STTS22H_1Hz
 800a9fa:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.0f) ? STTS22H_50Hz
            : (Odr <= 100.0f) ? STTS22H_100Hz
            :                    STTS22H_200Hz;

  if (stts22h_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS22H_OK)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	3320      	adds	r3, #32
 800aa00:	7bfa      	ldrb	r2, [r7, #15]
 800aa02:	4611      	mov	r1, r2
 800aa04:	4618      	mov	r0, r3
 800aa06:	f000 f8f5 	bl	800abf4 <stts22h_temp_data_rate_set>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d002      	beq.n	800aa16 <STTS22H_TEMP_SetOutputDataRate+0x82>
  {
    return STTS22H_ERROR;
 800aa10:	f04f 33ff 	mov.w	r3, #4294967295
 800aa14:	e000      	b.n	800aa18 <STTS22H_TEMP_SetOutputDataRate+0x84>
  }

  return STTS22H_OK;
 800aa16:	2300      	movs	r3, #0
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3710      	adds	r7, #16
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}
 800aa20:	42480000 	.word	0x42480000
 800aa24:	42c80000 	.word	0x42c80000

0800aa28 <STTS22H_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_GetTemperature(STTS22H_Object_t *pObj, float *Value)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts22h_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS22H_OK)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	3320      	adds	r3, #32
 800aa36:	f107 020e 	add.w	r2, r7, #14
 800aa3a:	4611      	mov	r1, r2
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f000 f9f7 	bl	800ae30 <stts22h_temperature_raw_get>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d002      	beq.n	800aa4e <STTS22H_TEMP_GetTemperature+0x26>
  {
    return STTS22H_ERROR;
 800aa48:	f04f 33ff 	mov.w	r3, #4294967295
 800aa4c:	e00a      	b.n	800aa64 <STTS22H_TEMP_GetTemperature+0x3c>
  }

  *Value = stts22h_from_lsb_to_celsius(raw_value);
 800aa4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800aa52:	4618      	mov	r0, r3
 800aa54:	f000 f8b4 	bl	800abc0 <stts22h_from_lsb_to_celsius>
 800aa58:	eef0 7a40 	vmov.f32	s15, s0
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	edc3 7a00 	vstr	s15, [r3]

  return STTS22H_OK;
 800aa62:	2300      	movs	r3, #0
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3710      	adds	r7, #16
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800aa6c:	b590      	push	{r4, r7, lr}
 800aa6e:	b089      	sub	sp, #36	@ 0x24
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	607a      	str	r2, [r7, #4]
 800aa76:	461a      	mov	r2, r3
 800aa78:	460b      	mov	r3, r1
 800aa7a:	72fb      	strb	r3, [r7, #11]
 800aa7c:	4613      	mov	r3, r2
 800aa7e:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS22H_OK;
 800aa80:	2300      	movs	r3, #0
 800aa82:	61bb      	str	r3, [r7, #24]
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d11f      	bne.n	800aad0 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800aa90:	2300      	movs	r3, #0
 800aa92:	83fb      	strh	r3, [r7, #30]
 800aa94:	e018      	b.n	800aac8 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	695c      	ldr	r4, [r3, #20]
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	7b1b      	ldrb	r3, [r3, #12]
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	7afb      	ldrb	r3, [r7, #11]
 800aaa2:	b29a      	uxth	r2, r3
 800aaa4:	8bfb      	ldrh	r3, [r7, #30]
 800aaa6:	4413      	add	r3, r2
 800aaa8:	b299      	uxth	r1, r3
 800aaaa:	8bfb      	ldrh	r3, [r7, #30]
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	441a      	add	r2, r3
 800aab0:	2301      	movs	r3, #1
 800aab2:	47a0      	blx	r4
 800aab4:	61b8      	str	r0, [r7, #24]
      if (ret != STTS22H_OK)
 800aab6:	69bb      	ldr	r3, [r7, #24]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d002      	beq.n	800aac2 <ReadRegWrap+0x56>
      {
        return STTS22H_ERROR;
 800aabc:	f04f 33ff 	mov.w	r3, #4294967295
 800aac0:	e007      	b.n	800aad2 <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800aac2:	8bfb      	ldrh	r3, [r7, #30]
 800aac4:	3301      	adds	r3, #1
 800aac6:	83fb      	strh	r3, [r7, #30]
 800aac8:	8bfa      	ldrh	r2, [r7, #30]
 800aaca:	893b      	ldrh	r3, [r7, #8]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d3e2      	bcc.n	800aa96 <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 800aad0:	69bb      	ldr	r3, [r7, #24]
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3724      	adds	r7, #36	@ 0x24
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd90      	pop	{r4, r7, pc}

0800aada <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800aada:	b590      	push	{r4, r7, lr}
 800aadc:	b089      	sub	sp, #36	@ 0x24
 800aade:	af00      	add	r7, sp, #0
 800aae0:	60f8      	str	r0, [r7, #12]
 800aae2:	607a      	str	r2, [r7, #4]
 800aae4:	461a      	mov	r2, r3
 800aae6:	460b      	mov	r3, r1
 800aae8:	72fb      	strb	r3, [r7, #11]
 800aaea:	4613      	mov	r3, r2
 800aaec:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS22H_OK;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	61bb      	str	r3, [r7, #24]
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	689b      	ldr	r3, [r3, #8]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d11f      	bne.n	800ab3e <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800aafe:	2300      	movs	r3, #0
 800ab00:	83fb      	strh	r3, [r7, #30]
 800ab02:	e018      	b.n	800ab36 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	691c      	ldr	r4, [r3, #16]
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	7b1b      	ldrb	r3, [r3, #12]
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	7afb      	ldrb	r3, [r7, #11]
 800ab10:	b29a      	uxth	r2, r3
 800ab12:	8bfb      	ldrh	r3, [r7, #30]
 800ab14:	4413      	add	r3, r2
 800ab16:	b299      	uxth	r1, r3
 800ab18:	8bfb      	ldrh	r3, [r7, #30]
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	441a      	add	r2, r3
 800ab1e:	2301      	movs	r3, #1
 800ab20:	47a0      	blx	r4
 800ab22:	61b8      	str	r0, [r7, #24]
      if (ret != STTS22H_OK)
 800ab24:	69bb      	ldr	r3, [r7, #24]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d002      	beq.n	800ab30 <WriteRegWrap+0x56>
      {
        return STTS22H_ERROR;
 800ab2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ab2e:	e007      	b.n	800ab40 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800ab30:	8bfb      	ldrh	r3, [r7, #30]
 800ab32:	3301      	adds	r3, #1
 800ab34:	83fb      	strh	r3, [r7, #30]
 800ab36:	8bfa      	ldrh	r2, [r7, #30]
 800ab38:	893b      	ldrh	r3, [r7, #8]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d3e2      	bcc.n	800ab04 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 800ab3e:	69bb      	ldr	r3, [r7, #24]
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3724      	adds	r7, #36	@ 0x24
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd90      	pop	{r4, r7, pc}

0800ab48 <stts22h_read_reg>:
  *
  */
int32_t __weak stts22h_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800ab48:	b590      	push	{r4, r7, lr}
 800ab4a:	b087      	sub	sp, #28
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	607a      	str	r2, [r7, #4]
 800ab52:	461a      	mov	r2, r3
 800ab54:	460b      	mov	r3, r1
 800ab56:	72fb      	strb	r3, [r7, #11]
 800ab58:	4613      	mov	r3, r2
 800ab5a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d102      	bne.n	800ab68 <stts22h_read_reg+0x20>
 800ab62:	f04f 33ff 	mov.w	r3, #4294967295
 800ab66:	e009      	b.n	800ab7c <stts22h_read_reg+0x34>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	685c      	ldr	r4, [r3, #4]
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	68d8      	ldr	r0, [r3, #12]
 800ab70:	893b      	ldrh	r3, [r7, #8]
 800ab72:	7af9      	ldrb	r1, [r7, #11]
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	47a0      	blx	r4
 800ab78:	6178      	str	r0, [r7, #20]

  return ret;
 800ab7a:	697b      	ldr	r3, [r7, #20]
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	371c      	adds	r7, #28
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd90      	pop	{r4, r7, pc}

0800ab84 <stts22h_write_reg>:
  *
  */
int32_t __weak stts22h_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800ab84:	b590      	push	{r4, r7, lr}
 800ab86:	b087      	sub	sp, #28
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	607a      	str	r2, [r7, #4]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	460b      	mov	r3, r1
 800ab92:	72fb      	strb	r3, [r7, #11]
 800ab94:	4613      	mov	r3, r2
 800ab96:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d102      	bne.n	800aba4 <stts22h_write_reg+0x20>
 800ab9e:	f04f 33ff 	mov.w	r3, #4294967295
 800aba2:	e009      	b.n	800abb8 <stts22h_write_reg+0x34>

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681c      	ldr	r4, [r3, #0]
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	68d8      	ldr	r0, [r3, #12]
 800abac:	893b      	ldrh	r3, [r7, #8]
 800abae:	7af9      	ldrb	r1, [r7, #11]
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	47a0      	blx	r4
 800abb4:	6178      	str	r0, [r7, #20]

  return ret;
 800abb6:	697b      	ldr	r3, [r7, #20]
}
 800abb8:	4618      	mov	r0, r3
 800abba:	371c      	adds	r7, #28
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd90      	pop	{r4, r7, pc}

0800abc0 <stts22h_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts22h_from_lsb_to_celsius(int16_t lsb)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	4603      	mov	r3, r0
 800abc8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 800abca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800abce:	ee07 3a90 	vmov	s15, r3
 800abd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800abd6:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800abf0 <stts22h_from_lsb_to_celsius+0x30>
 800abda:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800abde:	eef0 7a66 	vmov.f32	s15, s13
}
 800abe2:	eeb0 0a67 	vmov.f32	s0, s15
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr
 800abf0:	42c80000 	.word	0x42c80000

0800abf4 <stts22h_temp_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_set(const stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t val)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	460b      	mov	r3, r1
 800abfe:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800ac00:	f107 0208 	add.w	r2, r7, #8
 800ac04:	2301      	movs	r3, #1
 800ac06:	2104      	movs	r1, #4
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f7ff ff9d 	bl	800ab48 <stts22h_read_reg>
 800ac0e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d12a      	bne.n	800ac6c <stts22h_temp_data_rate_set+0x78>
  {
    ctrl.one_shot = (uint8_t)val & 0x01U;
 800ac16:	78fb      	ldrb	r3, [r7, #3]
 800ac18:	f003 0301 	and.w	r3, r3, #1
 800ac1c:	b2da      	uxtb	r2, r3
 800ac1e:	7a3b      	ldrb	r3, [r7, #8]
 800ac20:	f362 0300 	bfi	r3, r2, #0, #1
 800ac24:	723b      	strb	r3, [r7, #8]
    ctrl.freerun = ((uint8_t)val & 0x02U) >> 1;
 800ac26:	78fb      	ldrb	r3, [r7, #3]
 800ac28:	085b      	lsrs	r3, r3, #1
 800ac2a:	f003 0301 	and.w	r3, r3, #1
 800ac2e:	b2da      	uxtb	r2, r3
 800ac30:	7a3b      	ldrb	r3, [r7, #8]
 800ac32:	f362 0382 	bfi	r3, r2, #2, #1
 800ac36:	723b      	strb	r3, [r7, #8]
    ctrl.low_odr_start = ((uint8_t)val & 0x04U) >> 2;
 800ac38:	78fb      	ldrb	r3, [r7, #3]
 800ac3a:	089b      	lsrs	r3, r3, #2
 800ac3c:	f003 0301 	and.w	r3, r3, #1
 800ac40:	b2da      	uxtb	r2, r3
 800ac42:	7a3b      	ldrb	r3, [r7, #8]
 800ac44:	f362 13c7 	bfi	r3, r2, #7, #1
 800ac48:	723b      	strb	r3, [r7, #8]
    ctrl.avg = ((uint8_t)val & 0x30U) >> 4;
 800ac4a:	78fb      	ldrb	r3, [r7, #3]
 800ac4c:	091b      	lsrs	r3, r3, #4
 800ac4e:	f003 0303 	and.w	r3, r3, #3
 800ac52:	b2da      	uxtb	r2, r3
 800ac54:	7a3b      	ldrb	r3, [r7, #8]
 800ac56:	f362 1305 	bfi	r3, r2, #4, #2
 800ac5a:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800ac5c:	f107 0208 	add.w	r2, r7, #8
 800ac60:	2301      	movs	r3, #1
 800ac62:	2104      	movs	r1, #4
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f7ff ff8d 	bl	800ab84 <stts22h_write_reg>
 800ac6a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3710      	adds	r7, #16
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
	...

0800ac78 <stts22h_temp_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_get(const stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t *val)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL,
 800ac82:	f107 0208 	add.w	r2, r7, #8
 800ac86:	2301      	movs	r3, #1
 800ac88:	2104      	movs	r1, #4
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f7ff ff5c 	bl	800ab48 <stts22h_read_reg>
 800ac90:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl, 1);

  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 800ac92:	7a3b      	ldrb	r3, [r7, #8]
 800ac94:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	7a3b      	ldrb	r3, [r7, #8]
 800ac9e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800aca2:	b2db      	uxtb	r3, r3
 800aca4:	005b      	lsls	r3, r3, #1
 800aca6:	431a      	orrs	r2, r3
 800aca8:	7a3b      	ldrb	r3, [r7, #8]
 800acaa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	431a      	orrs	r2, r3
                                                 2) |
          (ctrl.avg << 4))
 800acb4:	7a3b      	ldrb	r3, [r7, #8]
 800acb6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	011b      	lsls	r3, r3, #4
                                                 2) |
 800acbe:	4313      	orrs	r3, r2
  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 800acc0:	2b32      	cmp	r3, #50	@ 0x32
 800acc2:	f200 8085 	bhi.w	800add0 <stts22h_temp_data_rate_get+0x158>
 800acc6:	a201      	add	r2, pc, #4	@ (adr r2, 800accc <stts22h_temp_data_rate_get+0x54>)
 800acc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800accc:	0800ad99 	.word	0x0800ad99
 800acd0:	0800ada1 	.word	0x0800ada1
 800acd4:	0800adb1 	.word	0x0800adb1
 800acd8:	0800add1 	.word	0x0800add1
 800acdc:	0800ada9 	.word	0x0800ada9
 800ace0:	0800add1 	.word	0x0800add1
 800ace4:	0800add1 	.word	0x0800add1
 800ace8:	0800add1 	.word	0x0800add1
 800acec:	0800add1 	.word	0x0800add1
 800acf0:	0800add1 	.word	0x0800add1
 800acf4:	0800add1 	.word	0x0800add1
 800acf8:	0800add1 	.word	0x0800add1
 800acfc:	0800add1 	.word	0x0800add1
 800ad00:	0800add1 	.word	0x0800add1
 800ad04:	0800add1 	.word	0x0800add1
 800ad08:	0800add1 	.word	0x0800add1
 800ad0c:	0800add1 	.word	0x0800add1
 800ad10:	0800add1 	.word	0x0800add1
 800ad14:	0800adb9 	.word	0x0800adb9
 800ad18:	0800add1 	.word	0x0800add1
 800ad1c:	0800add1 	.word	0x0800add1
 800ad20:	0800add1 	.word	0x0800add1
 800ad24:	0800add1 	.word	0x0800add1
 800ad28:	0800add1 	.word	0x0800add1
 800ad2c:	0800add1 	.word	0x0800add1
 800ad30:	0800add1 	.word	0x0800add1
 800ad34:	0800add1 	.word	0x0800add1
 800ad38:	0800add1 	.word	0x0800add1
 800ad3c:	0800add1 	.word	0x0800add1
 800ad40:	0800add1 	.word	0x0800add1
 800ad44:	0800add1 	.word	0x0800add1
 800ad48:	0800add1 	.word	0x0800add1
 800ad4c:	0800add1 	.word	0x0800add1
 800ad50:	0800add1 	.word	0x0800add1
 800ad54:	0800adc1 	.word	0x0800adc1
 800ad58:	0800add1 	.word	0x0800add1
 800ad5c:	0800add1 	.word	0x0800add1
 800ad60:	0800add1 	.word	0x0800add1
 800ad64:	0800add1 	.word	0x0800add1
 800ad68:	0800add1 	.word	0x0800add1
 800ad6c:	0800add1 	.word	0x0800add1
 800ad70:	0800add1 	.word	0x0800add1
 800ad74:	0800add1 	.word	0x0800add1
 800ad78:	0800add1 	.word	0x0800add1
 800ad7c:	0800add1 	.word	0x0800add1
 800ad80:	0800add1 	.word	0x0800add1
 800ad84:	0800add1 	.word	0x0800add1
 800ad88:	0800add1 	.word	0x0800add1
 800ad8c:	0800add1 	.word	0x0800add1
 800ad90:	0800add1 	.word	0x0800add1
 800ad94:	0800adc9 	.word	0x0800adc9
  {
    case STTS22H_POWER_DOWN:
      *val = STTS22H_POWER_DOWN;
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	701a      	strb	r2, [r3, #0]
      break;
 800ad9e:	e01b      	b.n	800add8 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_ONE_SHOT:
      *val = STTS22H_ONE_SHOT;
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	2201      	movs	r2, #1
 800ada4:	701a      	strb	r2, [r3, #0]
      break;
 800ada6:	e017      	b.n	800add8 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_1Hz:
      *val = STTS22H_1Hz;
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	2204      	movs	r2, #4
 800adac:	701a      	strb	r2, [r3, #0]
      break;
 800adae:	e013      	b.n	800add8 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_25Hz:
      *val = STTS22H_25Hz;
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	2202      	movs	r2, #2
 800adb4:	701a      	strb	r2, [r3, #0]
      break;
 800adb6:	e00f      	b.n	800add8 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_50Hz:
      *val = STTS22H_50Hz;
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	2212      	movs	r2, #18
 800adbc:	701a      	strb	r2, [r3, #0]
      break;
 800adbe:	e00b      	b.n	800add8 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_100Hz:
      *val = STTS22H_100Hz;
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	2222      	movs	r2, #34	@ 0x22
 800adc4:	701a      	strb	r2, [r3, #0]
      break;
 800adc6:	e007      	b.n	800add8 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_200Hz:
      *val = STTS22H_200Hz;
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	2232      	movs	r2, #50	@ 0x32
 800adcc:	701a      	strb	r2, [r3, #0]
      break;
 800adce:	e003      	b.n	800add8 <stts22h_temp_data_rate_get+0x160>

    default:
      *val = STTS22H_POWER_DOWN;
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	2200      	movs	r2, #0
 800add4:	701a      	strb	r2, [r3, #0]
      break;
 800add6:	bf00      	nop
  }

  return ret;
 800add8:	68fb      	ldr	r3, [r7, #12]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop

0800ade4 <stts22h_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	460b      	mov	r3, r1
 800adee:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800adf0:	f107 0208 	add.w	r2, r7, #8
 800adf4:	2301      	movs	r3, #1
 800adf6:	2104      	movs	r1, #4
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f7ff fea5 	bl	800ab48 <stts22h_read_reg>
 800adfe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d10f      	bne.n	800ae26 <stts22h_block_data_update_set+0x42>
  {
    ctrl.bdu = val;
 800ae06:	78fb      	ldrb	r3, [r7, #3]
 800ae08:	f003 0301 	and.w	r3, r3, #1
 800ae0c:	b2da      	uxtb	r2, r3
 800ae0e:	7a3b      	ldrb	r3, [r7, #8]
 800ae10:	f362 1386 	bfi	r3, r2, #6, #1
 800ae14:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800ae16:	f107 0208 	add.w	r2, r7, #8
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	2104      	movs	r1, #4
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f7ff feb0 	bl	800ab84 <stts22h_write_reg>
 800ae24:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ae26:	68fb      	ldr	r3, [r7, #12]
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3710      	adds	r7, #16
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <stts22h_temperature_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_TEMP_L_OUT, buff, 2);
 800ae3a:	f107 0208 	add.w	r2, r7, #8
 800ae3e:	2302      	movs	r3, #2
 800ae40:	2106      	movs	r1, #6
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f7ff fe80 	bl	800ab48 <stts22h_read_reg>
 800ae48:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800ae4a:	7a7b      	ldrb	r3, [r7, #9]
 800ae4c:	b21a      	sxth	r2, r3
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	021b      	lsls	r3, r3, #8
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	7a3a      	ldrb	r2, [r7, #8]
 800ae60:	4413      	add	r3, r2
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	b21a      	sxth	r2, r3
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	801a      	strh	r2, [r3, #0]

  return ret;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3710      	adds	r7, #16
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <stts22h_dev_id_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_dev_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_WHOAMI, buff, 1);
 800ae7e:	2301      	movs	r3, #1
 800ae80:	683a      	ldr	r2, [r7, #0]
 800ae82:	2101      	movs	r1, #1
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f7ff fe5f 	bl	800ab48 <stts22h_read_reg>
 800ae8a:	60f8      	str	r0, [r7, #12]

  return ret;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3710      	adds	r7, #16
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <stts22h_auto_increment_set>:
  * @param  val    Change the values of "if_add_inc" in reg STTS22H.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b084      	sub	sp, #16
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
 800ae9e:	460b      	mov	r3, r1
 800aea0:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800aea2:	f107 0208 	add.w	r2, r7, #8
 800aea6:	2301      	movs	r3, #1
 800aea8:	2104      	movs	r1, #4
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f7ff fe4c 	bl	800ab48 <stts22h_read_reg>
 800aeb0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d10f      	bne.n	800aed8 <stts22h_auto_increment_set+0x42>
  {
    ctrl.if_add_inc = (uint8_t)val;
 800aeb8:	78fb      	ldrb	r3, [r7, #3]
 800aeba:	f003 0301 	and.w	r3, r3, #1
 800aebe:	b2da      	uxtb	r2, r3
 800aec0:	7a3b      	ldrb	r3, [r7, #8]
 800aec2:	f362 03c3 	bfi	r3, r2, #3, #1
 800aec6:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800aec8:	f107 0208 	add.w	r2, r7, #8
 800aecc:	2301      	movs	r3, #1
 800aece:	2104      	movs	r1, #4
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f7ff fe57 	bl	800ab84 <stts22h_write_reg>
 800aed6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800aed8:	68fb      	ldr	r3, [r7, #12]
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3710      	adds	r7, #16
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}
	...

0800aee4 <IKS4A1_ENV_SENSOR_Init>:
  *         - ENV_PRESSURE
  *         - ENV_HUMIDITY
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b08c      	sub	sp, #48	@ 0x30
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800aeee:	2300      	movs	r3, #0
 800aef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t function = ENV_TEMPERATURE;
 800aef2:	2301      	movs	r3, #1
 800aef4:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 800aef6:	2300      	movs	r3, #0
 800aef8:	623b      	str	r3, [r7, #32]
  IKS4A1_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d07c      	beq.n	800affa <IKS4A1_ENV_SENSOR_Init+0x116>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2b02      	cmp	r3, #2
 800af04:	f200 80b2 	bhi.w	800b06c <IKS4A1_ENV_SENSOR_Init+0x188>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d003      	beq.n	800af16 <IKS4A1_ENV_SENSOR_Init+0x32>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2b01      	cmp	r3, #1
 800af12:	d039      	beq.n	800af88 <IKS4A1_ENV_SENSOR_Init+0xa4>
 800af14:	e0aa      	b.n	800b06c <IKS4A1_ENV_SENSOR_Init+0x188>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_STTS22H_0 == 1)
    case IKS4A1_STTS22H_0:
      if (STTS22H_0_Probe(Functions) != BSP_ERROR_NONE)
 800af16:	6838      	ldr	r0, [r7, #0]
 800af18:	f000 f9ca 	bl	800b2b0 <STTS22H_0_Probe>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d002      	beq.n	800af28 <IKS4A1_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800af22:	f04f 33ff 	mov.w	r3, #4294967295
 800af26:	e0df      	b.n	800b0e8 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800af28:	4a71      	ldr	r2, [pc, #452]	@ (800b0f0 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af30:	68db      	ldr	r3, [r3, #12]
 800af32:	4970      	ldr	r1, [pc, #448]	@ (800b0f4 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800af3a:	f107 0108 	add.w	r1, r7, #8
 800af3e:	4610      	mov	r0, r2
 800af40:	4798      	blx	r3
 800af42:	4603      	mov	r3, r0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d002      	beq.n	800af4e <IKS4A1_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800af48:	f06f 0306 	mvn.w	r3, #6
 800af4c:	e0cc      	b.n	800b0e8 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800af4e:	7a3b      	ldrb	r3, [r7, #8]
 800af50:	2b01      	cmp	r3, #1
 800af52:	d103      	bne.n	800af5c <IKS4A1_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 800af54:	6a3b      	ldr	r3, [r7, #32]
 800af56:	f043 0301 	orr.w	r3, r3, #1
 800af5a:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800af5c:	7abb      	ldrb	r3, [r7, #10]
 800af5e:	2b01      	cmp	r3, #1
 800af60:	d103      	bne.n	800af6a <IKS4A1_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 800af62:	6a3b      	ldr	r3, [r7, #32]
 800af64:	f043 0304 	orr.w	r3, r3, #4
 800af68:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800af6a:	7a7b      	ldrb	r3, [r7, #9]
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d103      	bne.n	800af78 <IKS4A1_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 800af70:	6a3b      	ldr	r3, [r7, #32]
 800af72:	f043 0302 	orr.w	r3, r3, #2
 800af76:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800af78:	7afb      	ldrb	r3, [r7, #11]
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d17a      	bne.n	800b074 <IKS4A1_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 800af7e:	6a3b      	ldr	r3, [r7, #32]
 800af80:	f043 0308 	orr.w	r3, r3, #8
 800af84:	623b      	str	r3, [r7, #32]
      }
      break;
 800af86:	e075      	b.n	800b074 <IKS4A1_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_LPS22DF_0 == 1)
    case IKS4A1_LPS22DF_0:
      if (LPS22DF_0_Probe(Functions) != BSP_ERROR_NONE)
 800af88:	6838      	ldr	r0, [r7, #0]
 800af8a:	f000 fa47 	bl	800b41c <LPS22DF_0_Probe>
 800af8e:	4603      	mov	r3, r0
 800af90:	2b00      	cmp	r3, #0
 800af92:	d002      	beq.n	800af9a <IKS4A1_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 800af94:	f04f 33ff 	mov.w	r3, #4294967295
 800af98:	e0a6      	b.n	800b0e8 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800af9a:	4a55      	ldr	r2, [pc, #340]	@ (800b0f0 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	4953      	ldr	r1, [pc, #332]	@ (800b0f4 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800afac:	f107 0108 	add.w	r1, r7, #8
 800afb0:	4610      	mov	r0, r2
 800afb2:	4798      	blx	r3
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d002      	beq.n	800afc0 <IKS4A1_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800afba:	f06f 0306 	mvn.w	r3, #6
 800afbe:	e093      	b.n	800b0e8 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800afc0:	7a3b      	ldrb	r3, [r7, #8]
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d103      	bne.n	800afce <IKS4A1_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 800afc6:	6a3b      	ldr	r3, [r7, #32]
 800afc8:	f043 0301 	orr.w	r3, r3, #1
 800afcc:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800afce:	7abb      	ldrb	r3, [r7, #10]
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d103      	bne.n	800afdc <IKS4A1_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 800afd4:	6a3b      	ldr	r3, [r7, #32]
 800afd6:	f043 0304 	orr.w	r3, r3, #4
 800afda:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800afdc:	7a7b      	ldrb	r3, [r7, #9]
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d103      	bne.n	800afea <IKS4A1_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 800afe2:	6a3b      	ldr	r3, [r7, #32]
 800afe4:	f043 0302 	orr.w	r3, r3, #2
 800afe8:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800afea:	7afb      	ldrb	r3, [r7, #11]
 800afec:	2b01      	cmp	r3, #1
 800afee:	d143      	bne.n	800b078 <IKS4A1_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 800aff0:	6a3b      	ldr	r3, [r7, #32]
 800aff2:	f043 0308 	orr.w	r3, r3, #8
 800aff6:	623b      	str	r3, [r7, #32]
      }
      break;
 800aff8:	e03e      	b.n	800b078 <IKS4A1_ENV_SENSOR_Init+0x194>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_SHT40AD1B_0 == 1)
    case IKS4A1_SHT40AD1B_0:
      if (SHT40AD1B_0_Probe(Functions) != BSP_ERROR_NONE)
 800affa:	6838      	ldr	r0, [r7, #0]
 800affc:	f000 fade 	bl	800b5bc <SHT40AD1B_0_Probe>
 800b000:	4603      	mov	r3, r0
 800b002:	2b00      	cmp	r3, #0
 800b004:	d002      	beq.n	800b00c <IKS4A1_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 800b006:	f04f 33ff 	mov.w	r3, #4294967295
 800b00a:	e06d      	b.n	800b0e8 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b00c:	4a38      	ldr	r2, [pc, #224]	@ (800b0f0 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b014:	68db      	ldr	r3, [r3, #12]
 800b016:	4937      	ldr	r1, [pc, #220]	@ (800b0f4 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b01e:	f107 0108 	add.w	r1, r7, #8
 800b022:	4610      	mov	r0, r2
 800b024:	4798      	blx	r3
 800b026:	4603      	mov	r3, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d002      	beq.n	800b032 <IKS4A1_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b02c:	f06f 0306 	mvn.w	r3, #6
 800b030:	e05a      	b.n	800b0e8 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800b032:	7a3b      	ldrb	r3, [r7, #8]
 800b034:	2b01      	cmp	r3, #1
 800b036:	d103      	bne.n	800b040 <IKS4A1_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 800b038:	6a3b      	ldr	r3, [r7, #32]
 800b03a:	f043 0301 	orr.w	r3, r3, #1
 800b03e:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800b040:	7abb      	ldrb	r3, [r7, #10]
 800b042:	2b01      	cmp	r3, #1
 800b044:	d103      	bne.n	800b04e <IKS4A1_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 800b046:	6a3b      	ldr	r3, [r7, #32]
 800b048:	f043 0304 	orr.w	r3, r3, #4
 800b04c:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800b04e:	7a7b      	ldrb	r3, [r7, #9]
 800b050:	2b01      	cmp	r3, #1
 800b052:	d103      	bne.n	800b05c <IKS4A1_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 800b054:	6a3b      	ldr	r3, [r7, #32]
 800b056:	f043 0302 	orr.w	r3, r3, #2
 800b05a:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800b05c:	7afb      	ldrb	r3, [r7, #11]
 800b05e:	2b01      	cmp	r3, #1
 800b060:	d10c      	bne.n	800b07c <IKS4A1_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 800b062:	6a3b      	ldr	r3, [r7, #32]
 800b064:	f043 0308 	orr.w	r3, r3, #8
 800b068:	623b      	str	r3, [r7, #32]
      }
      break;
 800b06a:	e007      	b.n	800b07c <IKS4A1_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800b06c:	f06f 0301 	mvn.w	r3, #1
 800b070:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800b072:	e004      	b.n	800b07e <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800b074:	bf00      	nop
 800b076:	e002      	b.n	800b07e <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800b078:	bf00      	nop
 800b07a:	e000      	b.n	800b07e <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800b07c:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800b07e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b080:	2b00      	cmp	r3, #0
 800b082:	d001      	beq.n	800b088 <IKS4A1_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 800b084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b086:	e02f      	b.n	800b0e8 <IKS4A1_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS4A1_ENV_FUNCTIONS_NBR; i++)
 800b088:	2300      	movs	r3, #0
 800b08a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b08c:	e028      	b.n	800b0e0 <IKS4A1_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800b08e:	683a      	ldr	r2, [r7, #0]
 800b090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b092:	4013      	ands	r3, r2
 800b094:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b096:	429a      	cmp	r2, r3
 800b098:	d11c      	bne.n	800b0d4 <IKS4A1_ENV_SENSOR_Init+0x1f0>
 800b09a:	6a3a      	ldr	r2, [r7, #32]
 800b09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b09e:	4013      	ands	r3, r2
 800b0a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d116      	bne.n	800b0d4 <IKS4A1_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800b0a6:	4a14      	ldr	r2, [pc, #80]	@ (800b0f8 <IKS4A1_ENV_SENSOR_Init+0x214>)
 800b0a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0ae:	4913      	ldr	r1, [pc, #76]	@ (800b0fc <IKS4A1_ENV_SENSOR_Init+0x218>)
 800b0b0:	687a      	ldr	r2, [r7, #4]
 800b0b2:	0092      	lsls	r2, r2, #2
 800b0b4:	4413      	add	r3, r2
 800b0b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	490d      	ldr	r1, [pc, #52]	@ (800b0f4 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800b0be:	687a      	ldr	r2, [r7, #4]
 800b0c0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b0c4:	4610      	mov	r0, r2
 800b0c6:	4798      	blx	r3
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d002      	beq.n	800b0d4 <IKS4A1_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800b0ce:	f06f 0304 	mvn.w	r3, #4
 800b0d2:	e009      	b.n	800b0e8 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
    }
    function = function << 1;
 800b0d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0d6:	005b      	lsls	r3, r3, #1
 800b0d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (i = 0; i < IKS4A1_ENV_FUNCTIONS_NBR; i++)
 800b0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0dc:	3301      	adds	r3, #1
 800b0de:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e2:	2b03      	cmp	r3, #3
 800b0e4:	d9d3      	bls.n	800b08e <IKS4A1_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 800b0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3730      	adds	r7, #48	@ 0x30
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	200006c8 	.word	0x200006c8
 800b0f4:	2000068c 	.word	0x2000068c
 800b0f8:	200001b0 	.word	0x200001b0
 800b0fc:	20000698 	.word	0x20000698

0800b100 <IKS4A1_ENV_SENSOR_GetCapabilities>:
  * @param  Instance Environmental sensor instance
  * @param  Capabilities pointer to Environmental sensor capabilities
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_GetCapabilities(uint32_t Instance, IKS4A1_ENV_SENSOR_Capabilities_t *Capabilities)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2b02      	cmp	r3, #2
 800b10e:	d903      	bls.n	800b118 <IKS4A1_ENV_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b110:	f06f 0301 	mvn.w	r3, #1
 800b114:	60fb      	str	r3, [r7, #12]
 800b116:	e014      	b.n	800b142 <IKS4A1_ENV_SENSOR_GetCapabilities+0x42>
  }
  else if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 800b118:	4a0c      	ldr	r2, [pc, #48]	@ (800b14c <IKS4A1_ENV_SENSOR_GetCapabilities+0x4c>)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b120:	68db      	ldr	r3, [r3, #12]
 800b122:	490b      	ldr	r1, [pc, #44]	@ (800b150 <IKS4A1_ENV_SENSOR_GetCapabilities+0x50>)
 800b124:	687a      	ldr	r2, [r7, #4]
 800b126:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b12a:	6839      	ldr	r1, [r7, #0]
 800b12c:	4610      	mov	r0, r2
 800b12e:	4798      	blx	r3
 800b130:	4603      	mov	r3, r0
 800b132:	2b00      	cmp	r3, #0
 800b134:	d003      	beq.n	800b13e <IKS4A1_ENV_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b136:	f06f 0306 	mvn.w	r3, #6
 800b13a:	60fb      	str	r3, [r7, #12]
 800b13c:	e001      	b.n	800b142 <IKS4A1_ENV_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800b13e:	2300      	movs	r3, #0
 800b140:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b142:	68fb      	ldr	r3, [r7, #12]
}
 800b144:	4618      	mov	r0, r3
 800b146:	3710      	adds	r7, #16
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	200006c8 	.word	0x200006c8
 800b150:	2000068c 	.word	0x2000068c

0800b154 <IKS4A1_ENV_SENSOR_ReadID>:
  * @param  Instance environmental sensor instance to be used
  * @param  Id WHOAMI value
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2b02      	cmp	r3, #2
 800b162:	d903      	bls.n	800b16c <IKS4A1_ENV_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b164:	f06f 0301 	mvn.w	r3, #1
 800b168:	60fb      	str	r3, [r7, #12]
 800b16a:	e014      	b.n	800b196 <IKS4A1_ENV_SENSOR_ReadID+0x42>
  }
  else if (EnvDrv[Instance]->ReadID(EnvCompObj[Instance], Id) != BSP_ERROR_NONE)
 800b16c:	4a0c      	ldr	r2, [pc, #48]	@ (800b1a0 <IKS4A1_ENV_SENSOR_ReadID+0x4c>)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	490b      	ldr	r1, [pc, #44]	@ (800b1a4 <IKS4A1_ENV_SENSOR_ReadID+0x50>)
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b17e:	6839      	ldr	r1, [r7, #0]
 800b180:	4610      	mov	r0, r2
 800b182:	4798      	blx	r3
 800b184:	4603      	mov	r3, r0
 800b186:	2b00      	cmp	r3, #0
 800b188:	d003      	beq.n	800b192 <IKS4A1_ENV_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b18a:	f06f 0306 	mvn.w	r3, #6
 800b18e:	60fb      	str	r3, [r7, #12]
 800b190:	e001      	b.n	800b196 <IKS4A1_ENV_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800b192:	2300      	movs	r3, #0
 800b194:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b196:	68fb      	ldr	r3, [r7, #12]
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3710      	adds	r7, #16
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	200006c8 	.word	0x200006c8
 800b1a4:	2000068c 	.word	0x2000068c

0800b1a8 <IKS4A1_ENV_SENSOR_GetOutputDataRate>:
  *         - ENV_HUMIDITY
  * @param  Odr pointer to Output Data Rate read value
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float_t *Odr)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b086      	sub	sp, #24
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2b02      	cmp	r3, #2
 800b1b8:	d903      	bls.n	800b1c2 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b1ba:	f06f 0301 	mvn.w	r3, #1
 800b1be:	617b      	str	r3, [r7, #20]
 800b1c0:	e027      	b.n	800b212 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800b1c2:	4a16      	ldr	r2, [pc, #88]	@ (800b21c <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x74>)
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	4013      	ands	r3, r2
 800b1ce:	68ba      	ldr	r2, [r7, #8]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d11b      	bne.n	800b20c <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800b1d4:	4a12      	ldr	r2, [pc, #72]	@ (800b220 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x78>)
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1dc:	4911      	ldr	r1, [pc, #68]	@ (800b224 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x7c>)
 800b1de:	68fa      	ldr	r2, [r7, #12]
 800b1e0:	0092      	lsls	r2, r2, #2
 800b1e2:	4413      	add	r3, r2
 800b1e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b1e8:	689b      	ldr	r3, [r3, #8]
 800b1ea:	490f      	ldr	r1, [pc, #60]	@ (800b228 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x80>)
 800b1ec:	68fa      	ldr	r2, [r7, #12]
 800b1ee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b1f2:	6879      	ldr	r1, [r7, #4]
 800b1f4:	4610      	mov	r0, r2
 800b1f6:	4798      	blx	r3
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d003      	beq.n	800b206 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b1fe:	f06f 0304 	mvn.w	r3, #4
 800b202:	617b      	str	r3, [r7, #20]
 800b204:	e005      	b.n	800b212 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b206:	2300      	movs	r3, #0
 800b208:	617b      	str	r3, [r7, #20]
 800b20a:	e002      	b.n	800b212 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b20c:	f06f 0301 	mvn.w	r3, #1
 800b210:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b212:	697b      	ldr	r3, [r7, #20]
}
 800b214:	4618      	mov	r0, r3
 800b216:	3718      	adds	r7, #24
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	200006d4 	.word	0x200006d4
 800b220:	200001b0 	.word	0x200001b0
 800b224:	20000698 	.word	0x20000698
 800b228:	2000068c 	.word	0x2000068c

0800b22c <IKS4A1_ENV_SENSOR_GetValue>:
  *         - ENV_HUMIDITY
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float_t *Value)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b086      	sub	sp, #24
 800b230:	af00      	add	r7, sp, #0
 800b232:	60f8      	str	r0, [r7, #12]
 800b234:	60b9      	str	r1, [r7, #8]
 800b236:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2b02      	cmp	r3, #2
 800b23c:	d903      	bls.n	800b246 <IKS4A1_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b23e:	f06f 0301 	mvn.w	r3, #1
 800b242:	617b      	str	r3, [r7, #20]
 800b244:	e027      	b.n	800b296 <IKS4A1_ENV_SENSOR_GetValue+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800b246:	4a16      	ldr	r2, [pc, #88]	@ (800b2a0 <IKS4A1_ENV_SENSOR_GetValue+0x74>)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	4013      	ands	r3, r2
 800b252:	68ba      	ldr	r2, [r7, #8]
 800b254:	429a      	cmp	r2, r3
 800b256:	d11b      	bne.n	800b290 <IKS4A1_ENV_SENSOR_GetValue+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800b258:	4a12      	ldr	r2, [pc, #72]	@ (800b2a4 <IKS4A1_ENV_SENSOR_GetValue+0x78>)
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b260:	4911      	ldr	r1, [pc, #68]	@ (800b2a8 <IKS4A1_ENV_SENSOR_GetValue+0x7c>)
 800b262:	68fa      	ldr	r2, [r7, #12]
 800b264:	0092      	lsls	r2, r2, #2
 800b266:	4413      	add	r3, r2
 800b268:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b26c:	691b      	ldr	r3, [r3, #16]
 800b26e:	490f      	ldr	r1, [pc, #60]	@ (800b2ac <IKS4A1_ENV_SENSOR_GetValue+0x80>)
 800b270:	68fa      	ldr	r2, [r7, #12]
 800b272:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b276:	6879      	ldr	r1, [r7, #4]
 800b278:	4610      	mov	r0, r2
 800b27a:	4798      	blx	r3
 800b27c:	4603      	mov	r3, r0
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d003      	beq.n	800b28a <IKS4A1_ENV_SENSOR_GetValue+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b282:	f06f 0304 	mvn.w	r3, #4
 800b286:	617b      	str	r3, [r7, #20]
 800b288:	e005      	b.n	800b296 <IKS4A1_ENV_SENSOR_GetValue+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b28a:	2300      	movs	r3, #0
 800b28c:	617b      	str	r3, [r7, #20]
 800b28e:	e002      	b.n	800b296 <IKS4A1_ENV_SENSOR_GetValue+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b290:	f06f 0301 	mvn.w	r3, #1
 800b294:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b296:	697b      	ldr	r3, [r7, #20]
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3718      	adds	r7, #24
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	200006d4 	.word	0x200006d4
 800b2a4:	200001b0 	.word	0x200001b0
 800b2a8:	20000698 	.word	0x20000698
 800b2ac:	2000068c 	.word	0x2000068c

0800b2b0 <STTS22H_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS22H_0_Probe(uint32_t Functions)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b092      	sub	sp, #72	@ 0x48
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  STTS22H_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	647b      	str	r3, [r7, #68]	@ 0x44
  static STTS22H_Object_t stts22h_obj_0;
  STTS22H_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = STTS22H_I2C_BUS; /* I2C */
 800b2bc:	2300      	movs	r3, #0
 800b2be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = STTS22H_I2C_ADD_H;
 800b2c0:	2371      	movs	r3, #113	@ 0x71
 800b2c2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800b2c6:	4b47      	ldr	r3, [pc, #284]	@ (800b3e4 <STTS22H_0_Probe+0x134>)
 800b2c8:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800b2ca:	4b47      	ldr	r3, [pc, #284]	@ (800b3e8 <STTS22H_0_Probe+0x138>)
 800b2cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800b2ce:	4b47      	ldr	r3, [pc, #284]	@ (800b3ec <STTS22H_0_Probe+0x13c>)
 800b2d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800b2d2:	4b47      	ldr	r3, [pc, #284]	@ (800b3f0 <STTS22H_0_Probe+0x140>)
 800b2d4:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800b2d6:	4b47      	ldr	r3, [pc, #284]	@ (800b3f4 <STTS22H_0_Probe+0x144>)
 800b2d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800b2da:	4b47      	ldr	r3, [pc, #284]	@ (800b3f8 <STTS22H_0_Probe+0x148>)
 800b2dc:	643b      	str	r3, [r7, #64]	@ 0x40

  if (STTS22H_RegisterBusIO(&stts22h_obj_0, &io_ctx) != STTS22H_OK)
 800b2de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	4845      	ldr	r0, [pc, #276]	@ (800b3fc <STTS22H_0_Probe+0x14c>)
 800b2e6:	f7ff f973 	bl	800a5d0 <STTS22H_RegisterBusIO>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d003      	beq.n	800b2f8 <STTS22H_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b2f0:	f06f 0306 	mvn.w	r3, #6
 800b2f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2f6:	e06f      	b.n	800b3d8 <STTS22H_0_Probe+0x128>
  }
  else if (STTS22H_ReadID(&stts22h_obj_0, &id) != STTS22H_OK)
 800b2f8:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	483f      	ldr	r0, [pc, #252]	@ (800b3fc <STTS22H_0_Probe+0x14c>)
 800b300:	f7ff fa05 	bl	800a70e <STTS22H_ReadID>
 800b304:	4603      	mov	r3, r0
 800b306:	2b00      	cmp	r3, #0
 800b308:	d003      	beq.n	800b312 <STTS22H_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b30a:	f06f 0306 	mvn.w	r3, #6
 800b30e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b310:	e062      	b.n	800b3d8 <STTS22H_0_Probe+0x128>
  }
  else if (id != STTS22H_ID)
 800b312:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b316:	2ba0      	cmp	r3, #160	@ 0xa0
 800b318:	d003      	beq.n	800b322 <STTS22H_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b31a:	f06f 0306 	mvn.w	r3, #6
 800b31e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b320:	e05a      	b.n	800b3d8 <STTS22H_0_Probe+0x128>
  }
  else
  {
    (void)STTS22H_GetCapabilities(&stts22h_obj_0, &cap);
 800b322:	f107 0308 	add.w	r3, r7, #8
 800b326:	4619      	mov	r1, r3
 800b328:	4834      	ldr	r0, [pc, #208]	@ (800b3fc <STTS22H_0_Probe+0x14c>)
 800b32a:	f7ff fa0b 	bl	800a744 <STTS22H_GetCapabilities>

    EnvCtx[IKS4A1_STTS22H_0].Functions = ((uint32_t)cap.Temperature)
 800b32e:	7a3b      	ldrb	r3, [r7, #8]
 800b330:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800b332:	7a7b      	ldrb	r3, [r7, #9]
 800b334:	005b      	lsls	r3, r3, #1
 800b336:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 800b338:	7abb      	ldrb	r3, [r7, #10]
 800b33a:	009b      	lsls	r3, r3, #2
 800b33c:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800b33e:	7afb      	ldrb	r3, [r7, #11]
 800b340:	00db      	lsls	r3, r3, #3
 800b342:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_STTS22H_0].Functions = ((uint32_t)cap.Temperature)
 800b344:	4a2e      	ldr	r2, [pc, #184]	@ (800b400 <STTS22H_0_Probe+0x150>)
 800b346:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS4A1_STTS22H_0] = &stts22h_obj_0;
 800b348:	4b2e      	ldr	r3, [pc, #184]	@ (800b404 <STTS22H_0_Probe+0x154>)
 800b34a:	4a2c      	ldr	r2, [pc, #176]	@ (800b3fc <STTS22H_0_Probe+0x14c>)
 800b34c:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_STTS22H_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS22H_COMMON_Driver;
 800b34e:	4b2e      	ldr	r3, [pc, #184]	@ (800b408 <STTS22H_0_Probe+0x158>)
 800b350:	4a2e      	ldr	r2, [pc, #184]	@ (800b40c <STTS22H_0_Probe+0x15c>)
 800b352:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b354:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b356:	2b00      	cmp	r3, #0
 800b358:	d11d      	bne.n	800b396 <STTS22H_0_Probe+0xe6>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f003 0301 	and.w	r3, r3, #1
 800b360:	2b00      	cmp	r3, #0
 800b362:	d018      	beq.n	800b396 <STTS22H_0_Probe+0xe6>
 800b364:	7a3b      	ldrb	r3, [r7, #8]
 800b366:	2b01      	cmp	r3, #1
 800b368:	d115      	bne.n	800b396 <STTS22H_0_Probe+0xe6>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_STTS22H_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS22H_TEMP_Driver;
 800b36a:	4b29      	ldr	r3, [pc, #164]	@ (800b410 <STTS22H_0_Probe+0x160>)
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	4a29      	ldr	r2, [pc, #164]	@ (800b414 <STTS22H_0_Probe+0x164>)
 800b370:	4929      	ldr	r1, [pc, #164]	@ (800b418 <STTS22H_0_Probe+0x168>)
 800b372:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_STTS22H_0]->Init(EnvCompObj[IKS4A1_STTS22H_0]) != STTS22H_OK)
 800b376:	4b24      	ldr	r3, [pc, #144]	@ (800b408 <STTS22H_0_Probe+0x158>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a21      	ldr	r2, [pc, #132]	@ (800b404 <STTS22H_0_Probe+0x154>)
 800b37e:	6812      	ldr	r2, [r2, #0]
 800b380:	4610      	mov	r0, r2
 800b382:	4798      	blx	r3
 800b384:	4603      	mov	r3, r0
 800b386:	2b00      	cmp	r3, #0
 800b388:	d003      	beq.n	800b392 <STTS22H_0_Probe+0xe2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b38a:	f06f 0304 	mvn.w	r3, #4
 800b38e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b390:	e001      	b.n	800b396 <STTS22H_0_Probe+0xe6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b392:	2300      	movs	r3, #0
 800b394:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800b396:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d107      	bne.n	800b3ac <STTS22H_0_Probe+0xfc>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f003 0304 	and.w	r3, r3, #4
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d002      	beq.n	800b3ac <STTS22H_0_Probe+0xfc>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3a6:	f06f 0304 	mvn.w	r3, #4
 800b3aa:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800b3ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d107      	bne.n	800b3c2 <STTS22H_0_Probe+0x112>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f003 0302 	and.w	r3, r3, #2
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d002      	beq.n	800b3c2 <STTS22H_0_Probe+0x112>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3bc:	f06f 0304 	mvn.w	r3, #4
 800b3c0:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b3c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d107      	bne.n	800b3d8 <STTS22H_0_Probe+0x128>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f003 0308 	and.w	r3, r3, #8
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d002      	beq.n	800b3d8 <STTS22H_0_Probe+0x128>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3d2:	f06f 0304 	mvn.w	r3, #4
 800b3d6:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800b3d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3748      	adds	r7, #72	@ 0x48
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	080017a5 	.word	0x080017a5
 800b3e8:	08001821 	.word	0x08001821
 800b3ec:	080018d5 	.word	0x080018d5
 800b3f0:	08001871 	.word	0x08001871
 800b3f4:	080019e1 	.word	0x080019e1
 800b3f8:	0800c785 	.word	0x0800c785
 800b3fc:	200006e0 	.word	0x200006e0
 800b400:	200006d4 	.word	0x200006d4
 800b404:	2000068c 	.word	0x2000068c
 800b408:	200006c8 	.word	0x200006c8
 800b40c:	2000018c 	.word	0x2000018c
 800b410:	200001b0 	.word	0x200001b0
 800b414:	20000698 	.word	0x20000698
 800b418:	2000019c 	.word	0x2000019c

0800b41c <LPS22DF_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22DF_0_Probe(uint32_t Functions)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b092      	sub	sp, #72	@ 0x48
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  LPS22DF_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800b424:	2300      	movs	r3, #0
 800b426:	647b      	str	r3, [r7, #68]	@ 0x44
  static LPS22DF_Object_t lps22df_obj_0;
  LPS22DF_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = LPS22DF_I2C_BUS; /* I2C */
 800b428:	2300      	movs	r3, #0
 800b42a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = LPS22DF_I2C_ADD_H;
 800b42c:	23bb      	movs	r3, #187	@ 0xbb
 800b42e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800b432:	4b53      	ldr	r3, [pc, #332]	@ (800b580 <LPS22DF_0_Probe+0x164>)
 800b434:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800b436:	4b53      	ldr	r3, [pc, #332]	@ (800b584 <LPS22DF_0_Probe+0x168>)
 800b438:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800b43a:	4b53      	ldr	r3, [pc, #332]	@ (800b588 <LPS22DF_0_Probe+0x16c>)
 800b43c:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800b43e:	4b53      	ldr	r3, [pc, #332]	@ (800b58c <LPS22DF_0_Probe+0x170>)
 800b440:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800b442:	4b53      	ldr	r3, [pc, #332]	@ (800b590 <LPS22DF_0_Probe+0x174>)
 800b444:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800b446:	4b53      	ldr	r3, [pc, #332]	@ (800b594 <LPS22DF_0_Probe+0x178>)
 800b448:	643b      	str	r3, [r7, #64]	@ 0x40

  if (LPS22DF_RegisterBusIO(&lps22df_obj_0, &io_ctx) != LPS22DF_OK)
 800b44a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b44e:	4619      	mov	r1, r3
 800b450:	4851      	ldr	r0, [pc, #324]	@ (800b598 <LPS22DF_0_Probe+0x17c>)
 800b452:	f7fa f8bd 	bl	80055d0 <LPS22DF_RegisterBusIO>
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d003      	beq.n	800b464 <LPS22DF_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b45c:	f06f 0306 	mvn.w	r3, #6
 800b460:	647b      	str	r3, [r7, #68]	@ 0x44
 800b462:	e087      	b.n	800b574 <LPS22DF_0_Probe+0x158>
  }
  else if (LPS22DF_ReadID(&lps22df_obj_0, &id) != LPS22DF_OK)
 800b464:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800b468:	4619      	mov	r1, r3
 800b46a:	484b      	ldr	r0, [pc, #300]	@ (800b598 <LPS22DF_0_Probe+0x17c>)
 800b46c:	f7fa f959 	bl	8005722 <LPS22DF_ReadID>
 800b470:	4603      	mov	r3, r0
 800b472:	2b00      	cmp	r3, #0
 800b474:	d003      	beq.n	800b47e <LPS22DF_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b476:	f06f 0306 	mvn.w	r3, #6
 800b47a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b47c:	e07a      	b.n	800b574 <LPS22DF_0_Probe+0x158>
  }
  else if (id != LPS22DF_ID)
 800b47e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b482:	2bb4      	cmp	r3, #180	@ 0xb4
 800b484:	d003      	beq.n	800b48e <LPS22DF_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b486:	f06f 0306 	mvn.w	r3, #6
 800b48a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b48c:	e072      	b.n	800b574 <LPS22DF_0_Probe+0x158>
  }
  else
  {
    (void)LPS22DF_GetCapabilities(&lps22df_obj_0, &cap);
 800b48e:	f107 0308 	add.w	r3, r7, #8
 800b492:	4619      	mov	r1, r3
 800b494:	4840      	ldr	r0, [pc, #256]	@ (800b598 <LPS22DF_0_Probe+0x17c>)
 800b496:	f7fa f95f 	bl	8005758 <LPS22DF_GetCapabilities>

    EnvCtx[IKS4A1_LPS22DF_0].Functions = ((uint32_t)cap.Temperature)
 800b49a:	7a3b      	ldrb	r3, [r7, #8]
 800b49c:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800b49e:	7a7b      	ldrb	r3, [r7, #9]
 800b4a0:	005b      	lsls	r3, r3, #1
 800b4a2:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 800b4a4:	7abb      	ldrb	r3, [r7, #10]
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800b4aa:	7afb      	ldrb	r3, [r7, #11]
 800b4ac:	00db      	lsls	r3, r3, #3
 800b4ae:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_LPS22DF_0].Functions = ((uint32_t)cap.Temperature)
 800b4b0:	4a3a      	ldr	r2, [pc, #232]	@ (800b59c <LPS22DF_0_Probe+0x180>)
 800b4b2:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS4A1_LPS22DF_0] = &lps22df_obj_0;
 800b4b4:	4b3a      	ldr	r3, [pc, #232]	@ (800b5a0 <LPS22DF_0_Probe+0x184>)
 800b4b6:	4a38      	ldr	r2, [pc, #224]	@ (800b598 <LPS22DF_0_Probe+0x17c>)
 800b4b8:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_LPS22DF_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22DF_COMMON_Driver;
 800b4ba:	4b3a      	ldr	r3, [pc, #232]	@ (800b5a4 <LPS22DF_0_Probe+0x188>)
 800b4bc:	4a3a      	ldr	r2, [pc, #232]	@ (800b5a8 <LPS22DF_0_Probe+0x18c>)
 800b4be:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b4c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d11e      	bne.n	800b504 <LPS22DF_0_Probe+0xe8>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f003 0301 	and.w	r3, r3, #1
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d019      	beq.n	800b504 <LPS22DF_0_Probe+0xe8>
 800b4d0:	7a3b      	ldrb	r3, [r7, #8]
 800b4d2:	2b01      	cmp	r3, #1
 800b4d4:	d116      	bne.n	800b504 <LPS22DF_0_Probe+0xe8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_LPS22DF_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22DF_TEMP_Driver;
 800b4d6:	4b35      	ldr	r3, [pc, #212]	@ (800b5ac <LPS22DF_0_Probe+0x190>)
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	4a35      	ldr	r2, [pc, #212]	@ (800b5b0 <LPS22DF_0_Probe+0x194>)
 800b4dc:	3304      	adds	r3, #4
 800b4de:	4935      	ldr	r1, [pc, #212]	@ (800b5b4 <LPS22DF_0_Probe+0x198>)
 800b4e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_LPS22DF_0]->Init(EnvCompObj[IKS4A1_LPS22DF_0]) != LPS22DF_OK)
 800b4e4:	4b2f      	ldr	r3, [pc, #188]	@ (800b5a4 <LPS22DF_0_Probe+0x188>)
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4a2d      	ldr	r2, [pc, #180]	@ (800b5a0 <LPS22DF_0_Probe+0x184>)
 800b4ec:	6852      	ldr	r2, [r2, #4]
 800b4ee:	4610      	mov	r0, r2
 800b4f0:	4798      	blx	r3
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d003      	beq.n	800b500 <LPS22DF_0_Probe+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b4f8:	f06f 0304 	mvn.w	r3, #4
 800b4fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b4fe:	e001      	b.n	800b504 <LPS22DF_0_Probe+0xe8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b500:	2300      	movs	r3, #0
 800b502:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800b504:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b506:	2b00      	cmp	r3, #0
 800b508:	d11e      	bne.n	800b548 <LPS22DF_0_Probe+0x12c>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f003 0302 	and.w	r3, r3, #2
 800b510:	2b00      	cmp	r3, #0
 800b512:	d019      	beq.n	800b548 <LPS22DF_0_Probe+0x12c>
 800b514:	7a7b      	ldrb	r3, [r7, #9]
 800b516:	2b01      	cmp	r3, #1
 800b518:	d116      	bne.n	800b548 <LPS22DF_0_Probe+0x12c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_LPS22DF_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22DF_PRESS_Driver;
 800b51a:	4b24      	ldr	r3, [pc, #144]	@ (800b5ac <LPS22DF_0_Probe+0x190>)
 800b51c:	689b      	ldr	r3, [r3, #8]
 800b51e:	4a24      	ldr	r2, [pc, #144]	@ (800b5b0 <LPS22DF_0_Probe+0x194>)
 800b520:	3304      	adds	r3, #4
 800b522:	4925      	ldr	r1, [pc, #148]	@ (800b5b8 <LPS22DF_0_Probe+0x19c>)
 800b524:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_LPS22DF_0]->Init(EnvCompObj[IKS4A1_LPS22DF_0]) != LPS22DF_OK)
 800b528:	4b1e      	ldr	r3, [pc, #120]	@ (800b5a4 <LPS22DF_0_Probe+0x188>)
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4a1c      	ldr	r2, [pc, #112]	@ (800b5a0 <LPS22DF_0_Probe+0x184>)
 800b530:	6852      	ldr	r2, [r2, #4]
 800b532:	4610      	mov	r0, r2
 800b534:	4798      	blx	r3
 800b536:	4603      	mov	r3, r0
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d003      	beq.n	800b544 <LPS22DF_0_Probe+0x128>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b53c:	f06f 0304 	mvn.w	r3, #4
 800b540:	647b      	str	r3, [r7, #68]	@ 0x44
 800b542:	e001      	b.n	800b548 <LPS22DF_0_Probe+0x12c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b544:	2300      	movs	r3, #0
 800b546:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800b548:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d107      	bne.n	800b55e <LPS22DF_0_Probe+0x142>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f003 0304 	and.w	r3, r3, #4
 800b554:	2b00      	cmp	r3, #0
 800b556:	d002      	beq.n	800b55e <LPS22DF_0_Probe+0x142>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b558:	f06f 0304 	mvn.w	r3, #4
 800b55c:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b55e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b560:	2b00      	cmp	r3, #0
 800b562:	d107      	bne.n	800b574 <LPS22DF_0_Probe+0x158>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f003 0308 	and.w	r3, r3, #8
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d002      	beq.n	800b574 <LPS22DF_0_Probe+0x158>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b56e:	f06f 0304 	mvn.w	r3, #4
 800b572:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800b574:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b576:	4618      	mov	r0, r3
 800b578:	3748      	adds	r7, #72	@ 0x48
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	080017a5 	.word	0x080017a5
 800b584:	08001821 	.word	0x08001821
 800b588:	080018d5 	.word	0x080018d5
 800b58c:	08001871 	.word	0x08001871
 800b590:	080019e1 	.word	0x080019e1
 800b594:	0800c785 	.word	0x0800c785
 800b598:	20000718 	.word	0x20000718
 800b59c:	200006d4 	.word	0x200006d4
 800b5a0:	2000068c 	.word	0x2000068c
 800b5a4:	200006c8 	.word	0x200006c8
 800b5a8:	2000006c 	.word	0x2000006c
 800b5ac:	200001b0 	.word	0x200001b0
 800b5b0:	20000698 	.word	0x20000698
 800b5b4:	20000090 	.word	0x20000090
 800b5b8:	2000007c 	.word	0x2000007c

0800b5bc <SHT40AD1B_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t SHT40AD1B_0_Probe(uint32_t Functions)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b092      	sub	sp, #72	@ 0x48
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  SHT40AD1B_IO_t            io_ctx;
  uint8_t                   id;
  int32_t                   ret = BSP_ERROR_NONE;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	647b      	str	r3, [r7, #68]	@ 0x44
  static SHT40AD1B_Object_t sht40ad1b_obj_0;
  SHT40AD1B_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = SHT40AD1B_I2C_BUS; /* I2C */
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = SHT40AD1B_I2C_ADDRESS;
 800b5cc:	2389      	movs	r3, #137	@ 0x89
 800b5ce:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800b5d2:	4b53      	ldr	r3, [pc, #332]	@ (800b720 <SHT40AD1B_0_Probe+0x164>)
 800b5d4:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800b5d6:	4b53      	ldr	r3, [pc, #332]	@ (800b724 <SHT40AD1B_0_Probe+0x168>)
 800b5d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.Read        = IKS4A1_I2C_READ;
 800b5da:	4b53      	ldr	r3, [pc, #332]	@ (800b728 <SHT40AD1B_0_Probe+0x16c>)
 800b5dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.Write       = IKS4A1_I2C_WRITE;
 800b5de:	4b53      	ldr	r3, [pc, #332]	@ (800b72c <SHT40AD1B_0_Probe+0x170>)
 800b5e0:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800b5e2:	4b53      	ldr	r3, [pc, #332]	@ (800b730 <SHT40AD1B_0_Probe+0x174>)
 800b5e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800b5e6:	4b53      	ldr	r3, [pc, #332]	@ (800b734 <SHT40AD1B_0_Probe+0x178>)
 800b5e8:	643b      	str	r3, [r7, #64]	@ 0x40

  if (SHT40AD1B_RegisterBusIO(&sht40ad1b_obj_0, &io_ctx) != SHT40AD1B_OK)
 800b5ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	4851      	ldr	r0, [pc, #324]	@ (800b738 <SHT40AD1B_0_Probe+0x17c>)
 800b5f2:	f7fe fce9 	bl	8009fc8 <SHT40AD1B_RegisterBusIO>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d003      	beq.n	800b604 <SHT40AD1B_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b5fc:	f06f 0306 	mvn.w	r3, #6
 800b600:	647b      	str	r3, [r7, #68]	@ 0x44
 800b602:	e087      	b.n	800b714 <SHT40AD1B_0_Probe+0x158>
  }
  else if (SHT40AD1B_ReadID(&sht40ad1b_obj_0, &id) != SHT40AD1B_OK)
 800b604:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800b608:	4619      	mov	r1, r3
 800b60a:	484b      	ldr	r0, [pc, #300]	@ (800b738 <SHT40AD1B_0_Probe+0x17c>)
 800b60c:	f7fe fd4c 	bl	800a0a8 <SHT40AD1B_ReadID>
 800b610:	4603      	mov	r3, r0
 800b612:	2b00      	cmp	r3, #0
 800b614:	d003      	beq.n	800b61e <SHT40AD1B_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b616:	f06f 0306 	mvn.w	r3, #6
 800b61a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b61c:	e07a      	b.n	800b714 <SHT40AD1B_0_Probe+0x158>
  }
  else if (id != SHT40AD1B_ID)
 800b61e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b622:	2b00      	cmp	r3, #0
 800b624:	d003      	beq.n	800b62e <SHT40AD1B_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b626:	f06f 0306 	mvn.w	r3, #6
 800b62a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b62c:	e072      	b.n	800b714 <SHT40AD1B_0_Probe+0x158>
  }
  else
  {
    (void)SHT40AD1B_GetCapabilities(&sht40ad1b_obj_0, &cap);
 800b62e:	f107 0308 	add.w	r3, r7, #8
 800b632:	4619      	mov	r1, r3
 800b634:	4840      	ldr	r0, [pc, #256]	@ (800b738 <SHT40AD1B_0_Probe+0x17c>)
 800b636:	f7fe fd47 	bl	800a0c8 <SHT40AD1B_GetCapabilities>

    EnvCtx[IKS4A1_SHT40AD1B_0].Functions = ((uint32_t)cap.Temperature)
 800b63a:	7a3b      	ldrb	r3, [r7, #8]
 800b63c:	461a      	mov	r2, r3
                                         | ((uint32_t)cap.Pressure << 1)
 800b63e:	7a7b      	ldrb	r3, [r7, #9]
 800b640:	005b      	lsls	r3, r3, #1
 800b642:	431a      	orrs	r2, r3
                                         | ((uint32_t)cap.Humidity << 2)
 800b644:	7abb      	ldrb	r3, [r7, #10]
 800b646:	009b      	lsls	r3, r3, #2
 800b648:	431a      	orrs	r2, r3
                                         | ((uint32_t)cap.Gas      << 3);
 800b64a:	7afb      	ldrb	r3, [r7, #11]
 800b64c:	00db      	lsls	r3, r3, #3
 800b64e:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_SHT40AD1B_0].Functions = ((uint32_t)cap.Temperature)
 800b650:	4a3a      	ldr	r2, [pc, #232]	@ (800b73c <SHT40AD1B_0_Probe+0x180>)
 800b652:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS4A1_SHT40AD1B_0] = &sht40ad1b_obj_0;
 800b654:	4b3a      	ldr	r3, [pc, #232]	@ (800b740 <SHT40AD1B_0_Probe+0x184>)
 800b656:	4a38      	ldr	r2, [pc, #224]	@ (800b738 <SHT40AD1B_0_Probe+0x17c>)
 800b658:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_SHT40AD1B_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&SHT40AD1B_COMMON_Driver;
 800b65a:	4b3a      	ldr	r3, [pc, #232]	@ (800b744 <SHT40AD1B_0_Probe+0x188>)
 800b65c:	4a3a      	ldr	r2, [pc, #232]	@ (800b748 <SHT40AD1B_0_Probe+0x18c>)
 800b65e:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b662:	2b00      	cmp	r3, #0
 800b664:	d11e      	bne.n	800b6a4 <SHT40AD1B_0_Probe+0xe8>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f003 0301 	and.w	r3, r3, #1
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d019      	beq.n	800b6a4 <SHT40AD1B_0_Probe+0xe8>
 800b670:	7a3b      	ldrb	r3, [r7, #8]
 800b672:	2b01      	cmp	r3, #1
 800b674:	d116      	bne.n	800b6a4 <SHT40AD1B_0_Probe+0xe8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_SHT40AD1B_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&SHT40AD1B_TEMP_Driver;
 800b676:	4b35      	ldr	r3, [pc, #212]	@ (800b74c <SHT40AD1B_0_Probe+0x190>)
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	4a35      	ldr	r2, [pc, #212]	@ (800b750 <SHT40AD1B_0_Probe+0x194>)
 800b67c:	3308      	adds	r3, #8
 800b67e:	4935      	ldr	r1, [pc, #212]	@ (800b754 <SHT40AD1B_0_Probe+0x198>)
 800b680:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_SHT40AD1B_0]->Init(EnvCompObj[IKS4A1_SHT40AD1B_0]) != SHT40AD1B_OK)
 800b684:	4b2f      	ldr	r3, [pc, #188]	@ (800b744 <SHT40AD1B_0_Probe+0x188>)
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4a2d      	ldr	r2, [pc, #180]	@ (800b740 <SHT40AD1B_0_Probe+0x184>)
 800b68c:	6892      	ldr	r2, [r2, #8]
 800b68e:	4610      	mov	r0, r2
 800b690:	4798      	blx	r3
 800b692:	4603      	mov	r3, r0
 800b694:	2b00      	cmp	r3, #0
 800b696:	d003      	beq.n	800b6a0 <SHT40AD1B_0_Probe+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b698:	f06f 0304 	mvn.w	r3, #4
 800b69c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b69e:	e001      	b.n	800b6a4 <SHT40AD1B_0_Probe+0xe8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800b6a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d11e      	bne.n	800b6e8 <SHT40AD1B_0_Probe+0x12c>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f003 0304 	and.w	r3, r3, #4
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d019      	beq.n	800b6e8 <SHT40AD1B_0_Probe+0x12c>
 800b6b4:	7abb      	ldrb	r3, [r7, #10]
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d116      	bne.n	800b6e8 <SHT40AD1B_0_Probe+0x12c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_SHT40AD1B_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&SHT40AD1B_HUM_Driver;
 800b6ba:	4b24      	ldr	r3, [pc, #144]	@ (800b74c <SHT40AD1B_0_Probe+0x190>)
 800b6bc:	691b      	ldr	r3, [r3, #16]
 800b6be:	4a24      	ldr	r2, [pc, #144]	@ (800b750 <SHT40AD1B_0_Probe+0x194>)
 800b6c0:	3308      	adds	r3, #8
 800b6c2:	4925      	ldr	r1, [pc, #148]	@ (800b758 <SHT40AD1B_0_Probe+0x19c>)
 800b6c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_SHT40AD1B_0]->Init(EnvCompObj[IKS4A1_SHT40AD1B_0]) != SHT40AD1B_OK)
 800b6c8:	4b1e      	ldr	r3, [pc, #120]	@ (800b744 <SHT40AD1B_0_Probe+0x188>)
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4a1c      	ldr	r2, [pc, #112]	@ (800b740 <SHT40AD1B_0_Probe+0x184>)
 800b6d0:	6892      	ldr	r2, [r2, #8]
 800b6d2:	4610      	mov	r0, r2
 800b6d4:	4798      	blx	r3
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d003      	beq.n	800b6e4 <SHT40AD1B_0_Probe+0x128>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b6dc:	f06f 0304 	mvn.w	r3, #4
 800b6e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6e2:	e001      	b.n	800b6e8 <SHT40AD1B_0_Probe+0x12c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800b6e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d107      	bne.n	800b6fe <SHT40AD1B_0_Probe+0x142>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f003 0302 	and.w	r3, r3, #2
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d002      	beq.n	800b6fe <SHT40AD1B_0_Probe+0x142>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b6f8:	f06f 0304 	mvn.w	r3, #4
 800b6fc:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b6fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b700:	2b00      	cmp	r3, #0
 800b702:	d107      	bne.n	800b714 <SHT40AD1B_0_Probe+0x158>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f003 0308 	and.w	r3, r3, #8
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d002      	beq.n	800b714 <SHT40AD1B_0_Probe+0x158>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b70e:	f06f 0304 	mvn.w	r3, #4
 800b712:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800b714:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b716:	4618      	mov	r0, r3
 800b718:	3748      	adds	r7, #72	@ 0x48
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	080017a5 	.word	0x080017a5
 800b724:	08001821 	.word	0x08001821
 800b728:	0800198d 	.word	0x0800198d
 800b72c:	08001939 	.word	0x08001939
 800b730:	080019e1 	.word	0x080019e1
 800b734:	0800c785 	.word	0x0800c785
 800b738:	20000750 	.word	0x20000750
 800b73c:	200006d4 	.word	0x200006d4
 800b740:	2000068c 	.word	0x2000068c
 800b744:	200006c8 	.word	0x200006c8
 800b748:	20000154 	.word	0x20000154
 800b74c:	200001b0 	.word	0x200001b0
 800b750:	20000698 	.word	0x20000698
 800b754:	20000178 	.word	0x20000178
 800b758:	20000164 	.word	0x20000164

0800b75c <IKS4A1_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b08e      	sub	sp, #56	@ 0x38
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b766:	2300      	movs	r3, #0
 800b768:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 800b76a:	2301      	movs	r3, #1
 800b76c:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800b76e:	2300      	movs	r3, #0
 800b770:	62bb      	str	r3, [r7, #40]	@ 0x28
  IKS4A1_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2b03      	cmp	r3, #3
 800b776:	f200 80d4 	bhi.w	800b922 <IKS4A1_MOTION_SENSOR_Init+0x1c6>
 800b77a:	a201      	add	r2, pc, #4	@ (adr r2, 800b780 <IKS4A1_MOTION_SENSOR_Init+0x24>)
 800b77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b780:	0800b791 	.word	0x0800b791
 800b784:	0800b7f7 	.word	0x0800b7f7
 800b788:	0800b85b 	.word	0x0800b85b
 800b78c:	0800b8bf 	.word	0x0800b8bf
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS4A1_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800b790:	6838      	ldr	r0, [r7, #0]
 800b792:	f000 fa35 	bl	800bc00 <LIS2MDL_0_Probe>
 800b796:	4603      	mov	r3, r0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d002      	beq.n	800b7a2 <IKS4A1_MOTION_SENSOR_Init+0x46>
      {
        return BSP_ERROR_NO_INIT;
 800b79c:	f04f 33ff 	mov.w	r3, #4294967295
 800b7a0:	e101      	b.n	800b9a6 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b7a2:	4a83      	ldr	r2, [pc, #524]	@ (800b9b0 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	4981      	ldr	r1, [pc, #516]	@ (800b9b4 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b7b4:	f107 010c 	add.w	r1, r7, #12
 800b7b8:	4610      	mov	r0, r2
 800b7ba:	4798      	blx	r3
 800b7bc:	4603      	mov	r3, r0
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d002      	beq.n	800b7c8 <IKS4A1_MOTION_SENSOR_Init+0x6c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b7c2:	f06f 0306 	mvn.w	r3, #6
 800b7c6:	e0ee      	b.n	800b9a6 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b7c8:	7b3b      	ldrb	r3, [r7, #12]
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d103      	bne.n	800b7d6 <IKS4A1_MOTION_SENSOR_Init+0x7a>
      {
        component_functions |= MOTION_ACCELERO;
 800b7ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7d0:	f043 0302 	orr.w	r3, r3, #2
 800b7d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b7d6:	7b7b      	ldrb	r3, [r7, #13]
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d103      	bne.n	800b7e4 <IKS4A1_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_GYRO;
 800b7dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7de:	f043 0301 	orr.w	r3, r3, #1
 800b7e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b7e4:	7bbb      	ldrb	r3, [r7, #14]
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	f040 809f 	bne.w	800b92a <IKS4A1_MOTION_SENSOR_Init+0x1ce>
      {
        component_functions |= MOTION_MAGNETO;
 800b7ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ee:	f043 0304 	orr.w	r3, r3, #4
 800b7f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b7f4:	e099      	b.n	800b92a <IKS4A1_MOTION_SENSOR_Init+0x1ce>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LSM6DSV16X_0 == 1)
    case IKS4A1_LSM6DSV16X_0:
      if (LSM6DSV16X_0_Probe(Functions) != BSP_ERROR_NONE)
 800b7f6:	6838      	ldr	r0, [r7, #0]
 800b7f8:	f000 faaa 	bl	800bd50 <LSM6DSV16X_0_Probe>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d002      	beq.n	800b808 <IKS4A1_MOTION_SENSOR_Init+0xac>
      {
        return BSP_ERROR_NO_INIT;
 800b802:	f04f 33ff 	mov.w	r3, #4294967295
 800b806:	e0ce      	b.n	800b9a6 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b808:	4a69      	ldr	r2, [pc, #420]	@ (800b9b0 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b810:	68db      	ldr	r3, [r3, #12]
 800b812:	4968      	ldr	r1, [pc, #416]	@ (800b9b4 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b81a:	f107 010c 	add.w	r1, r7, #12
 800b81e:	4610      	mov	r0, r2
 800b820:	4798      	blx	r3
 800b822:	4603      	mov	r3, r0
 800b824:	2b00      	cmp	r3, #0
 800b826:	d002      	beq.n	800b82e <IKS4A1_MOTION_SENSOR_Init+0xd2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b828:	f06f 0306 	mvn.w	r3, #6
 800b82c:	e0bb      	b.n	800b9a6 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b82e:	7b3b      	ldrb	r3, [r7, #12]
 800b830:	2b01      	cmp	r3, #1
 800b832:	d103      	bne.n	800b83c <IKS4A1_MOTION_SENSOR_Init+0xe0>
      {
        component_functions |= MOTION_ACCELERO;
 800b834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b836:	f043 0302 	orr.w	r3, r3, #2
 800b83a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b83c:	7b7b      	ldrb	r3, [r7, #13]
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d103      	bne.n	800b84a <IKS4A1_MOTION_SENSOR_Init+0xee>
      {
        component_functions |= MOTION_GYRO;
 800b842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b844:	f043 0301 	orr.w	r3, r3, #1
 800b848:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b84a:	7bbb      	ldrb	r3, [r7, #14]
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d16e      	bne.n	800b92e <IKS4A1_MOTION_SENSOR_Init+0x1d2>
      {
        component_functions |= MOTION_MAGNETO;
 800b850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b852:	f043 0304 	orr.w	r3, r3, #4
 800b856:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b858:	e069      	b.n	800b92e <IKS4A1_MOTION_SENSOR_Init+0x1d2>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LIS2DUXS12_0 == 1)
    case IKS4A1_LIS2DUXS12_0:
      if (LIS2DUXS12_0_Probe(Functions) != BSP_ERROR_NONE)
 800b85a:	6838      	ldr	r0, [r7, #0]
 800b85c:	f000 fb44 	bl	800bee8 <LIS2DUXS12_0_Probe>
 800b860:	4603      	mov	r3, r0
 800b862:	2b00      	cmp	r3, #0
 800b864:	d002      	beq.n	800b86c <IKS4A1_MOTION_SENSOR_Init+0x110>
      {
        return BSP_ERROR_NO_INIT;
 800b866:	f04f 33ff 	mov.w	r3, #4294967295
 800b86a:	e09c      	b.n	800b9a6 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b86c:	4a50      	ldr	r2, [pc, #320]	@ (800b9b0 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b874:	68db      	ldr	r3, [r3, #12]
 800b876:	494f      	ldr	r1, [pc, #316]	@ (800b9b4 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b878:	687a      	ldr	r2, [r7, #4]
 800b87a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b87e:	f107 010c 	add.w	r1, r7, #12
 800b882:	4610      	mov	r0, r2
 800b884:	4798      	blx	r3
 800b886:	4603      	mov	r3, r0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d002      	beq.n	800b892 <IKS4A1_MOTION_SENSOR_Init+0x136>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b88c:	f06f 0306 	mvn.w	r3, #6
 800b890:	e089      	b.n	800b9a6 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b892:	7b3b      	ldrb	r3, [r7, #12]
 800b894:	2b01      	cmp	r3, #1
 800b896:	d103      	bne.n	800b8a0 <IKS4A1_MOTION_SENSOR_Init+0x144>
      {
        component_functions |= MOTION_ACCELERO;
 800b898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b89a:	f043 0302 	orr.w	r3, r3, #2
 800b89e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b8a0:	7b7b      	ldrb	r3, [r7, #13]
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d103      	bne.n	800b8ae <IKS4A1_MOTION_SENSOR_Init+0x152>
      {
        component_functions |= MOTION_GYRO;
 800b8a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8a8:	f043 0301 	orr.w	r3, r3, #1
 800b8ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b8ae:	7bbb      	ldrb	r3, [r7, #14]
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d13e      	bne.n	800b932 <IKS4A1_MOTION_SENSOR_Init+0x1d6>
      {
        component_functions |= MOTION_MAGNETO;
 800b8b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8b6:	f043 0304 	orr.w	r3, r3, #4
 800b8ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b8bc:	e039      	b.n	800b932 <IKS4A1_MOTION_SENSOR_Init+0x1d6>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LSM6DSO16IS_0 == 1)
    case IKS4A1_LSM6DSO16IS_0:
      if (LSM6DSO16IS_0_Probe(Functions) != BSP_ERROR_NONE)
 800b8be:	6838      	ldr	r0, [r7, #0]
 800b8c0:	f000 fbc8 	bl	800c054 <LSM6DSO16IS_0_Probe>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d002      	beq.n	800b8d0 <IKS4A1_MOTION_SENSOR_Init+0x174>
      {
        return BSP_ERROR_NO_INIT;
 800b8ca:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ce:	e06a      	b.n	800b9a6 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b8d0:	4a37      	ldr	r2, [pc, #220]	@ (800b9b0 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	4936      	ldr	r1, [pc, #216]	@ (800b9b4 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b8e2:	f107 010c 	add.w	r1, r7, #12
 800b8e6:	4610      	mov	r0, r2
 800b8e8:	4798      	blx	r3
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d002      	beq.n	800b8f6 <IKS4A1_MOTION_SENSOR_Init+0x19a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b8f0:	f06f 0306 	mvn.w	r3, #6
 800b8f4:	e057      	b.n	800b9a6 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b8f6:	7b3b      	ldrb	r3, [r7, #12]
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d103      	bne.n	800b904 <IKS4A1_MOTION_SENSOR_Init+0x1a8>
      {
        component_functions |= MOTION_ACCELERO;
 800b8fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8fe:	f043 0302 	orr.w	r3, r3, #2
 800b902:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b904:	7b7b      	ldrb	r3, [r7, #13]
 800b906:	2b01      	cmp	r3, #1
 800b908:	d103      	bne.n	800b912 <IKS4A1_MOTION_SENSOR_Init+0x1b6>
      {
        component_functions |= MOTION_GYRO;
 800b90a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b90c:	f043 0301 	orr.w	r3, r3, #1
 800b910:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b912:	7bbb      	ldrb	r3, [r7, #14]
 800b914:	2b01      	cmp	r3, #1
 800b916:	d10e      	bne.n	800b936 <IKS4A1_MOTION_SENSOR_Init+0x1da>
      {
        component_functions |= MOTION_MAGNETO;
 800b918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b91a:	f043 0304 	orr.w	r3, r3, #4
 800b91e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b920:	e009      	b.n	800b936 <IKS4A1_MOTION_SENSOR_Init+0x1da>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800b922:	f06f 0301 	mvn.w	r3, #1
 800b926:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 800b928:	e006      	b.n	800b938 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b92a:	bf00      	nop
 800b92c:	e004      	b.n	800b938 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b92e:	bf00      	nop
 800b930:	e002      	b.n	800b938 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b932:	bf00      	nop
 800b934:	e000      	b.n	800b938 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b936:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800b938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d001      	beq.n	800b942 <IKS4A1_MOTION_SENSOR_Init+0x1e6>
  {
    return ret;
 800b93e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b940:	e031      	b.n	800b9a6 <IKS4A1_MOTION_SENSOR_Init+0x24a>
  }

  for (i = 0; i < IKS4A1_MOTION_FUNCTIONS_NBR; i++)
 800b942:	2300      	movs	r3, #0
 800b944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b946:	e02a      	b.n	800b99e <IKS4A1_MOTION_SENSOR_Init+0x242>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800b948:	683a      	ldr	r2, [r7, #0]
 800b94a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b94c:	4013      	ands	r3, r2
 800b94e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b950:	429a      	cmp	r2, r3
 800b952:	d11e      	bne.n	800b992 <IKS4A1_MOTION_SENSOR_Init+0x236>
 800b954:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b958:	4013      	ands	r3, r2
 800b95a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d118      	bne.n	800b992 <IKS4A1_MOTION_SENSOR_Init+0x236>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b960:	4a15      	ldr	r2, [pc, #84]	@ (800b9b8 <IKS4A1_MOTION_SENSOR_Init+0x25c>)
 800b962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b964:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b968:	4814      	ldr	r0, [pc, #80]	@ (800b9bc <IKS4A1_MOTION_SENSOR_Init+0x260>)
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	4613      	mov	r3, r2
 800b96e:	005b      	lsls	r3, r3, #1
 800b970:	4413      	add	r3, r2
 800b972:	440b      	add	r3, r1
 800b974:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	490e      	ldr	r1, [pc, #56]	@ (800b9b4 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b982:	4610      	mov	r0, r2
 800b984:	4798      	blx	r3
 800b986:	4603      	mov	r3, r0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d002      	beq.n	800b992 <IKS4A1_MOTION_SENSOR_Init+0x236>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800b98c:	f06f 0304 	mvn.w	r3, #4
 800b990:	e009      	b.n	800b9a6 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
    }
    function = function << 1;
 800b992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b994:	005b      	lsls	r3, r3, #1
 800b996:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < IKS4A1_MOTION_FUNCTIONS_NBR; i++)
 800b998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b99a:	3301      	adds	r3, #1
 800b99c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b99e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9a0:	2b02      	cmp	r3, #2
 800b9a2:	d9d1      	bls.n	800b948 <IKS4A1_MOTION_SENSOR_Init+0x1ec>
  }

  return ret;
 800b9a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3738      	adds	r7, #56	@ 0x38
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	200007d4 	.word	0x200007d4
 800b9b4:	20000794 	.word	0x20000794
 800b9b8:	200001f0 	.word	0x200001f0
 800b9bc:	200007a4 	.word	0x200007a4

0800b9c0 <IKS4A1_MOTION_SENSOR_GetCapabilities>:
  * @param  Instance Motion sensor instance
  * @param  Capabilities pointer to motion sensor capabilities
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetCapabilities(uint32_t Instance, IKS4A1_MOTION_SENSOR_Capabilities_t *Capabilities)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2b03      	cmp	r3, #3
 800b9ce:	d903      	bls.n	800b9d8 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b9d0:	f06f 0301 	mvn.w	r3, #1
 800b9d4:	60fb      	str	r3, [r7, #12]
 800b9d6:	e014      	b.n	800ba02 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 800b9d8:	4a0c      	ldr	r2, [pc, #48]	@ (800ba0c <IKS4A1_MOTION_SENSOR_GetCapabilities+0x4c>)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9e0:	68db      	ldr	r3, [r3, #12]
 800b9e2:	490b      	ldr	r1, [pc, #44]	@ (800ba10 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x50>)
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b9ea:	6839      	ldr	r1, [r7, #0]
 800b9ec:	4610      	mov	r0, r2
 800b9ee:	4798      	blx	r3
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d003      	beq.n	800b9fe <IKS4A1_MOTION_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b9f6:	f06f 0306 	mvn.w	r3, #6
 800b9fa:	60fb      	str	r3, [r7, #12]
 800b9fc:	e001      	b.n	800ba02 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ba02:	68fb      	ldr	r3, [r7, #12]
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3710      	adds	r7, #16
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	200007d4 	.word	0x200007d4
 800ba10:	20000794 	.word	0x20000794

0800ba14 <IKS4A1_MOTION_SENSOR_ReadID>:
  * @param  Instance Motion sensor instance
  * @param  Id WHOAMI value
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2b03      	cmp	r3, #3
 800ba22:	d903      	bls.n	800ba2c <IKS4A1_MOTION_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ba24:	f06f 0301 	mvn.w	r3, #1
 800ba28:	60fb      	str	r3, [r7, #12]
 800ba2a:	e014      	b.n	800ba56 <IKS4A1_MOTION_SENSOR_ReadID+0x42>
  }
  else if (MotionDrv[Instance]->ReadID(MotionCompObj[Instance], Id) != BSP_ERROR_NONE)
 800ba2c:	4a0c      	ldr	r2, [pc, #48]	@ (800ba60 <IKS4A1_MOTION_SENSOR_ReadID+0x4c>)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba34:	689b      	ldr	r3, [r3, #8]
 800ba36:	490b      	ldr	r1, [pc, #44]	@ (800ba64 <IKS4A1_MOTION_SENSOR_ReadID+0x50>)
 800ba38:	687a      	ldr	r2, [r7, #4]
 800ba3a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ba3e:	6839      	ldr	r1, [r7, #0]
 800ba40:	4610      	mov	r0, r2
 800ba42:	4798      	blx	r3
 800ba44:	4603      	mov	r3, r0
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d003      	beq.n	800ba52 <IKS4A1_MOTION_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ba4a:	f06f 0306 	mvn.w	r3, #6
 800ba4e:	60fb      	str	r3, [r7, #12]
 800ba50:	e001      	b.n	800ba56 <IKS4A1_MOTION_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800ba52:	2300      	movs	r3, #0
 800ba54:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ba56:	68fb      	ldr	r3, [r7, #12]
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3710      	adds	r7, #16
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}
 800ba60:	200007d4 	.word	0x200007d4
 800ba64:	20000794 	.word	0x20000794

0800ba68 <IKS4A1_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS4A1_MOTION_SENSOR_Axes_t *Axes)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b086      	sub	sp, #24
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	60f8      	str	r0, [r7, #12]
 800ba70:	60b9      	str	r1, [r7, #8]
 800ba72:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2b03      	cmp	r3, #3
 800ba78:	d903      	bls.n	800ba82 <IKS4A1_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ba7a:	f06f 0301 	mvn.w	r3, #1
 800ba7e:	617b      	str	r3, [r7, #20]
 800ba80:	e029      	b.n	800bad6 <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800ba82:	4a17      	ldr	r2, [pc, #92]	@ (800bae0 <IKS4A1_MOTION_SENSOR_GetAxes+0x78>)
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	4013      	ands	r3, r2
 800ba8e:	68ba      	ldr	r2, [r7, #8]
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d11d      	bne.n	800bad0 <IKS4A1_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800ba94:	4a13      	ldr	r2, [pc, #76]	@ (800bae4 <IKS4A1_MOTION_SENSOR_GetAxes+0x7c>)
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ba9c:	4812      	ldr	r0, [pc, #72]	@ (800bae8 <IKS4A1_MOTION_SENSOR_GetAxes+0x80>)
 800ba9e:	68fa      	ldr	r2, [r7, #12]
 800baa0:	4613      	mov	r3, r2
 800baa2:	005b      	lsls	r3, r3, #1
 800baa4:	4413      	add	r3, r2
 800baa6:	440b      	add	r3, r1
 800baa8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800baac:	69db      	ldr	r3, [r3, #28]
 800baae:	490f      	ldr	r1, [pc, #60]	@ (800baec <IKS4A1_MOTION_SENSOR_GetAxes+0x84>)
 800bab0:	68fa      	ldr	r2, [r7, #12]
 800bab2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800bab6:	6879      	ldr	r1, [r7, #4]
 800bab8:	4610      	mov	r0, r2
 800baba:	4798      	blx	r3
 800babc:	4603      	mov	r3, r0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d003      	beq.n	800baca <IKS4A1_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bac2:	f06f 0304 	mvn.w	r3, #4
 800bac6:	617b      	str	r3, [r7, #20]
 800bac8:	e005      	b.n	800bad6 <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800baca:	2300      	movs	r3, #0
 800bacc:	617b      	str	r3, [r7, #20]
 800bace:	e002      	b.n	800bad6 <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800bad0:	f06f 0301 	mvn.w	r3, #1
 800bad4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800bad6:	697b      	ldr	r3, [r7, #20]
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3718      	adds	r7, #24
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	200007e4 	.word	0x200007e4
 800bae4:	200001f0 	.word	0x200001f0
 800bae8:	200007a4 	.word	0x200007a4
 800baec:	20000794 	.word	0x20000794

0800baf0 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>:
  *         - MOTION_MAGNETO
  * @param  Odr pointer to Output Data Rate read value
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float_t *Odr)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b086      	sub	sp, #24
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	60b9      	str	r1, [r7, #8]
 800bafa:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2b03      	cmp	r3, #3
 800bb00:	d903      	bls.n	800bb0a <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bb02:	f06f 0301 	mvn.w	r3, #1
 800bb06:	617b      	str	r3, [r7, #20]
 800bb08:	e029      	b.n	800bb5e <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800bb0a:	4a17      	ldr	r2, [pc, #92]	@ (800bb68 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x78>)
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	4013      	ands	r3, r2
 800bb16:	68ba      	ldr	r2, [r7, #8]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d11d      	bne.n	800bb58 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800bb1c:	4a13      	ldr	r2, [pc, #76]	@ (800bb6c <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x7c>)
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bb24:	4812      	ldr	r0, [pc, #72]	@ (800bb70 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x80>)
 800bb26:	68fa      	ldr	r2, [r7, #12]
 800bb28:	4613      	mov	r3, r2
 800bb2a:	005b      	lsls	r3, r3, #1
 800bb2c:	4413      	add	r3, r2
 800bb2e:	440b      	add	r3, r1
 800bb30:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800bb34:	68db      	ldr	r3, [r3, #12]
 800bb36:	490f      	ldr	r1, [pc, #60]	@ (800bb74 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x84>)
 800bb38:	68fa      	ldr	r2, [r7, #12]
 800bb3a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800bb3e:	6879      	ldr	r1, [r7, #4]
 800bb40:	4610      	mov	r0, r2
 800bb42:	4798      	blx	r3
 800bb44:	4603      	mov	r3, r0
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d003      	beq.n	800bb52 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb4a:	f06f 0304 	mvn.w	r3, #4
 800bb4e:	617b      	str	r3, [r7, #20]
 800bb50:	e005      	b.n	800bb5e <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bb52:	2300      	movs	r3, #0
 800bb54:	617b      	str	r3, [r7, #20]
 800bb56:	e002      	b.n	800bb5e <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800bb58:	f06f 0301 	mvn.w	r3, #1
 800bb5c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800bb5e:	697b      	ldr	r3, [r7, #20]
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3718      	adds	r7, #24
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	200007e4 	.word	0x200007e4
 800bb6c:	200001f0 	.word	0x200001f0
 800bb70:	200007a4 	.word	0x200007a4
 800bb74:	20000794 	.word	0x20000794

0800bb78 <IKS4A1_MOTION_SENSOR_GetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale pointer to Fullscale read value
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetFullScale(uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b086      	sub	sp, #24
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	60b9      	str	r1, [r7, #8]
 800bb82:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2b03      	cmp	r3, #3
 800bb88:	d903      	bls.n	800bb92 <IKS4A1_MOTION_SENSOR_GetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bb8a:	f06f 0301 	mvn.w	r3, #1
 800bb8e:	617b      	str	r3, [r7, #20]
 800bb90:	e029      	b.n	800bbe6 <IKS4A1_MOTION_SENSOR_GetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800bb92:	4a17      	ldr	r2, [pc, #92]	@ (800bbf0 <IKS4A1_MOTION_SENSOR_GetFullScale+0x78>)
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	4013      	ands	r3, r2
 800bb9e:	68ba      	ldr	r2, [r7, #8]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d11d      	bne.n	800bbe0 <IKS4A1_MOTION_SENSOR_GetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetFullScale(MotionCompObj[Instance],
 800bba4:	4a13      	ldr	r2, [pc, #76]	@ (800bbf4 <IKS4A1_MOTION_SENSOR_GetFullScale+0x7c>)
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bbac:	4812      	ldr	r0, [pc, #72]	@ (800bbf8 <IKS4A1_MOTION_SENSOR_GetFullScale+0x80>)
 800bbae:	68fa      	ldr	r2, [r7, #12]
 800bbb0:	4613      	mov	r3, r2
 800bbb2:	005b      	lsls	r3, r3, #1
 800bbb4:	4413      	add	r3, r2
 800bbb6:	440b      	add	r3, r1
 800bbb8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800bbbc:	695b      	ldr	r3, [r3, #20]
 800bbbe:	490f      	ldr	r1, [pc, #60]	@ (800bbfc <IKS4A1_MOTION_SENSOR_GetFullScale+0x84>)
 800bbc0:	68fa      	ldr	r2, [r7, #12]
 800bbc2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800bbc6:	6879      	ldr	r1, [r7, #4]
 800bbc8:	4610      	mov	r0, r2
 800bbca:	4798      	blx	r3
 800bbcc:	4603      	mov	r3, r0
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d003      	beq.n	800bbda <IKS4A1_MOTION_SENSOR_GetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bbd2:	f06f 0304 	mvn.w	r3, #4
 800bbd6:	617b      	str	r3, [r7, #20]
 800bbd8:	e005      	b.n	800bbe6 <IKS4A1_MOTION_SENSOR_GetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	617b      	str	r3, [r7, #20]
 800bbde:	e002      	b.n	800bbe6 <IKS4A1_MOTION_SENSOR_GetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800bbe0:	f06f 0301 	mvn.w	r3, #1
 800bbe4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800bbe6:	697b      	ldr	r3, [r7, #20]
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3718      	adds	r7, #24
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	200007e4 	.word	0x200007e4
 800bbf4:	200001f0 	.word	0x200001f0
 800bbf8:	200007a4 	.word	0x200007a4
 800bbfc:	20000794 	.word	0x20000794

0800bc00 <LIS2MDL_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b094      	sub	sp, #80	@ 0x50
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800bc10:	233d      	movs	r3, #61	@ 0x3d
 800bc12:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800bc16:	4b40      	ldr	r3, [pc, #256]	@ (800bd18 <LIS2MDL_0_Probe+0x118>)
 800bc18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800bc1a:	4b40      	ldr	r3, [pc, #256]	@ (800bd1c <LIS2MDL_0_Probe+0x11c>)
 800bc1c:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800bc1e:	4b40      	ldr	r3, [pc, #256]	@ (800bd20 <LIS2MDL_0_Probe+0x120>)
 800bc20:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800bc22:	4b40      	ldr	r3, [pc, #256]	@ (800bd24 <LIS2MDL_0_Probe+0x124>)
 800bc24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800bc26:	4b40      	ldr	r3, [pc, #256]	@ (800bd28 <LIS2MDL_0_Probe+0x128>)
 800bc28:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800bc2a:	4b40      	ldr	r3, [pc, #256]	@ (800bd2c <LIS2MDL_0_Probe+0x12c>)
 800bc2c:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800bc2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bc32:	4619      	mov	r1, r3
 800bc34:	483e      	ldr	r0, [pc, #248]	@ (800bd30 <LIS2MDL_0_Probe+0x130>)
 800bc36:	f7f8 fcbb 	bl	80045b0 <LIS2MDL_RegisterBusIO>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d003      	beq.n	800bc48 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bc40:	f06f 0306 	mvn.w	r3, #6
 800bc44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc46:	e061      	b.n	800bd0c <LIS2MDL_0_Probe+0x10c>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800bc48:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	4838      	ldr	r0, [pc, #224]	@ (800bd30 <LIS2MDL_0_Probe+0x130>)
 800bc50:	f7f8 fdca 	bl	80047e8 <LIS2MDL_ReadID>
 800bc54:	4603      	mov	r3, r0
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d003      	beq.n	800bc62 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bc5a:	f06f 0306 	mvn.w	r3, #6
 800bc5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc60:	e054      	b.n	800bd0c <LIS2MDL_0_Probe+0x10c>
  }
  else if (id != LIS2MDL_ID)
 800bc62:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bc66:	2b40      	cmp	r3, #64	@ 0x40
 800bc68:	d003      	beq.n	800bc72 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bc6a:	f06f 0306 	mvn.w	r3, #6
 800bc6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc70:	e04c      	b.n	800bd0c <LIS2MDL_0_Probe+0x10c>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 800bc72:	f107 030c 	add.w	r3, r7, #12
 800bc76:	4619      	mov	r1, r3
 800bc78:	482d      	ldr	r0, [pc, #180]	@ (800bd30 <LIS2MDL_0_Probe+0x130>)
 800bc7a:	f7f8 fddb 	bl	8004834 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS4A1_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800bc7e:	7b7b      	ldrb	r3, [r7, #13]
 800bc80:	461a      	mov	r2, r3
 800bc82:	7b3b      	ldrb	r3, [r7, #12]
 800bc84:	005b      	lsls	r3, r3, #1
 800bc86:	431a      	orrs	r2, r3
 800bc88:	7bbb      	ldrb	r3, [r7, #14]
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	4313      	orrs	r3, r2
 800bc8e:	4a29      	ldr	r2, [pc, #164]	@ (800bd34 <LIS2MDL_0_Probe+0x134>)
 800bc90:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS4A1_LIS2MDL_0] = &lis2mdl_obj_0;
 800bc92:	4b29      	ldr	r3, [pc, #164]	@ (800bd38 <LIS2MDL_0_Probe+0x138>)
 800bc94:	4a26      	ldr	r2, [pc, #152]	@ (800bd30 <LIS2MDL_0_Probe+0x130>)
 800bc96:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800bc98:	4b28      	ldr	r3, [pc, #160]	@ (800bd3c <LIS2MDL_0_Probe+0x13c>)
 800bc9a:	4a29      	ldr	r2, [pc, #164]	@ (800bd40 <LIS2MDL_0_Probe+0x140>)
 800bc9c:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800bc9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d11d      	bne.n	800bce0 <LIS2MDL_0_Probe+0xe0>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f003 0304 	and.w	r3, r3, #4
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d018      	beq.n	800bce0 <LIS2MDL_0_Probe+0xe0>
 800bcae:	7bbb      	ldrb	r3, [r7, #14]
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d115      	bne.n	800bce0 <LIS2MDL_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800bcb4:	4b23      	ldr	r3, [pc, #140]	@ (800bd44 <LIS2MDL_0_Probe+0x144>)
 800bcb6:	691b      	ldr	r3, [r3, #16]
 800bcb8:	4a23      	ldr	r2, [pc, #140]	@ (800bd48 <LIS2MDL_0_Probe+0x148>)
 800bcba:	4924      	ldr	r1, [pc, #144]	@ (800bd4c <LIS2MDL_0_Probe+0x14c>)
 800bcbc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                        void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS4A1_LIS2MDL_0]->Init(MotionCompObj[IKS4A1_LIS2MDL_0]) != LIS2MDL_OK)
 800bcc0:	4b1e      	ldr	r3, [pc, #120]	@ (800bd3c <LIS2MDL_0_Probe+0x13c>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4a1c      	ldr	r2, [pc, #112]	@ (800bd38 <LIS2MDL_0_Probe+0x138>)
 800bcc8:	6812      	ldr	r2, [r2, #0]
 800bcca:	4610      	mov	r0, r2
 800bccc:	4798      	blx	r3
 800bcce:	4603      	mov	r3, r0
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d003      	beq.n	800bcdc <LIS2MDL_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bcd4:	f06f 0304 	mvn.w	r3, #4
 800bcd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bcda:	e001      	b.n	800bce0 <LIS2MDL_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800bce0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d107      	bne.n	800bcf6 <LIS2MDL_0_Probe+0xf6>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f003 0302 	and.w	r3, r3, #2
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d002      	beq.n	800bcf6 <LIS2MDL_0_Probe+0xf6>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bcf0:	f06f 0304 	mvn.w	r3, #4
 800bcf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800bcf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d107      	bne.n	800bd0c <LIS2MDL_0_Probe+0x10c>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f003 0301 	and.w	r3, r3, #1
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d002      	beq.n	800bd0c <LIS2MDL_0_Probe+0x10c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bd06:	f06f 0304 	mvn.w	r3, #4
 800bd0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800bd0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3750      	adds	r7, #80	@ 0x50
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}
 800bd16:	bf00      	nop
 800bd18:	080017a5 	.word	0x080017a5
 800bd1c:	08001821 	.word	0x08001821
 800bd20:	080018d5 	.word	0x080018d5
 800bd24:	08001871 	.word	0x08001871
 800bd28:	080019e1 	.word	0x080019e1
 800bd2c:	0800c785 	.word	0x0800c785
 800bd30:	200007f4 	.word	0x200007f4
 800bd34:	200007e4 	.word	0x200007e4
 800bd38:	20000794 	.word	0x20000794
 800bd3c:	200007d4 	.word	0x200007d4
 800bd40:	20000038 	.word	0x20000038
 800bd44:	200001f0 	.word	0x200001f0
 800bd48:	200007a4 	.word	0x200007a4
 800bd4c:	20000048 	.word	0x20000048

0800bd50 <LSM6DSV16X_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSV16X_0_Probe(uint32_t Functions)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b094      	sub	sp, #80	@ 0x50
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  LSM6DSV16X_IO_t            io_ctx;
  uint8_t                    id;
  static LSM6DSV16X_Object_t lsm6dsv16x_obj_0;
  LSM6DSV16X_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSV16X_I2C_BUS; /* I2C */
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSV16X_I2C_ADD_H;
 800bd60:	23d7      	movs	r3, #215	@ 0xd7
 800bd62:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800bd66:	4b51      	ldr	r3, [pc, #324]	@ (800beac <LSM6DSV16X_0_Probe+0x15c>)
 800bd68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800bd6a:	4b51      	ldr	r3, [pc, #324]	@ (800beb0 <LSM6DSV16X_0_Probe+0x160>)
 800bd6c:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800bd6e:	4b51      	ldr	r3, [pc, #324]	@ (800beb4 <LSM6DSV16X_0_Probe+0x164>)
 800bd70:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800bd72:	4b51      	ldr	r3, [pc, #324]	@ (800beb8 <LSM6DSV16X_0_Probe+0x168>)
 800bd74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800bd76:	4b51      	ldr	r3, [pc, #324]	@ (800bebc <LSM6DSV16X_0_Probe+0x16c>)
 800bd78:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800bd7a:	4b51      	ldr	r3, [pc, #324]	@ (800bec0 <LSM6DSV16X_0_Probe+0x170>)
 800bd7c:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSV16X_RegisterBusIO(&lsm6dsv16x_obj_0, &io_ctx) != LSM6DSV16X_OK)
 800bd7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bd82:	4619      	mov	r1, r3
 800bd84:	484f      	ldr	r0, [pc, #316]	@ (800bec4 <LSM6DSV16X_0_Probe+0x174>)
 800bd86:	f7fc f983 	bl	8008090 <LSM6DSV16X_RegisterBusIO>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d003      	beq.n	800bd98 <LSM6DSV16X_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bd90:	f06f 0306 	mvn.w	r3, #6
 800bd94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd96:	e084      	b.n	800bea2 <LSM6DSV16X_0_Probe+0x152>
  }
  else if (LSM6DSV16X_Set_Mem_Bank(&lsm6dsv16x_obj_0, LSM6DSV16X_MAIN_MEM_BANK) != LSM6DSV16X_OK)
 800bd98:	2100      	movs	r1, #0
 800bd9a:	484a      	ldr	r0, [pc, #296]	@ (800bec4 <LSM6DSV16X_0_Probe+0x174>)
 800bd9c:	f7fd f905 	bl	8008faa <LSM6DSV16X_Set_Mem_Bank>
 800bda0:	4603      	mov	r3, r0
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d003      	beq.n	800bdae <LSM6DSV16X_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bda6:	f06f 0306 	mvn.w	r3, #6
 800bdaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bdac:	e079      	b.n	800bea2 <LSM6DSV16X_0_Probe+0x152>
  }
  else if (LSM6DSV16X_ReadID(&lsm6dsv16x_obj_0, &id) != LSM6DSV16X_OK)
 800bdae:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	4843      	ldr	r0, [pc, #268]	@ (800bec4 <LSM6DSV16X_0_Probe+0x174>)
 800bdb6:	f7fc fa9b 	bl	80082f0 <LSM6DSV16X_ReadID>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d003      	beq.n	800bdc8 <LSM6DSV16X_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bdc0:	f06f 0306 	mvn.w	r3, #6
 800bdc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bdc6:	e06c      	b.n	800bea2 <LSM6DSV16X_0_Probe+0x152>
  }
  else if (id != LSM6DSV16X_ID)
 800bdc8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bdcc:	2b70      	cmp	r3, #112	@ 0x70
 800bdce:	d003      	beq.n	800bdd8 <LSM6DSV16X_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bdd0:	f06f 0306 	mvn.w	r3, #6
 800bdd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bdd6:	e064      	b.n	800bea2 <LSM6DSV16X_0_Probe+0x152>
  }
  else
  {
    (void)LSM6DSV16X_GetCapabilities(&lsm6dsv16x_obj_0, &cap);
 800bdd8:	f107 030c 	add.w	r3, r7, #12
 800bddc:	4619      	mov	r1, r3
 800bdde:	4839      	ldr	r0, [pc, #228]	@ (800bec4 <LSM6DSV16X_0_Probe+0x174>)
 800bde0:	f7fc fa9c 	bl	800831c <LSM6DSV16X_GetCapabilities>
    MotionCtx[IKS4A1_LSM6DSV16X_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800bde4:	7b7b      	ldrb	r3, [r7, #13]
 800bde6:	461a      	mov	r2, r3
 800bde8:	7b3b      	ldrb	r3, [r7, #12]
 800bdea:	005b      	lsls	r3, r3, #1
 800bdec:	431a      	orrs	r2, r3
 800bdee:	7bbb      	ldrb	r3, [r7, #14]
 800bdf0:	009b      	lsls	r3, r3, #2
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	4a34      	ldr	r2, [pc, #208]	@ (800bec8 <LSM6DSV16X_0_Probe+0x178>)
 800bdf6:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS4A1_LSM6DSV16X_0] = &lsm6dsv16x_obj_0;
 800bdf8:	4b34      	ldr	r3, [pc, #208]	@ (800becc <LSM6DSV16X_0_Probe+0x17c>)
 800bdfa:	4a32      	ldr	r2, [pc, #200]	@ (800bec4 <LSM6DSV16X_0_Probe+0x174>)
 800bdfc:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LSM6DSV16X_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSV16X_COMMON_Driver;
 800bdfe:	4b34      	ldr	r3, [pc, #208]	@ (800bed0 <LSM6DSV16X_0_Probe+0x180>)
 800be00:	4a34      	ldr	r2, [pc, #208]	@ (800bed4 <LSM6DSV16X_0_Probe+0x184>)
 800be02:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800be04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be06:	2b00      	cmp	r3, #0
 800be08:	d11e      	bne.n	800be48 <LSM6DSV16X_0_Probe+0xf8>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f003 0301 	and.w	r3, r3, #1
 800be10:	2b00      	cmp	r3, #0
 800be12:	d019      	beq.n	800be48 <LSM6DSV16X_0_Probe+0xf8>
 800be14:	7b7b      	ldrb	r3, [r7, #13]
 800be16:	2b01      	cmp	r3, #1
 800be18:	d116      	bne.n	800be48 <LSM6DSV16X_0_Probe+0xf8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSV16X_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800be1a:	4b2f      	ldr	r3, [pc, #188]	@ (800bed8 <LSM6DSV16X_0_Probe+0x188>)
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	4a2f      	ldr	r2, [pc, #188]	@ (800bedc <LSM6DSV16X_0_Probe+0x18c>)
 800be20:	3303      	adds	r3, #3
 800be22:	492f      	ldr	r1, [pc, #188]	@ (800bee0 <LSM6DSV16X_0_Probe+0x190>)
 800be24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                        void *)&LSM6DSV16X_GYRO_Driver;

      if (MotionDrv[IKS4A1_LSM6DSV16X_0]->Init(MotionCompObj[IKS4A1_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 800be28:	4b29      	ldr	r3, [pc, #164]	@ (800bed0 <LSM6DSV16X_0_Probe+0x180>)
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	4a27      	ldr	r2, [pc, #156]	@ (800becc <LSM6DSV16X_0_Probe+0x17c>)
 800be30:	6852      	ldr	r2, [r2, #4]
 800be32:	4610      	mov	r0, r2
 800be34:	4798      	blx	r3
 800be36:	4603      	mov	r3, r0
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d003      	beq.n	800be44 <LSM6DSV16X_0_Probe+0xf4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800be3c:	f06f 0304 	mvn.w	r3, #4
 800be40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be42:	e001      	b.n	800be48 <LSM6DSV16X_0_Probe+0xf8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800be44:	2300      	movs	r3, #0
 800be46:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800be48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d11e      	bne.n	800be8c <LSM6DSV16X_0_Probe+0x13c>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f003 0302 	and.w	r3, r3, #2
 800be54:	2b00      	cmp	r3, #0
 800be56:	d019      	beq.n	800be8c <LSM6DSV16X_0_Probe+0x13c>
 800be58:	7b3b      	ldrb	r3, [r7, #12]
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d116      	bne.n	800be8c <LSM6DSV16X_0_Probe+0x13c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSV16X_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800be5e:	4b1e      	ldr	r3, [pc, #120]	@ (800bed8 <LSM6DSV16X_0_Probe+0x188>)
 800be60:	689b      	ldr	r3, [r3, #8]
 800be62:	4a1e      	ldr	r2, [pc, #120]	@ (800bedc <LSM6DSV16X_0_Probe+0x18c>)
 800be64:	3303      	adds	r3, #3
 800be66:	491f      	ldr	r1, [pc, #124]	@ (800bee4 <LSM6DSV16X_0_Probe+0x194>)
 800be68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LSM6DSV16X_ACC_Driver;

      if (MotionDrv[IKS4A1_LSM6DSV16X_0]->Init(MotionCompObj[IKS4A1_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 800be6c:	4b18      	ldr	r3, [pc, #96]	@ (800bed0 <LSM6DSV16X_0_Probe+0x180>)
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a16      	ldr	r2, [pc, #88]	@ (800becc <LSM6DSV16X_0_Probe+0x17c>)
 800be74:	6852      	ldr	r2, [r2, #4]
 800be76:	4610      	mov	r0, r2
 800be78:	4798      	blx	r3
 800be7a:	4603      	mov	r3, r0
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d003      	beq.n	800be88 <LSM6DSV16X_0_Probe+0x138>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800be80:	f06f 0304 	mvn.w	r3, #4
 800be84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be86:	e001      	b.n	800be8c <LSM6DSV16X_0_Probe+0x13c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800be88:	2300      	movs	r3, #0
 800be8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800be8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d107      	bne.n	800bea2 <LSM6DSV16X_0_Probe+0x152>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f003 0304 	and.w	r3, r3, #4
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d002      	beq.n	800bea2 <LSM6DSV16X_0_Probe+0x152>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800be9c:	f06f 0304 	mvn.w	r3, #4
 800bea0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800bea2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3750      	adds	r7, #80	@ 0x50
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}
 800beac:	080017a5 	.word	0x080017a5
 800beb0:	08001821 	.word	0x08001821
 800beb4:	080018d5 	.word	0x080018d5
 800beb8:	08001871 	.word	0x08001871
 800bebc:	080019e1 	.word	0x080019e1
 800bec0:	0800c785 	.word	0x0800c785
 800bec4:	20000828 	.word	0x20000828
 800bec8:	200007e4 	.word	0x200007e4
 800becc:	20000794 	.word	0x20000794
 800bed0:	200007d4 	.word	0x200007d4
 800bed4:	200000fc 	.word	0x200000fc
 800bed8:	200001f0 	.word	0x200001f0
 800bedc:	200007a4 	.word	0x200007a4
 800bee0:	20000130 	.word	0x20000130
 800bee4:	2000010c 	.word	0x2000010c

0800bee8 <LIS2DUXS12_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LIS2DUXS12_0_Probe(uint32_t Functions)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b094      	sub	sp, #80	@ 0x50
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
  LIS2DUXS12_IO_t            io_ctx;
  uint8_t                    id;
  static LIS2DUXS12_Object_t lis2duxs12_obj_0;
  LIS2DUXS12_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 800bef0:	2300      	movs	r3, #0
 800bef2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LIS2DUXS12_I2C_BUS; /* I2C */
 800bef4:	2300      	movs	r3, #0
 800bef6:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2DUXS12_I2C_ADD_H;
 800bef8:	2333      	movs	r3, #51	@ 0x33
 800befa:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800befe:	4b47      	ldr	r3, [pc, #284]	@ (800c01c <LIS2DUXS12_0_Probe+0x134>)
 800bf00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800bf02:	4b47      	ldr	r3, [pc, #284]	@ (800c020 <LIS2DUXS12_0_Probe+0x138>)
 800bf04:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800bf06:	4b47      	ldr	r3, [pc, #284]	@ (800c024 <LIS2DUXS12_0_Probe+0x13c>)
 800bf08:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800bf0a:	4b47      	ldr	r3, [pc, #284]	@ (800c028 <LIS2DUXS12_0_Probe+0x140>)
 800bf0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800bf0e:	4b47      	ldr	r3, [pc, #284]	@ (800c02c <LIS2DUXS12_0_Probe+0x144>)
 800bf10:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800bf12:	4b47      	ldr	r3, [pc, #284]	@ (800c030 <LIS2DUXS12_0_Probe+0x148>)
 800bf14:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2DUXS12_RegisterBusIO(&lis2duxs12_obj_0, &io_ctx) != LIS2DUXS12_OK)
 800bf16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	4845      	ldr	r0, [pc, #276]	@ (800c034 <LIS2DUXS12_0_Probe+0x14c>)
 800bf1e:	f7f6 fe67 	bl	8002bf0 <LIS2DUXS12_RegisterBusIO>
 800bf22:	4603      	mov	r3, r0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d003      	beq.n	800bf30 <LIS2DUXS12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bf28:	f06f 0306 	mvn.w	r3, #6
 800bf2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf2e:	e070      	b.n	800c012 <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (LIS2DUXS12_Set_Mem_Bank(&lis2duxs12_obj_0, LIS2DUXS12_MAIN_MEM_BANK) != LIS2DUXS12_OK)
 800bf30:	2100      	movs	r1, #0
 800bf32:	4840      	ldr	r0, [pc, #256]	@ (800c034 <LIS2DUXS12_0_Probe+0x14c>)
 800bf34:	f7f7 fad2 	bl	80034dc <LIS2DUXS12_Set_Mem_Bank>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d003      	beq.n	800bf46 <LIS2DUXS12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bf3e:	f06f 0306 	mvn.w	r3, #6
 800bf42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf44:	e065      	b.n	800c012 <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (LIS2DUXS12_ReadID(&lis2duxs12_obj_0, &id) != LIS2DUXS12_OK)
 800bf46:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	4839      	ldr	r0, [pc, #228]	@ (800c034 <LIS2DUXS12_0_Probe+0x14c>)
 800bf4e:	f7f6 ffac 	bl	8002eaa <LIS2DUXS12_ReadID>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d003      	beq.n	800bf60 <LIS2DUXS12_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bf58:	f06f 0306 	mvn.w	r3, #6
 800bf5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf5e:	e058      	b.n	800c012 <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (id != LIS2DUXS12_ID)
 800bf60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bf64:	2b47      	cmp	r3, #71	@ 0x47
 800bf66:	d003      	beq.n	800bf70 <LIS2DUXS12_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bf68:	f06f 0306 	mvn.w	r3, #6
 800bf6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf6e:	e050      	b.n	800c012 <LIS2DUXS12_0_Probe+0x12a>
  }
  else
  {
    (void)LIS2DUXS12_GetCapabilities(&lis2duxs12_obj_0, &cap);
 800bf70:	f107 030c 	add.w	r3, r7, #12
 800bf74:	4619      	mov	r1, r3
 800bf76:	482f      	ldr	r0, [pc, #188]	@ (800c034 <LIS2DUXS12_0_Probe+0x14c>)
 800bf78:	f7f6 ffb2 	bl	8002ee0 <LIS2DUXS12_GetCapabilities>
    MotionCtx[IKS4A1_LIS2DUXS12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800bf7c:	7b7b      	ldrb	r3, [r7, #13]
 800bf7e:	461a      	mov	r2, r3
 800bf80:	7b3b      	ldrb	r3, [r7, #12]
 800bf82:	005b      	lsls	r3, r3, #1
 800bf84:	431a      	orrs	r2, r3
 800bf86:	7bbb      	ldrb	r3, [r7, #14]
 800bf88:	009b      	lsls	r3, r3, #2
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	4a2a      	ldr	r2, [pc, #168]	@ (800c038 <LIS2DUXS12_0_Probe+0x150>)
 800bf8e:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS4A1_LIS2DUXS12_0] = &lis2duxs12_obj_0;
 800bf90:	4b2a      	ldr	r3, [pc, #168]	@ (800c03c <LIS2DUXS12_0_Probe+0x154>)
 800bf92:	4a28      	ldr	r2, [pc, #160]	@ (800c034 <LIS2DUXS12_0_Probe+0x14c>)
 800bf94:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LIS2DUXS12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DUXS12_COMMON_Driver;
 800bf96:	4b2a      	ldr	r3, [pc, #168]	@ (800c040 <LIS2DUXS12_0_Probe+0x158>)
 800bf98:	4a2a      	ldr	r2, [pc, #168]	@ (800c044 <LIS2DUXS12_0_Probe+0x15c>)
 800bf9a:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800bf9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d10a      	bne.n	800bfb8 <LIS2DUXS12_0_Probe+0xd0>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f003 0301 	and.w	r3, r3, #1
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d005      	beq.n	800bfb8 <LIS2DUXS12_0_Probe+0xd0>
 800bfac:	7b7b      	ldrb	r3, [r7, #13]
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d102      	bne.n	800bfb8 <LIS2DUXS12_0_Probe+0xd0>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bfb2:	f06f 0304 	mvn.w	r3, #4
 800bfb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800bfb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d11e      	bne.n	800bffc <LIS2DUXS12_0_Probe+0x114>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f003 0302 	and.w	r3, r3, #2
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d019      	beq.n	800bffc <LIS2DUXS12_0_Probe+0x114>
 800bfc8:	7b3b      	ldrb	r3, [r7, #12]
 800bfca:	2b01      	cmp	r3, #1
 800bfcc:	d116      	bne.n	800bffc <LIS2DUXS12_0_Probe+0x114>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LIS2DUXS12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800bfce:	4b1e      	ldr	r3, [pc, #120]	@ (800c048 <LIS2DUXS12_0_Probe+0x160>)
 800bfd0:	689b      	ldr	r3, [r3, #8]
 800bfd2:	4a1e      	ldr	r2, [pc, #120]	@ (800c04c <LIS2DUXS12_0_Probe+0x164>)
 800bfd4:	3306      	adds	r3, #6
 800bfd6:	491e      	ldr	r1, [pc, #120]	@ (800c050 <LIS2DUXS12_0_Probe+0x168>)
 800bfd8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DUXS12_ACC_Driver;

      if (MotionDrv[IKS4A1_LIS2DUXS12_0]->Init(MotionCompObj[IKS4A1_LIS2DUXS12_0]) != LIS2DUXS12_OK)
 800bfdc:	4b18      	ldr	r3, [pc, #96]	@ (800c040 <LIS2DUXS12_0_Probe+0x158>)
 800bfde:	689b      	ldr	r3, [r3, #8]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	4a16      	ldr	r2, [pc, #88]	@ (800c03c <LIS2DUXS12_0_Probe+0x154>)
 800bfe4:	6892      	ldr	r2, [r2, #8]
 800bfe6:	4610      	mov	r0, r2
 800bfe8:	4798      	blx	r3
 800bfea:	4603      	mov	r3, r0
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d003      	beq.n	800bff8 <LIS2DUXS12_0_Probe+0x110>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bff0:	f06f 0304 	mvn.w	r3, #4
 800bff4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bff6:	e001      	b.n	800bffc <LIS2DUXS12_0_Probe+0x114>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bff8:	2300      	movs	r3, #0
 800bffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800bffc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d107      	bne.n	800c012 <LIS2DUXS12_0_Probe+0x12a>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f003 0304 	and.w	r3, r3, #4
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d002      	beq.n	800c012 <LIS2DUXS12_0_Probe+0x12a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c00c:	f06f 0304 	mvn.w	r3, #4
 800c010:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800c012:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800c014:	4618      	mov	r0, r3
 800c016:	3750      	adds	r7, #80	@ 0x50
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	080017a5 	.word	0x080017a5
 800c020:	08001821 	.word	0x08001821
 800c024:	080018d5 	.word	0x080018d5
 800c028:	08001871 	.word	0x08001871
 800c02c:	080019e1 	.word	0x080019e1
 800c030:	0800c785 	.word	0x0800c785
 800c034:	20000860 	.word	0x20000860
 800c038:	200007e4 	.word	0x200007e4
 800c03c:	20000794 	.word	0x20000794
 800c040:	200007d4 	.word	0x200007d4
 800c044:	20000004 	.word	0x20000004
 800c048:	200001f0 	.word	0x200001f0
 800c04c:	200007a4 	.word	0x200007a4
 800c050:	20000014 	.word	0x20000014

0800c054 <LSM6DSO16IS_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSO16IS_0_Probe(uint32_t Functions)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b094      	sub	sp, #80	@ 0x50
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  LSM6DSO16IS_IO_t            io_ctx;
  uint8_t                     id;
  static LSM6DSO16IS_Object_t lsm6dso16is_obj_0;
  LSM6DSO16IS_Capabilities_t  cap;
  int32_t                     ret = BSP_ERROR_NONE;
 800c05c:	2300      	movs	r3, #0
 800c05e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSO16IS_I2C_BUS; /* I2C */
 800c060:	2300      	movs	r3, #0
 800c062:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSO16IS_I2C_ADD_L;
 800c064:	23d5      	movs	r3, #213	@ 0xd5
 800c066:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800c06a:	4b51      	ldr	r3, [pc, #324]	@ (800c1b0 <LSM6DSO16IS_0_Probe+0x15c>)
 800c06c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800c06e:	4b51      	ldr	r3, [pc, #324]	@ (800c1b4 <LSM6DSO16IS_0_Probe+0x160>)
 800c070:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800c072:	4b51      	ldr	r3, [pc, #324]	@ (800c1b8 <LSM6DSO16IS_0_Probe+0x164>)
 800c074:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800c076:	4b51      	ldr	r3, [pc, #324]	@ (800c1bc <LSM6DSO16IS_0_Probe+0x168>)
 800c078:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800c07a:	4b51      	ldr	r3, [pc, #324]	@ (800c1c0 <LSM6DSO16IS_0_Probe+0x16c>)
 800c07c:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800c07e:	4b51      	ldr	r3, [pc, #324]	@ (800c1c4 <LSM6DSO16IS_0_Probe+0x170>)
 800c080:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO16IS_RegisterBusIO(&lsm6dso16is_obj_0, &io_ctx) != LSM6DSO16IS_OK)
 800c082:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c086:	4619      	mov	r1, r3
 800c088:	484f      	ldr	r0, [pc, #316]	@ (800c1c8 <LSM6DSO16IS_0_Probe+0x174>)
 800c08a:	f7fa facd 	bl	8006628 <LSM6DSO16IS_RegisterBusIO>
 800c08e:	4603      	mov	r3, r0
 800c090:	2b00      	cmp	r3, #0
 800c092:	d003      	beq.n	800c09c <LSM6DSO16IS_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c094:	f06f 0306 	mvn.w	r3, #6
 800c098:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c09a:	e084      	b.n	800c1a6 <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (LSM6DSO16IS_Set_Mem_Bank(&lsm6dso16is_obj_0, LSM6DSO16IS_MAIN_MEM_BANK) != LSM6DSO16IS_OK)
 800c09c:	2100      	movs	r1, #0
 800c09e:	484a      	ldr	r0, [pc, #296]	@ (800c1c8 <LSM6DSO16IS_0_Probe+0x174>)
 800c0a0:	f7fb f8f3 	bl	800728a <LSM6DSO16IS_Set_Mem_Bank>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d003      	beq.n	800c0b2 <LSM6DSO16IS_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c0aa:	f06f 0306 	mvn.w	r3, #6
 800c0ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0b0:	e079      	b.n	800c1a6 <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (LSM6DSO16IS_ReadID(&lsm6dso16is_obj_0, &id) != LSM6DSO16IS_OK)
 800c0b2:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	4843      	ldr	r0, [pc, #268]	@ (800c1c8 <LSM6DSO16IS_0_Probe+0x174>)
 800c0ba:	f7fa fbb3 	bl	8006824 <LSM6DSO16IS_ReadID>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d003      	beq.n	800c0cc <LSM6DSO16IS_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c0c4:	f06f 0306 	mvn.w	r3, #6
 800c0c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0ca:	e06c      	b.n	800c1a6 <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (id != LSM6DSO16IS_ID)
 800c0cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c0d0:	2b22      	cmp	r3, #34	@ 0x22
 800c0d2:	d003      	beq.n	800c0dc <LSM6DSO16IS_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c0d4:	f06f 0306 	mvn.w	r3, #6
 800c0d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0da:	e064      	b.n	800c1a6 <LSM6DSO16IS_0_Probe+0x152>
  }
  else
  {
    (void)LSM6DSO16IS_GetCapabilities(&lsm6dso16is_obj_0, &cap);
 800c0dc:	f107 030c 	add.w	r3, r7, #12
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	4839      	ldr	r0, [pc, #228]	@ (800c1c8 <LSM6DSO16IS_0_Probe+0x174>)
 800c0e4:	f7fa fbb6 	bl	8006854 <LSM6DSO16IS_GetCapabilities>
    MotionCtx[IKS4A1_LSM6DSO16IS_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800c0e8:	7b7b      	ldrb	r3, [r7, #13]
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	7b3b      	ldrb	r3, [r7, #12]
 800c0ee:	005b      	lsls	r3, r3, #1
 800c0f0:	431a      	orrs	r2, r3
 800c0f2:	7bbb      	ldrb	r3, [r7, #14]
 800c0f4:	009b      	lsls	r3, r3, #2
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	4a34      	ldr	r2, [pc, #208]	@ (800c1cc <LSM6DSO16IS_0_Probe+0x178>)
 800c0fa:	60d3      	str	r3, [r2, #12]

    MotionCompObj[IKS4A1_LSM6DSO16IS_0] = &lsm6dso16is_obj_0;
 800c0fc:	4b34      	ldr	r3, [pc, #208]	@ (800c1d0 <LSM6DSO16IS_0_Probe+0x17c>)
 800c0fe:	4a32      	ldr	r2, [pc, #200]	@ (800c1c8 <LSM6DSO16IS_0_Probe+0x174>)
 800c100:	60da      	str	r2, [r3, #12]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LSM6DSO16IS_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO16IS_COMMON_Driver;
 800c102:	4b34      	ldr	r3, [pc, #208]	@ (800c1d4 <LSM6DSO16IS_0_Probe+0x180>)
 800c104:	4a34      	ldr	r2, [pc, #208]	@ (800c1d8 <LSM6DSO16IS_0_Probe+0x184>)
 800c106:	60da      	str	r2, [r3, #12]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800c108:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d11e      	bne.n	800c14c <LSM6DSO16IS_0_Probe+0xf8>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f003 0301 	and.w	r3, r3, #1
 800c114:	2b00      	cmp	r3, #0
 800c116:	d019      	beq.n	800c14c <LSM6DSO16IS_0_Probe+0xf8>
 800c118:	7b7b      	ldrb	r3, [r7, #13]
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d116      	bne.n	800c14c <LSM6DSO16IS_0_Probe+0xf8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSO16IS_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800c11e:	4b2f      	ldr	r3, [pc, #188]	@ (800c1dc <LSM6DSO16IS_0_Probe+0x188>)
 800c120:	685b      	ldr	r3, [r3, #4]
 800c122:	4a2f      	ldr	r2, [pc, #188]	@ (800c1e0 <LSM6DSO16IS_0_Probe+0x18c>)
 800c124:	3309      	adds	r3, #9
 800c126:	492f      	ldr	r1, [pc, #188]	@ (800c1e4 <LSM6DSO16IS_0_Probe+0x190>)
 800c128:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                         void *)&LSM6DSO16IS_GYRO_Driver;

      if (MotionDrv[IKS4A1_LSM6DSO16IS_0]->Init(MotionCompObj[IKS4A1_LSM6DSO16IS_0]) != LSM6DSO16IS_OK)
 800c12c:	4b29      	ldr	r3, [pc, #164]	@ (800c1d4 <LSM6DSO16IS_0_Probe+0x180>)
 800c12e:	68db      	ldr	r3, [r3, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	4a27      	ldr	r2, [pc, #156]	@ (800c1d0 <LSM6DSO16IS_0_Probe+0x17c>)
 800c134:	68d2      	ldr	r2, [r2, #12]
 800c136:	4610      	mov	r0, r2
 800c138:	4798      	blx	r3
 800c13a:	4603      	mov	r3, r0
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d003      	beq.n	800c148 <LSM6DSO16IS_0_Probe+0xf4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c140:	f06f 0304 	mvn.w	r3, #4
 800c144:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c146:	e001      	b.n	800c14c <LSM6DSO16IS_0_Probe+0xf8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800c148:	2300      	movs	r3, #0
 800c14a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800c14c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d11e      	bne.n	800c190 <LSM6DSO16IS_0_Probe+0x13c>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f003 0302 	and.w	r3, r3, #2
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d019      	beq.n	800c190 <LSM6DSO16IS_0_Probe+0x13c>
 800c15c:	7b3b      	ldrb	r3, [r7, #12]
 800c15e:	2b01      	cmp	r3, #1
 800c160:	d116      	bne.n	800c190 <LSM6DSO16IS_0_Probe+0x13c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSO16IS_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800c162:	4b1e      	ldr	r3, [pc, #120]	@ (800c1dc <LSM6DSO16IS_0_Probe+0x188>)
 800c164:	689b      	ldr	r3, [r3, #8]
 800c166:	4a1e      	ldr	r2, [pc, #120]	@ (800c1e0 <LSM6DSO16IS_0_Probe+0x18c>)
 800c168:	3309      	adds	r3, #9
 800c16a:	491f      	ldr	r1, [pc, #124]	@ (800c1e8 <LSM6DSO16IS_0_Probe+0x194>)
 800c16c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                             void *)&LSM6DSO16IS_ACC_Driver;

      if (MotionDrv[IKS4A1_LSM6DSO16IS_0]->Init(MotionCompObj[IKS4A1_LSM6DSO16IS_0]) != LSM6DSO16IS_OK)
 800c170:	4b18      	ldr	r3, [pc, #96]	@ (800c1d4 <LSM6DSO16IS_0_Probe+0x180>)
 800c172:	68db      	ldr	r3, [r3, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	4a16      	ldr	r2, [pc, #88]	@ (800c1d0 <LSM6DSO16IS_0_Probe+0x17c>)
 800c178:	68d2      	ldr	r2, [r2, #12]
 800c17a:	4610      	mov	r0, r2
 800c17c:	4798      	blx	r3
 800c17e:	4603      	mov	r3, r0
 800c180:	2b00      	cmp	r3, #0
 800c182:	d003      	beq.n	800c18c <LSM6DSO16IS_0_Probe+0x138>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c184:	f06f 0304 	mvn.w	r3, #4
 800c188:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c18a:	e001      	b.n	800c190 <LSM6DSO16IS_0_Probe+0x13c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800c18c:	2300      	movs	r3, #0
 800c18e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800c190:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c192:	2b00      	cmp	r3, #0
 800c194:	d107      	bne.n	800c1a6 <LSM6DSO16IS_0_Probe+0x152>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f003 0304 	and.w	r3, r3, #4
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d002      	beq.n	800c1a6 <LSM6DSO16IS_0_Probe+0x152>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c1a0:	f06f 0304 	mvn.w	r3, #4
 800c1a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800c1a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3750      	adds	r7, #80	@ 0x50
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}
 800c1b0:	080017a5 	.word	0x080017a5
 800c1b4:	08001821 	.word	0x08001821
 800c1b8:	080018d5 	.word	0x080018d5
 800c1bc:	08001871 	.word	0x08001871
 800c1c0:	080019e1 	.word	0x080019e1
 800c1c4:	0800c785 	.word	0x0800c785
 800c1c8:	2000089c 	.word	0x2000089c
 800c1cc:	200007e4 	.word	0x200007e4
 800c1d0:	20000794 	.word	0x20000794
 800c1d4:	200007d4 	.word	0x200007d4
 800c1d8:	200000a4 	.word	0x200000a4
 800c1dc:	200001f0 	.word	0x200001f0
 800c1e0:	200007a4 	.word	0x200007a4
 800c1e4:	200000d8 	.word	0x200000d8
 800c1e8:	200000b4 	.word	0x200000b4

0800c1ec <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800c1f6:	79fb      	ldrb	r3, [r7, #7]
 800c1f8:	4a04      	ldr	r2, [pc, #16]	@ (800c20c <BSP_LED_Init+0x20>)
 800c1fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1fe:	4798      	blx	r3
  return BSP_ERROR_NONE;
 800c200:	2300      	movs	r3, #0
}
 800c202:	4618      	mov	r0, r3
 800c204:	3708      	adds	r7, #8
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	08014700 	.word	0x08014700

0800c210 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 800c210:	b580      	push	{r7, lr}
 800c212:	b088      	sub	sp, #32
 800c214:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c216:	4b1c      	ldr	r3, [pc, #112]	@ (800c288 <LED_USER_GPIO_Init+0x78>)
 800c218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c21a:	4a1b      	ldr	r2, [pc, #108]	@ (800c288 <LED_USER_GPIO_Init+0x78>)
 800c21c:	f043 0301 	orr.w	r3, r3, #1
 800c220:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c222:	4b19      	ldr	r3, [pc, #100]	@ (800c288 <LED_USER_GPIO_Init+0x78>)
 800c224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c226:	f003 0301 	and.w	r3, r3, #1
 800c22a:	60bb      	str	r3, [r7, #8]
 800c22c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c22e:	f107 030c 	add.w	r3, r7, #12
 800c232:	2200      	movs	r2, #0
 800c234:	601a      	str	r2, [r3, #0]
 800c236:	605a      	str	r2, [r3, #4]
 800c238:	609a      	str	r2, [r3, #8]
 800c23a:	60da      	str	r2, [r3, #12]
 800c23c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c23e:	4b12      	ldr	r3, [pc, #72]	@ (800c288 <LED_USER_GPIO_Init+0x78>)
 800c240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c242:	4a11      	ldr	r2, [pc, #68]	@ (800c288 <LED_USER_GPIO_Init+0x78>)
 800c244:	f043 0301 	orr.w	r3, r3, #1
 800c248:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c24a:	4b0f      	ldr	r3, [pc, #60]	@ (800c288 <LED_USER_GPIO_Init+0x78>)
 800c24c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c24e:	f003 0301 	and.w	r3, r3, #1
 800c252:	607b      	str	r3, [r7, #4]
 800c254:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 800c256:	2200      	movs	r2, #0
 800c258:	2120      	movs	r1, #32
 800c25a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c25e:	f001 f983 	bl	800d568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 800c262:	2320      	movs	r3, #32
 800c264:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c266:	2301      	movs	r3, #1
 800c268:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c26a:	2300      	movs	r3, #0
 800c26c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c26e:	2300      	movs	r3, #0
 800c270:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 800c272:	f107 030c 	add.w	r3, r7, #12
 800c276:	4619      	mov	r1, r3
 800c278:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c27c:	f000 febe 	bl	800cffc <HAL_GPIO_Init>

}
 800c280:	bf00      	nop
 800c282:	3720      	adds	r7, #32
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	40021000 	.word	0x40021000

0800c28c <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	4603      	mov	r3, r0
 800c294:	460a      	mov	r2, r1
 800c296:	71fb      	strb	r3, [r7, #7]
 800c298:	4613      	mov	r3, r2
 800c29a:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800c29c:	2300      	movs	r3, #0
 800c29e:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 800c2a0:	79fb      	ldrb	r3, [r7, #7]
 800c2a2:	4a1f      	ldr	r2, [pc, #124]	@ (800c320 <BSP_PB_Init+0x94>)
 800c2a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2a8:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800c2aa:	79bb      	ldrb	r3, [r7, #6]
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d132      	bne.n	800c316 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 800c2b0:	79fb      	ldrb	r3, [r7, #7]
 800c2b2:	00db      	lsls	r3, r3, #3
 800c2b4:	4a1b      	ldr	r2, [pc, #108]	@ (800c324 <BSP_PB_Init+0x98>)
 800c2b6:	441a      	add	r2, r3
 800c2b8:	79fb      	ldrb	r3, [r7, #7]
 800c2ba:	491b      	ldr	r1, [pc, #108]	@ (800c328 <BSP_PB_Init+0x9c>)
 800c2bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c2c0:	4619      	mov	r1, r3
 800c2c2:	4610      	mov	r0, r2
 800c2c4:	f000 fe86 	bl	800cfd4 <HAL_EXTI_GetHandle>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d003      	beq.n	800c2d6 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800c2ce:	f06f 0303 	mvn.w	r3, #3
 800c2d2:	60fb      	str	r3, [r7, #12]
 800c2d4:	e01f      	b.n	800c316 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 800c2d6:	79fb      	ldrb	r3, [r7, #7]
 800c2d8:	00db      	lsls	r3, r3, #3
 800c2da:	4a12      	ldr	r2, [pc, #72]	@ (800c324 <BSP_PB_Init+0x98>)
 800c2dc:	1898      	adds	r0, r3, r2
 800c2de:	79fb      	ldrb	r3, [r7, #7]
 800c2e0:	4a12      	ldr	r2, [pc, #72]	@ (800c32c <BSP_PB_Init+0xa0>)
 800c2e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	2100      	movs	r1, #0
 800c2ea:	f000 fe59 	bl	800cfa0 <HAL_EXTI_RegisterCallback>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d003      	beq.n	800c2fc <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800c2f4:	f06f 0303 	mvn.w	r3, #3
 800c2f8:	60fb      	str	r3, [r7, #12]
 800c2fa:	e00c      	b.n	800c316 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800c2fc:	2028      	movs	r0, #40	@ 0x28
 800c2fe:	79fb      	ldrb	r3, [r7, #7]
 800c300:	4a0b      	ldr	r2, [pc, #44]	@ (800c330 <BSP_PB_Init+0xa4>)
 800c302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c306:	2200      	movs	r2, #0
 800c308:	4619      	mov	r1, r3
 800c30a:	f000 fb3a 	bl	800c982 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800c30e:	2328      	movs	r3, #40	@ 0x28
 800c310:	4618      	mov	r0, r3
 800c312:	f000 fb52 	bl	800c9ba <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 800c316:	68fb      	ldr	r3, [r7, #12]
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3710      	adds	r7, #16
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	08014704 	.word	0x08014704
 800c324:	20000214 	.word	0x20000214
 800c328:	08014708 	.word	0x08014708
 800c32c:	0801470c 	.word	0x0801470c
 800c330:	08014710 	.word	0x08014710

0800c334 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b082      	sub	sp, #8
 800c338:	af00      	add	r7, sp, #0
 800c33a:	4603      	mov	r3, r0
 800c33c:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800c33e:	79fb      	ldrb	r3, [r7, #7]
 800c340:	4a09      	ldr	r2, [pc, #36]	@ (800c368 <BSP_PB_GetState+0x34>)
 800c342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c346:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800c34a:	4611      	mov	r1, r2
 800c34c:	4618      	mov	r0, r3
 800c34e:	f001 f8f3 	bl	800d538 <HAL_GPIO_ReadPin>
 800c352:	4603      	mov	r3, r0
 800c354:	2b00      	cmp	r3, #0
 800c356:	bf0c      	ite	eq
 800c358:	2301      	moveq	r3, #1
 800c35a:	2300      	movne	r3, #0
 800c35c:	b2db      	uxtb	r3, r3
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3708      	adds	r7, #8
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	20000210 	.word	0x20000210

0800c36c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800c370:	2000      	movs	r0, #0
 800c372:	f7f5 feb3 	bl	80020dc <BSP_PB_Callback>
}
 800c376:	bf00      	nop
 800c378:	bd80      	pop	{r7, pc}
	...

0800c37c <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b088      	sub	sp, #32
 800c380:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c382:	4b19      	ldr	r3, [pc, #100]	@ (800c3e8 <BUTTON_USER_GPIO_Init+0x6c>)
 800c384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c386:	4a18      	ldr	r2, [pc, #96]	@ (800c3e8 <BUTTON_USER_GPIO_Init+0x6c>)
 800c388:	f043 0304 	orr.w	r3, r3, #4
 800c38c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c38e:	4b16      	ldr	r3, [pc, #88]	@ (800c3e8 <BUTTON_USER_GPIO_Init+0x6c>)
 800c390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c392:	f003 0304 	and.w	r3, r3, #4
 800c396:	60bb      	str	r3, [r7, #8]
 800c398:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c39a:	f107 030c 	add.w	r3, r7, #12
 800c39e:	2200      	movs	r2, #0
 800c3a0:	601a      	str	r2, [r3, #0]
 800c3a2:	605a      	str	r2, [r3, #4]
 800c3a4:	609a      	str	r2, [r3, #8]
 800c3a6:	60da      	str	r2, [r3, #12]
 800c3a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c3aa:	4b0f      	ldr	r3, [pc, #60]	@ (800c3e8 <BUTTON_USER_GPIO_Init+0x6c>)
 800c3ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c3ae:	4a0e      	ldr	r2, [pc, #56]	@ (800c3e8 <BUTTON_USER_GPIO_Init+0x6c>)
 800c3b0:	f043 0304 	orr.w	r3, r3, #4
 800c3b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c3b6:	4b0c      	ldr	r3, [pc, #48]	@ (800c3e8 <BUTTON_USER_GPIO_Init+0x6c>)
 800c3b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c3ba:	f003 0304 	and.w	r3, r3, #4
 800c3be:	607b      	str	r3, [r7, #4]
 800c3c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 800c3c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c3c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800c3c8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800c3cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800c3d2:	f107 030c 	add.w	r3, r7, #12
 800c3d6:	4619      	mov	r1, r3
 800c3d8:	4804      	ldr	r0, [pc, #16]	@ (800c3ec <BUTTON_USER_GPIO_Init+0x70>)
 800c3da:	f000 fe0f 	bl	800cffc <HAL_GPIO_Init>

}
 800c3de:	bf00      	nop
 800c3e0:	3720      	adds	r7, #32
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	40021000 	.word	0x40021000
 800c3ec:	48000800 	.word	0x48000800

0800c3f0 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800c3fe:	79fb      	ldrb	r3, [r7, #7]
 800c400:	2b01      	cmp	r3, #1
 800c402:	d903      	bls.n	800c40c <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c404:	f06f 0301 	mvn.w	r3, #1
 800c408:	60fb      	str	r3, [r7, #12]
 800c40a:	e025      	b.n	800c458 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 800c40c:	79fb      	ldrb	r3, [r7, #7]
 800c40e:	79fa      	ldrb	r2, [r7, #7]
 800c410:	4914      	ldr	r1, [pc, #80]	@ (800c464 <BSP_COM_Init+0x74>)
 800c412:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c416:	4814      	ldr	r0, [pc, #80]	@ (800c468 <BSP_COM_Init+0x78>)
 800c418:	4613      	mov	r3, r2
 800c41a:	011b      	lsls	r3, r3, #4
 800c41c:	4413      	add	r3, r2
 800c41e:	00db      	lsls	r3, r3, #3
 800c420:	4403      	add	r3, r0
 800c422:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800c424:	79fa      	ldrb	r2, [r7, #7]
 800c426:	4613      	mov	r3, r2
 800c428:	011b      	lsls	r3, r3, #4
 800c42a:	4413      	add	r3, r2
 800c42c:	00db      	lsls	r3, r3, #3
 800c42e:	4a0e      	ldr	r2, [pc, #56]	@ (800c468 <BSP_COM_Init+0x78>)
 800c430:	4413      	add	r3, r2
 800c432:	4618      	mov	r0, r3
 800c434:	f000 f86a 	bl	800c50c <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 800c438:	79fa      	ldrb	r2, [r7, #7]
 800c43a:	4613      	mov	r3, r2
 800c43c:	011b      	lsls	r3, r3, #4
 800c43e:	4413      	add	r3, r2
 800c440:	00db      	lsls	r3, r3, #3
 800c442:	4a09      	ldr	r2, [pc, #36]	@ (800c468 <BSP_COM_Init+0x78>)
 800c444:	4413      	add	r3, r2
 800c446:	4618      	mov	r0, r3
 800c448:	f000 f810 	bl	800c46c <MX_USART2_UART_Init>
 800c44c:	4603      	mov	r3, r0
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d002      	beq.n	800c458 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800c452:	f06f 0303 	mvn.w	r3, #3
 800c456:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800c458:	68fb      	ldr	r3, [r7, #12]
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3710      	adds	r7, #16
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	2000021c 	.word	0x2000021c
 800c468:	200008d4 	.word	0x200008d4

0800c46c <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800c474:	2300      	movs	r3, #0
 800c476:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	4a15      	ldr	r2, [pc, #84]	@ (800c4d0 <MX_USART2_UART_Init+0x64>)
 800c47c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800c484:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2200      	movs	r2, #0
 800c48a:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2200      	movs	r2, #0
 800c490:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2200      	movs	r2, #0
 800c496:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	220c      	movs	r2, #12
 800c49c:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f004 fd0c 	bl	8010ed4 <HAL_UART_Init>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d001      	beq.n	800c4c6 <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c4c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3710      	adds	r7, #16
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	40004400 	.word	0x40004400

0800c4d4 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b082      	sub	sp, #8
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 800c4dc:	4b09      	ldr	r3, [pc, #36]	@ (800c504 <__io_putchar+0x30>)
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	4613      	mov	r3, r2
 800c4e4:	011b      	lsls	r3, r3, #4
 800c4e6:	4413      	add	r3, r2
 800c4e8:	00db      	lsls	r3, r3, #3
 800c4ea:	4a07      	ldr	r2, [pc, #28]	@ (800c508 <__io_putchar+0x34>)
 800c4ec:	1898      	adds	r0, r3, r2
 800c4ee:	1d39      	adds	r1, r7, #4
 800c4f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	f004 fd3b 	bl	8010f70 <HAL_UART_Transmit>
  return ch;
 800c4fa:	687b      	ldr	r3, [r7, #4]
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3708      	adds	r7, #8
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}
 800c504:	2000095c 	.word	0x2000095c
 800c508:	200008d4 	.word	0x200008d4

0800c50c <USART2_MspInit>:
 */
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b0ac      	sub	sp, #176	@ 0xb0
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c514:	f107 0314 	add.w	r3, r7, #20
 800c518:	2288      	movs	r2, #136	@ 0x88
 800c51a:	2100      	movs	r1, #0
 800c51c:	4618      	mov	r0, r3
 800c51e:	f005 ff42 	bl	80123a6 <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800c522:	2302      	movs	r3, #2
 800c524:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800c526:	2300      	movs	r3, #0
 800c528:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800c52a:	f107 0314 	add.w	r3, r7, #20
 800c52e:	4618      	mov	r0, r3
 800c530:	f002 ffb0 	bl	800f494 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800c534:	4b47      	ldr	r3, [pc, #284]	@ (800c654 <USART2_MspInit+0x148>)
 800c536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c538:	4a46      	ldr	r2, [pc, #280]	@ (800c654 <USART2_MspInit+0x148>)
 800c53a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c53e:	6593      	str	r3, [r2, #88]	@ 0x58
 800c540:	4b44      	ldr	r3, [pc, #272]	@ (800c654 <USART2_MspInit+0x148>)
 800c542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c548:	613b      	str	r3, [r7, #16]
 800c54a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c54c:	4b41      	ldr	r3, [pc, #260]	@ (800c654 <USART2_MspInit+0x148>)
 800c54e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c550:	4a40      	ldr	r2, [pc, #256]	@ (800c654 <USART2_MspInit+0x148>)
 800c552:	f043 0301 	orr.w	r3, r3, #1
 800c556:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c558:	4b3e      	ldr	r3, [pc, #248]	@ (800c654 <USART2_MspInit+0x148>)
 800c55a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c55c:	f003 0301 	and.w	r3, r3, #1
 800c560:	60fb      	str	r3, [r7, #12]
 800c562:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800c564:	2304      	movs	r3, #4
 800c566:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c56a:	2302      	movs	r3, #2
 800c56c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c570:	2300      	movs	r3, #0
 800c572:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800c576:	2301      	movs	r3, #1
 800c578:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 800c57c:	2307      	movs	r3, #7
 800c57e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800c582:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800c586:	4619      	mov	r1, r3
 800c588:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c58c:	f000 fd36 	bl	800cffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 800c590:	2308      	movs	r3, #8
 800c592:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c596:	2302      	movs	r3, #2
 800c598:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c59c:	2300      	movs	r3, #0
 800c59e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 800c5a8:	2307      	movs	r3, #7
 800c5aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800c5ae:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c5b8:	f000 fd20 	bl	800cffc <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_usart2_rx.Instance = DMA1_Channel6;
 800c5bc:	4b26      	ldr	r3, [pc, #152]	@ (800c658 <USART2_MspInit+0x14c>)
 800c5be:	4a27      	ldr	r2, [pc, #156]	@ (800c65c <USART2_MspInit+0x150>)
 800c5c0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800c5c2:	4b25      	ldr	r3, [pc, #148]	@ (800c658 <USART2_MspInit+0x14c>)
 800c5c4:	2202      	movs	r2, #2
 800c5c6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c5c8:	4b23      	ldr	r3, [pc, #140]	@ (800c658 <USART2_MspInit+0x14c>)
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c5ce:	4b22      	ldr	r3, [pc, #136]	@ (800c658 <USART2_MspInit+0x14c>)
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c5d4:	4b20      	ldr	r3, [pc, #128]	@ (800c658 <USART2_MspInit+0x14c>)
 800c5d6:	2280      	movs	r2, #128	@ 0x80
 800c5d8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c5da:	4b1f      	ldr	r3, [pc, #124]	@ (800c658 <USART2_MspInit+0x14c>)
 800c5dc:	2200      	movs	r2, #0
 800c5de:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c5e0:	4b1d      	ldr	r3, [pc, #116]	@ (800c658 <USART2_MspInit+0x14c>)
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800c5e6:	4b1c      	ldr	r3, [pc, #112]	@ (800c658 <USART2_MspInit+0x14c>)
 800c5e8:	2220      	movs	r2, #32
 800c5ea:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c5ec:	4b1a      	ldr	r3, [pc, #104]	@ (800c658 <USART2_MspInit+0x14c>)
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_usart2_rx);
 800c5f2:	4819      	ldr	r0, [pc, #100]	@ (800c658 <USART2_MspInit+0x14c>)
 800c5f4:	f000 faee 	bl	800cbd4 <HAL_DMA_Init>

  __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	4a17      	ldr	r2, [pc, #92]	@ (800c658 <USART2_MspInit+0x14c>)
 800c5fc:	675a      	str	r2, [r3, #116]	@ 0x74
 800c5fe:	4a16      	ldr	r2, [pc, #88]	@ (800c658 <USART2_MspInit+0x14c>)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6293      	str	r3, [r2, #40]	@ 0x28

    hdma_usart2_tx.Instance = DMA1_Channel7;
 800c604:	4b16      	ldr	r3, [pc, #88]	@ (800c660 <USART2_MspInit+0x154>)
 800c606:	4a17      	ldr	r2, [pc, #92]	@ (800c664 <USART2_MspInit+0x158>)
 800c608:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 800c60a:	4b15      	ldr	r3, [pc, #84]	@ (800c660 <USART2_MspInit+0x154>)
 800c60c:	2202      	movs	r2, #2
 800c60e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c610:	4b13      	ldr	r3, [pc, #76]	@ (800c660 <USART2_MspInit+0x154>)
 800c612:	2210      	movs	r2, #16
 800c614:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c616:	4b12      	ldr	r3, [pc, #72]	@ (800c660 <USART2_MspInit+0x154>)
 800c618:	2200      	movs	r2, #0
 800c61a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800c61c:	4b10      	ldr	r3, [pc, #64]	@ (800c660 <USART2_MspInit+0x154>)
 800c61e:	2280      	movs	r2, #128	@ 0x80
 800c620:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c622:	4b0f      	ldr	r3, [pc, #60]	@ (800c660 <USART2_MspInit+0x154>)
 800c624:	2200      	movs	r2, #0
 800c626:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c628:	4b0d      	ldr	r3, [pc, #52]	@ (800c660 <USART2_MspInit+0x154>)
 800c62a:	2200      	movs	r2, #0
 800c62c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 800c62e:	4b0c      	ldr	r3, [pc, #48]	@ (800c660 <USART2_MspInit+0x154>)
 800c630:	2220      	movs	r2, #32
 800c632:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800c634:	4b0a      	ldr	r3, [pc, #40]	@ (800c660 <USART2_MspInit+0x154>)
 800c636:	2200      	movs	r2, #0
 800c638:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_usart2_tx);
 800c63a:	4809      	ldr	r0, [pc, #36]	@ (800c660 <USART2_MspInit+0x154>)
 800c63c:	f000 faca 	bl	800cbd4 <HAL_DMA_Init>

  __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	4a07      	ldr	r2, [pc, #28]	@ (800c660 <USART2_MspInit+0x154>)
 800c644:	671a      	str	r2, [r3, #112]	@ 0x70
 800c646:	4a06      	ldr	r2, [pc, #24]	@ (800c660 <USART2_MspInit+0x154>)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 800c64c:	bf00      	nop
 800c64e:	37b0      	adds	r7, #176	@ 0xb0
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	40021000 	.word	0x40021000
 800c658:	20000960 	.word	0x20000960
 800c65c:	4002006c 	.word	0x4002006c
 800c660:	200009a8 	.word	0x200009a8
 800c664:	40020080 	.word	0x40020080

0800c668 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800c668:	b480      	push	{r7}
 800c66a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800c66c:	4b06      	ldr	r3, [pc, #24]	@ (800c688 <SystemInit+0x20>)
 800c66e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c672:	4a05      	ldr	r2, [pc, #20]	@ (800c688 <SystemInit+0x20>)
 800c674:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c678:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800c67c:	bf00      	nop
 800c67e:	46bd      	mov	sp, r7
 800c680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c684:	4770      	bx	lr
 800c686:	bf00      	nop
 800c688:	e000ed00 	.word	0xe000ed00

0800c68c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800c692:	2300      	movs	r3, #0
 800c694:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c696:	4b0c      	ldr	r3, [pc, #48]	@ (800c6c8 <HAL_Init+0x3c>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	4a0b      	ldr	r2, [pc, #44]	@ (800c6c8 <HAL_Init+0x3c>)
 800c69c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c6a0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c6a2:	2003      	movs	r0, #3
 800c6a4:	f000 f962 	bl	800c96c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800c6a8:	2000      	movs	r0, #0
 800c6aa:	f000 f80f 	bl	800c6cc <HAL_InitTick>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d002      	beq.n	800c6ba <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	71fb      	strb	r3, [r7, #7]
 800c6b8:	e001      	b.n	800c6be <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800c6ba:	f7f4 feb1 	bl	8001420 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800c6be:	79fb      	ldrb	r3, [r7, #7]
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3708      	adds	r7, #8
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	40022000 	.word	0x40022000

0800c6cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b084      	sub	sp, #16
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800c6d8:	4b17      	ldr	r3, [pc, #92]	@ (800c738 <HAL_InitTick+0x6c>)
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d023      	beq.n	800c728 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800c6e0:	4b16      	ldr	r3, [pc, #88]	@ (800c73c <HAL_InitTick+0x70>)
 800c6e2:	681a      	ldr	r2, [r3, #0]
 800c6e4:	4b14      	ldr	r3, [pc, #80]	@ (800c738 <HAL_InitTick+0x6c>)
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c6ee:	fbb3 f3f1 	udiv	r3, r3, r1
 800c6f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f000 f96d 	bl	800c9d6 <HAL_SYSTICK_Config>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d10f      	bne.n	800c722 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2b0f      	cmp	r3, #15
 800c706:	d809      	bhi.n	800c71c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c708:	2200      	movs	r2, #0
 800c70a:	6879      	ldr	r1, [r7, #4]
 800c70c:	f04f 30ff 	mov.w	r0, #4294967295
 800c710:	f000 f937 	bl	800c982 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800c714:	4a0a      	ldr	r2, [pc, #40]	@ (800c740 <HAL_InitTick+0x74>)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6013      	str	r3, [r2, #0]
 800c71a:	e007      	b.n	800c72c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800c71c:	2301      	movs	r3, #1
 800c71e:	73fb      	strb	r3, [r7, #15]
 800c720:	e004      	b.n	800c72c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800c722:	2301      	movs	r3, #1
 800c724:	73fb      	strb	r3, [r7, #15]
 800c726:	e001      	b.n	800c72c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800c728:	2301      	movs	r3, #1
 800c72a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800c72c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3710      	adds	r7, #16
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
 800c736:	bf00      	nop
 800c738:	20000228 	.word	0x20000228
 800c73c:	20000220 	.word	0x20000220
 800c740:	20000224 	.word	0x20000224

0800c744 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c744:	b480      	push	{r7}
 800c746:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800c748:	4b06      	ldr	r3, [pc, #24]	@ (800c764 <HAL_IncTick+0x20>)
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	461a      	mov	r2, r3
 800c74e:	4b06      	ldr	r3, [pc, #24]	@ (800c768 <HAL_IncTick+0x24>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	4413      	add	r3, r2
 800c754:	4a04      	ldr	r2, [pc, #16]	@ (800c768 <HAL_IncTick+0x24>)
 800c756:	6013      	str	r3, [r2, #0]
}
 800c758:	bf00      	nop
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr
 800c762:	bf00      	nop
 800c764:	20000228 	.word	0x20000228
 800c768:	200009f0 	.word	0x200009f0

0800c76c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c76c:	b480      	push	{r7}
 800c76e:	af00      	add	r7, sp, #0
  return uwTick;
 800c770:	4b03      	ldr	r3, [pc, #12]	@ (800c780 <HAL_GetTick+0x14>)
 800c772:	681b      	ldr	r3, [r3, #0]
}
 800c774:	4618      	mov	r0, r3
 800c776:	46bd      	mov	sp, r7
 800c778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77c:	4770      	bx	lr
 800c77e:	bf00      	nop
 800c780:	200009f0 	.word	0x200009f0

0800c784 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b084      	sub	sp, #16
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c78c:	f7ff ffee 	bl	800c76c <HAL_GetTick>
 800c790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c79c:	d005      	beq.n	800c7aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800c79e:	4b0a      	ldr	r3, [pc, #40]	@ (800c7c8 <HAL_Delay+0x44>)
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	4413      	add	r3, r2
 800c7a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800c7aa:	bf00      	nop
 800c7ac:	f7ff ffde 	bl	800c76c <HAL_GetTick>
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	1ad3      	subs	r3, r2, r3
 800c7b6:	68fa      	ldr	r2, [r7, #12]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d8f7      	bhi.n	800c7ac <HAL_Delay+0x28>
  {
  }
}
 800c7bc:	bf00      	nop
 800c7be:	bf00      	nop
 800c7c0:	3710      	adds	r7, #16
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop
 800c7c8:	20000228 	.word	0x20000228

0800c7cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b085      	sub	sp, #20
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f003 0307 	and.w	r3, r3, #7
 800c7da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c7dc:	4b0c      	ldr	r3, [pc, #48]	@ (800c810 <__NVIC_SetPriorityGrouping+0x44>)
 800c7de:	68db      	ldr	r3, [r3, #12]
 800c7e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c7e2:	68ba      	ldr	r2, [r7, #8]
 800c7e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c7e8:	4013      	ands	r3, r2
 800c7ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c7f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c7f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c7fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c7fe:	4a04      	ldr	r2, [pc, #16]	@ (800c810 <__NVIC_SetPriorityGrouping+0x44>)
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	60d3      	str	r3, [r2, #12]
}
 800c804:	bf00      	nop
 800c806:	3714      	adds	r7, #20
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr
 800c810:	e000ed00 	.word	0xe000ed00

0800c814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c814:	b480      	push	{r7}
 800c816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c818:	4b04      	ldr	r3, [pc, #16]	@ (800c82c <__NVIC_GetPriorityGrouping+0x18>)
 800c81a:	68db      	ldr	r3, [r3, #12]
 800c81c:	0a1b      	lsrs	r3, r3, #8
 800c81e:	f003 0307 	and.w	r3, r3, #7
}
 800c822:	4618      	mov	r0, r3
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr
 800c82c:	e000ed00 	.word	0xe000ed00

0800c830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c830:	b480      	push	{r7}
 800c832:	b083      	sub	sp, #12
 800c834:	af00      	add	r7, sp, #0
 800c836:	4603      	mov	r3, r0
 800c838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c83a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	db0b      	blt.n	800c85a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c842:	79fb      	ldrb	r3, [r7, #7]
 800c844:	f003 021f 	and.w	r2, r3, #31
 800c848:	4907      	ldr	r1, [pc, #28]	@ (800c868 <__NVIC_EnableIRQ+0x38>)
 800c84a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c84e:	095b      	lsrs	r3, r3, #5
 800c850:	2001      	movs	r0, #1
 800c852:	fa00 f202 	lsl.w	r2, r0, r2
 800c856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800c85a:	bf00      	nop
 800c85c:	370c      	adds	r7, #12
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr
 800c866:	bf00      	nop
 800c868:	e000e100 	.word	0xe000e100

0800c86c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b083      	sub	sp, #12
 800c870:	af00      	add	r7, sp, #0
 800c872:	4603      	mov	r3, r0
 800c874:	6039      	str	r1, [r7, #0]
 800c876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	db0a      	blt.n	800c896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	b2da      	uxtb	r2, r3
 800c884:	490c      	ldr	r1, [pc, #48]	@ (800c8b8 <__NVIC_SetPriority+0x4c>)
 800c886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c88a:	0112      	lsls	r2, r2, #4
 800c88c:	b2d2      	uxtb	r2, r2
 800c88e:	440b      	add	r3, r1
 800c890:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c894:	e00a      	b.n	800c8ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	b2da      	uxtb	r2, r3
 800c89a:	4908      	ldr	r1, [pc, #32]	@ (800c8bc <__NVIC_SetPriority+0x50>)
 800c89c:	79fb      	ldrb	r3, [r7, #7]
 800c89e:	f003 030f 	and.w	r3, r3, #15
 800c8a2:	3b04      	subs	r3, #4
 800c8a4:	0112      	lsls	r2, r2, #4
 800c8a6:	b2d2      	uxtb	r2, r2
 800c8a8:	440b      	add	r3, r1
 800c8aa:	761a      	strb	r2, [r3, #24]
}
 800c8ac:	bf00      	nop
 800c8ae:	370c      	adds	r7, #12
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b6:	4770      	bx	lr
 800c8b8:	e000e100 	.word	0xe000e100
 800c8bc:	e000ed00 	.word	0xe000ed00

0800c8c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b089      	sub	sp, #36	@ 0x24
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	f003 0307 	and.w	r3, r3, #7
 800c8d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c8d4:	69fb      	ldr	r3, [r7, #28]
 800c8d6:	f1c3 0307 	rsb	r3, r3, #7
 800c8da:	2b04      	cmp	r3, #4
 800c8dc:	bf28      	it	cs
 800c8de:	2304      	movcs	r3, #4
 800c8e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c8e2:	69fb      	ldr	r3, [r7, #28]
 800c8e4:	3304      	adds	r3, #4
 800c8e6:	2b06      	cmp	r3, #6
 800c8e8:	d902      	bls.n	800c8f0 <NVIC_EncodePriority+0x30>
 800c8ea:	69fb      	ldr	r3, [r7, #28]
 800c8ec:	3b03      	subs	r3, #3
 800c8ee:	e000      	b.n	800c8f2 <NVIC_EncodePriority+0x32>
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c8f4:	f04f 32ff 	mov.w	r2, #4294967295
 800c8f8:	69bb      	ldr	r3, [r7, #24]
 800c8fa:	fa02 f303 	lsl.w	r3, r2, r3
 800c8fe:	43da      	mvns	r2, r3
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	401a      	ands	r2, r3
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c908:	f04f 31ff 	mov.w	r1, #4294967295
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	fa01 f303 	lsl.w	r3, r1, r3
 800c912:	43d9      	mvns	r1, r3
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c918:	4313      	orrs	r3, r2
         );
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3724      	adds	r7, #36	@ 0x24
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr
	...

0800c928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b082      	sub	sp, #8
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	3b01      	subs	r3, #1
 800c934:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c938:	d301      	bcc.n	800c93e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c93a:	2301      	movs	r3, #1
 800c93c:	e00f      	b.n	800c95e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c93e:	4a0a      	ldr	r2, [pc, #40]	@ (800c968 <SysTick_Config+0x40>)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	3b01      	subs	r3, #1
 800c944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c946:	210f      	movs	r1, #15
 800c948:	f04f 30ff 	mov.w	r0, #4294967295
 800c94c:	f7ff ff8e 	bl	800c86c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c950:	4b05      	ldr	r3, [pc, #20]	@ (800c968 <SysTick_Config+0x40>)
 800c952:	2200      	movs	r2, #0
 800c954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c956:	4b04      	ldr	r3, [pc, #16]	@ (800c968 <SysTick_Config+0x40>)
 800c958:	2207      	movs	r2, #7
 800c95a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c95c:	2300      	movs	r3, #0
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3708      	adds	r7, #8
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	e000e010 	.word	0xe000e010

0800c96c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b082      	sub	sp, #8
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f7ff ff29 	bl	800c7cc <__NVIC_SetPriorityGrouping>
}
 800c97a:	bf00      	nop
 800c97c:	3708      	adds	r7, #8
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}

0800c982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c982:	b580      	push	{r7, lr}
 800c984:	b086      	sub	sp, #24
 800c986:	af00      	add	r7, sp, #0
 800c988:	4603      	mov	r3, r0
 800c98a:	60b9      	str	r1, [r7, #8]
 800c98c:	607a      	str	r2, [r7, #4]
 800c98e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800c990:	2300      	movs	r3, #0
 800c992:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c994:	f7ff ff3e 	bl	800c814 <__NVIC_GetPriorityGrouping>
 800c998:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c99a:	687a      	ldr	r2, [r7, #4]
 800c99c:	68b9      	ldr	r1, [r7, #8]
 800c99e:	6978      	ldr	r0, [r7, #20]
 800c9a0:	f7ff ff8e 	bl	800c8c0 <NVIC_EncodePriority>
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9aa:	4611      	mov	r1, r2
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f7ff ff5d 	bl	800c86c <__NVIC_SetPriority>
}
 800c9b2:	bf00      	nop
 800c9b4:	3718      	adds	r7, #24
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}

0800c9ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c9ba:	b580      	push	{r7, lr}
 800c9bc:	b082      	sub	sp, #8
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c9c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7ff ff31 	bl	800c830 <__NVIC_EnableIRQ>
}
 800c9ce:	bf00      	nop
 800c9d0:	3708      	adds	r7, #8
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}

0800c9d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c9d6:	b580      	push	{r7, lr}
 800c9d8:	b082      	sub	sp, #8
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f7ff ffa2 	bl	800c928 <SysTick_Config>
 800c9e4:	4603      	mov	r3, r0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3708      	adds	r7, #8
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
	...

0800c9f0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d101      	bne.n	800ca02 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	e054      	b.n	800caac <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	7f5b      	ldrb	r3, [r3, #29]
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d105      	bne.n	800ca18 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f7f4 fd28 	bl	8001468 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2202      	movs	r2, #2
 800ca1c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	791b      	ldrb	r3, [r3, #4]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d10c      	bne.n	800ca40 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	4a22      	ldr	r2, [pc, #136]	@ (800cab4 <HAL_CRC_Init+0xc4>)
 800ca2c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	689a      	ldr	r2, [r3, #8]
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f022 0218 	bic.w	r2, r2, #24
 800ca3c:	609a      	str	r2, [r3, #8]
 800ca3e:	e00c      	b.n	800ca5a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6899      	ldr	r1, [r3, #8]
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	68db      	ldr	r3, [r3, #12]
 800ca48:	461a      	mov	r2, r3
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f000 f834 	bl	800cab8 <HAL_CRCEx_Polynomial_Set>
 800ca50:	4603      	mov	r3, r0
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d001      	beq.n	800ca5a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800ca56:	2301      	movs	r3, #1
 800ca58:	e028      	b.n	800caac <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	795b      	ldrb	r3, [r3, #5]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d105      	bne.n	800ca6e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f04f 32ff 	mov.w	r2, #4294967295
 800ca6a:	611a      	str	r2, [r3, #16]
 800ca6c:	e004      	b.n	800ca78 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	687a      	ldr	r2, [r7, #4]
 800ca74:	6912      	ldr	r2, [r2, #16]
 800ca76:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	689b      	ldr	r3, [r3, #8]
 800ca7e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	695a      	ldr	r2, [r3, #20]
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	430a      	orrs	r2, r1
 800ca8c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	689b      	ldr	r3, [r3, #8]
 800ca94:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	699a      	ldr	r2, [r3, #24]
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	430a      	orrs	r2, r1
 800caa2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2201      	movs	r2, #1
 800caa8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800caaa:	2300      	movs	r3, #0
}
 800caac:	4618      	mov	r0, r3
 800caae:	3708      	adds	r7, #8
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}
 800cab4:	04c11db7 	.word	0x04c11db7

0800cab8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800cab8:	b480      	push	{r7}
 800caba:	b087      	sub	sp, #28
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	60f8      	str	r0, [r7, #12]
 800cac0:	60b9      	str	r1, [r7, #8]
 800cac2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cac4:	2300      	movs	r3, #0
 800cac6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800cac8:	231f      	movs	r3, #31
 800caca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	f003 0301 	and.w	r3, r3, #1
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d102      	bne.n	800cadc <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800cad6:	2301      	movs	r3, #1
 800cad8:	75fb      	strb	r3, [r7, #23]
 800cada:	e063      	b.n	800cba4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800cadc:	bf00      	nop
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	1e5a      	subs	r2, r3, #1
 800cae2:	613a      	str	r2, [r7, #16]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d009      	beq.n	800cafc <HAL_CRCEx_Polynomial_Set+0x44>
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	f003 031f 	and.w	r3, r3, #31
 800caee:	68ba      	ldr	r2, [r7, #8]
 800caf0:	fa22 f303 	lsr.w	r3, r2, r3
 800caf4:	f003 0301 	and.w	r3, r3, #1
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d0f0      	beq.n	800cade <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2b18      	cmp	r3, #24
 800cb00:	d846      	bhi.n	800cb90 <HAL_CRCEx_Polynomial_Set+0xd8>
 800cb02:	a201      	add	r2, pc, #4	@ (adr r2, 800cb08 <HAL_CRCEx_Polynomial_Set+0x50>)
 800cb04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb08:	0800cb97 	.word	0x0800cb97
 800cb0c:	0800cb91 	.word	0x0800cb91
 800cb10:	0800cb91 	.word	0x0800cb91
 800cb14:	0800cb91 	.word	0x0800cb91
 800cb18:	0800cb91 	.word	0x0800cb91
 800cb1c:	0800cb91 	.word	0x0800cb91
 800cb20:	0800cb91 	.word	0x0800cb91
 800cb24:	0800cb91 	.word	0x0800cb91
 800cb28:	0800cb85 	.word	0x0800cb85
 800cb2c:	0800cb91 	.word	0x0800cb91
 800cb30:	0800cb91 	.word	0x0800cb91
 800cb34:	0800cb91 	.word	0x0800cb91
 800cb38:	0800cb91 	.word	0x0800cb91
 800cb3c:	0800cb91 	.word	0x0800cb91
 800cb40:	0800cb91 	.word	0x0800cb91
 800cb44:	0800cb91 	.word	0x0800cb91
 800cb48:	0800cb79 	.word	0x0800cb79
 800cb4c:	0800cb91 	.word	0x0800cb91
 800cb50:	0800cb91 	.word	0x0800cb91
 800cb54:	0800cb91 	.word	0x0800cb91
 800cb58:	0800cb91 	.word	0x0800cb91
 800cb5c:	0800cb91 	.word	0x0800cb91
 800cb60:	0800cb91 	.word	0x0800cb91
 800cb64:	0800cb91 	.word	0x0800cb91
 800cb68:	0800cb6d 	.word	0x0800cb6d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	2b06      	cmp	r3, #6
 800cb70:	d913      	bls.n	800cb9a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800cb72:	2301      	movs	r3, #1
 800cb74:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800cb76:	e010      	b.n	800cb9a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	2b07      	cmp	r3, #7
 800cb7c:	d90f      	bls.n	800cb9e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800cb7e:	2301      	movs	r3, #1
 800cb80:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800cb82:	e00c      	b.n	800cb9e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	2b0f      	cmp	r3, #15
 800cb88:	d90b      	bls.n	800cba2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800cb8e:	e008      	b.n	800cba2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800cb90:	2301      	movs	r3, #1
 800cb92:	75fb      	strb	r3, [r7, #23]
        break;
 800cb94:	e006      	b.n	800cba4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800cb96:	bf00      	nop
 800cb98:	e004      	b.n	800cba4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800cb9a:	bf00      	nop
 800cb9c:	e002      	b.n	800cba4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800cb9e:	bf00      	nop
 800cba0:	e000      	b.n	800cba4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800cba2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800cba4:	7dfb      	ldrb	r3, [r7, #23]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d10d      	bne.n	800cbc6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	68ba      	ldr	r2, [r7, #8]
 800cbb0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	689b      	ldr	r3, [r3, #8]
 800cbb8:	f023 0118 	bic.w	r1, r3, #24
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	687a      	ldr	r2, [r7, #4]
 800cbc2:	430a      	orrs	r2, r1
 800cbc4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800cbc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	371c      	adds	r7, #28
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd2:	4770      	bx	lr

0800cbd4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b085      	sub	sp, #20
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d101      	bne.n	800cbe6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	e098      	b.n	800cd18 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	461a      	mov	r2, r3
 800cbec:	4b4d      	ldr	r3, [pc, #308]	@ (800cd24 <HAL_DMA_Init+0x150>)
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d80f      	bhi.n	800cc12 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	4b4b      	ldr	r3, [pc, #300]	@ (800cd28 <HAL_DMA_Init+0x154>)
 800cbfa:	4413      	add	r3, r2
 800cbfc:	4a4b      	ldr	r2, [pc, #300]	@ (800cd2c <HAL_DMA_Init+0x158>)
 800cbfe:	fba2 2303 	umull	r2, r3, r2, r3
 800cc02:	091b      	lsrs	r3, r3, #4
 800cc04:	009a      	lsls	r2, r3, #2
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	4a48      	ldr	r2, [pc, #288]	@ (800cd30 <HAL_DMA_Init+0x15c>)
 800cc0e:	641a      	str	r2, [r3, #64]	@ 0x40
 800cc10:	e00e      	b.n	800cc30 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	461a      	mov	r2, r3
 800cc18:	4b46      	ldr	r3, [pc, #280]	@ (800cd34 <HAL_DMA_Init+0x160>)
 800cc1a:	4413      	add	r3, r2
 800cc1c:	4a43      	ldr	r2, [pc, #268]	@ (800cd2c <HAL_DMA_Init+0x158>)
 800cc1e:	fba2 2303 	umull	r2, r3, r2, r3
 800cc22:	091b      	lsrs	r3, r3, #4
 800cc24:	009a      	lsls	r2, r3, #2
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	4a42      	ldr	r2, [pc, #264]	@ (800cd38 <HAL_DMA_Init+0x164>)
 800cc2e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2202      	movs	r2, #2
 800cc34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800cc46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800cc54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	691b      	ldr	r3, [r3, #16]
 800cc5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cc60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	699b      	ldr	r3, [r3, #24]
 800cc66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cc6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6a1b      	ldr	r3, [r3, #32]
 800cc72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800cc74:	68fa      	ldr	r2, [r7, #12]
 800cc76:	4313      	orrs	r3, r2
 800cc78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	68fa      	ldr	r2, [r7, #12]
 800cc80:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	689b      	ldr	r3, [r3, #8]
 800cc86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cc8a:	d039      	beq.n	800cd00 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc90:	4a27      	ldr	r2, [pc, #156]	@ (800cd30 <HAL_DMA_Init+0x15c>)
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d11a      	bne.n	800cccc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800cc96:	4b29      	ldr	r3, [pc, #164]	@ (800cd3c <HAL_DMA_Init+0x168>)
 800cc98:	681a      	ldr	r2, [r3, #0]
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc9e:	f003 031c 	and.w	r3, r3, #28
 800cca2:	210f      	movs	r1, #15
 800cca4:	fa01 f303 	lsl.w	r3, r1, r3
 800cca8:	43db      	mvns	r3, r3
 800ccaa:	4924      	ldr	r1, [pc, #144]	@ (800cd3c <HAL_DMA_Init+0x168>)
 800ccac:	4013      	ands	r3, r2
 800ccae:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800ccb0:	4b22      	ldr	r3, [pc, #136]	@ (800cd3c <HAL_DMA_Init+0x168>)
 800ccb2:	681a      	ldr	r2, [r3, #0]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6859      	ldr	r1, [r3, #4]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccbc:	f003 031c 	and.w	r3, r3, #28
 800ccc0:	fa01 f303 	lsl.w	r3, r1, r3
 800ccc4:	491d      	ldr	r1, [pc, #116]	@ (800cd3c <HAL_DMA_Init+0x168>)
 800ccc6:	4313      	orrs	r3, r2
 800ccc8:	600b      	str	r3, [r1, #0]
 800ccca:	e019      	b.n	800cd00 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800cccc:	4b1c      	ldr	r3, [pc, #112]	@ (800cd40 <HAL_DMA_Init+0x16c>)
 800ccce:	681a      	ldr	r2, [r3, #0]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccd4:	f003 031c 	and.w	r3, r3, #28
 800ccd8:	210f      	movs	r1, #15
 800ccda:	fa01 f303 	lsl.w	r3, r1, r3
 800ccde:	43db      	mvns	r3, r3
 800cce0:	4917      	ldr	r1, [pc, #92]	@ (800cd40 <HAL_DMA_Init+0x16c>)
 800cce2:	4013      	ands	r3, r2
 800cce4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800cce6:	4b16      	ldr	r3, [pc, #88]	@ (800cd40 <HAL_DMA_Init+0x16c>)
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6859      	ldr	r1, [r3, #4]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccf2:	f003 031c 	and.w	r3, r3, #28
 800ccf6:	fa01 f303 	lsl.w	r3, r1, r3
 800ccfa:	4911      	ldr	r1, [pc, #68]	@ (800cd40 <HAL_DMA_Init+0x16c>)
 800ccfc:	4313      	orrs	r3, r2
 800ccfe:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2200      	movs	r2, #0
 800cd04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2201      	movs	r2, #1
 800cd0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2200      	movs	r2, #0
 800cd12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800cd16:	2300      	movs	r3, #0
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3714      	adds	r7, #20
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr
 800cd24:	40020407 	.word	0x40020407
 800cd28:	bffdfff8 	.word	0xbffdfff8
 800cd2c:	cccccccd 	.word	0xcccccccd
 800cd30:	40020000 	.word	0x40020000
 800cd34:	bffdfbf8 	.word	0xbffdfbf8
 800cd38:	40020400 	.word	0x40020400
 800cd3c:	400200a8 	.word	0x400200a8
 800cd40:	400204a8 	.word	0x400204a8

0800cd44 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b085      	sub	sp, #20
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800cd56:	b2db      	uxtb	r3, r3
 800cd58:	2b02      	cmp	r3, #2
 800cd5a:	d008      	beq.n	800cd6e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2204      	movs	r2, #4
 800cd60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2200      	movs	r2, #0
 800cd66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	e022      	b.n	800cdb4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	681a      	ldr	r2, [r3, #0]
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f022 020e 	bic.w	r2, r2, #14
 800cd7c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	681a      	ldr	r2, [r3, #0]
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f022 0201 	bic.w	r2, r2, #1
 800cd8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd92:	f003 021c 	and.w	r2, r3, #28
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd9a:	2101      	movs	r1, #1
 800cd9c:	fa01 f202 	lsl.w	r2, r1, r2
 800cda0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2201      	movs	r2, #1
 800cda6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2200      	movs	r2, #0
 800cdae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800cdb2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3714      	adds	r7, #20
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b084      	sub	sp, #16
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800cdd2:	b2db      	uxtb	r3, r3
 800cdd4:	2b02      	cmp	r3, #2
 800cdd6:	d005      	beq.n	800cde4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2204      	movs	r2, #4
 800cddc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800cdde:	2301      	movs	r3, #1
 800cde0:	73fb      	strb	r3, [r7, #15]
 800cde2:	e029      	b.n	800ce38 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	681a      	ldr	r2, [r3, #0]
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f022 020e 	bic.w	r2, r2, #14
 800cdf2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	681a      	ldr	r2, [r3, #0]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f022 0201 	bic.w	r2, r2, #1
 800ce02:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce08:	f003 021c 	and.w	r2, r3, #28
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce10:	2101      	movs	r1, #1
 800ce12:	fa01 f202 	lsl.w	r2, r1, r2
 800ce16:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2200      	movs	r2, #0
 800ce24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d003      	beq.n	800ce38 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	4798      	blx	r3
    }
  }
  return status;
 800ce38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3710      	adds	r7, #16
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}

0800ce42 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ce42:	b580      	push	{r7, lr}
 800ce44:	b084      	sub	sp, #16
 800ce46:	af00      	add	r7, sp, #0
 800ce48:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce5e:	f003 031c 	and.w	r3, r3, #28
 800ce62:	2204      	movs	r2, #4
 800ce64:	409a      	lsls	r2, r3
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	4013      	ands	r3, r2
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d026      	beq.n	800cebc <HAL_DMA_IRQHandler+0x7a>
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	f003 0304 	and.w	r3, r3, #4
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d021      	beq.n	800cebc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f003 0320 	and.w	r3, r3, #32
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d107      	bne.n	800ce96 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	681a      	ldr	r2, [r3, #0]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f022 0204 	bic.w	r2, r2, #4
 800ce94:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce9a:	f003 021c 	and.w	r2, r3, #28
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cea2:	2104      	movs	r1, #4
 800cea4:	fa01 f202 	lsl.w	r2, r1, r2
 800cea8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d071      	beq.n	800cf96 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800ceba:	e06c      	b.n	800cf96 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cec0:	f003 031c 	and.w	r3, r3, #28
 800cec4:	2202      	movs	r2, #2
 800cec6:	409a      	lsls	r2, r3
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	4013      	ands	r3, r2
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d02e      	beq.n	800cf2e <HAL_DMA_IRQHandler+0xec>
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	f003 0302 	and.w	r3, r3, #2
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d029      	beq.n	800cf2e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f003 0320 	and.w	r3, r3, #32
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d10b      	bne.n	800cf00 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	681a      	ldr	r2, [r3, #0]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f022 020a 	bic.w	r2, r2, #10
 800cef6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2201      	movs	r2, #1
 800cefc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf04:	f003 021c 	and.w	r2, r3, #28
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf0c:	2102      	movs	r1, #2
 800cf0e:	fa01 f202 	lsl.w	r2, r1, r2
 800cf12:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2200      	movs	r2, #0
 800cf18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d038      	beq.n	800cf96 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800cf2c:	e033      	b.n	800cf96 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf32:	f003 031c 	and.w	r3, r3, #28
 800cf36:	2208      	movs	r2, #8
 800cf38:	409a      	lsls	r2, r3
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	4013      	ands	r3, r2
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d02a      	beq.n	800cf98 <HAL_DMA_IRQHandler+0x156>
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	f003 0308 	and.w	r3, r3, #8
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d025      	beq.n	800cf98 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	681a      	ldr	r2, [r3, #0]
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f022 020e 	bic.w	r2, r2, #14
 800cf5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf60:	f003 021c 	and.w	r2, r3, #28
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf68:	2101      	movs	r1, #1
 800cf6a:	fa01 f202 	lsl.w	r2, r1, r2
 800cf6e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2201      	movs	r2, #1
 800cf74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2200      	movs	r2, #0
 800cf82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d004      	beq.n	800cf98 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800cf96:	bf00      	nop
 800cf98:	bf00      	nop
}
 800cf9a:	3710      	adds	r7, #16
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b087      	sub	sp, #28
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	60f8      	str	r0, [r7, #12]
 800cfa8:	460b      	mov	r3, r1
 800cfaa:	607a      	str	r2, [r7, #4]
 800cfac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800cfb2:	7afb      	ldrb	r3, [r7, #11]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d103      	bne.n	800cfc0 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	687a      	ldr	r2, [r7, #4]
 800cfbc:	605a      	str	r2, [r3, #4]
      break;
 800cfbe:	e002      	b.n	800cfc6 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	75fb      	strb	r3, [r7, #23]
      break;
 800cfc4:	bf00      	nop
  }

  return status;
 800cfc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	371c      	adds	r7, #28
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr

0800cfd4 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b083      	sub	sp, #12
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d101      	bne.n	800cfe8 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	e003      	b.n	800cff0 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	683a      	ldr	r2, [r7, #0]
 800cfec:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800cfee:	2300      	movs	r3, #0
  }
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	370c      	adds	r7, #12
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr

0800cffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b087      	sub	sp, #28
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800d006:	2300      	movs	r3, #0
 800d008:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d00a:	e17f      	b.n	800d30c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	681a      	ldr	r2, [r3, #0]
 800d010:	2101      	movs	r1, #1
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	fa01 f303 	lsl.w	r3, r1, r3
 800d018:	4013      	ands	r3, r2
 800d01a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	f000 8171 	beq.w	800d306 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	685b      	ldr	r3, [r3, #4]
 800d028:	f003 0303 	and.w	r3, r3, #3
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d005      	beq.n	800d03c <HAL_GPIO_Init+0x40>
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	685b      	ldr	r3, [r3, #4]
 800d034:	f003 0303 	and.w	r3, r3, #3
 800d038:	2b02      	cmp	r3, #2
 800d03a:	d130      	bne.n	800d09e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	689b      	ldr	r3, [r3, #8]
 800d040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	005b      	lsls	r3, r3, #1
 800d046:	2203      	movs	r2, #3
 800d048:	fa02 f303 	lsl.w	r3, r2, r3
 800d04c:	43db      	mvns	r3, r3
 800d04e:	693a      	ldr	r2, [r7, #16]
 800d050:	4013      	ands	r3, r2
 800d052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	68da      	ldr	r2, [r3, #12]
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	005b      	lsls	r3, r3, #1
 800d05c:	fa02 f303 	lsl.w	r3, r2, r3
 800d060:	693a      	ldr	r2, [r7, #16]
 800d062:	4313      	orrs	r3, r2
 800d064:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	693a      	ldr	r2, [r7, #16]
 800d06a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	685b      	ldr	r3, [r3, #4]
 800d070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d072:	2201      	movs	r2, #1
 800d074:	697b      	ldr	r3, [r7, #20]
 800d076:	fa02 f303 	lsl.w	r3, r2, r3
 800d07a:	43db      	mvns	r3, r3
 800d07c:	693a      	ldr	r2, [r7, #16]
 800d07e:	4013      	ands	r3, r2
 800d080:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	685b      	ldr	r3, [r3, #4]
 800d086:	091b      	lsrs	r3, r3, #4
 800d088:	f003 0201 	and.w	r2, r3, #1
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	fa02 f303 	lsl.w	r3, r2, r3
 800d092:	693a      	ldr	r2, [r7, #16]
 800d094:	4313      	orrs	r3, r2
 800d096:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	693a      	ldr	r2, [r7, #16]
 800d09c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	685b      	ldr	r3, [r3, #4]
 800d0a2:	f003 0303 	and.w	r3, r3, #3
 800d0a6:	2b03      	cmp	r3, #3
 800d0a8:	d118      	bne.n	800d0dc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800d0b0:	2201      	movs	r2, #1
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	fa02 f303 	lsl.w	r3, r2, r3
 800d0b8:	43db      	mvns	r3, r3
 800d0ba:	693a      	ldr	r2, [r7, #16]
 800d0bc:	4013      	ands	r3, r2
 800d0be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	685b      	ldr	r3, [r3, #4]
 800d0c4:	08db      	lsrs	r3, r3, #3
 800d0c6:	f003 0201 	and.w	r2, r3, #1
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	fa02 f303 	lsl.w	r3, r2, r3
 800d0d0:	693a      	ldr	r2, [r7, #16]
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	693a      	ldr	r2, [r7, #16]
 800d0da:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	685b      	ldr	r3, [r3, #4]
 800d0e0:	f003 0303 	and.w	r3, r3, #3
 800d0e4:	2b03      	cmp	r3, #3
 800d0e6:	d017      	beq.n	800d118 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	68db      	ldr	r3, [r3, #12]
 800d0ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	005b      	lsls	r3, r3, #1
 800d0f2:	2203      	movs	r2, #3
 800d0f4:	fa02 f303 	lsl.w	r3, r2, r3
 800d0f8:	43db      	mvns	r3, r3
 800d0fa:	693a      	ldr	r2, [r7, #16]
 800d0fc:	4013      	ands	r3, r2
 800d0fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	689a      	ldr	r2, [r3, #8]
 800d104:	697b      	ldr	r3, [r7, #20]
 800d106:	005b      	lsls	r3, r3, #1
 800d108:	fa02 f303 	lsl.w	r3, r2, r3
 800d10c:	693a      	ldr	r2, [r7, #16]
 800d10e:	4313      	orrs	r3, r2
 800d110:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	693a      	ldr	r2, [r7, #16]
 800d116:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	685b      	ldr	r3, [r3, #4]
 800d11c:	f003 0303 	and.w	r3, r3, #3
 800d120:	2b02      	cmp	r3, #2
 800d122:	d123      	bne.n	800d16c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	08da      	lsrs	r2, r3, #3
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	3208      	adds	r2, #8
 800d12c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d130:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	f003 0307 	and.w	r3, r3, #7
 800d138:	009b      	lsls	r3, r3, #2
 800d13a:	220f      	movs	r2, #15
 800d13c:	fa02 f303 	lsl.w	r3, r2, r3
 800d140:	43db      	mvns	r3, r3
 800d142:	693a      	ldr	r2, [r7, #16]
 800d144:	4013      	ands	r3, r2
 800d146:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	691a      	ldr	r2, [r3, #16]
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	f003 0307 	and.w	r3, r3, #7
 800d152:	009b      	lsls	r3, r3, #2
 800d154:	fa02 f303 	lsl.w	r3, r2, r3
 800d158:	693a      	ldr	r2, [r7, #16]
 800d15a:	4313      	orrs	r3, r2
 800d15c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	08da      	lsrs	r2, r3, #3
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	3208      	adds	r2, #8
 800d166:	6939      	ldr	r1, [r7, #16]
 800d168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	005b      	lsls	r3, r3, #1
 800d176:	2203      	movs	r2, #3
 800d178:	fa02 f303 	lsl.w	r3, r2, r3
 800d17c:	43db      	mvns	r3, r3
 800d17e:	693a      	ldr	r2, [r7, #16]
 800d180:	4013      	ands	r3, r2
 800d182:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	685b      	ldr	r3, [r3, #4]
 800d188:	f003 0203 	and.w	r2, r3, #3
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	005b      	lsls	r3, r3, #1
 800d190:	fa02 f303 	lsl.w	r3, r2, r3
 800d194:	693a      	ldr	r2, [r7, #16]
 800d196:	4313      	orrs	r3, r2
 800d198:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	693a      	ldr	r2, [r7, #16]
 800d19e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	685b      	ldr	r3, [r3, #4]
 800d1a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	f000 80ac 	beq.w	800d306 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d1ae:	4b5f      	ldr	r3, [pc, #380]	@ (800d32c <HAL_GPIO_Init+0x330>)
 800d1b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d1b2:	4a5e      	ldr	r2, [pc, #376]	@ (800d32c <HAL_GPIO_Init+0x330>)
 800d1b4:	f043 0301 	orr.w	r3, r3, #1
 800d1b8:	6613      	str	r3, [r2, #96]	@ 0x60
 800d1ba:	4b5c      	ldr	r3, [pc, #368]	@ (800d32c <HAL_GPIO_Init+0x330>)
 800d1bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d1be:	f003 0301 	and.w	r3, r3, #1
 800d1c2:	60bb      	str	r3, [r7, #8]
 800d1c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800d1c6:	4a5a      	ldr	r2, [pc, #360]	@ (800d330 <HAL_GPIO_Init+0x334>)
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	089b      	lsrs	r3, r3, #2
 800d1cc:	3302      	adds	r3, #2
 800d1ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	f003 0303 	and.w	r3, r3, #3
 800d1da:	009b      	lsls	r3, r3, #2
 800d1dc:	220f      	movs	r2, #15
 800d1de:	fa02 f303 	lsl.w	r3, r2, r3
 800d1e2:	43db      	mvns	r3, r3
 800d1e4:	693a      	ldr	r2, [r7, #16]
 800d1e6:	4013      	ands	r3, r2
 800d1e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800d1f0:	d025      	beq.n	800d23e <HAL_GPIO_Init+0x242>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	4a4f      	ldr	r2, [pc, #316]	@ (800d334 <HAL_GPIO_Init+0x338>)
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	d01f      	beq.n	800d23a <HAL_GPIO_Init+0x23e>
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	4a4e      	ldr	r2, [pc, #312]	@ (800d338 <HAL_GPIO_Init+0x33c>)
 800d1fe:	4293      	cmp	r3, r2
 800d200:	d019      	beq.n	800d236 <HAL_GPIO_Init+0x23a>
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	4a4d      	ldr	r2, [pc, #308]	@ (800d33c <HAL_GPIO_Init+0x340>)
 800d206:	4293      	cmp	r3, r2
 800d208:	d013      	beq.n	800d232 <HAL_GPIO_Init+0x236>
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	4a4c      	ldr	r2, [pc, #304]	@ (800d340 <HAL_GPIO_Init+0x344>)
 800d20e:	4293      	cmp	r3, r2
 800d210:	d00d      	beq.n	800d22e <HAL_GPIO_Init+0x232>
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	4a4b      	ldr	r2, [pc, #300]	@ (800d344 <HAL_GPIO_Init+0x348>)
 800d216:	4293      	cmp	r3, r2
 800d218:	d007      	beq.n	800d22a <HAL_GPIO_Init+0x22e>
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	4a4a      	ldr	r2, [pc, #296]	@ (800d348 <HAL_GPIO_Init+0x34c>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d101      	bne.n	800d226 <HAL_GPIO_Init+0x22a>
 800d222:	2306      	movs	r3, #6
 800d224:	e00c      	b.n	800d240 <HAL_GPIO_Init+0x244>
 800d226:	2307      	movs	r3, #7
 800d228:	e00a      	b.n	800d240 <HAL_GPIO_Init+0x244>
 800d22a:	2305      	movs	r3, #5
 800d22c:	e008      	b.n	800d240 <HAL_GPIO_Init+0x244>
 800d22e:	2304      	movs	r3, #4
 800d230:	e006      	b.n	800d240 <HAL_GPIO_Init+0x244>
 800d232:	2303      	movs	r3, #3
 800d234:	e004      	b.n	800d240 <HAL_GPIO_Init+0x244>
 800d236:	2302      	movs	r3, #2
 800d238:	e002      	b.n	800d240 <HAL_GPIO_Init+0x244>
 800d23a:	2301      	movs	r3, #1
 800d23c:	e000      	b.n	800d240 <HAL_GPIO_Init+0x244>
 800d23e:	2300      	movs	r3, #0
 800d240:	697a      	ldr	r2, [r7, #20]
 800d242:	f002 0203 	and.w	r2, r2, #3
 800d246:	0092      	lsls	r2, r2, #2
 800d248:	4093      	lsls	r3, r2
 800d24a:	693a      	ldr	r2, [r7, #16]
 800d24c:	4313      	orrs	r3, r2
 800d24e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800d250:	4937      	ldr	r1, [pc, #220]	@ (800d330 <HAL_GPIO_Init+0x334>)
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	089b      	lsrs	r3, r3, #2
 800d256:	3302      	adds	r3, #2
 800d258:	693a      	ldr	r2, [r7, #16]
 800d25a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d25e:	4b3b      	ldr	r3, [pc, #236]	@ (800d34c <HAL_GPIO_Init+0x350>)
 800d260:	689b      	ldr	r3, [r3, #8]
 800d262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	43db      	mvns	r3, r3
 800d268:	693a      	ldr	r2, [r7, #16]
 800d26a:	4013      	ands	r3, r2
 800d26c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d276:	2b00      	cmp	r3, #0
 800d278:	d003      	beq.n	800d282 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800d27a:	693a      	ldr	r2, [r7, #16]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	4313      	orrs	r3, r2
 800d280:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800d282:	4a32      	ldr	r2, [pc, #200]	@ (800d34c <HAL_GPIO_Init+0x350>)
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800d288:	4b30      	ldr	r3, [pc, #192]	@ (800d34c <HAL_GPIO_Init+0x350>)
 800d28a:	68db      	ldr	r3, [r3, #12]
 800d28c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	43db      	mvns	r3, r3
 800d292:	693a      	ldr	r2, [r7, #16]
 800d294:	4013      	ands	r3, r2
 800d296:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	685b      	ldr	r3, [r3, #4]
 800d29c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d003      	beq.n	800d2ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800d2a4:	693a      	ldr	r2, [r7, #16]
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	4313      	orrs	r3, r2
 800d2aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800d2ac:	4a27      	ldr	r2, [pc, #156]	@ (800d34c <HAL_GPIO_Init+0x350>)
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800d2b2:	4b26      	ldr	r3, [pc, #152]	@ (800d34c <HAL_GPIO_Init+0x350>)
 800d2b4:	685b      	ldr	r3, [r3, #4]
 800d2b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	43db      	mvns	r3, r3
 800d2bc:	693a      	ldr	r2, [r7, #16]
 800d2be:	4013      	ands	r3, r2
 800d2c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d003      	beq.n	800d2d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800d2ce:	693a      	ldr	r2, [r7, #16]
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800d2d6:	4a1d      	ldr	r2, [pc, #116]	@ (800d34c <HAL_GPIO_Init+0x350>)
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800d2dc:	4b1b      	ldr	r3, [pc, #108]	@ (800d34c <HAL_GPIO_Init+0x350>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	43db      	mvns	r3, r3
 800d2e6:	693a      	ldr	r2, [r7, #16]
 800d2e8:	4013      	ands	r3, r2
 800d2ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	685b      	ldr	r3, [r3, #4]
 800d2f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d003      	beq.n	800d300 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800d2f8:	693a      	ldr	r2, [r7, #16]
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	4313      	orrs	r3, r2
 800d2fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800d300:	4a12      	ldr	r2, [pc, #72]	@ (800d34c <HAL_GPIO_Init+0x350>)
 800d302:	693b      	ldr	r3, [r7, #16]
 800d304:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	3301      	adds	r3, #1
 800d30a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	697b      	ldr	r3, [r7, #20]
 800d312:	fa22 f303 	lsr.w	r3, r2, r3
 800d316:	2b00      	cmp	r3, #0
 800d318:	f47f ae78 	bne.w	800d00c <HAL_GPIO_Init+0x10>
  }
}
 800d31c:	bf00      	nop
 800d31e:	bf00      	nop
 800d320:	371c      	adds	r7, #28
 800d322:	46bd      	mov	sp, r7
 800d324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d328:	4770      	bx	lr
 800d32a:	bf00      	nop
 800d32c:	40021000 	.word	0x40021000
 800d330:	40010000 	.word	0x40010000
 800d334:	48000400 	.word	0x48000400
 800d338:	48000800 	.word	0x48000800
 800d33c:	48000c00 	.word	0x48000c00
 800d340:	48001000 	.word	0x48001000
 800d344:	48001400 	.word	0x48001400
 800d348:	48001800 	.word	0x48001800
 800d34c:	40010400 	.word	0x40010400

0800d350 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800d350:	b480      	push	{r7}
 800d352:	b087      	sub	sp, #28
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800d35a:	2300      	movs	r3, #0
 800d35c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800d35e:	e0cd      	b.n	800d4fc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800d360:	2201      	movs	r2, #1
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	fa02 f303 	lsl.w	r3, r2, r3
 800d368:	683a      	ldr	r2, [r7, #0]
 800d36a:	4013      	ands	r3, r2
 800d36c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	2b00      	cmp	r3, #0
 800d372:	f000 80c0 	beq.w	800d4f6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800d376:	4a68      	ldr	r2, [pc, #416]	@ (800d518 <HAL_GPIO_DeInit+0x1c8>)
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	089b      	lsrs	r3, r3, #2
 800d37c:	3302      	adds	r3, #2
 800d37e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d382:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	f003 0303 	and.w	r3, r3, #3
 800d38a:	009b      	lsls	r3, r3, #2
 800d38c:	220f      	movs	r2, #15
 800d38e:	fa02 f303 	lsl.w	r3, r2, r3
 800d392:	68fa      	ldr	r2, [r7, #12]
 800d394:	4013      	ands	r3, r2
 800d396:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800d39e:	d025      	beq.n	800d3ec <HAL_GPIO_DeInit+0x9c>
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	4a5e      	ldr	r2, [pc, #376]	@ (800d51c <HAL_GPIO_DeInit+0x1cc>)
 800d3a4:	4293      	cmp	r3, r2
 800d3a6:	d01f      	beq.n	800d3e8 <HAL_GPIO_DeInit+0x98>
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	4a5d      	ldr	r2, [pc, #372]	@ (800d520 <HAL_GPIO_DeInit+0x1d0>)
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d019      	beq.n	800d3e4 <HAL_GPIO_DeInit+0x94>
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	4a5c      	ldr	r2, [pc, #368]	@ (800d524 <HAL_GPIO_DeInit+0x1d4>)
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	d013      	beq.n	800d3e0 <HAL_GPIO_DeInit+0x90>
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	4a5b      	ldr	r2, [pc, #364]	@ (800d528 <HAL_GPIO_DeInit+0x1d8>)
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	d00d      	beq.n	800d3dc <HAL_GPIO_DeInit+0x8c>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	4a5a      	ldr	r2, [pc, #360]	@ (800d52c <HAL_GPIO_DeInit+0x1dc>)
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d007      	beq.n	800d3d8 <HAL_GPIO_DeInit+0x88>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	4a59      	ldr	r2, [pc, #356]	@ (800d530 <HAL_GPIO_DeInit+0x1e0>)
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d101      	bne.n	800d3d4 <HAL_GPIO_DeInit+0x84>
 800d3d0:	2306      	movs	r3, #6
 800d3d2:	e00c      	b.n	800d3ee <HAL_GPIO_DeInit+0x9e>
 800d3d4:	2307      	movs	r3, #7
 800d3d6:	e00a      	b.n	800d3ee <HAL_GPIO_DeInit+0x9e>
 800d3d8:	2305      	movs	r3, #5
 800d3da:	e008      	b.n	800d3ee <HAL_GPIO_DeInit+0x9e>
 800d3dc:	2304      	movs	r3, #4
 800d3de:	e006      	b.n	800d3ee <HAL_GPIO_DeInit+0x9e>
 800d3e0:	2303      	movs	r3, #3
 800d3e2:	e004      	b.n	800d3ee <HAL_GPIO_DeInit+0x9e>
 800d3e4:	2302      	movs	r3, #2
 800d3e6:	e002      	b.n	800d3ee <HAL_GPIO_DeInit+0x9e>
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	e000      	b.n	800d3ee <HAL_GPIO_DeInit+0x9e>
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	697a      	ldr	r2, [r7, #20]
 800d3f0:	f002 0203 	and.w	r2, r2, #3
 800d3f4:	0092      	lsls	r2, r2, #2
 800d3f6:	4093      	lsls	r3, r2
 800d3f8:	68fa      	ldr	r2, [r7, #12]
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d132      	bne.n	800d464 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800d3fe:	4b4d      	ldr	r3, [pc, #308]	@ (800d534 <HAL_GPIO_DeInit+0x1e4>)
 800d400:	681a      	ldr	r2, [r3, #0]
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	43db      	mvns	r3, r3
 800d406:	494b      	ldr	r1, [pc, #300]	@ (800d534 <HAL_GPIO_DeInit+0x1e4>)
 800d408:	4013      	ands	r3, r2
 800d40a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800d40c:	4b49      	ldr	r3, [pc, #292]	@ (800d534 <HAL_GPIO_DeInit+0x1e4>)
 800d40e:	685a      	ldr	r2, [r3, #4]
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	43db      	mvns	r3, r3
 800d414:	4947      	ldr	r1, [pc, #284]	@ (800d534 <HAL_GPIO_DeInit+0x1e4>)
 800d416:	4013      	ands	r3, r2
 800d418:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800d41a:	4b46      	ldr	r3, [pc, #280]	@ (800d534 <HAL_GPIO_DeInit+0x1e4>)
 800d41c:	68da      	ldr	r2, [r3, #12]
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	43db      	mvns	r3, r3
 800d422:	4944      	ldr	r1, [pc, #272]	@ (800d534 <HAL_GPIO_DeInit+0x1e4>)
 800d424:	4013      	ands	r3, r2
 800d426:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800d428:	4b42      	ldr	r3, [pc, #264]	@ (800d534 <HAL_GPIO_DeInit+0x1e4>)
 800d42a:	689a      	ldr	r2, [r3, #8]
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	43db      	mvns	r3, r3
 800d430:	4940      	ldr	r1, [pc, #256]	@ (800d534 <HAL_GPIO_DeInit+0x1e4>)
 800d432:	4013      	ands	r3, r2
 800d434:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	f003 0303 	and.w	r3, r3, #3
 800d43c:	009b      	lsls	r3, r3, #2
 800d43e:	220f      	movs	r2, #15
 800d440:	fa02 f303 	lsl.w	r3, r2, r3
 800d444:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800d446:	4a34      	ldr	r2, [pc, #208]	@ (800d518 <HAL_GPIO_DeInit+0x1c8>)
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	089b      	lsrs	r3, r3, #2
 800d44c:	3302      	adds	r3, #2
 800d44e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	43da      	mvns	r2, r3
 800d456:	4830      	ldr	r0, [pc, #192]	@ (800d518 <HAL_GPIO_DeInit+0x1c8>)
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	089b      	lsrs	r3, r3, #2
 800d45c:	400a      	ands	r2, r1
 800d45e:	3302      	adds	r3, #2
 800d460:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681a      	ldr	r2, [r3, #0]
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	005b      	lsls	r3, r3, #1
 800d46c:	2103      	movs	r1, #3
 800d46e:	fa01 f303 	lsl.w	r3, r1, r3
 800d472:	431a      	orrs	r2, r3
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	08da      	lsrs	r2, r3, #3
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	3208      	adds	r2, #8
 800d480:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	f003 0307 	and.w	r3, r3, #7
 800d48a:	009b      	lsls	r3, r3, #2
 800d48c:	220f      	movs	r2, #15
 800d48e:	fa02 f303 	lsl.w	r3, r2, r3
 800d492:	43db      	mvns	r3, r3
 800d494:	697a      	ldr	r2, [r7, #20]
 800d496:	08d2      	lsrs	r2, r2, #3
 800d498:	4019      	ands	r1, r3
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	3208      	adds	r2, #8
 800d49e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	689a      	ldr	r2, [r3, #8]
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	005b      	lsls	r3, r3, #1
 800d4aa:	2103      	movs	r1, #3
 800d4ac:	fa01 f303 	lsl.w	r3, r1, r3
 800d4b0:	43db      	mvns	r3, r3
 800d4b2:	401a      	ands	r2, r3
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	685a      	ldr	r2, [r3, #4]
 800d4bc:	2101      	movs	r1, #1
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	fa01 f303 	lsl.w	r3, r1, r3
 800d4c4:	43db      	mvns	r3, r3
 800d4c6:	401a      	ands	r2, r3
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	68da      	ldr	r2, [r3, #12]
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	005b      	lsls	r3, r3, #1
 800d4d4:	2103      	movs	r1, #3
 800d4d6:	fa01 f303 	lsl.w	r3, r1, r3
 800d4da:	43db      	mvns	r3, r3
 800d4dc:	401a      	ands	r2, r3
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4e6:	2101      	movs	r1, #1
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	fa01 f303 	lsl.w	r3, r1, r3
 800d4ee:	43db      	mvns	r3, r3
 800d4f0:	401a      	ands	r2, r3
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	3301      	adds	r3, #1
 800d4fa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800d4fc:	683a      	ldr	r2, [r7, #0]
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	fa22 f303 	lsr.w	r3, r2, r3
 800d504:	2b00      	cmp	r3, #0
 800d506:	f47f af2b 	bne.w	800d360 <HAL_GPIO_DeInit+0x10>
  }
}
 800d50a:	bf00      	nop
 800d50c:	bf00      	nop
 800d50e:	371c      	adds	r7, #28
 800d510:	46bd      	mov	sp, r7
 800d512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d516:	4770      	bx	lr
 800d518:	40010000 	.word	0x40010000
 800d51c:	48000400 	.word	0x48000400
 800d520:	48000800 	.word	0x48000800
 800d524:	48000c00 	.word	0x48000c00
 800d528:	48001000 	.word	0x48001000
 800d52c:	48001400 	.word	0x48001400
 800d530:	48001800 	.word	0x48001800
 800d534:	40010400 	.word	0x40010400

0800d538 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d538:	b480      	push	{r7}
 800d53a:	b085      	sub	sp, #20
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	460b      	mov	r3, r1
 800d542:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	691a      	ldr	r2, [r3, #16]
 800d548:	887b      	ldrh	r3, [r7, #2]
 800d54a:	4013      	ands	r3, r2
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d002      	beq.n	800d556 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d550:	2301      	movs	r3, #1
 800d552:	73fb      	strb	r3, [r7, #15]
 800d554:	e001      	b.n	800d55a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d556:	2300      	movs	r3, #0
 800d558:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d55a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3714      	adds	r7, #20
 800d560:	46bd      	mov	sp, r7
 800d562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d566:	4770      	bx	lr

0800d568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d568:	b480      	push	{r7}
 800d56a:	b083      	sub	sp, #12
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	460b      	mov	r3, r1
 800d572:	807b      	strh	r3, [r7, #2]
 800d574:	4613      	mov	r3, r2
 800d576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d578:	787b      	ldrb	r3, [r7, #1]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d003      	beq.n	800d586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800d57e:	887a      	ldrh	r2, [r7, #2]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800d584:	e002      	b.n	800d58c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800d586:	887a      	ldrh	r2, [r7, #2]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800d58c:	bf00      	nop
 800d58e:	370c      	adds	r7, #12
 800d590:	46bd      	mov	sp, r7
 800d592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d596:	4770      	bx	lr

0800d598 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b082      	sub	sp, #8
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d101      	bne.n	800d5aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	e08d      	b.n	800d6c6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d5b0:	b2db      	uxtb	r3, r3
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d106      	bne.n	800d5c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f000 f8b4 	bl	800d72c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2224      	movs	r2, #36	@ 0x24
 800d5c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	681a      	ldr	r2, [r3, #0]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f022 0201 	bic.w	r2, r2, #1
 800d5da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	685a      	ldr	r2, [r3, #4]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800d5e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	689a      	ldr	r2, [r3, #8]
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800d5f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	68db      	ldr	r3, [r3, #12]
 800d5fe:	2b01      	cmp	r3, #1
 800d600:	d107      	bne.n	800d612 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	689a      	ldr	r2, [r3, #8]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d60e:	609a      	str	r2, [r3, #8]
 800d610:	e006      	b.n	800d620 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	689a      	ldr	r2, [r3, #8]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800d61e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	68db      	ldr	r3, [r3, #12]
 800d624:	2b02      	cmp	r3, #2
 800d626:	d108      	bne.n	800d63a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	685a      	ldr	r2, [r3, #4]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d636:	605a      	str	r2, [r3, #4]
 800d638:	e007      	b.n	800d64a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	685a      	ldr	r2, [r3, #4]
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d648:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	685b      	ldr	r3, [r3, #4]
 800d650:	687a      	ldr	r2, [r7, #4]
 800d652:	6812      	ldr	r2, [r2, #0]
 800d654:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800d658:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d65c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	68da      	ldr	r2, [r3, #12]
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800d66c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	691a      	ldr	r2, [r3, #16]
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	695b      	ldr	r3, [r3, #20]
 800d676:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	699b      	ldr	r3, [r3, #24]
 800d67e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	430a      	orrs	r2, r1
 800d686:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	69d9      	ldr	r1, [r3, #28]
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6a1a      	ldr	r2, [r3, #32]
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	430a      	orrs	r2, r1
 800d696:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	681a      	ldr	r2, [r3, #0]
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f042 0201 	orr.w	r2, r2, #1
 800d6a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2220      	movs	r2, #32
 800d6b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800d6c4:	2300      	movs	r3, #0
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3708      	adds	r7, #8
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}

0800d6ce <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800d6ce:	b580      	push	{r7, lr}
 800d6d0:	b082      	sub	sp, #8
 800d6d2:	af00      	add	r7, sp, #0
 800d6d4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d101      	bne.n	800d6e0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800d6dc:	2301      	movs	r3, #1
 800d6de:	e021      	b.n	800d724 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2224      	movs	r2, #36	@ 0x24
 800d6e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	681a      	ldr	r2, [r3, #0]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f022 0201 	bic.w	r2, r2, #1
 800d6f6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f000 f821 	bl	800d740 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2200      	movs	r2, #0
 800d702:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2200      	movs	r2, #0
 800d708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2200      	movs	r2, #0
 800d710:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2200      	movs	r2, #0
 800d716:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2200      	movs	r2, #0
 800d71e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d722:	2300      	movs	r3, #0
}
 800d724:	4618      	mov	r0, r3
 800d726:	3708      	adds	r7, #8
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800d734:	bf00      	nop
 800d736:	370c      	adds	r7, #12
 800d738:	46bd      	mov	sp, r7
 800d73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73e:	4770      	bx	lr

0800d740 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800d740:	b480      	push	{r7}
 800d742:	b083      	sub	sp, #12
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800d748:	bf00      	nop
 800d74a:	370c      	adds	r7, #12
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr

0800d754 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b088      	sub	sp, #32
 800d758:	af02      	add	r7, sp, #8
 800d75a:	60f8      	str	r0, [r7, #12]
 800d75c:	607a      	str	r2, [r7, #4]
 800d75e:	461a      	mov	r2, r3
 800d760:	460b      	mov	r3, r1
 800d762:	817b      	strh	r3, [r7, #10]
 800d764:	4613      	mov	r3, r2
 800d766:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d76e:	b2db      	uxtb	r3, r3
 800d770:	2b20      	cmp	r3, #32
 800d772:	f040 80fd 	bne.w	800d970 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d77c:	2b01      	cmp	r3, #1
 800d77e:	d101      	bne.n	800d784 <HAL_I2C_Master_Transmit+0x30>
 800d780:	2302      	movs	r3, #2
 800d782:	e0f6      	b.n	800d972 <HAL_I2C_Master_Transmit+0x21e>
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	2201      	movs	r2, #1
 800d788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d78c:	f7fe ffee 	bl	800c76c <HAL_GetTick>
 800d790:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	9300      	str	r3, [sp, #0]
 800d796:	2319      	movs	r3, #25
 800d798:	2201      	movs	r2, #1
 800d79a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d79e:	68f8      	ldr	r0, [r7, #12]
 800d7a0:	f000 fcfa 	bl	800e198 <I2C_WaitOnFlagUntilTimeout>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d001      	beq.n	800d7ae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	e0e1      	b.n	800d972 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	2221      	movs	r2, #33	@ 0x21
 800d7b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2210      	movs	r2, #16
 800d7ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	687a      	ldr	r2, [r7, #4]
 800d7c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	893a      	ldrh	r2, [r7, #8]
 800d7ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d7da:	b29b      	uxth	r3, r3
 800d7dc:	2bff      	cmp	r3, #255	@ 0xff
 800d7de:	d906      	bls.n	800d7ee <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	22ff      	movs	r2, #255	@ 0xff
 800d7e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800d7e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d7ea:	617b      	str	r3, [r7, #20]
 800d7ec:	e007      	b.n	800d7fe <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d7f2:	b29a      	uxth	r2, r3
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800d7f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d7fc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d802:	2b00      	cmp	r3, #0
 800d804:	d024      	beq.n	800d850 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d80a:	781a      	ldrb	r2, [r3, #0]
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d816:	1c5a      	adds	r2, r3, #1
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d820:	b29b      	uxth	r3, r3
 800d822:	3b01      	subs	r3, #1
 800d824:	b29a      	uxth	r2, r3
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d82e:	3b01      	subs	r3, #1
 800d830:	b29a      	uxth	r2, r3
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d83a:	b2db      	uxtb	r3, r3
 800d83c:	3301      	adds	r3, #1
 800d83e:	b2da      	uxtb	r2, r3
 800d840:	8979      	ldrh	r1, [r7, #10]
 800d842:	4b4e      	ldr	r3, [pc, #312]	@ (800d97c <HAL_I2C_Master_Transmit+0x228>)
 800d844:	9300      	str	r3, [sp, #0]
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	68f8      	ldr	r0, [r7, #12]
 800d84a:	f000 fef5 	bl	800e638 <I2C_TransferConfig>
 800d84e:	e066      	b.n	800d91e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d854:	b2da      	uxtb	r2, r3
 800d856:	8979      	ldrh	r1, [r7, #10]
 800d858:	4b48      	ldr	r3, [pc, #288]	@ (800d97c <HAL_I2C_Master_Transmit+0x228>)
 800d85a:	9300      	str	r3, [sp, #0]
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	68f8      	ldr	r0, [r7, #12]
 800d860:	f000 feea 	bl	800e638 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800d864:	e05b      	b.n	800d91e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d866:	693a      	ldr	r2, [r7, #16]
 800d868:	6a39      	ldr	r1, [r7, #32]
 800d86a:	68f8      	ldr	r0, [r7, #12]
 800d86c:	f000 fced 	bl	800e24a <I2C_WaitOnTXISFlagUntilTimeout>
 800d870:	4603      	mov	r3, r0
 800d872:	2b00      	cmp	r3, #0
 800d874:	d001      	beq.n	800d87a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800d876:	2301      	movs	r3, #1
 800d878:	e07b      	b.n	800d972 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d87e:	781a      	ldrb	r2, [r3, #0]
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d88a:	1c5a      	adds	r2, r3, #1
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d894:	b29b      	uxth	r3, r3
 800d896:	3b01      	subs	r3, #1
 800d898:	b29a      	uxth	r2, r3
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8a2:	3b01      	subs	r3, #1
 800d8a4:	b29a      	uxth	r2, r3
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d8ae:	b29b      	uxth	r3, r3
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d034      	beq.n	800d91e <HAL_I2C_Master_Transmit+0x1ca>
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d130      	bne.n	800d91e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	9300      	str	r3, [sp, #0]
 800d8c0:	6a3b      	ldr	r3, [r7, #32]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	2180      	movs	r1, #128	@ 0x80
 800d8c6:	68f8      	ldr	r0, [r7, #12]
 800d8c8:	f000 fc66 	bl	800e198 <I2C_WaitOnFlagUntilTimeout>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d001      	beq.n	800d8d6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	e04d      	b.n	800d972 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d8da:	b29b      	uxth	r3, r3
 800d8dc:	2bff      	cmp	r3, #255	@ 0xff
 800d8de:	d90e      	bls.n	800d8fe <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	22ff      	movs	r2, #255	@ 0xff
 800d8e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8ea:	b2da      	uxtb	r2, r3
 800d8ec:	8979      	ldrh	r1, [r7, #10]
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	9300      	str	r3, [sp, #0]
 800d8f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d8f6:	68f8      	ldr	r0, [r7, #12]
 800d8f8:	f000 fe9e 	bl	800e638 <I2C_TransferConfig>
 800d8fc:	e00f      	b.n	800d91e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d902:	b29a      	uxth	r2, r3
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d90c:	b2da      	uxtb	r2, r3
 800d90e:	8979      	ldrh	r1, [r7, #10]
 800d910:	2300      	movs	r3, #0
 800d912:	9300      	str	r3, [sp, #0]
 800d914:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d918:	68f8      	ldr	r0, [r7, #12]
 800d91a:	f000 fe8d 	bl	800e638 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d922:	b29b      	uxth	r3, r3
 800d924:	2b00      	cmp	r3, #0
 800d926:	d19e      	bne.n	800d866 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d928:	693a      	ldr	r2, [r7, #16]
 800d92a:	6a39      	ldr	r1, [r7, #32]
 800d92c:	68f8      	ldr	r0, [r7, #12]
 800d92e:	f000 fcd3 	bl	800e2d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d932:	4603      	mov	r3, r0
 800d934:	2b00      	cmp	r3, #0
 800d936:	d001      	beq.n	800d93c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800d938:	2301      	movs	r3, #1
 800d93a:	e01a      	b.n	800d972 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	2220      	movs	r2, #32
 800d942:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	6859      	ldr	r1, [r3, #4]
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	681a      	ldr	r2, [r3, #0]
 800d94e:	4b0c      	ldr	r3, [pc, #48]	@ (800d980 <HAL_I2C_Master_Transmit+0x22c>)
 800d950:	400b      	ands	r3, r1
 800d952:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	2220      	movs	r2, #32
 800d958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	2200      	movs	r2, #0
 800d960:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	2200      	movs	r2, #0
 800d968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800d96c:	2300      	movs	r3, #0
 800d96e:	e000      	b.n	800d972 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800d970:	2302      	movs	r3, #2
  }
}
 800d972:	4618      	mov	r0, r3
 800d974:	3718      	adds	r7, #24
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop
 800d97c:	80002000 	.word	0x80002000
 800d980:	fe00e800 	.word	0xfe00e800

0800d984 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b088      	sub	sp, #32
 800d988:	af02      	add	r7, sp, #8
 800d98a:	60f8      	str	r0, [r7, #12]
 800d98c:	607a      	str	r2, [r7, #4]
 800d98e:	461a      	mov	r2, r3
 800d990:	460b      	mov	r3, r1
 800d992:	817b      	strh	r3, [r7, #10]
 800d994:	4613      	mov	r3, r2
 800d996:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d99e:	b2db      	uxtb	r3, r3
 800d9a0:	2b20      	cmp	r3, #32
 800d9a2:	f040 80db 	bne.w	800db5c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d9ac:	2b01      	cmp	r3, #1
 800d9ae:	d101      	bne.n	800d9b4 <HAL_I2C_Master_Receive+0x30>
 800d9b0:	2302      	movs	r3, #2
 800d9b2:	e0d4      	b.n	800db5e <HAL_I2C_Master_Receive+0x1da>
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d9bc:	f7fe fed6 	bl	800c76c <HAL_GetTick>
 800d9c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	9300      	str	r3, [sp, #0]
 800d9c6:	2319      	movs	r3, #25
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d9ce:	68f8      	ldr	r0, [r7, #12]
 800d9d0:	f000 fbe2 	bl	800e198 <I2C_WaitOnFlagUntilTimeout>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d001      	beq.n	800d9de <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800d9da:	2301      	movs	r3, #1
 800d9dc:	e0bf      	b.n	800db5e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	2222      	movs	r2, #34	@ 0x22
 800d9e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	2210      	movs	r2, #16
 800d9ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	687a      	ldr	r2, [r7, #4]
 800d9f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	893a      	ldrh	r2, [r7, #8]
 800d9fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2200      	movs	r2, #0
 800da04:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da0a:	b29b      	uxth	r3, r3
 800da0c:	2bff      	cmp	r3, #255	@ 0xff
 800da0e:	d90e      	bls.n	800da2e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	2201      	movs	r2, #1
 800da14:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da1a:	b2da      	uxtb	r2, r3
 800da1c:	8979      	ldrh	r1, [r7, #10]
 800da1e:	4b52      	ldr	r3, [pc, #328]	@ (800db68 <HAL_I2C_Master_Receive+0x1e4>)
 800da20:	9300      	str	r3, [sp, #0]
 800da22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800da26:	68f8      	ldr	r0, [r7, #12]
 800da28:	f000 fe06 	bl	800e638 <I2C_TransferConfig>
 800da2c:	e06d      	b.n	800db0a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da32:	b29a      	uxth	r2, r3
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da3c:	b2da      	uxtb	r2, r3
 800da3e:	8979      	ldrh	r1, [r7, #10]
 800da40:	4b49      	ldr	r3, [pc, #292]	@ (800db68 <HAL_I2C_Master_Receive+0x1e4>)
 800da42:	9300      	str	r3, [sp, #0]
 800da44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800da48:	68f8      	ldr	r0, [r7, #12]
 800da4a:	f000 fdf5 	bl	800e638 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800da4e:	e05c      	b.n	800db0a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800da50:	697a      	ldr	r2, [r7, #20]
 800da52:	6a39      	ldr	r1, [r7, #32]
 800da54:	68f8      	ldr	r0, [r7, #12]
 800da56:	f000 fc83 	bl	800e360 <I2C_WaitOnRXNEFlagUntilTimeout>
 800da5a:	4603      	mov	r3, r0
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d001      	beq.n	800da64 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800da60:	2301      	movs	r3, #1
 800da62:	e07c      	b.n	800db5e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da6e:	b2d2      	uxtb	r2, r2
 800da70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da76:	1c5a      	adds	r2, r3, #1
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da80:	3b01      	subs	r3, #1
 800da82:	b29a      	uxth	r2, r3
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da8c:	b29b      	uxth	r3, r3
 800da8e:	3b01      	subs	r3, #1
 800da90:	b29a      	uxth	r2, r3
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d034      	beq.n	800db0a <HAL_I2C_Master_Receive+0x186>
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d130      	bne.n	800db0a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	9300      	str	r3, [sp, #0]
 800daac:	6a3b      	ldr	r3, [r7, #32]
 800daae:	2200      	movs	r2, #0
 800dab0:	2180      	movs	r1, #128	@ 0x80
 800dab2:	68f8      	ldr	r0, [r7, #12]
 800dab4:	f000 fb70 	bl	800e198 <I2C_WaitOnFlagUntilTimeout>
 800dab8:	4603      	mov	r3, r0
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d001      	beq.n	800dac2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800dabe:	2301      	movs	r3, #1
 800dac0:	e04d      	b.n	800db5e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dac6:	b29b      	uxth	r3, r3
 800dac8:	2bff      	cmp	r3, #255	@ 0xff
 800daca:	d90e      	bls.n	800daea <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	22ff      	movs	r2, #255	@ 0xff
 800dad0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dad6:	b2da      	uxtb	r2, r3
 800dad8:	8979      	ldrh	r1, [r7, #10]
 800dada:	2300      	movs	r3, #0
 800dadc:	9300      	str	r3, [sp, #0]
 800dade:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800dae2:	68f8      	ldr	r0, [r7, #12]
 800dae4:	f000 fda8 	bl	800e638 <I2C_TransferConfig>
 800dae8:	e00f      	b.n	800db0a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800daee:	b29a      	uxth	r2, r3
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800daf8:	b2da      	uxtb	r2, r3
 800dafa:	8979      	ldrh	r1, [r7, #10]
 800dafc:	2300      	movs	r3, #0
 800dafe:	9300      	str	r3, [sp, #0]
 800db00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800db04:	68f8      	ldr	r0, [r7, #12]
 800db06:	f000 fd97 	bl	800e638 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800db0e:	b29b      	uxth	r3, r3
 800db10:	2b00      	cmp	r3, #0
 800db12:	d19d      	bne.n	800da50 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800db14:	697a      	ldr	r2, [r7, #20]
 800db16:	6a39      	ldr	r1, [r7, #32]
 800db18:	68f8      	ldr	r0, [r7, #12]
 800db1a:	f000 fbdd 	bl	800e2d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800db1e:	4603      	mov	r3, r0
 800db20:	2b00      	cmp	r3, #0
 800db22:	d001      	beq.n	800db28 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800db24:	2301      	movs	r3, #1
 800db26:	e01a      	b.n	800db5e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	2220      	movs	r2, #32
 800db2e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	6859      	ldr	r1, [r3, #4]
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	681a      	ldr	r2, [r3, #0]
 800db3a:	4b0c      	ldr	r3, [pc, #48]	@ (800db6c <HAL_I2C_Master_Receive+0x1e8>)
 800db3c:	400b      	ands	r3, r1
 800db3e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	2220      	movs	r2, #32
 800db44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	2200      	movs	r2, #0
 800db4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	2200      	movs	r2, #0
 800db54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800db58:	2300      	movs	r3, #0
 800db5a:	e000      	b.n	800db5e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800db5c:	2302      	movs	r3, #2
  }
}
 800db5e:	4618      	mov	r0, r3
 800db60:	3718      	adds	r7, #24
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}
 800db66:	bf00      	nop
 800db68:	80002400 	.word	0x80002400
 800db6c:	fe00e800 	.word	0xfe00e800

0800db70 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b088      	sub	sp, #32
 800db74:	af02      	add	r7, sp, #8
 800db76:	60f8      	str	r0, [r7, #12]
 800db78:	4608      	mov	r0, r1
 800db7a:	4611      	mov	r1, r2
 800db7c:	461a      	mov	r2, r3
 800db7e:	4603      	mov	r3, r0
 800db80:	817b      	strh	r3, [r7, #10]
 800db82:	460b      	mov	r3, r1
 800db84:	813b      	strh	r3, [r7, #8]
 800db86:	4613      	mov	r3, r2
 800db88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800db90:	b2db      	uxtb	r3, r3
 800db92:	2b20      	cmp	r3, #32
 800db94:	f040 80f9 	bne.w	800dd8a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800db98:	6a3b      	ldr	r3, [r7, #32]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d002      	beq.n	800dba4 <HAL_I2C_Mem_Write+0x34>
 800db9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d105      	bne.n	800dbb0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dbaa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800dbac:	2301      	movs	r3, #1
 800dbae:	e0ed      	b.n	800dd8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dbb6:	2b01      	cmp	r3, #1
 800dbb8:	d101      	bne.n	800dbbe <HAL_I2C_Mem_Write+0x4e>
 800dbba:	2302      	movs	r3, #2
 800dbbc:	e0e6      	b.n	800dd8c <HAL_I2C_Mem_Write+0x21c>
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	2201      	movs	r2, #1
 800dbc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800dbc6:	f7fe fdd1 	bl	800c76c <HAL_GetTick>
 800dbca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	9300      	str	r3, [sp, #0]
 800dbd0:	2319      	movs	r3, #25
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800dbd8:	68f8      	ldr	r0, [r7, #12]
 800dbda:	f000 fadd 	bl	800e198 <I2C_WaitOnFlagUntilTimeout>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d001      	beq.n	800dbe8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	e0d1      	b.n	800dd8c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	2221      	movs	r2, #33	@ 0x21
 800dbec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	2240      	movs	r2, #64	@ 0x40
 800dbf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	6a3a      	ldr	r2, [r7, #32]
 800dc02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800dc08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800dc10:	88f8      	ldrh	r0, [r7, #6]
 800dc12:	893a      	ldrh	r2, [r7, #8]
 800dc14:	8979      	ldrh	r1, [r7, #10]
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	9301      	str	r3, [sp, #4]
 800dc1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc1c:	9300      	str	r3, [sp, #0]
 800dc1e:	4603      	mov	r3, r0
 800dc20:	68f8      	ldr	r0, [r7, #12]
 800dc22:	f000 f9ed 	bl	800e000 <I2C_RequestMemoryWrite>
 800dc26:	4603      	mov	r3, r0
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d005      	beq.n	800dc38 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	2200      	movs	r2, #0
 800dc30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800dc34:	2301      	movs	r3, #1
 800dc36:	e0a9      	b.n	800dd8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dc3c:	b29b      	uxth	r3, r3
 800dc3e:	2bff      	cmp	r3, #255	@ 0xff
 800dc40:	d90e      	bls.n	800dc60 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	22ff      	movs	r2, #255	@ 0xff
 800dc46:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc4c:	b2da      	uxtb	r2, r3
 800dc4e:	8979      	ldrh	r1, [r7, #10]
 800dc50:	2300      	movs	r3, #0
 800dc52:	9300      	str	r3, [sp, #0]
 800dc54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800dc58:	68f8      	ldr	r0, [r7, #12]
 800dc5a:	f000 fced 	bl	800e638 <I2C_TransferConfig>
 800dc5e:	e00f      	b.n	800dc80 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dc64:	b29a      	uxth	r2, r3
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc6e:	b2da      	uxtb	r2, r3
 800dc70:	8979      	ldrh	r1, [r7, #10]
 800dc72:	2300      	movs	r3, #0
 800dc74:	9300      	str	r3, [sp, #0]
 800dc76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800dc7a:	68f8      	ldr	r0, [r7, #12]
 800dc7c:	f000 fcdc 	bl	800e638 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dc80:	697a      	ldr	r2, [r7, #20]
 800dc82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dc84:	68f8      	ldr	r0, [r7, #12]
 800dc86:	f000 fae0 	bl	800e24a <I2C_WaitOnTXISFlagUntilTimeout>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d001      	beq.n	800dc94 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800dc90:	2301      	movs	r3, #1
 800dc92:	e07b      	b.n	800dd8c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc98:	781a      	ldrb	r2, [r3, #0]
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dca4:	1c5a      	adds	r2, r3, #1
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	3b01      	subs	r3, #1
 800dcb2:	b29a      	uxth	r2, r3
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dcbc:	3b01      	subs	r3, #1
 800dcbe:	b29a      	uxth	r2, r3
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dcc8:	b29b      	uxth	r3, r3
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d034      	beq.n	800dd38 <HAL_I2C_Mem_Write+0x1c8>
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d130      	bne.n	800dd38 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	9300      	str	r3, [sp, #0]
 800dcda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcdc:	2200      	movs	r2, #0
 800dcde:	2180      	movs	r1, #128	@ 0x80
 800dce0:	68f8      	ldr	r0, [r7, #12]
 800dce2:	f000 fa59 	bl	800e198 <I2C_WaitOnFlagUntilTimeout>
 800dce6:	4603      	mov	r3, r0
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d001      	beq.n	800dcf0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800dcec:	2301      	movs	r3, #1
 800dcee:	e04d      	b.n	800dd8c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	2bff      	cmp	r3, #255	@ 0xff
 800dcf8:	d90e      	bls.n	800dd18 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	22ff      	movs	r2, #255	@ 0xff
 800dcfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd04:	b2da      	uxtb	r2, r3
 800dd06:	8979      	ldrh	r1, [r7, #10]
 800dd08:	2300      	movs	r3, #0
 800dd0a:	9300      	str	r3, [sp, #0]
 800dd0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800dd10:	68f8      	ldr	r0, [r7, #12]
 800dd12:	f000 fc91 	bl	800e638 <I2C_TransferConfig>
 800dd16:	e00f      	b.n	800dd38 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd1c:	b29a      	uxth	r2, r3
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd26:	b2da      	uxtb	r2, r3
 800dd28:	8979      	ldrh	r1, [r7, #10]
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	9300      	str	r3, [sp, #0]
 800dd2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800dd32:	68f8      	ldr	r0, [r7, #12]
 800dd34:	f000 fc80 	bl	800e638 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d19e      	bne.n	800dc80 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dd42:	697a      	ldr	r2, [r7, #20]
 800dd44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dd46:	68f8      	ldr	r0, [r7, #12]
 800dd48:	f000 fac6 	bl	800e2d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d001      	beq.n	800dd56 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800dd52:	2301      	movs	r3, #1
 800dd54:	e01a      	b.n	800dd8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	2220      	movs	r2, #32
 800dd5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	6859      	ldr	r1, [r3, #4]
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681a      	ldr	r2, [r3, #0]
 800dd68:	4b0a      	ldr	r3, [pc, #40]	@ (800dd94 <HAL_I2C_Mem_Write+0x224>)
 800dd6a:	400b      	ands	r3, r1
 800dd6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	2220      	movs	r2, #32
 800dd72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	2200      	movs	r2, #0
 800dd82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800dd86:	2300      	movs	r3, #0
 800dd88:	e000      	b.n	800dd8c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800dd8a:	2302      	movs	r3, #2
  }
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3718      	adds	r7, #24
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	fe00e800 	.word	0xfe00e800

0800dd98 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b088      	sub	sp, #32
 800dd9c:	af02      	add	r7, sp, #8
 800dd9e:	60f8      	str	r0, [r7, #12]
 800dda0:	4608      	mov	r0, r1
 800dda2:	4611      	mov	r1, r2
 800dda4:	461a      	mov	r2, r3
 800dda6:	4603      	mov	r3, r0
 800dda8:	817b      	strh	r3, [r7, #10]
 800ddaa:	460b      	mov	r3, r1
 800ddac:	813b      	strh	r3, [r7, #8]
 800ddae:	4613      	mov	r3, r2
 800ddb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ddb8:	b2db      	uxtb	r3, r3
 800ddba:	2b20      	cmp	r3, #32
 800ddbc:	f040 80fd 	bne.w	800dfba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800ddc0:	6a3b      	ldr	r3, [r7, #32]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d002      	beq.n	800ddcc <HAL_I2C_Mem_Read+0x34>
 800ddc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d105      	bne.n	800ddd8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ddd2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	e0f1      	b.n	800dfbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ddde:	2b01      	cmp	r3, #1
 800dde0:	d101      	bne.n	800dde6 <HAL_I2C_Mem_Read+0x4e>
 800dde2:	2302      	movs	r3, #2
 800dde4:	e0ea      	b.n	800dfbc <HAL_I2C_Mem_Read+0x224>
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	2201      	movs	r2, #1
 800ddea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ddee:	f7fe fcbd 	bl	800c76c <HAL_GetTick>
 800ddf2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	9300      	str	r3, [sp, #0]
 800ddf8:	2319      	movs	r3, #25
 800ddfa:	2201      	movs	r2, #1
 800ddfc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800de00:	68f8      	ldr	r0, [r7, #12]
 800de02:	f000 f9c9 	bl	800e198 <I2C_WaitOnFlagUntilTimeout>
 800de06:	4603      	mov	r3, r0
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d001      	beq.n	800de10 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800de0c:	2301      	movs	r3, #1
 800de0e:	e0d5      	b.n	800dfbc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	2222      	movs	r2, #34	@ 0x22
 800de14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	2240      	movs	r2, #64	@ 0x40
 800de1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	2200      	movs	r2, #0
 800de24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	6a3a      	ldr	r2, [r7, #32]
 800de2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800de30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	2200      	movs	r2, #0
 800de36:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800de38:	88f8      	ldrh	r0, [r7, #6]
 800de3a:	893a      	ldrh	r2, [r7, #8]
 800de3c:	8979      	ldrh	r1, [r7, #10]
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	9301      	str	r3, [sp, #4]
 800de42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de44:	9300      	str	r3, [sp, #0]
 800de46:	4603      	mov	r3, r0
 800de48:	68f8      	ldr	r0, [r7, #12]
 800de4a:	f000 f92d 	bl	800e0a8 <I2C_RequestMemoryRead>
 800de4e:	4603      	mov	r3, r0
 800de50:	2b00      	cmp	r3, #0
 800de52:	d005      	beq.n	800de60 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2200      	movs	r2, #0
 800de58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800de5c:	2301      	movs	r3, #1
 800de5e:	e0ad      	b.n	800dfbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800de64:	b29b      	uxth	r3, r3
 800de66:	2bff      	cmp	r3, #255	@ 0xff
 800de68:	d90e      	bls.n	800de88 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	2201      	movs	r2, #1
 800de6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de74:	b2da      	uxtb	r2, r3
 800de76:	8979      	ldrh	r1, [r7, #10]
 800de78:	4b52      	ldr	r3, [pc, #328]	@ (800dfc4 <HAL_I2C_Mem_Read+0x22c>)
 800de7a:	9300      	str	r3, [sp, #0]
 800de7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800de80:	68f8      	ldr	r0, [r7, #12]
 800de82:	f000 fbd9 	bl	800e638 <I2C_TransferConfig>
 800de86:	e00f      	b.n	800dea8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800de8c:	b29a      	uxth	r2, r3
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de96:	b2da      	uxtb	r2, r3
 800de98:	8979      	ldrh	r1, [r7, #10]
 800de9a:	4b4a      	ldr	r3, [pc, #296]	@ (800dfc4 <HAL_I2C_Mem_Read+0x22c>)
 800de9c:	9300      	str	r3, [sp, #0]
 800de9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800dea2:	68f8      	ldr	r0, [r7, #12]
 800dea4:	f000 fbc8 	bl	800e638 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	9300      	str	r3, [sp, #0]
 800deac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deae:	2200      	movs	r2, #0
 800deb0:	2104      	movs	r1, #4
 800deb2:	68f8      	ldr	r0, [r7, #12]
 800deb4:	f000 f970 	bl	800e198 <I2C_WaitOnFlagUntilTimeout>
 800deb8:	4603      	mov	r3, r0
 800deba:	2b00      	cmp	r3, #0
 800debc:	d001      	beq.n	800dec2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800debe:	2301      	movs	r3, #1
 800dec0:	e07c      	b.n	800dfbc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800decc:	b2d2      	uxtb	r2, r2
 800dece:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ded4:	1c5a      	adds	r2, r3, #1
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dede:	3b01      	subs	r3, #1
 800dee0:	b29a      	uxth	r2, r3
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800deea:	b29b      	uxth	r3, r3
 800deec:	3b01      	subs	r3, #1
 800deee:	b29a      	uxth	r2, r3
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800def8:	b29b      	uxth	r3, r3
 800defa:	2b00      	cmp	r3, #0
 800defc:	d034      	beq.n	800df68 <HAL_I2C_Mem_Read+0x1d0>
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df02:	2b00      	cmp	r3, #0
 800df04:	d130      	bne.n	800df68 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	9300      	str	r3, [sp, #0]
 800df0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df0c:	2200      	movs	r2, #0
 800df0e:	2180      	movs	r1, #128	@ 0x80
 800df10:	68f8      	ldr	r0, [r7, #12]
 800df12:	f000 f941 	bl	800e198 <I2C_WaitOnFlagUntilTimeout>
 800df16:	4603      	mov	r3, r0
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d001      	beq.n	800df20 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800df1c:	2301      	movs	r3, #1
 800df1e:	e04d      	b.n	800dfbc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df24:	b29b      	uxth	r3, r3
 800df26:	2bff      	cmp	r3, #255	@ 0xff
 800df28:	d90e      	bls.n	800df48 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	2201      	movs	r2, #1
 800df2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df34:	b2da      	uxtb	r2, r3
 800df36:	8979      	ldrh	r1, [r7, #10]
 800df38:	2300      	movs	r3, #0
 800df3a:	9300      	str	r3, [sp, #0]
 800df3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800df40:	68f8      	ldr	r0, [r7, #12]
 800df42:	f000 fb79 	bl	800e638 <I2C_TransferConfig>
 800df46:	e00f      	b.n	800df68 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df4c:	b29a      	uxth	r2, r3
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df56:	b2da      	uxtb	r2, r3
 800df58:	8979      	ldrh	r1, [r7, #10]
 800df5a:	2300      	movs	r3, #0
 800df5c:	9300      	str	r3, [sp, #0]
 800df5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800df62:	68f8      	ldr	r0, [r7, #12]
 800df64:	f000 fb68 	bl	800e638 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df6c:	b29b      	uxth	r3, r3
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d19a      	bne.n	800dea8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800df72:	697a      	ldr	r2, [r7, #20]
 800df74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800df76:	68f8      	ldr	r0, [r7, #12]
 800df78:	f000 f9ae 	bl	800e2d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800df7c:	4603      	mov	r3, r0
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d001      	beq.n	800df86 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800df82:	2301      	movs	r3, #1
 800df84:	e01a      	b.n	800dfbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	2220      	movs	r2, #32
 800df8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	6859      	ldr	r1, [r3, #4]
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	681a      	ldr	r2, [r3, #0]
 800df98:	4b0b      	ldr	r3, [pc, #44]	@ (800dfc8 <HAL_I2C_Mem_Read+0x230>)
 800df9a:	400b      	ands	r3, r1
 800df9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	2220      	movs	r2, #32
 800dfa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	e000      	b.n	800dfbc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800dfba:	2302      	movs	r3, #2
  }
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3718      	adds	r7, #24
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}
 800dfc4:	80002400 	.word	0x80002400
 800dfc8:	fe00e800 	.word	0xfe00e800

0800dfcc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b083      	sub	sp, #12
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dfda:	b2db      	uxtb	r3, r3
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	370c      	adds	r7, #12
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe6:	4770      	bx	lr

0800dfe8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800dfe8:	b480      	push	{r7}
 800dfea:	b083      	sub	sp, #12
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 800dff4:	4618      	mov	r0, r3
 800dff6:	370c      	adds	r7, #12
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr

0800e000 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b086      	sub	sp, #24
 800e004:	af02      	add	r7, sp, #8
 800e006:	60f8      	str	r0, [r7, #12]
 800e008:	4608      	mov	r0, r1
 800e00a:	4611      	mov	r1, r2
 800e00c:	461a      	mov	r2, r3
 800e00e:	4603      	mov	r3, r0
 800e010:	817b      	strh	r3, [r7, #10]
 800e012:	460b      	mov	r3, r1
 800e014:	813b      	strh	r3, [r7, #8]
 800e016:	4613      	mov	r3, r2
 800e018:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800e01a:	88fb      	ldrh	r3, [r7, #6]
 800e01c:	b2da      	uxtb	r2, r3
 800e01e:	8979      	ldrh	r1, [r7, #10]
 800e020:	4b20      	ldr	r3, [pc, #128]	@ (800e0a4 <I2C_RequestMemoryWrite+0xa4>)
 800e022:	9300      	str	r3, [sp, #0]
 800e024:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e028:	68f8      	ldr	r0, [r7, #12]
 800e02a:	f000 fb05 	bl	800e638 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e02e:	69fa      	ldr	r2, [r7, #28]
 800e030:	69b9      	ldr	r1, [r7, #24]
 800e032:	68f8      	ldr	r0, [r7, #12]
 800e034:	f000 f909 	bl	800e24a <I2C_WaitOnTXISFlagUntilTimeout>
 800e038:	4603      	mov	r3, r0
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d001      	beq.n	800e042 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800e03e:	2301      	movs	r3, #1
 800e040:	e02c      	b.n	800e09c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e042:	88fb      	ldrh	r3, [r7, #6]
 800e044:	2b01      	cmp	r3, #1
 800e046:	d105      	bne.n	800e054 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e048:	893b      	ldrh	r3, [r7, #8]
 800e04a:	b2da      	uxtb	r2, r3
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	629a      	str	r2, [r3, #40]	@ 0x28
 800e052:	e015      	b.n	800e080 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e054:	893b      	ldrh	r3, [r7, #8]
 800e056:	0a1b      	lsrs	r3, r3, #8
 800e058:	b29b      	uxth	r3, r3
 800e05a:	b2da      	uxtb	r2, r3
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e062:	69fa      	ldr	r2, [r7, #28]
 800e064:	69b9      	ldr	r1, [r7, #24]
 800e066:	68f8      	ldr	r0, [r7, #12]
 800e068:	f000 f8ef 	bl	800e24a <I2C_WaitOnTXISFlagUntilTimeout>
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d001      	beq.n	800e076 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800e072:	2301      	movs	r3, #1
 800e074:	e012      	b.n	800e09c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e076:	893b      	ldrh	r3, [r7, #8]
 800e078:	b2da      	uxtb	r2, r3
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800e080:	69fb      	ldr	r3, [r7, #28]
 800e082:	9300      	str	r3, [sp, #0]
 800e084:	69bb      	ldr	r3, [r7, #24]
 800e086:	2200      	movs	r2, #0
 800e088:	2180      	movs	r1, #128	@ 0x80
 800e08a:	68f8      	ldr	r0, [r7, #12]
 800e08c:	f000 f884 	bl	800e198 <I2C_WaitOnFlagUntilTimeout>
 800e090:	4603      	mov	r3, r0
 800e092:	2b00      	cmp	r3, #0
 800e094:	d001      	beq.n	800e09a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800e096:	2301      	movs	r3, #1
 800e098:	e000      	b.n	800e09c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800e09a:	2300      	movs	r3, #0
}
 800e09c:	4618      	mov	r0, r3
 800e09e:	3710      	adds	r7, #16
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bd80      	pop	{r7, pc}
 800e0a4:	80002000 	.word	0x80002000

0800e0a8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b086      	sub	sp, #24
 800e0ac:	af02      	add	r7, sp, #8
 800e0ae:	60f8      	str	r0, [r7, #12]
 800e0b0:	4608      	mov	r0, r1
 800e0b2:	4611      	mov	r1, r2
 800e0b4:	461a      	mov	r2, r3
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	817b      	strh	r3, [r7, #10]
 800e0ba:	460b      	mov	r3, r1
 800e0bc:	813b      	strh	r3, [r7, #8]
 800e0be:	4613      	mov	r3, r2
 800e0c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800e0c2:	88fb      	ldrh	r3, [r7, #6]
 800e0c4:	b2da      	uxtb	r2, r3
 800e0c6:	8979      	ldrh	r1, [r7, #10]
 800e0c8:	4b20      	ldr	r3, [pc, #128]	@ (800e14c <I2C_RequestMemoryRead+0xa4>)
 800e0ca:	9300      	str	r3, [sp, #0]
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	68f8      	ldr	r0, [r7, #12]
 800e0d0:	f000 fab2 	bl	800e638 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e0d4:	69fa      	ldr	r2, [r7, #28]
 800e0d6:	69b9      	ldr	r1, [r7, #24]
 800e0d8:	68f8      	ldr	r0, [r7, #12]
 800e0da:	f000 f8b6 	bl	800e24a <I2C_WaitOnTXISFlagUntilTimeout>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d001      	beq.n	800e0e8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	e02c      	b.n	800e142 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e0e8:	88fb      	ldrh	r3, [r7, #6]
 800e0ea:	2b01      	cmp	r3, #1
 800e0ec:	d105      	bne.n	800e0fa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e0ee:	893b      	ldrh	r3, [r7, #8]
 800e0f0:	b2da      	uxtb	r2, r3
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	629a      	str	r2, [r3, #40]	@ 0x28
 800e0f8:	e015      	b.n	800e126 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e0fa:	893b      	ldrh	r3, [r7, #8]
 800e0fc:	0a1b      	lsrs	r3, r3, #8
 800e0fe:	b29b      	uxth	r3, r3
 800e100:	b2da      	uxtb	r2, r3
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e108:	69fa      	ldr	r2, [r7, #28]
 800e10a:	69b9      	ldr	r1, [r7, #24]
 800e10c:	68f8      	ldr	r0, [r7, #12]
 800e10e:	f000 f89c 	bl	800e24a <I2C_WaitOnTXISFlagUntilTimeout>
 800e112:	4603      	mov	r3, r0
 800e114:	2b00      	cmp	r3, #0
 800e116:	d001      	beq.n	800e11c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800e118:	2301      	movs	r3, #1
 800e11a:	e012      	b.n	800e142 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e11c:	893b      	ldrh	r3, [r7, #8]
 800e11e:	b2da      	uxtb	r2, r3
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800e126:	69fb      	ldr	r3, [r7, #28]
 800e128:	9300      	str	r3, [sp, #0]
 800e12a:	69bb      	ldr	r3, [r7, #24]
 800e12c:	2200      	movs	r2, #0
 800e12e:	2140      	movs	r1, #64	@ 0x40
 800e130:	68f8      	ldr	r0, [r7, #12]
 800e132:	f000 f831 	bl	800e198 <I2C_WaitOnFlagUntilTimeout>
 800e136:	4603      	mov	r3, r0
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d001      	beq.n	800e140 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800e13c:	2301      	movs	r3, #1
 800e13e:	e000      	b.n	800e142 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800e140:	2300      	movs	r3, #0
}
 800e142:	4618      	mov	r0, r3
 800e144:	3710      	adds	r7, #16
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop
 800e14c:	80002000 	.word	0x80002000

0800e150 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800e150:	b480      	push	{r7}
 800e152:	b083      	sub	sp, #12
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	699b      	ldr	r3, [r3, #24]
 800e15e:	f003 0302 	and.w	r3, r3, #2
 800e162:	2b02      	cmp	r3, #2
 800e164:	d103      	bne.n	800e16e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	2200      	movs	r2, #0
 800e16c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	699b      	ldr	r3, [r3, #24]
 800e174:	f003 0301 	and.w	r3, r3, #1
 800e178:	2b01      	cmp	r3, #1
 800e17a:	d007      	beq.n	800e18c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	699a      	ldr	r2, [r3, #24]
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	f042 0201 	orr.w	r2, r2, #1
 800e18a:	619a      	str	r2, [r3, #24]
  }
}
 800e18c:	bf00      	nop
 800e18e:	370c      	adds	r7, #12
 800e190:	46bd      	mov	sp, r7
 800e192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e196:	4770      	bx	lr

0800e198 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b084      	sub	sp, #16
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	60f8      	str	r0, [r7, #12]
 800e1a0:	60b9      	str	r1, [r7, #8]
 800e1a2:	603b      	str	r3, [r7, #0]
 800e1a4:	4613      	mov	r3, r2
 800e1a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e1a8:	e03b      	b.n	800e222 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e1aa:	69ba      	ldr	r2, [r7, #24]
 800e1ac:	6839      	ldr	r1, [r7, #0]
 800e1ae:	68f8      	ldr	r0, [r7, #12]
 800e1b0:	f000 f962 	bl	800e478 <I2C_IsErrorOccurred>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d001      	beq.n	800e1be <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	e041      	b.n	800e242 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1c4:	d02d      	beq.n	800e222 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e1c6:	f7fe fad1 	bl	800c76c <HAL_GetTick>
 800e1ca:	4602      	mov	r2, r0
 800e1cc:	69bb      	ldr	r3, [r7, #24]
 800e1ce:	1ad3      	subs	r3, r2, r3
 800e1d0:	683a      	ldr	r2, [r7, #0]
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	d302      	bcc.n	800e1dc <I2C_WaitOnFlagUntilTimeout+0x44>
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d122      	bne.n	800e222 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	699a      	ldr	r2, [r3, #24]
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	4013      	ands	r3, r2
 800e1e6:	68ba      	ldr	r2, [r7, #8]
 800e1e8:	429a      	cmp	r2, r3
 800e1ea:	bf0c      	ite	eq
 800e1ec:	2301      	moveq	r3, #1
 800e1ee:	2300      	movne	r3, #0
 800e1f0:	b2db      	uxtb	r3, r3
 800e1f2:	461a      	mov	r2, r3
 800e1f4:	79fb      	ldrb	r3, [r7, #7]
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	d113      	bne.n	800e222 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e1fe:	f043 0220 	orr.w	r2, r3, #32
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	2220      	movs	r2, #32
 800e20a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	2200      	movs	r2, #0
 800e212:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	2200      	movs	r2, #0
 800e21a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800e21e:	2301      	movs	r3, #1
 800e220:	e00f      	b.n	800e242 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	699a      	ldr	r2, [r3, #24]
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	4013      	ands	r3, r2
 800e22c:	68ba      	ldr	r2, [r7, #8]
 800e22e:	429a      	cmp	r2, r3
 800e230:	bf0c      	ite	eq
 800e232:	2301      	moveq	r3, #1
 800e234:	2300      	movne	r3, #0
 800e236:	b2db      	uxtb	r3, r3
 800e238:	461a      	mov	r2, r3
 800e23a:	79fb      	ldrb	r3, [r7, #7]
 800e23c:	429a      	cmp	r2, r3
 800e23e:	d0b4      	beq.n	800e1aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e240:	2300      	movs	r3, #0
}
 800e242:	4618      	mov	r0, r3
 800e244:	3710      	adds	r7, #16
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}

0800e24a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e24a:	b580      	push	{r7, lr}
 800e24c:	b084      	sub	sp, #16
 800e24e:	af00      	add	r7, sp, #0
 800e250:	60f8      	str	r0, [r7, #12]
 800e252:	60b9      	str	r1, [r7, #8]
 800e254:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e256:	e033      	b.n	800e2c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e258:	687a      	ldr	r2, [r7, #4]
 800e25a:	68b9      	ldr	r1, [r7, #8]
 800e25c:	68f8      	ldr	r0, [r7, #12]
 800e25e:	f000 f90b 	bl	800e478 <I2C_IsErrorOccurred>
 800e262:	4603      	mov	r3, r0
 800e264:	2b00      	cmp	r3, #0
 800e266:	d001      	beq.n	800e26c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e268:	2301      	movs	r3, #1
 800e26a:	e031      	b.n	800e2d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e272:	d025      	beq.n	800e2c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e274:	f7fe fa7a 	bl	800c76c <HAL_GetTick>
 800e278:	4602      	mov	r2, r0
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	1ad3      	subs	r3, r2, r3
 800e27e:	68ba      	ldr	r2, [r7, #8]
 800e280:	429a      	cmp	r2, r3
 800e282:	d302      	bcc.n	800e28a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d11a      	bne.n	800e2c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	699b      	ldr	r3, [r3, #24]
 800e290:	f003 0302 	and.w	r3, r3, #2
 800e294:	2b02      	cmp	r3, #2
 800e296:	d013      	beq.n	800e2c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e29c:	f043 0220 	orr.w	r2, r3, #32
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	2220      	movs	r2, #32
 800e2a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800e2bc:	2301      	movs	r3, #1
 800e2be:	e007      	b.n	800e2d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	699b      	ldr	r3, [r3, #24]
 800e2c6:	f003 0302 	and.w	r3, r3, #2
 800e2ca:	2b02      	cmp	r3, #2
 800e2cc:	d1c4      	bne.n	800e258 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e2ce:	2300      	movs	r3, #0
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	3710      	adds	r7, #16
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}

0800e2d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b084      	sub	sp, #16
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	60f8      	str	r0, [r7, #12]
 800e2e0:	60b9      	str	r1, [r7, #8]
 800e2e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e2e4:	e02f      	b.n	800e346 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e2e6:	687a      	ldr	r2, [r7, #4]
 800e2e8:	68b9      	ldr	r1, [r7, #8]
 800e2ea:	68f8      	ldr	r0, [r7, #12]
 800e2ec:	f000 f8c4 	bl	800e478 <I2C_IsErrorOccurred>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d001      	beq.n	800e2fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	e02d      	b.n	800e356 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e2fa:	f7fe fa37 	bl	800c76c <HAL_GetTick>
 800e2fe:	4602      	mov	r2, r0
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	1ad3      	subs	r3, r2, r3
 800e304:	68ba      	ldr	r2, [r7, #8]
 800e306:	429a      	cmp	r2, r3
 800e308:	d302      	bcc.n	800e310 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d11a      	bne.n	800e346 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	699b      	ldr	r3, [r3, #24]
 800e316:	f003 0320 	and.w	r3, r3, #32
 800e31a:	2b20      	cmp	r3, #32
 800e31c:	d013      	beq.n	800e346 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e322:	f043 0220 	orr.w	r2, r3, #32
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2220      	movs	r2, #32
 800e32e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	2200      	movs	r2, #0
 800e336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	2200      	movs	r2, #0
 800e33e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800e342:	2301      	movs	r3, #1
 800e344:	e007      	b.n	800e356 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	699b      	ldr	r3, [r3, #24]
 800e34c:	f003 0320 	and.w	r3, r3, #32
 800e350:	2b20      	cmp	r3, #32
 800e352:	d1c8      	bne.n	800e2e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e354:	2300      	movs	r3, #0
}
 800e356:	4618      	mov	r0, r3
 800e358:	3710      	adds	r7, #16
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}
	...

0800e360 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b086      	sub	sp, #24
 800e364:	af00      	add	r7, sp, #0
 800e366:	60f8      	str	r0, [r7, #12]
 800e368:	60b9      	str	r1, [r7, #8]
 800e36a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e36c:	2300      	movs	r3, #0
 800e36e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800e370:	e071      	b.n	800e456 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e372:	687a      	ldr	r2, [r7, #4]
 800e374:	68b9      	ldr	r1, [r7, #8]
 800e376:	68f8      	ldr	r0, [r7, #12]
 800e378:	f000 f87e 	bl	800e478 <I2C_IsErrorOccurred>
 800e37c:	4603      	mov	r3, r0
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d001      	beq.n	800e386 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800e382:	2301      	movs	r3, #1
 800e384:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	699b      	ldr	r3, [r3, #24]
 800e38c:	f003 0320 	and.w	r3, r3, #32
 800e390:	2b20      	cmp	r3, #32
 800e392:	d13b      	bne.n	800e40c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800e394:	7dfb      	ldrb	r3, [r7, #23]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d138      	bne.n	800e40c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	699b      	ldr	r3, [r3, #24]
 800e3a0:	f003 0304 	and.w	r3, r3, #4
 800e3a4:	2b04      	cmp	r3, #4
 800e3a6:	d105      	bne.n	800e3b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d001      	beq.n	800e3b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	699b      	ldr	r3, [r3, #24]
 800e3ba:	f003 0310 	and.w	r3, r3, #16
 800e3be:	2b10      	cmp	r3, #16
 800e3c0:	d121      	bne.n	800e406 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	2210      	movs	r2, #16
 800e3c8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	2204      	movs	r2, #4
 800e3ce:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	2220      	movs	r2, #32
 800e3d6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	6859      	ldr	r1, [r3, #4]
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	681a      	ldr	r2, [r3, #0]
 800e3e2:	4b24      	ldr	r3, [pc, #144]	@ (800e474 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800e3e4:	400b      	ands	r3, r1
 800e3e6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	2220      	movs	r2, #32
 800e3ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800e400:	2301      	movs	r3, #1
 800e402:	75fb      	strb	r3, [r7, #23]
 800e404:	e002      	b.n	800e40c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	2200      	movs	r2, #0
 800e40a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800e40c:	f7fe f9ae 	bl	800c76c <HAL_GetTick>
 800e410:	4602      	mov	r2, r0
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	1ad3      	subs	r3, r2, r3
 800e416:	68ba      	ldr	r2, [r7, #8]
 800e418:	429a      	cmp	r2, r3
 800e41a:	d302      	bcc.n	800e422 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d119      	bne.n	800e456 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800e422:	7dfb      	ldrb	r3, [r7, #23]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d116      	bne.n	800e456 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	699b      	ldr	r3, [r3, #24]
 800e42e:	f003 0304 	and.w	r3, r3, #4
 800e432:	2b04      	cmp	r3, #4
 800e434:	d00f      	beq.n	800e456 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e43a:	f043 0220 	orr.w	r2, r3, #32
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	2220      	movs	r2, #32
 800e446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	2200      	movs	r2, #0
 800e44e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800e452:	2301      	movs	r3, #1
 800e454:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	699b      	ldr	r3, [r3, #24]
 800e45c:	f003 0304 	and.w	r3, r3, #4
 800e460:	2b04      	cmp	r3, #4
 800e462:	d002      	beq.n	800e46a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800e464:	7dfb      	ldrb	r3, [r7, #23]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d083      	beq.n	800e372 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800e46a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3718      	adds	r7, #24
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}
 800e474:	fe00e800 	.word	0xfe00e800

0800e478 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b08a      	sub	sp, #40	@ 0x28
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	60f8      	str	r0, [r7, #12]
 800e480:	60b9      	str	r1, [r7, #8]
 800e482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e484:	2300      	movs	r3, #0
 800e486:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	699b      	ldr	r3, [r3, #24]
 800e490:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800e492:	2300      	movs	r3, #0
 800e494:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800e49a:	69bb      	ldr	r3, [r7, #24]
 800e49c:	f003 0310 	and.w	r3, r3, #16
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d068      	beq.n	800e576 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	2210      	movs	r2, #16
 800e4aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e4ac:	e049      	b.n	800e542 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4b4:	d045      	beq.n	800e542 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e4b6:	f7fe f959 	bl	800c76c <HAL_GetTick>
 800e4ba:	4602      	mov	r2, r0
 800e4bc:	69fb      	ldr	r3, [r7, #28]
 800e4be:	1ad3      	subs	r3, r2, r3
 800e4c0:	68ba      	ldr	r2, [r7, #8]
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d302      	bcc.n	800e4cc <I2C_IsErrorOccurred+0x54>
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d13a      	bne.n	800e542 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	685b      	ldr	r3, [r3, #4]
 800e4d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e4d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e4de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	699b      	ldr	r3, [r3, #24]
 800e4e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e4ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e4ee:	d121      	bne.n	800e534 <I2C_IsErrorOccurred+0xbc>
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e4f6:	d01d      	beq.n	800e534 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800e4f8:	7cfb      	ldrb	r3, [r7, #19]
 800e4fa:	2b20      	cmp	r3, #32
 800e4fc:	d01a      	beq.n	800e534 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	685a      	ldr	r2, [r3, #4]
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e50c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800e50e:	f7fe f92d 	bl	800c76c <HAL_GetTick>
 800e512:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e514:	e00e      	b.n	800e534 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800e516:	f7fe f929 	bl	800c76c <HAL_GetTick>
 800e51a:	4602      	mov	r2, r0
 800e51c:	69fb      	ldr	r3, [r7, #28]
 800e51e:	1ad3      	subs	r3, r2, r3
 800e520:	2b19      	cmp	r3, #25
 800e522:	d907      	bls.n	800e534 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800e524:	6a3b      	ldr	r3, [r7, #32]
 800e526:	f043 0320 	orr.w	r3, r3, #32
 800e52a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800e52c:	2301      	movs	r3, #1
 800e52e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800e532:	e006      	b.n	800e542 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	699b      	ldr	r3, [r3, #24]
 800e53a:	f003 0320 	and.w	r3, r3, #32
 800e53e:	2b20      	cmp	r3, #32
 800e540:	d1e9      	bne.n	800e516 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	699b      	ldr	r3, [r3, #24]
 800e548:	f003 0320 	and.w	r3, r3, #32
 800e54c:	2b20      	cmp	r3, #32
 800e54e:	d003      	beq.n	800e558 <I2C_IsErrorOccurred+0xe0>
 800e550:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e554:	2b00      	cmp	r3, #0
 800e556:	d0aa      	beq.n	800e4ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800e558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d103      	bne.n	800e568 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	2220      	movs	r2, #32
 800e566:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800e568:	6a3b      	ldr	r3, [r7, #32]
 800e56a:	f043 0304 	orr.w	r3, r3, #4
 800e56e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800e570:	2301      	movs	r3, #1
 800e572:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	699b      	ldr	r3, [r3, #24]
 800e57c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800e57e:	69bb      	ldr	r3, [r7, #24]
 800e580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e584:	2b00      	cmp	r3, #0
 800e586:	d00b      	beq.n	800e5a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800e588:	6a3b      	ldr	r3, [r7, #32]
 800e58a:	f043 0301 	orr.w	r3, r3, #1
 800e58e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e598:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e59a:	2301      	movs	r3, #1
 800e59c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800e5a0:	69bb      	ldr	r3, [r7, #24]
 800e5a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d00b      	beq.n	800e5c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800e5aa:	6a3b      	ldr	r3, [r7, #32]
 800e5ac:	f043 0308 	orr.w	r3, r3, #8
 800e5b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e5ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e5bc:	2301      	movs	r3, #1
 800e5be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800e5c2:	69bb      	ldr	r3, [r7, #24]
 800e5c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d00b      	beq.n	800e5e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800e5cc:	6a3b      	ldr	r3, [r7, #32]
 800e5ce:	f043 0302 	orr.w	r3, r3, #2
 800e5d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e5dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e5de:	2301      	movs	r3, #1
 800e5e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800e5e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d01c      	beq.n	800e626 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e5ec:	68f8      	ldr	r0, [r7, #12]
 800e5ee:	f7ff fdaf 	bl	800e150 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	6859      	ldr	r1, [r3, #4]
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	681a      	ldr	r2, [r3, #0]
 800e5fc:	4b0d      	ldr	r3, [pc, #52]	@ (800e634 <I2C_IsErrorOccurred+0x1bc>)
 800e5fe:	400b      	ands	r3, r1
 800e600:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e606:	6a3b      	ldr	r3, [r7, #32]
 800e608:	431a      	orrs	r2, r3
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	2220      	movs	r2, #32
 800e612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	2200      	movs	r2, #0
 800e61a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	2200      	movs	r2, #0
 800e622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800e626:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800e62a:	4618      	mov	r0, r3
 800e62c:	3728      	adds	r7, #40	@ 0x28
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}
 800e632:	bf00      	nop
 800e634:	fe00e800 	.word	0xfe00e800

0800e638 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800e638:	b480      	push	{r7}
 800e63a:	b087      	sub	sp, #28
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	60f8      	str	r0, [r7, #12]
 800e640:	607b      	str	r3, [r7, #4]
 800e642:	460b      	mov	r3, r1
 800e644:	817b      	strh	r3, [r7, #10]
 800e646:	4613      	mov	r3, r2
 800e648:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e64a:	897b      	ldrh	r3, [r7, #10]
 800e64c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e650:	7a7b      	ldrb	r3, [r7, #9]
 800e652:	041b      	lsls	r3, r3, #16
 800e654:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e658:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e65e:	6a3b      	ldr	r3, [r7, #32]
 800e660:	4313      	orrs	r3, r2
 800e662:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e666:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	685a      	ldr	r2, [r3, #4]
 800e66e:	6a3b      	ldr	r3, [r7, #32]
 800e670:	0d5b      	lsrs	r3, r3, #21
 800e672:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800e676:	4b08      	ldr	r3, [pc, #32]	@ (800e698 <I2C_TransferConfig+0x60>)
 800e678:	430b      	orrs	r3, r1
 800e67a:	43db      	mvns	r3, r3
 800e67c:	ea02 0103 	and.w	r1, r2, r3
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	697a      	ldr	r2, [r7, #20]
 800e686:	430a      	orrs	r2, r1
 800e688:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800e68a:	bf00      	nop
 800e68c:	371c      	adds	r7, #28
 800e68e:	46bd      	mov	sp, r7
 800e690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e694:	4770      	bx	lr
 800e696:	bf00      	nop
 800e698:	03ff63ff 	.word	0x03ff63ff

0800e69c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e69c:	b480      	push	{r7}
 800e69e:	b083      	sub	sp, #12
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
 800e6a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e6ac:	b2db      	uxtb	r3, r3
 800e6ae:	2b20      	cmp	r3, #32
 800e6b0:	d138      	bne.n	800e724 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e6b8:	2b01      	cmp	r3, #1
 800e6ba:	d101      	bne.n	800e6c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800e6bc:	2302      	movs	r3, #2
 800e6be:	e032      	b.n	800e726 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2201      	movs	r2, #1
 800e6c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2224      	movs	r2, #36	@ 0x24
 800e6cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	681a      	ldr	r2, [r3, #0]
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	f022 0201 	bic.w	r2, r2, #1
 800e6de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	681a      	ldr	r2, [r3, #0]
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e6ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	6819      	ldr	r1, [r3, #0]
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	683a      	ldr	r2, [r7, #0]
 800e6fc:	430a      	orrs	r2, r1
 800e6fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	681a      	ldr	r2, [r3, #0]
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	f042 0201 	orr.w	r2, r2, #1
 800e70e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2220      	movs	r2, #32
 800e714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2200      	movs	r2, #0
 800e71c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e720:	2300      	movs	r3, #0
 800e722:	e000      	b.n	800e726 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e724:	2302      	movs	r3, #2
  }
}
 800e726:	4618      	mov	r0, r3
 800e728:	370c      	adds	r7, #12
 800e72a:	46bd      	mov	sp, r7
 800e72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e730:	4770      	bx	lr

0800e732 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800e732:	b480      	push	{r7}
 800e734:	b085      	sub	sp, #20
 800e736:	af00      	add	r7, sp, #0
 800e738:	6078      	str	r0, [r7, #4]
 800e73a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e742:	b2db      	uxtb	r3, r3
 800e744:	2b20      	cmp	r3, #32
 800e746:	d139      	bne.n	800e7bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e74e:	2b01      	cmp	r3, #1
 800e750:	d101      	bne.n	800e756 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800e752:	2302      	movs	r3, #2
 800e754:	e033      	b.n	800e7be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2201      	movs	r2, #1
 800e75a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2224      	movs	r2, #36	@ 0x24
 800e762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	681a      	ldr	r2, [r3, #0]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	f022 0201 	bic.w	r2, r2, #1
 800e774:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800e784:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	021b      	lsls	r3, r3, #8
 800e78a:	68fa      	ldr	r2, [r7, #12]
 800e78c:	4313      	orrs	r3, r2
 800e78e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	68fa      	ldr	r2, [r7, #12]
 800e796:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	681a      	ldr	r2, [r3, #0]
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	f042 0201 	orr.w	r2, r2, #1
 800e7a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2220      	movs	r2, #32
 800e7ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	e000      	b.n	800e7be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800e7bc:	2302      	movs	r3, #2
  }
}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3714      	adds	r7, #20
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c8:	4770      	bx	lr
	...

0800e7cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800e7d0:	4b04      	ldr	r3, [pc, #16]	@ (800e7e4 <HAL_PWREx_GetVoltageRange+0x18>)
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr
 800e7e2:	bf00      	nop
 800e7e4:	40007000 	.word	0x40007000

0800e7e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b085      	sub	sp, #20
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e7f6:	d130      	bne.n	800e85a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800e7f8:	4b23      	ldr	r3, [pc, #140]	@ (800e888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e800:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e804:	d038      	beq.n	800e878 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800e806:	4b20      	ldr	r3, [pc, #128]	@ (800e888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800e80e:	4a1e      	ldr	r2, [pc, #120]	@ (800e888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e810:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e814:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800e816:	4b1d      	ldr	r3, [pc, #116]	@ (800e88c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	2232      	movs	r2, #50	@ 0x32
 800e81c:	fb02 f303 	mul.w	r3, r2, r3
 800e820:	4a1b      	ldr	r2, [pc, #108]	@ (800e890 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800e822:	fba2 2303 	umull	r2, r3, r2, r3
 800e826:	0c9b      	lsrs	r3, r3, #18
 800e828:	3301      	adds	r3, #1
 800e82a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800e82c:	e002      	b.n	800e834 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	3b01      	subs	r3, #1
 800e832:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800e834:	4b14      	ldr	r3, [pc, #80]	@ (800e888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e836:	695b      	ldr	r3, [r3, #20]
 800e838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e83c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e840:	d102      	bne.n	800e848 <HAL_PWREx_ControlVoltageScaling+0x60>
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d1f2      	bne.n	800e82e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800e848:	4b0f      	ldr	r3, [pc, #60]	@ (800e888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e84a:	695b      	ldr	r3, [r3, #20]
 800e84c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e850:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e854:	d110      	bne.n	800e878 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800e856:	2303      	movs	r3, #3
 800e858:	e00f      	b.n	800e87a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800e85a:	4b0b      	ldr	r3, [pc, #44]	@ (800e888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e866:	d007      	beq.n	800e878 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800e868:	4b07      	ldr	r3, [pc, #28]	@ (800e888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800e870:	4a05      	ldr	r2, [pc, #20]	@ (800e888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800e872:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e876:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800e878:	2300      	movs	r3, #0
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	3714      	adds	r7, #20
 800e87e:	46bd      	mov	sp, r7
 800e880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e884:	4770      	bx	lr
 800e886:	bf00      	nop
 800e888:	40007000 	.word	0x40007000
 800e88c:	20000220 	.word	0x20000220
 800e890:	431bde83 	.word	0x431bde83

0800e894 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b088      	sub	sp, #32
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d101      	bne.n	800e8a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	e3ca      	b.n	800f03c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e8a6:	4b97      	ldr	r3, [pc, #604]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800e8a8:	689b      	ldr	r3, [r3, #8]
 800e8aa:	f003 030c 	and.w	r3, r3, #12
 800e8ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e8b0:	4b94      	ldr	r3, [pc, #592]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800e8b2:	68db      	ldr	r3, [r3, #12]
 800e8b4:	f003 0303 	and.w	r3, r3, #3
 800e8b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	f003 0310 	and.w	r3, r3, #16
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	f000 80e4 	beq.w	800ea90 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800e8c8:	69bb      	ldr	r3, [r7, #24]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d007      	beq.n	800e8de <HAL_RCC_OscConfig+0x4a>
 800e8ce:	69bb      	ldr	r3, [r7, #24]
 800e8d0:	2b0c      	cmp	r3, #12
 800e8d2:	f040 808b 	bne.w	800e9ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	2b01      	cmp	r3, #1
 800e8da:	f040 8087 	bne.w	800e9ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800e8de:	4b89      	ldr	r3, [pc, #548]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	f003 0302 	and.w	r3, r3, #2
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d005      	beq.n	800e8f6 <HAL_RCC_OscConfig+0x62>
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	699b      	ldr	r3, [r3, #24]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d101      	bne.n	800e8f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	e3a2      	b.n	800f03c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	6a1a      	ldr	r2, [r3, #32]
 800e8fa:	4b82      	ldr	r3, [pc, #520]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f003 0308 	and.w	r3, r3, #8
 800e902:	2b00      	cmp	r3, #0
 800e904:	d004      	beq.n	800e910 <HAL_RCC_OscConfig+0x7c>
 800e906:	4b7f      	ldr	r3, [pc, #508]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e90e:	e005      	b.n	800e91c <HAL_RCC_OscConfig+0x88>
 800e910:	4b7c      	ldr	r3, [pc, #496]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800e912:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e916:	091b      	lsrs	r3, r3, #4
 800e918:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e91c:	4293      	cmp	r3, r2
 800e91e:	d223      	bcs.n	800e968 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6a1b      	ldr	r3, [r3, #32]
 800e924:	4618      	mov	r0, r3
 800e926:	f000 fd55 	bl	800f3d4 <RCC_SetFlashLatencyFromMSIRange>
 800e92a:	4603      	mov	r3, r0
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d001      	beq.n	800e934 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800e930:	2301      	movs	r3, #1
 800e932:	e383      	b.n	800f03c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e934:	4b73      	ldr	r3, [pc, #460]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	4a72      	ldr	r2, [pc, #456]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800e93a:	f043 0308 	orr.w	r3, r3, #8
 800e93e:	6013      	str	r3, [r2, #0]
 800e940:	4b70      	ldr	r3, [pc, #448]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	6a1b      	ldr	r3, [r3, #32]
 800e94c:	496d      	ldr	r1, [pc, #436]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800e94e:	4313      	orrs	r3, r2
 800e950:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e952:	4b6c      	ldr	r3, [pc, #432]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800e954:	685b      	ldr	r3, [r3, #4]
 800e956:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	69db      	ldr	r3, [r3, #28]
 800e95e:	021b      	lsls	r3, r3, #8
 800e960:	4968      	ldr	r1, [pc, #416]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800e962:	4313      	orrs	r3, r2
 800e964:	604b      	str	r3, [r1, #4]
 800e966:	e025      	b.n	800e9b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e968:	4b66      	ldr	r3, [pc, #408]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	4a65      	ldr	r2, [pc, #404]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800e96e:	f043 0308 	orr.w	r3, r3, #8
 800e972:	6013      	str	r3, [r2, #0]
 800e974:	4b63      	ldr	r3, [pc, #396]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6a1b      	ldr	r3, [r3, #32]
 800e980:	4960      	ldr	r1, [pc, #384]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800e982:	4313      	orrs	r3, r2
 800e984:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e986:	4b5f      	ldr	r3, [pc, #380]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800e988:	685b      	ldr	r3, [r3, #4]
 800e98a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	69db      	ldr	r3, [r3, #28]
 800e992:	021b      	lsls	r3, r3, #8
 800e994:	495b      	ldr	r1, [pc, #364]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800e996:	4313      	orrs	r3, r2
 800e998:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800e99a:	69bb      	ldr	r3, [r7, #24]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d109      	bne.n	800e9b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	6a1b      	ldr	r3, [r3, #32]
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f000 fd15 	bl	800f3d4 <RCC_SetFlashLatencyFromMSIRange>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d001      	beq.n	800e9b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	e343      	b.n	800f03c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800e9b4:	f000 fc4a 	bl	800f24c <HAL_RCC_GetSysClockFreq>
 800e9b8:	4602      	mov	r2, r0
 800e9ba:	4b52      	ldr	r3, [pc, #328]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800e9bc:	689b      	ldr	r3, [r3, #8]
 800e9be:	091b      	lsrs	r3, r3, #4
 800e9c0:	f003 030f 	and.w	r3, r3, #15
 800e9c4:	4950      	ldr	r1, [pc, #320]	@ (800eb08 <HAL_RCC_OscConfig+0x274>)
 800e9c6:	5ccb      	ldrb	r3, [r1, r3]
 800e9c8:	f003 031f 	and.w	r3, r3, #31
 800e9cc:	fa22 f303 	lsr.w	r3, r2, r3
 800e9d0:	4a4e      	ldr	r2, [pc, #312]	@ (800eb0c <HAL_RCC_OscConfig+0x278>)
 800e9d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800e9d4:	4b4e      	ldr	r3, [pc, #312]	@ (800eb10 <HAL_RCC_OscConfig+0x27c>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f7fd fe77 	bl	800c6cc <HAL_InitTick>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800e9e2:	7bfb      	ldrb	r3, [r7, #15]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d052      	beq.n	800ea8e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800e9e8:	7bfb      	ldrb	r3, [r7, #15]
 800e9ea:	e327      	b.n	800f03c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	699b      	ldr	r3, [r3, #24]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d032      	beq.n	800ea5a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800e9f4:	4b43      	ldr	r3, [pc, #268]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	4a42      	ldr	r2, [pc, #264]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800e9fa:	f043 0301 	orr.w	r3, r3, #1
 800e9fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ea00:	f7fd feb4 	bl	800c76c <HAL_GetTick>
 800ea04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ea06:	e008      	b.n	800ea1a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ea08:	f7fd feb0 	bl	800c76c <HAL_GetTick>
 800ea0c:	4602      	mov	r2, r0
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	1ad3      	subs	r3, r2, r3
 800ea12:	2b02      	cmp	r3, #2
 800ea14:	d901      	bls.n	800ea1a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800ea16:	2303      	movs	r3, #3
 800ea18:	e310      	b.n	800f03c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ea1a:	4b3a      	ldr	r3, [pc, #232]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	f003 0302 	and.w	r3, r3, #2
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d0f0      	beq.n	800ea08 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ea26:	4b37      	ldr	r3, [pc, #220]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	4a36      	ldr	r2, [pc, #216]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800ea2c:	f043 0308 	orr.w	r3, r3, #8
 800ea30:	6013      	str	r3, [r2, #0]
 800ea32:	4b34      	ldr	r3, [pc, #208]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6a1b      	ldr	r3, [r3, #32]
 800ea3e:	4931      	ldr	r1, [pc, #196]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800ea40:	4313      	orrs	r3, r2
 800ea42:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ea44:	4b2f      	ldr	r3, [pc, #188]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800ea46:	685b      	ldr	r3, [r3, #4]
 800ea48:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	69db      	ldr	r3, [r3, #28]
 800ea50:	021b      	lsls	r3, r3, #8
 800ea52:	492c      	ldr	r1, [pc, #176]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800ea54:	4313      	orrs	r3, r2
 800ea56:	604b      	str	r3, [r1, #4]
 800ea58:	e01a      	b.n	800ea90 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800ea5a:	4b2a      	ldr	r3, [pc, #168]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	4a29      	ldr	r2, [pc, #164]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800ea60:	f023 0301 	bic.w	r3, r3, #1
 800ea64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ea66:	f7fd fe81 	bl	800c76c <HAL_GetTick>
 800ea6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800ea6c:	e008      	b.n	800ea80 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ea6e:	f7fd fe7d 	bl	800c76c <HAL_GetTick>
 800ea72:	4602      	mov	r2, r0
 800ea74:	693b      	ldr	r3, [r7, #16]
 800ea76:	1ad3      	subs	r3, r2, r3
 800ea78:	2b02      	cmp	r3, #2
 800ea7a:	d901      	bls.n	800ea80 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800ea7c:	2303      	movs	r3, #3
 800ea7e:	e2dd      	b.n	800f03c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800ea80:	4b20      	ldr	r3, [pc, #128]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	f003 0302 	and.w	r3, r3, #2
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d1f0      	bne.n	800ea6e <HAL_RCC_OscConfig+0x1da>
 800ea8c:	e000      	b.n	800ea90 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ea8e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	f003 0301 	and.w	r3, r3, #1
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d074      	beq.n	800eb86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800ea9c:	69bb      	ldr	r3, [r7, #24]
 800ea9e:	2b08      	cmp	r3, #8
 800eaa0:	d005      	beq.n	800eaae <HAL_RCC_OscConfig+0x21a>
 800eaa2:	69bb      	ldr	r3, [r7, #24]
 800eaa4:	2b0c      	cmp	r3, #12
 800eaa6:	d10e      	bne.n	800eac6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800eaa8:	697b      	ldr	r3, [r7, #20]
 800eaaa:	2b03      	cmp	r3, #3
 800eaac:	d10b      	bne.n	800eac6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800eaae:	4b15      	ldr	r3, [pc, #84]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d064      	beq.n	800eb84 <HAL_RCC_OscConfig+0x2f0>
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	685b      	ldr	r3, [r3, #4]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d160      	bne.n	800eb84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800eac2:	2301      	movs	r3, #1
 800eac4:	e2ba      	b.n	800f03c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	685b      	ldr	r3, [r3, #4]
 800eaca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eace:	d106      	bne.n	800eade <HAL_RCC_OscConfig+0x24a>
 800ead0:	4b0c      	ldr	r3, [pc, #48]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	4a0b      	ldr	r2, [pc, #44]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800ead6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800eada:	6013      	str	r3, [r2, #0]
 800eadc:	e026      	b.n	800eb2c <HAL_RCC_OscConfig+0x298>
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	685b      	ldr	r3, [r3, #4]
 800eae2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800eae6:	d115      	bne.n	800eb14 <HAL_RCC_OscConfig+0x280>
 800eae8:	4b06      	ldr	r3, [pc, #24]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	4a05      	ldr	r2, [pc, #20]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800eaee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800eaf2:	6013      	str	r3, [r2, #0]
 800eaf4:	4b03      	ldr	r3, [pc, #12]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	4a02      	ldr	r2, [pc, #8]	@ (800eb04 <HAL_RCC_OscConfig+0x270>)
 800eafa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800eafe:	6013      	str	r3, [r2, #0]
 800eb00:	e014      	b.n	800eb2c <HAL_RCC_OscConfig+0x298>
 800eb02:	bf00      	nop
 800eb04:	40021000 	.word	0x40021000
 800eb08:	08014714 	.word	0x08014714
 800eb0c:	20000220 	.word	0x20000220
 800eb10:	20000224 	.word	0x20000224
 800eb14:	4ba0      	ldr	r3, [pc, #640]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	4a9f      	ldr	r2, [pc, #636]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800eb1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800eb1e:	6013      	str	r3, [r2, #0]
 800eb20:	4b9d      	ldr	r3, [pc, #628]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	4a9c      	ldr	r2, [pc, #624]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800eb26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800eb2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d013      	beq.n	800eb5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eb34:	f7fd fe1a 	bl	800c76c <HAL_GetTick>
 800eb38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800eb3a:	e008      	b.n	800eb4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800eb3c:	f7fd fe16 	bl	800c76c <HAL_GetTick>
 800eb40:	4602      	mov	r2, r0
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	1ad3      	subs	r3, r2, r3
 800eb46:	2b64      	cmp	r3, #100	@ 0x64
 800eb48:	d901      	bls.n	800eb4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800eb4a:	2303      	movs	r3, #3
 800eb4c:	e276      	b.n	800f03c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800eb4e:	4b92      	ldr	r3, [pc, #584]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d0f0      	beq.n	800eb3c <HAL_RCC_OscConfig+0x2a8>
 800eb5a:	e014      	b.n	800eb86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eb5c:	f7fd fe06 	bl	800c76c <HAL_GetTick>
 800eb60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800eb62:	e008      	b.n	800eb76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800eb64:	f7fd fe02 	bl	800c76c <HAL_GetTick>
 800eb68:	4602      	mov	r2, r0
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	1ad3      	subs	r3, r2, r3
 800eb6e:	2b64      	cmp	r3, #100	@ 0x64
 800eb70:	d901      	bls.n	800eb76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800eb72:	2303      	movs	r3, #3
 800eb74:	e262      	b.n	800f03c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800eb76:	4b88      	ldr	r3, [pc, #544]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d1f0      	bne.n	800eb64 <HAL_RCC_OscConfig+0x2d0>
 800eb82:	e000      	b.n	800eb86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800eb84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	f003 0302 	and.w	r3, r3, #2
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d060      	beq.n	800ec54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800eb92:	69bb      	ldr	r3, [r7, #24]
 800eb94:	2b04      	cmp	r3, #4
 800eb96:	d005      	beq.n	800eba4 <HAL_RCC_OscConfig+0x310>
 800eb98:	69bb      	ldr	r3, [r7, #24]
 800eb9a:	2b0c      	cmp	r3, #12
 800eb9c:	d119      	bne.n	800ebd2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800eb9e:	697b      	ldr	r3, [r7, #20]
 800eba0:	2b02      	cmp	r3, #2
 800eba2:	d116      	bne.n	800ebd2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800eba4:	4b7c      	ldr	r3, [pc, #496]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d005      	beq.n	800ebbc <HAL_RCC_OscConfig+0x328>
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	68db      	ldr	r3, [r3, #12]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d101      	bne.n	800ebbc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800ebb8:	2301      	movs	r3, #1
 800ebba:	e23f      	b.n	800f03c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ebbc:	4b76      	ldr	r3, [pc, #472]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800ebbe:	685b      	ldr	r3, [r3, #4]
 800ebc0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	691b      	ldr	r3, [r3, #16]
 800ebc8:	061b      	lsls	r3, r3, #24
 800ebca:	4973      	ldr	r1, [pc, #460]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800ebcc:	4313      	orrs	r3, r2
 800ebce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ebd0:	e040      	b.n	800ec54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	68db      	ldr	r3, [r3, #12]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d023      	beq.n	800ec22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ebda:	4b6f      	ldr	r3, [pc, #444]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	4a6e      	ldr	r2, [pc, #440]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800ebe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ebe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ebe6:	f7fd fdc1 	bl	800c76c <HAL_GetTick>
 800ebea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ebec:	e008      	b.n	800ec00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ebee:	f7fd fdbd 	bl	800c76c <HAL_GetTick>
 800ebf2:	4602      	mov	r2, r0
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	1ad3      	subs	r3, r2, r3
 800ebf8:	2b02      	cmp	r3, #2
 800ebfa:	d901      	bls.n	800ec00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800ebfc:	2303      	movs	r3, #3
 800ebfe:	e21d      	b.n	800f03c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ec00:	4b65      	ldr	r3, [pc, #404]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d0f0      	beq.n	800ebee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ec0c:	4b62      	ldr	r3, [pc, #392]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800ec0e:	685b      	ldr	r3, [r3, #4]
 800ec10:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	691b      	ldr	r3, [r3, #16]
 800ec18:	061b      	lsls	r3, r3, #24
 800ec1a:	495f      	ldr	r1, [pc, #380]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800ec1c:	4313      	orrs	r3, r2
 800ec1e:	604b      	str	r3, [r1, #4]
 800ec20:	e018      	b.n	800ec54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ec22:	4b5d      	ldr	r3, [pc, #372]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	4a5c      	ldr	r2, [pc, #368]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800ec28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ec2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec2e:	f7fd fd9d 	bl	800c76c <HAL_GetTick>
 800ec32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ec34:	e008      	b.n	800ec48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ec36:	f7fd fd99 	bl	800c76c <HAL_GetTick>
 800ec3a:	4602      	mov	r2, r0
 800ec3c:	693b      	ldr	r3, [r7, #16]
 800ec3e:	1ad3      	subs	r3, r2, r3
 800ec40:	2b02      	cmp	r3, #2
 800ec42:	d901      	bls.n	800ec48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800ec44:	2303      	movs	r3, #3
 800ec46:	e1f9      	b.n	800f03c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ec48:	4b53      	ldr	r3, [pc, #332]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d1f0      	bne.n	800ec36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	f003 0308 	and.w	r3, r3, #8
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d03c      	beq.n	800ecda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	695b      	ldr	r3, [r3, #20]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d01c      	beq.n	800eca2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ec68:	4b4b      	ldr	r3, [pc, #300]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800ec6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ec6e:	4a4a      	ldr	r2, [pc, #296]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800ec70:	f043 0301 	orr.w	r3, r3, #1
 800ec74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ec78:	f7fd fd78 	bl	800c76c <HAL_GetTick>
 800ec7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ec7e:	e008      	b.n	800ec92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ec80:	f7fd fd74 	bl	800c76c <HAL_GetTick>
 800ec84:	4602      	mov	r2, r0
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	1ad3      	subs	r3, r2, r3
 800ec8a:	2b02      	cmp	r3, #2
 800ec8c:	d901      	bls.n	800ec92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800ec8e:	2303      	movs	r3, #3
 800ec90:	e1d4      	b.n	800f03c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ec92:	4b41      	ldr	r3, [pc, #260]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800ec94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ec98:	f003 0302 	and.w	r3, r3, #2
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d0ef      	beq.n	800ec80 <HAL_RCC_OscConfig+0x3ec>
 800eca0:	e01b      	b.n	800ecda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800eca2:	4b3d      	ldr	r3, [pc, #244]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800eca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800eca8:	4a3b      	ldr	r2, [pc, #236]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800ecaa:	f023 0301 	bic.w	r3, r3, #1
 800ecae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ecb2:	f7fd fd5b 	bl	800c76c <HAL_GetTick>
 800ecb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ecb8:	e008      	b.n	800eccc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ecba:	f7fd fd57 	bl	800c76c <HAL_GetTick>
 800ecbe:	4602      	mov	r2, r0
 800ecc0:	693b      	ldr	r3, [r7, #16]
 800ecc2:	1ad3      	subs	r3, r2, r3
 800ecc4:	2b02      	cmp	r3, #2
 800ecc6:	d901      	bls.n	800eccc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800ecc8:	2303      	movs	r3, #3
 800ecca:	e1b7      	b.n	800f03c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800eccc:	4b32      	ldr	r3, [pc, #200]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800ecce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ecd2:	f003 0302 	and.w	r3, r3, #2
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d1ef      	bne.n	800ecba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	f003 0304 	and.w	r3, r3, #4
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	f000 80a6 	beq.w	800ee34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ece8:	2300      	movs	r3, #0
 800ecea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800ecec:	4b2a      	ldr	r3, [pc, #168]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800ecee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ecf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d10d      	bne.n	800ed14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ecf8:	4b27      	ldr	r3, [pc, #156]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800ecfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ecfc:	4a26      	ldr	r2, [pc, #152]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800ecfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ed02:	6593      	str	r3, [r2, #88]	@ 0x58
 800ed04:	4b24      	ldr	r3, [pc, #144]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800ed06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ed0c:	60bb      	str	r3, [r7, #8]
 800ed0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ed10:	2301      	movs	r3, #1
 800ed12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ed14:	4b21      	ldr	r3, [pc, #132]	@ (800ed9c <HAL_RCC_OscConfig+0x508>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d118      	bne.n	800ed52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ed20:	4b1e      	ldr	r3, [pc, #120]	@ (800ed9c <HAL_RCC_OscConfig+0x508>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	4a1d      	ldr	r2, [pc, #116]	@ (800ed9c <HAL_RCC_OscConfig+0x508>)
 800ed26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ed2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ed2c:	f7fd fd1e 	bl	800c76c <HAL_GetTick>
 800ed30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ed32:	e008      	b.n	800ed46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ed34:	f7fd fd1a 	bl	800c76c <HAL_GetTick>
 800ed38:	4602      	mov	r2, r0
 800ed3a:	693b      	ldr	r3, [r7, #16]
 800ed3c:	1ad3      	subs	r3, r2, r3
 800ed3e:	2b02      	cmp	r3, #2
 800ed40:	d901      	bls.n	800ed46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800ed42:	2303      	movs	r3, #3
 800ed44:	e17a      	b.n	800f03c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ed46:	4b15      	ldr	r3, [pc, #84]	@ (800ed9c <HAL_RCC_OscConfig+0x508>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d0f0      	beq.n	800ed34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	689b      	ldr	r3, [r3, #8]
 800ed56:	2b01      	cmp	r3, #1
 800ed58:	d108      	bne.n	800ed6c <HAL_RCC_OscConfig+0x4d8>
 800ed5a:	4b0f      	ldr	r3, [pc, #60]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800ed5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed60:	4a0d      	ldr	r2, [pc, #52]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800ed62:	f043 0301 	orr.w	r3, r3, #1
 800ed66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800ed6a:	e029      	b.n	800edc0 <HAL_RCC_OscConfig+0x52c>
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	689b      	ldr	r3, [r3, #8]
 800ed70:	2b05      	cmp	r3, #5
 800ed72:	d115      	bne.n	800eda0 <HAL_RCC_OscConfig+0x50c>
 800ed74:	4b08      	ldr	r3, [pc, #32]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800ed76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed7a:	4a07      	ldr	r2, [pc, #28]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800ed7c:	f043 0304 	orr.w	r3, r3, #4
 800ed80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800ed84:	4b04      	ldr	r3, [pc, #16]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800ed86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed8a:	4a03      	ldr	r2, [pc, #12]	@ (800ed98 <HAL_RCC_OscConfig+0x504>)
 800ed8c:	f043 0301 	orr.w	r3, r3, #1
 800ed90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800ed94:	e014      	b.n	800edc0 <HAL_RCC_OscConfig+0x52c>
 800ed96:	bf00      	nop
 800ed98:	40021000 	.word	0x40021000
 800ed9c:	40007000 	.word	0x40007000
 800eda0:	4b9c      	ldr	r3, [pc, #624]	@ (800f014 <HAL_RCC_OscConfig+0x780>)
 800eda2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eda6:	4a9b      	ldr	r2, [pc, #620]	@ (800f014 <HAL_RCC_OscConfig+0x780>)
 800eda8:	f023 0301 	bic.w	r3, r3, #1
 800edac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800edb0:	4b98      	ldr	r3, [pc, #608]	@ (800f014 <HAL_RCC_OscConfig+0x780>)
 800edb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edb6:	4a97      	ldr	r2, [pc, #604]	@ (800f014 <HAL_RCC_OscConfig+0x780>)
 800edb8:	f023 0304 	bic.w	r3, r3, #4
 800edbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	689b      	ldr	r3, [r3, #8]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d016      	beq.n	800edf6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800edc8:	f7fd fcd0 	bl	800c76c <HAL_GetTick>
 800edcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800edce:	e00a      	b.n	800ede6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800edd0:	f7fd fccc 	bl	800c76c <HAL_GetTick>
 800edd4:	4602      	mov	r2, r0
 800edd6:	693b      	ldr	r3, [r7, #16]
 800edd8:	1ad3      	subs	r3, r2, r3
 800edda:	f241 3288 	movw	r2, #5000	@ 0x1388
 800edde:	4293      	cmp	r3, r2
 800ede0:	d901      	bls.n	800ede6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800ede2:	2303      	movs	r3, #3
 800ede4:	e12a      	b.n	800f03c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ede6:	4b8b      	ldr	r3, [pc, #556]	@ (800f014 <HAL_RCC_OscConfig+0x780>)
 800ede8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edec:	f003 0302 	and.w	r3, r3, #2
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d0ed      	beq.n	800edd0 <HAL_RCC_OscConfig+0x53c>
 800edf4:	e015      	b.n	800ee22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800edf6:	f7fd fcb9 	bl	800c76c <HAL_GetTick>
 800edfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800edfc:	e00a      	b.n	800ee14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800edfe:	f7fd fcb5 	bl	800c76c <HAL_GetTick>
 800ee02:	4602      	mov	r2, r0
 800ee04:	693b      	ldr	r3, [r7, #16]
 800ee06:	1ad3      	subs	r3, r2, r3
 800ee08:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ee0c:	4293      	cmp	r3, r2
 800ee0e:	d901      	bls.n	800ee14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800ee10:	2303      	movs	r3, #3
 800ee12:	e113      	b.n	800f03c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ee14:	4b7f      	ldr	r3, [pc, #508]	@ (800f014 <HAL_RCC_OscConfig+0x780>)
 800ee16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee1a:	f003 0302 	and.w	r3, r3, #2
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d1ed      	bne.n	800edfe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ee22:	7ffb      	ldrb	r3, [r7, #31]
 800ee24:	2b01      	cmp	r3, #1
 800ee26:	d105      	bne.n	800ee34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ee28:	4b7a      	ldr	r3, [pc, #488]	@ (800f014 <HAL_RCC_OscConfig+0x780>)
 800ee2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee2c:	4a79      	ldr	r2, [pc, #484]	@ (800f014 <HAL_RCC_OscConfig+0x780>)
 800ee2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ee32:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	f000 80fe 	beq.w	800f03a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee42:	2b02      	cmp	r3, #2
 800ee44:	f040 80d0 	bne.w	800efe8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800ee48:	4b72      	ldr	r3, [pc, #456]	@ (800f014 <HAL_RCC_OscConfig+0x780>)
 800ee4a:	68db      	ldr	r3, [r3, #12]
 800ee4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ee4e:	697b      	ldr	r3, [r7, #20]
 800ee50:	f003 0203 	and.w	r2, r3, #3
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	d130      	bne.n	800eebe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ee5c:	697b      	ldr	r3, [r7, #20]
 800ee5e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee66:	3b01      	subs	r3, #1
 800ee68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ee6a:	429a      	cmp	r2, r3
 800ee6c:	d127      	bne.n	800eebe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ee6e:	697b      	ldr	r3, [r7, #20]
 800ee70:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee78:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d11f      	bne.n	800eebe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ee84:	687a      	ldr	r2, [r7, #4]
 800ee86:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ee88:	2a07      	cmp	r2, #7
 800ee8a:	bf14      	ite	ne
 800ee8c:	2201      	movne	r2, #1
 800ee8e:	2200      	moveq	r2, #0
 800ee90:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ee92:	4293      	cmp	r3, r2
 800ee94:	d113      	bne.n	800eebe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ee96:	697b      	ldr	r3, [r7, #20]
 800ee98:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eea0:	085b      	lsrs	r3, r3, #1
 800eea2:	3b01      	subs	r3, #1
 800eea4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800eea6:	429a      	cmp	r2, r3
 800eea8:	d109      	bne.n	800eebe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eeb4:	085b      	lsrs	r3, r3, #1
 800eeb6:	3b01      	subs	r3, #1
 800eeb8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d06e      	beq.n	800ef9c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800eebe:	69bb      	ldr	r3, [r7, #24]
 800eec0:	2b0c      	cmp	r3, #12
 800eec2:	d069      	beq.n	800ef98 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800eec4:	4b53      	ldr	r3, [pc, #332]	@ (800f014 <HAL_RCC_OscConfig+0x780>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d105      	bne.n	800eedc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800eed0:	4b50      	ldr	r3, [pc, #320]	@ (800f014 <HAL_RCC_OscConfig+0x780>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d001      	beq.n	800eee0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800eedc:	2301      	movs	r3, #1
 800eede:	e0ad      	b.n	800f03c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800eee0:	4b4c      	ldr	r3, [pc, #304]	@ (800f014 <HAL_RCC_OscConfig+0x780>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	4a4b      	ldr	r2, [pc, #300]	@ (800f014 <HAL_RCC_OscConfig+0x780>)
 800eee6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800eeea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800eeec:	f7fd fc3e 	bl	800c76c <HAL_GetTick>
 800eef0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800eef2:	e008      	b.n	800ef06 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eef4:	f7fd fc3a 	bl	800c76c <HAL_GetTick>
 800eef8:	4602      	mov	r2, r0
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	1ad3      	subs	r3, r2, r3
 800eefe:	2b02      	cmp	r3, #2
 800ef00:	d901      	bls.n	800ef06 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800ef02:	2303      	movs	r3, #3
 800ef04:	e09a      	b.n	800f03c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ef06:	4b43      	ldr	r3, [pc, #268]	@ (800f014 <HAL_RCC_OscConfig+0x780>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d1f0      	bne.n	800eef4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ef12:	4b40      	ldr	r3, [pc, #256]	@ (800f014 <HAL_RCC_OscConfig+0x780>)
 800ef14:	68da      	ldr	r2, [r3, #12]
 800ef16:	4b40      	ldr	r3, [pc, #256]	@ (800f018 <HAL_RCC_OscConfig+0x784>)
 800ef18:	4013      	ands	r3, r2
 800ef1a:	687a      	ldr	r2, [r7, #4]
 800ef1c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800ef1e:	687a      	ldr	r2, [r7, #4]
 800ef20:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ef22:	3a01      	subs	r2, #1
 800ef24:	0112      	lsls	r2, r2, #4
 800ef26:	4311      	orrs	r1, r2
 800ef28:	687a      	ldr	r2, [r7, #4]
 800ef2a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ef2c:	0212      	lsls	r2, r2, #8
 800ef2e:	4311      	orrs	r1, r2
 800ef30:	687a      	ldr	r2, [r7, #4]
 800ef32:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ef34:	0852      	lsrs	r2, r2, #1
 800ef36:	3a01      	subs	r2, #1
 800ef38:	0552      	lsls	r2, r2, #21
 800ef3a:	4311      	orrs	r1, r2
 800ef3c:	687a      	ldr	r2, [r7, #4]
 800ef3e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800ef40:	0852      	lsrs	r2, r2, #1
 800ef42:	3a01      	subs	r2, #1
 800ef44:	0652      	lsls	r2, r2, #25
 800ef46:	4311      	orrs	r1, r2
 800ef48:	687a      	ldr	r2, [r7, #4]
 800ef4a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ef4c:	0912      	lsrs	r2, r2, #4
 800ef4e:	0452      	lsls	r2, r2, #17
 800ef50:	430a      	orrs	r2, r1
 800ef52:	4930      	ldr	r1, [pc, #192]	@ (800f014 <HAL_RCC_OscConfig+0x780>)
 800ef54:	4313      	orrs	r3, r2
 800ef56:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800ef58:	4b2e      	ldr	r3, [pc, #184]	@ (800f014 <HAL_RCC_OscConfig+0x780>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	4a2d      	ldr	r2, [pc, #180]	@ (800f014 <HAL_RCC_OscConfig+0x780>)
 800ef5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ef62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ef64:	4b2b      	ldr	r3, [pc, #172]	@ (800f014 <HAL_RCC_OscConfig+0x780>)
 800ef66:	68db      	ldr	r3, [r3, #12]
 800ef68:	4a2a      	ldr	r2, [pc, #168]	@ (800f014 <HAL_RCC_OscConfig+0x780>)
 800ef6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ef6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ef70:	f7fd fbfc 	bl	800c76c <HAL_GetTick>
 800ef74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ef76:	e008      	b.n	800ef8a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ef78:	f7fd fbf8 	bl	800c76c <HAL_GetTick>
 800ef7c:	4602      	mov	r2, r0
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	1ad3      	subs	r3, r2, r3
 800ef82:	2b02      	cmp	r3, #2
 800ef84:	d901      	bls.n	800ef8a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800ef86:	2303      	movs	r3, #3
 800ef88:	e058      	b.n	800f03c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ef8a:	4b22      	ldr	r3, [pc, #136]	@ (800f014 <HAL_RCC_OscConfig+0x780>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d0f0      	beq.n	800ef78 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ef96:	e050      	b.n	800f03a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800ef98:	2301      	movs	r3, #1
 800ef9a:	e04f      	b.n	800f03c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ef9c:	4b1d      	ldr	r3, [pc, #116]	@ (800f014 <HAL_RCC_OscConfig+0x780>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d148      	bne.n	800f03a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800efa8:	4b1a      	ldr	r3, [pc, #104]	@ (800f014 <HAL_RCC_OscConfig+0x780>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	4a19      	ldr	r2, [pc, #100]	@ (800f014 <HAL_RCC_OscConfig+0x780>)
 800efae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800efb2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800efb4:	4b17      	ldr	r3, [pc, #92]	@ (800f014 <HAL_RCC_OscConfig+0x780>)
 800efb6:	68db      	ldr	r3, [r3, #12]
 800efb8:	4a16      	ldr	r2, [pc, #88]	@ (800f014 <HAL_RCC_OscConfig+0x780>)
 800efba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800efbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800efc0:	f7fd fbd4 	bl	800c76c <HAL_GetTick>
 800efc4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800efc6:	e008      	b.n	800efda <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800efc8:	f7fd fbd0 	bl	800c76c <HAL_GetTick>
 800efcc:	4602      	mov	r2, r0
 800efce:	693b      	ldr	r3, [r7, #16]
 800efd0:	1ad3      	subs	r3, r2, r3
 800efd2:	2b02      	cmp	r3, #2
 800efd4:	d901      	bls.n	800efda <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800efd6:	2303      	movs	r3, #3
 800efd8:	e030      	b.n	800f03c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800efda:	4b0e      	ldr	r3, [pc, #56]	@ (800f014 <HAL_RCC_OscConfig+0x780>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d0f0      	beq.n	800efc8 <HAL_RCC_OscConfig+0x734>
 800efe6:	e028      	b.n	800f03a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800efe8:	69bb      	ldr	r3, [r7, #24]
 800efea:	2b0c      	cmp	r3, #12
 800efec:	d023      	beq.n	800f036 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800efee:	4b09      	ldr	r3, [pc, #36]	@ (800f014 <HAL_RCC_OscConfig+0x780>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	4a08      	ldr	r2, [pc, #32]	@ (800f014 <HAL_RCC_OscConfig+0x780>)
 800eff4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800eff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800effa:	f7fd fbb7 	bl	800c76c <HAL_GetTick>
 800effe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f000:	e00c      	b.n	800f01c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f002:	f7fd fbb3 	bl	800c76c <HAL_GetTick>
 800f006:	4602      	mov	r2, r0
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	1ad3      	subs	r3, r2, r3
 800f00c:	2b02      	cmp	r3, #2
 800f00e:	d905      	bls.n	800f01c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800f010:	2303      	movs	r3, #3
 800f012:	e013      	b.n	800f03c <HAL_RCC_OscConfig+0x7a8>
 800f014:	40021000 	.word	0x40021000
 800f018:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f01c:	4b09      	ldr	r3, [pc, #36]	@ (800f044 <HAL_RCC_OscConfig+0x7b0>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f024:	2b00      	cmp	r3, #0
 800f026:	d1ec      	bne.n	800f002 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800f028:	4b06      	ldr	r3, [pc, #24]	@ (800f044 <HAL_RCC_OscConfig+0x7b0>)
 800f02a:	68da      	ldr	r2, [r3, #12]
 800f02c:	4905      	ldr	r1, [pc, #20]	@ (800f044 <HAL_RCC_OscConfig+0x7b0>)
 800f02e:	4b06      	ldr	r3, [pc, #24]	@ (800f048 <HAL_RCC_OscConfig+0x7b4>)
 800f030:	4013      	ands	r3, r2
 800f032:	60cb      	str	r3, [r1, #12]
 800f034:	e001      	b.n	800f03a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800f036:	2301      	movs	r3, #1
 800f038:	e000      	b.n	800f03c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800f03a:	2300      	movs	r3, #0
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3720      	adds	r7, #32
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}
 800f044:	40021000 	.word	0x40021000
 800f048:	feeefffc 	.word	0xfeeefffc

0800f04c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b084      	sub	sp, #16
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
 800f054:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d101      	bne.n	800f060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f05c:	2301      	movs	r3, #1
 800f05e:	e0e7      	b.n	800f230 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f060:	4b75      	ldr	r3, [pc, #468]	@ (800f238 <HAL_RCC_ClockConfig+0x1ec>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	f003 0307 	and.w	r3, r3, #7
 800f068:	683a      	ldr	r2, [r7, #0]
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d910      	bls.n	800f090 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f06e:	4b72      	ldr	r3, [pc, #456]	@ (800f238 <HAL_RCC_ClockConfig+0x1ec>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	f023 0207 	bic.w	r2, r3, #7
 800f076:	4970      	ldr	r1, [pc, #448]	@ (800f238 <HAL_RCC_ClockConfig+0x1ec>)
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	4313      	orrs	r3, r2
 800f07c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f07e:	4b6e      	ldr	r3, [pc, #440]	@ (800f238 <HAL_RCC_ClockConfig+0x1ec>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	f003 0307 	and.w	r3, r3, #7
 800f086:	683a      	ldr	r2, [r7, #0]
 800f088:	429a      	cmp	r2, r3
 800f08a:	d001      	beq.n	800f090 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800f08c:	2301      	movs	r3, #1
 800f08e:	e0cf      	b.n	800f230 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	f003 0302 	and.w	r3, r3, #2
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d010      	beq.n	800f0be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	689a      	ldr	r2, [r3, #8]
 800f0a0:	4b66      	ldr	r3, [pc, #408]	@ (800f23c <HAL_RCC_ClockConfig+0x1f0>)
 800f0a2:	689b      	ldr	r3, [r3, #8]
 800f0a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	d908      	bls.n	800f0be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f0ac:	4b63      	ldr	r3, [pc, #396]	@ (800f23c <HAL_RCC_ClockConfig+0x1f0>)
 800f0ae:	689b      	ldr	r3, [r3, #8]
 800f0b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	689b      	ldr	r3, [r3, #8]
 800f0b8:	4960      	ldr	r1, [pc, #384]	@ (800f23c <HAL_RCC_ClockConfig+0x1f0>)
 800f0ba:	4313      	orrs	r3, r2
 800f0bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	f003 0301 	and.w	r3, r3, #1
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d04c      	beq.n	800f164 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	685b      	ldr	r3, [r3, #4]
 800f0ce:	2b03      	cmp	r3, #3
 800f0d0:	d107      	bne.n	800f0e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f0d2:	4b5a      	ldr	r3, [pc, #360]	@ (800f23c <HAL_RCC_ClockConfig+0x1f0>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d121      	bne.n	800f122 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800f0de:	2301      	movs	r3, #1
 800f0e0:	e0a6      	b.n	800f230 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	685b      	ldr	r3, [r3, #4]
 800f0e6:	2b02      	cmp	r3, #2
 800f0e8:	d107      	bne.n	800f0fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f0ea:	4b54      	ldr	r3, [pc, #336]	@ (800f23c <HAL_RCC_ClockConfig+0x1f0>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d115      	bne.n	800f122 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	e09a      	b.n	800f230 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	685b      	ldr	r3, [r3, #4]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d107      	bne.n	800f112 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f102:	4b4e      	ldr	r3, [pc, #312]	@ (800f23c <HAL_RCC_ClockConfig+0x1f0>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	f003 0302 	and.w	r3, r3, #2
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d109      	bne.n	800f122 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800f10e:	2301      	movs	r3, #1
 800f110:	e08e      	b.n	800f230 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f112:	4b4a      	ldr	r3, [pc, #296]	@ (800f23c <HAL_RCC_ClockConfig+0x1f0>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d101      	bne.n	800f122 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800f11e:	2301      	movs	r3, #1
 800f120:	e086      	b.n	800f230 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800f122:	4b46      	ldr	r3, [pc, #280]	@ (800f23c <HAL_RCC_ClockConfig+0x1f0>)
 800f124:	689b      	ldr	r3, [r3, #8]
 800f126:	f023 0203 	bic.w	r2, r3, #3
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	685b      	ldr	r3, [r3, #4]
 800f12e:	4943      	ldr	r1, [pc, #268]	@ (800f23c <HAL_RCC_ClockConfig+0x1f0>)
 800f130:	4313      	orrs	r3, r2
 800f132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f134:	f7fd fb1a 	bl	800c76c <HAL_GetTick>
 800f138:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f13a:	e00a      	b.n	800f152 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f13c:	f7fd fb16 	bl	800c76c <HAL_GetTick>
 800f140:	4602      	mov	r2, r0
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	1ad3      	subs	r3, r2, r3
 800f146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f14a:	4293      	cmp	r3, r2
 800f14c:	d901      	bls.n	800f152 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800f14e:	2303      	movs	r3, #3
 800f150:	e06e      	b.n	800f230 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f152:	4b3a      	ldr	r3, [pc, #232]	@ (800f23c <HAL_RCC_ClockConfig+0x1f0>)
 800f154:	689b      	ldr	r3, [r3, #8]
 800f156:	f003 020c 	and.w	r2, r3, #12
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	685b      	ldr	r3, [r3, #4]
 800f15e:	009b      	lsls	r3, r3, #2
 800f160:	429a      	cmp	r2, r3
 800f162:	d1eb      	bne.n	800f13c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	f003 0302 	and.w	r3, r3, #2
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d010      	beq.n	800f192 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	689a      	ldr	r2, [r3, #8]
 800f174:	4b31      	ldr	r3, [pc, #196]	@ (800f23c <HAL_RCC_ClockConfig+0x1f0>)
 800f176:	689b      	ldr	r3, [r3, #8]
 800f178:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f17c:	429a      	cmp	r2, r3
 800f17e:	d208      	bcs.n	800f192 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f180:	4b2e      	ldr	r3, [pc, #184]	@ (800f23c <HAL_RCC_ClockConfig+0x1f0>)
 800f182:	689b      	ldr	r3, [r3, #8]
 800f184:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	689b      	ldr	r3, [r3, #8]
 800f18c:	492b      	ldr	r1, [pc, #172]	@ (800f23c <HAL_RCC_ClockConfig+0x1f0>)
 800f18e:	4313      	orrs	r3, r2
 800f190:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f192:	4b29      	ldr	r3, [pc, #164]	@ (800f238 <HAL_RCC_ClockConfig+0x1ec>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	f003 0307 	and.w	r3, r3, #7
 800f19a:	683a      	ldr	r2, [r7, #0]
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d210      	bcs.n	800f1c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f1a0:	4b25      	ldr	r3, [pc, #148]	@ (800f238 <HAL_RCC_ClockConfig+0x1ec>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	f023 0207 	bic.w	r2, r3, #7
 800f1a8:	4923      	ldr	r1, [pc, #140]	@ (800f238 <HAL_RCC_ClockConfig+0x1ec>)
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	4313      	orrs	r3, r2
 800f1ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f1b0:	4b21      	ldr	r3, [pc, #132]	@ (800f238 <HAL_RCC_ClockConfig+0x1ec>)
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	f003 0307 	and.w	r3, r3, #7
 800f1b8:	683a      	ldr	r2, [r7, #0]
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	d001      	beq.n	800f1c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800f1be:	2301      	movs	r3, #1
 800f1c0:	e036      	b.n	800f230 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	f003 0304 	and.w	r3, r3, #4
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d008      	beq.n	800f1e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f1ce:	4b1b      	ldr	r3, [pc, #108]	@ (800f23c <HAL_RCC_ClockConfig+0x1f0>)
 800f1d0:	689b      	ldr	r3, [r3, #8]
 800f1d2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	68db      	ldr	r3, [r3, #12]
 800f1da:	4918      	ldr	r1, [pc, #96]	@ (800f23c <HAL_RCC_ClockConfig+0x1f0>)
 800f1dc:	4313      	orrs	r3, r2
 800f1de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	f003 0308 	and.w	r3, r3, #8
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d009      	beq.n	800f200 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f1ec:	4b13      	ldr	r3, [pc, #76]	@ (800f23c <HAL_RCC_ClockConfig+0x1f0>)
 800f1ee:	689b      	ldr	r3, [r3, #8]
 800f1f0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	691b      	ldr	r3, [r3, #16]
 800f1f8:	00db      	lsls	r3, r3, #3
 800f1fa:	4910      	ldr	r1, [pc, #64]	@ (800f23c <HAL_RCC_ClockConfig+0x1f0>)
 800f1fc:	4313      	orrs	r3, r2
 800f1fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800f200:	f000 f824 	bl	800f24c <HAL_RCC_GetSysClockFreq>
 800f204:	4602      	mov	r2, r0
 800f206:	4b0d      	ldr	r3, [pc, #52]	@ (800f23c <HAL_RCC_ClockConfig+0x1f0>)
 800f208:	689b      	ldr	r3, [r3, #8]
 800f20a:	091b      	lsrs	r3, r3, #4
 800f20c:	f003 030f 	and.w	r3, r3, #15
 800f210:	490b      	ldr	r1, [pc, #44]	@ (800f240 <HAL_RCC_ClockConfig+0x1f4>)
 800f212:	5ccb      	ldrb	r3, [r1, r3]
 800f214:	f003 031f 	and.w	r3, r3, #31
 800f218:	fa22 f303 	lsr.w	r3, r2, r3
 800f21c:	4a09      	ldr	r2, [pc, #36]	@ (800f244 <HAL_RCC_ClockConfig+0x1f8>)
 800f21e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800f220:	4b09      	ldr	r3, [pc, #36]	@ (800f248 <HAL_RCC_ClockConfig+0x1fc>)
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	4618      	mov	r0, r3
 800f226:	f7fd fa51 	bl	800c6cc <HAL_InitTick>
 800f22a:	4603      	mov	r3, r0
 800f22c:	72fb      	strb	r3, [r7, #11]

  return status;
 800f22e:	7afb      	ldrb	r3, [r7, #11]
}
 800f230:	4618      	mov	r0, r3
 800f232:	3710      	adds	r7, #16
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}
 800f238:	40022000 	.word	0x40022000
 800f23c:	40021000 	.word	0x40021000
 800f240:	08014714 	.word	0x08014714
 800f244:	20000220 	.word	0x20000220
 800f248:	20000224 	.word	0x20000224

0800f24c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f24c:	b480      	push	{r7}
 800f24e:	b089      	sub	sp, #36	@ 0x24
 800f250:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800f252:	2300      	movs	r3, #0
 800f254:	61fb      	str	r3, [r7, #28]
 800f256:	2300      	movs	r3, #0
 800f258:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f25a:	4b3e      	ldr	r3, [pc, #248]	@ (800f354 <HAL_RCC_GetSysClockFreq+0x108>)
 800f25c:	689b      	ldr	r3, [r3, #8]
 800f25e:	f003 030c 	and.w	r3, r3, #12
 800f262:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f264:	4b3b      	ldr	r3, [pc, #236]	@ (800f354 <HAL_RCC_GetSysClockFreq+0x108>)
 800f266:	68db      	ldr	r3, [r3, #12]
 800f268:	f003 0303 	and.w	r3, r3, #3
 800f26c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800f26e:	693b      	ldr	r3, [r7, #16]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d005      	beq.n	800f280 <HAL_RCC_GetSysClockFreq+0x34>
 800f274:	693b      	ldr	r3, [r7, #16]
 800f276:	2b0c      	cmp	r3, #12
 800f278:	d121      	bne.n	800f2be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	d11e      	bne.n	800f2be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800f280:	4b34      	ldr	r3, [pc, #208]	@ (800f354 <HAL_RCC_GetSysClockFreq+0x108>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	f003 0308 	and.w	r3, r3, #8
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d107      	bne.n	800f29c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800f28c:	4b31      	ldr	r3, [pc, #196]	@ (800f354 <HAL_RCC_GetSysClockFreq+0x108>)
 800f28e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f292:	0a1b      	lsrs	r3, r3, #8
 800f294:	f003 030f 	and.w	r3, r3, #15
 800f298:	61fb      	str	r3, [r7, #28]
 800f29a:	e005      	b.n	800f2a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800f29c:	4b2d      	ldr	r3, [pc, #180]	@ (800f354 <HAL_RCC_GetSysClockFreq+0x108>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	091b      	lsrs	r3, r3, #4
 800f2a2:	f003 030f 	and.w	r3, r3, #15
 800f2a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800f2a8:	4a2b      	ldr	r2, [pc, #172]	@ (800f358 <HAL_RCC_GetSysClockFreq+0x10c>)
 800f2aa:	69fb      	ldr	r3, [r7, #28]
 800f2ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800f2b2:	693b      	ldr	r3, [r7, #16]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d10d      	bne.n	800f2d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800f2b8:	69fb      	ldr	r3, [r7, #28]
 800f2ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800f2bc:	e00a      	b.n	800f2d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800f2be:	693b      	ldr	r3, [r7, #16]
 800f2c0:	2b04      	cmp	r3, #4
 800f2c2:	d102      	bne.n	800f2ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800f2c4:	4b25      	ldr	r3, [pc, #148]	@ (800f35c <HAL_RCC_GetSysClockFreq+0x110>)
 800f2c6:	61bb      	str	r3, [r7, #24]
 800f2c8:	e004      	b.n	800f2d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800f2ca:	693b      	ldr	r3, [r7, #16]
 800f2cc:	2b08      	cmp	r3, #8
 800f2ce:	d101      	bne.n	800f2d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800f2d0:	4b23      	ldr	r3, [pc, #140]	@ (800f360 <HAL_RCC_GetSysClockFreq+0x114>)
 800f2d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800f2d4:	693b      	ldr	r3, [r7, #16]
 800f2d6:	2b0c      	cmp	r3, #12
 800f2d8:	d134      	bne.n	800f344 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800f2da:	4b1e      	ldr	r3, [pc, #120]	@ (800f354 <HAL_RCC_GetSysClockFreq+0x108>)
 800f2dc:	68db      	ldr	r3, [r3, #12]
 800f2de:	f003 0303 	and.w	r3, r3, #3
 800f2e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	2b02      	cmp	r3, #2
 800f2e8:	d003      	beq.n	800f2f2 <HAL_RCC_GetSysClockFreq+0xa6>
 800f2ea:	68bb      	ldr	r3, [r7, #8]
 800f2ec:	2b03      	cmp	r3, #3
 800f2ee:	d003      	beq.n	800f2f8 <HAL_RCC_GetSysClockFreq+0xac>
 800f2f0:	e005      	b.n	800f2fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800f2f2:	4b1a      	ldr	r3, [pc, #104]	@ (800f35c <HAL_RCC_GetSysClockFreq+0x110>)
 800f2f4:	617b      	str	r3, [r7, #20]
      break;
 800f2f6:	e005      	b.n	800f304 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800f2f8:	4b19      	ldr	r3, [pc, #100]	@ (800f360 <HAL_RCC_GetSysClockFreq+0x114>)
 800f2fa:	617b      	str	r3, [r7, #20]
      break;
 800f2fc:	e002      	b.n	800f304 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800f2fe:	69fb      	ldr	r3, [r7, #28]
 800f300:	617b      	str	r3, [r7, #20]
      break;
 800f302:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800f304:	4b13      	ldr	r3, [pc, #76]	@ (800f354 <HAL_RCC_GetSysClockFreq+0x108>)
 800f306:	68db      	ldr	r3, [r3, #12]
 800f308:	091b      	lsrs	r3, r3, #4
 800f30a:	f003 0307 	and.w	r3, r3, #7
 800f30e:	3301      	adds	r3, #1
 800f310:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800f312:	4b10      	ldr	r3, [pc, #64]	@ (800f354 <HAL_RCC_GetSysClockFreq+0x108>)
 800f314:	68db      	ldr	r3, [r3, #12]
 800f316:	0a1b      	lsrs	r3, r3, #8
 800f318:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f31c:	697a      	ldr	r2, [r7, #20]
 800f31e:	fb03 f202 	mul.w	r2, r3, r2
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	fbb2 f3f3 	udiv	r3, r2, r3
 800f328:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800f32a:	4b0a      	ldr	r3, [pc, #40]	@ (800f354 <HAL_RCC_GetSysClockFreq+0x108>)
 800f32c:	68db      	ldr	r3, [r3, #12]
 800f32e:	0e5b      	lsrs	r3, r3, #25
 800f330:	f003 0303 	and.w	r3, r3, #3
 800f334:	3301      	adds	r3, #1
 800f336:	005b      	lsls	r3, r3, #1
 800f338:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800f33a:	697a      	ldr	r2, [r7, #20]
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f342:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800f344:	69bb      	ldr	r3, [r7, #24]
}
 800f346:	4618      	mov	r0, r3
 800f348:	3724      	adds	r7, #36	@ 0x24
 800f34a:	46bd      	mov	sp, r7
 800f34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f350:	4770      	bx	lr
 800f352:	bf00      	nop
 800f354:	40021000 	.word	0x40021000
 800f358:	0801472c 	.word	0x0801472c
 800f35c:	00f42400 	.word	0x00f42400
 800f360:	007a1200 	.word	0x007a1200

0800f364 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f364:	b480      	push	{r7}
 800f366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f368:	4b03      	ldr	r3, [pc, #12]	@ (800f378 <HAL_RCC_GetHCLKFreq+0x14>)
 800f36a:	681b      	ldr	r3, [r3, #0]
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	46bd      	mov	sp, r7
 800f370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f374:	4770      	bx	lr
 800f376:	bf00      	nop
 800f378:	20000220 	.word	0x20000220

0800f37c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800f380:	f7ff fff0 	bl	800f364 <HAL_RCC_GetHCLKFreq>
 800f384:	4602      	mov	r2, r0
 800f386:	4b06      	ldr	r3, [pc, #24]	@ (800f3a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f388:	689b      	ldr	r3, [r3, #8]
 800f38a:	0a1b      	lsrs	r3, r3, #8
 800f38c:	f003 0307 	and.w	r3, r3, #7
 800f390:	4904      	ldr	r1, [pc, #16]	@ (800f3a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800f392:	5ccb      	ldrb	r3, [r1, r3]
 800f394:	f003 031f 	and.w	r3, r3, #31
 800f398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f39c:	4618      	mov	r0, r3
 800f39e:	bd80      	pop	{r7, pc}
 800f3a0:	40021000 	.word	0x40021000
 800f3a4:	08014724 	.word	0x08014724

0800f3a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800f3ac:	f7ff ffda 	bl	800f364 <HAL_RCC_GetHCLKFreq>
 800f3b0:	4602      	mov	r2, r0
 800f3b2:	4b06      	ldr	r3, [pc, #24]	@ (800f3cc <HAL_RCC_GetPCLK2Freq+0x24>)
 800f3b4:	689b      	ldr	r3, [r3, #8]
 800f3b6:	0adb      	lsrs	r3, r3, #11
 800f3b8:	f003 0307 	and.w	r3, r3, #7
 800f3bc:	4904      	ldr	r1, [pc, #16]	@ (800f3d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800f3be:	5ccb      	ldrb	r3, [r1, r3]
 800f3c0:	f003 031f 	and.w	r3, r3, #31
 800f3c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	bd80      	pop	{r7, pc}
 800f3cc:	40021000 	.word	0x40021000
 800f3d0:	08014724 	.word	0x08014724

0800f3d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b086      	sub	sp, #24
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800f3dc:	2300      	movs	r3, #0
 800f3de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800f3e0:	4b2a      	ldr	r3, [pc, #168]	@ (800f48c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f3e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f3e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d003      	beq.n	800f3f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800f3ec:	f7ff f9ee 	bl	800e7cc <HAL_PWREx_GetVoltageRange>
 800f3f0:	6178      	str	r0, [r7, #20]
 800f3f2:	e014      	b.n	800f41e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800f3f4:	4b25      	ldr	r3, [pc, #148]	@ (800f48c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f3f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f3f8:	4a24      	ldr	r2, [pc, #144]	@ (800f48c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f3fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f3fe:	6593      	str	r3, [r2, #88]	@ 0x58
 800f400:	4b22      	ldr	r3, [pc, #136]	@ (800f48c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f404:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f408:	60fb      	str	r3, [r7, #12]
 800f40a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800f40c:	f7ff f9de 	bl	800e7cc <HAL_PWREx_GetVoltageRange>
 800f410:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800f412:	4b1e      	ldr	r3, [pc, #120]	@ (800f48c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f416:	4a1d      	ldr	r2, [pc, #116]	@ (800f48c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800f418:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f41c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800f41e:	697b      	ldr	r3, [r7, #20]
 800f420:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f424:	d10b      	bne.n	800f43e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2b80      	cmp	r3, #128	@ 0x80
 800f42a:	d919      	bls.n	800f460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2ba0      	cmp	r3, #160	@ 0xa0
 800f430:	d902      	bls.n	800f438 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800f432:	2302      	movs	r3, #2
 800f434:	613b      	str	r3, [r7, #16]
 800f436:	e013      	b.n	800f460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800f438:	2301      	movs	r3, #1
 800f43a:	613b      	str	r3, [r7, #16]
 800f43c:	e010      	b.n	800f460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2b80      	cmp	r3, #128	@ 0x80
 800f442:	d902      	bls.n	800f44a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800f444:	2303      	movs	r3, #3
 800f446:	613b      	str	r3, [r7, #16]
 800f448:	e00a      	b.n	800f460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2b80      	cmp	r3, #128	@ 0x80
 800f44e:	d102      	bne.n	800f456 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800f450:	2302      	movs	r3, #2
 800f452:	613b      	str	r3, [r7, #16]
 800f454:	e004      	b.n	800f460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2b70      	cmp	r3, #112	@ 0x70
 800f45a:	d101      	bne.n	800f460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800f45c:	2301      	movs	r3, #1
 800f45e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800f460:	4b0b      	ldr	r3, [pc, #44]	@ (800f490 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	f023 0207 	bic.w	r2, r3, #7
 800f468:	4909      	ldr	r1, [pc, #36]	@ (800f490 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800f46a:	693b      	ldr	r3, [r7, #16]
 800f46c:	4313      	orrs	r3, r2
 800f46e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800f470:	4b07      	ldr	r3, [pc, #28]	@ (800f490 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	f003 0307 	and.w	r3, r3, #7
 800f478:	693a      	ldr	r2, [r7, #16]
 800f47a:	429a      	cmp	r2, r3
 800f47c:	d001      	beq.n	800f482 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800f47e:	2301      	movs	r3, #1
 800f480:	e000      	b.n	800f484 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800f482:	2300      	movs	r3, #0
}
 800f484:	4618      	mov	r0, r3
 800f486:	3718      	adds	r7, #24
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}
 800f48c:	40021000 	.word	0x40021000
 800f490:	40022000 	.word	0x40022000

0800f494 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b086      	sub	sp, #24
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800f49c:	2300      	movs	r3, #0
 800f49e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d041      	beq.n	800f534 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f4b4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800f4b8:	d02a      	beq.n	800f510 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800f4ba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800f4be:	d824      	bhi.n	800f50a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800f4c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f4c4:	d008      	beq.n	800f4d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800f4c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f4ca:	d81e      	bhi.n	800f50a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d00a      	beq.n	800f4e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800f4d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f4d4:	d010      	beq.n	800f4f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f4d6:	e018      	b.n	800f50a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800f4d8:	4b86      	ldr	r3, [pc, #536]	@ (800f6f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f4da:	68db      	ldr	r3, [r3, #12]
 800f4dc:	4a85      	ldr	r2, [pc, #532]	@ (800f6f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f4de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f4e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800f4e4:	e015      	b.n	800f512 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	3304      	adds	r3, #4
 800f4ea:	2100      	movs	r1, #0
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f000 fabb 	bl	800fa68 <RCCEx_PLLSAI1_Config>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800f4f6:	e00c      	b.n	800f512 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	3320      	adds	r3, #32
 800f4fc:	2100      	movs	r1, #0
 800f4fe:	4618      	mov	r0, r3
 800f500:	f000 fba6 	bl	800fc50 <RCCEx_PLLSAI2_Config>
 800f504:	4603      	mov	r3, r0
 800f506:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800f508:	e003      	b.n	800f512 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f50a:	2301      	movs	r3, #1
 800f50c:	74fb      	strb	r3, [r7, #19]
      break;
 800f50e:	e000      	b.n	800f512 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800f510:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f512:	7cfb      	ldrb	r3, [r7, #19]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d10b      	bne.n	800f530 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f518:	4b76      	ldr	r3, [pc, #472]	@ (800f6f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f51a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f51e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f526:	4973      	ldr	r1, [pc, #460]	@ (800f6f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f528:	4313      	orrs	r3, r2
 800f52a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800f52e:	e001      	b.n	800f534 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f530:	7cfb      	ldrb	r3, [r7, #19]
 800f532:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d041      	beq.n	800f5c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f544:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f548:	d02a      	beq.n	800f5a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800f54a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800f54e:	d824      	bhi.n	800f59a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800f550:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f554:	d008      	beq.n	800f568 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800f556:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f55a:	d81e      	bhi.n	800f59a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d00a      	beq.n	800f576 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800f560:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f564:	d010      	beq.n	800f588 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800f566:	e018      	b.n	800f59a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800f568:	4b62      	ldr	r3, [pc, #392]	@ (800f6f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f56a:	68db      	ldr	r3, [r3, #12]
 800f56c:	4a61      	ldr	r2, [pc, #388]	@ (800f6f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f56e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f572:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800f574:	e015      	b.n	800f5a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	3304      	adds	r3, #4
 800f57a:	2100      	movs	r1, #0
 800f57c:	4618      	mov	r0, r3
 800f57e:	f000 fa73 	bl	800fa68 <RCCEx_PLLSAI1_Config>
 800f582:	4603      	mov	r3, r0
 800f584:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800f586:	e00c      	b.n	800f5a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	3320      	adds	r3, #32
 800f58c:	2100      	movs	r1, #0
 800f58e:	4618      	mov	r0, r3
 800f590:	f000 fb5e 	bl	800fc50 <RCCEx_PLLSAI2_Config>
 800f594:	4603      	mov	r3, r0
 800f596:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800f598:	e003      	b.n	800f5a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f59a:	2301      	movs	r3, #1
 800f59c:	74fb      	strb	r3, [r7, #19]
      break;
 800f59e:	e000      	b.n	800f5a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800f5a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f5a2:	7cfb      	ldrb	r3, [r7, #19]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d10b      	bne.n	800f5c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800f5a8:	4b52      	ldr	r3, [pc, #328]	@ (800f6f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f5aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f5ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f5b6:	494f      	ldr	r1, [pc, #316]	@ (800f6f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f5b8:	4313      	orrs	r3, r2
 800f5ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800f5be:	e001      	b.n	800f5c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f5c0:	7cfb      	ldrb	r3, [r7, #19]
 800f5c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	f000 80a0 	beq.w	800f712 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800f5d6:	4b47      	ldr	r3, [pc, #284]	@ (800f6f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f5d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f5da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d101      	bne.n	800f5e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800f5e2:	2301      	movs	r3, #1
 800f5e4:	e000      	b.n	800f5e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d00d      	beq.n	800f608 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f5ec:	4b41      	ldr	r3, [pc, #260]	@ (800f6f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f5ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f5f0:	4a40      	ldr	r2, [pc, #256]	@ (800f6f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f5f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f5f6:	6593      	str	r3, [r2, #88]	@ 0x58
 800f5f8:	4b3e      	ldr	r3, [pc, #248]	@ (800f6f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f5fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f5fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f600:	60bb      	str	r3, [r7, #8]
 800f602:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f604:	2301      	movs	r3, #1
 800f606:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f608:	4b3b      	ldr	r3, [pc, #236]	@ (800f6f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	4a3a      	ldr	r2, [pc, #232]	@ (800f6f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800f60e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f612:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f614:	f7fd f8aa 	bl	800c76c <HAL_GetTick>
 800f618:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800f61a:	e009      	b.n	800f630 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f61c:	f7fd f8a6 	bl	800c76c <HAL_GetTick>
 800f620:	4602      	mov	r2, r0
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	1ad3      	subs	r3, r2, r3
 800f626:	2b02      	cmp	r3, #2
 800f628:	d902      	bls.n	800f630 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800f62a:	2303      	movs	r3, #3
 800f62c:	74fb      	strb	r3, [r7, #19]
        break;
 800f62e:	e005      	b.n	800f63c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800f630:	4b31      	ldr	r3, [pc, #196]	@ (800f6f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d0ef      	beq.n	800f61c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800f63c:	7cfb      	ldrb	r3, [r7, #19]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d15c      	bne.n	800f6fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800f642:	4b2c      	ldr	r3, [pc, #176]	@ (800f6f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f648:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f64c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800f64e:	697b      	ldr	r3, [r7, #20]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d01f      	beq.n	800f694 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f65a:	697a      	ldr	r2, [r7, #20]
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d019      	beq.n	800f694 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800f660:	4b24      	ldr	r3, [pc, #144]	@ (800f6f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f666:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f66a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f66c:	4b21      	ldr	r3, [pc, #132]	@ (800f6f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f66e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f672:	4a20      	ldr	r2, [pc, #128]	@ (800f6f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f678:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f67c:	4b1d      	ldr	r3, [pc, #116]	@ (800f6f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f67e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f682:	4a1c      	ldr	r2, [pc, #112]	@ (800f6f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f684:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f688:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800f68c:	4a19      	ldr	r2, [pc, #100]	@ (800f6f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800f694:	697b      	ldr	r3, [r7, #20]
 800f696:	f003 0301 	and.w	r3, r3, #1
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d016      	beq.n	800f6cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f69e:	f7fd f865 	bl	800c76c <HAL_GetTick>
 800f6a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f6a4:	e00b      	b.n	800f6be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f6a6:	f7fd f861 	bl	800c76c <HAL_GetTick>
 800f6aa:	4602      	mov	r2, r0
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	1ad3      	subs	r3, r2, r3
 800f6b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f6b4:	4293      	cmp	r3, r2
 800f6b6:	d902      	bls.n	800f6be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800f6b8:	2303      	movs	r3, #3
 800f6ba:	74fb      	strb	r3, [r7, #19]
            break;
 800f6bc:	e006      	b.n	800f6cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f6be:	4b0d      	ldr	r3, [pc, #52]	@ (800f6f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f6c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f6c4:	f003 0302 	and.w	r3, r3, #2
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d0ec      	beq.n	800f6a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800f6cc:	7cfb      	ldrb	r3, [r7, #19]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d10c      	bne.n	800f6ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f6d2:	4b08      	ldr	r3, [pc, #32]	@ (800f6f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f6d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f6d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f6e2:	4904      	ldr	r1, [pc, #16]	@ (800f6f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800f6e4:	4313      	orrs	r3, r2
 800f6e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800f6ea:	e009      	b.n	800f700 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f6ec:	7cfb      	ldrb	r3, [r7, #19]
 800f6ee:	74bb      	strb	r3, [r7, #18]
 800f6f0:	e006      	b.n	800f700 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800f6f2:	bf00      	nop
 800f6f4:	40021000 	.word	0x40021000
 800f6f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f6fc:	7cfb      	ldrb	r3, [r7, #19]
 800f6fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f700:	7c7b      	ldrb	r3, [r7, #17]
 800f702:	2b01      	cmp	r3, #1
 800f704:	d105      	bne.n	800f712 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f706:	4b9e      	ldr	r3, [pc, #632]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f70a:	4a9d      	ldr	r2, [pc, #628]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f70c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f710:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	f003 0301 	and.w	r3, r3, #1
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d00a      	beq.n	800f734 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f71e:	4b98      	ldr	r3, [pc, #608]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f720:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f724:	f023 0203 	bic.w	r2, r3, #3
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f72c:	4994      	ldr	r1, [pc, #592]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f72e:	4313      	orrs	r3, r2
 800f730:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	f003 0302 	and.w	r3, r3, #2
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d00a      	beq.n	800f756 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800f740:	4b8f      	ldr	r3, [pc, #572]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f746:	f023 020c 	bic.w	r2, r3, #12
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f74e:	498c      	ldr	r1, [pc, #560]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f750:	4313      	orrs	r3, r2
 800f752:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	f003 0304 	and.w	r3, r3, #4
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d00a      	beq.n	800f778 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800f762:	4b87      	ldr	r3, [pc, #540]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f768:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f770:	4983      	ldr	r1, [pc, #524]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f772:	4313      	orrs	r3, r2
 800f774:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	f003 0308 	and.w	r3, r3, #8
 800f780:	2b00      	cmp	r3, #0
 800f782:	d00a      	beq.n	800f79a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800f784:	4b7e      	ldr	r3, [pc, #504]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f78a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f792:	497b      	ldr	r1, [pc, #492]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f794:	4313      	orrs	r3, r2
 800f796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	f003 0310 	and.w	r3, r3, #16
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d00a      	beq.n	800f7bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800f7a6:	4b76      	ldr	r3, [pc, #472]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f7a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f7ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f7b4:	4972      	ldr	r1, [pc, #456]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f7b6:	4313      	orrs	r3, r2
 800f7b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	f003 0320 	and.w	r3, r3, #32
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d00a      	beq.n	800f7de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f7c8:	4b6d      	ldr	r3, [pc, #436]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f7ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f7ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f7d6:	496a      	ldr	r1, [pc, #424]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f7d8:	4313      	orrs	r3, r2
 800f7da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d00a      	beq.n	800f800 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f7ea:	4b65      	ldr	r3, [pc, #404]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f7ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f7f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f7f8:	4961      	ldr	r1, [pc, #388]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f7fa:	4313      	orrs	r3, r2
 800f7fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d00a      	beq.n	800f822 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f80c:	4b5c      	ldr	r3, [pc, #368]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f80e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f812:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f81a:	4959      	ldr	r1, [pc, #356]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f81c:	4313      	orrs	r3, r2
 800f81e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d00a      	beq.n	800f844 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f82e:	4b54      	ldr	r3, [pc, #336]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f834:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f83c:	4950      	ldr	r1, [pc, #320]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f83e:	4313      	orrs	r3, r2
 800f840:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d00a      	beq.n	800f866 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800f850:	4b4b      	ldr	r3, [pc, #300]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f856:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f85e:	4948      	ldr	r1, [pc, #288]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f860:	4313      	orrs	r3, r2
 800f862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d00a      	beq.n	800f888 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f872:	4b43      	ldr	r3, [pc, #268]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f878:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f880:	493f      	ldr	r1, [pc, #252]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f882:	4313      	orrs	r3, r2
 800f884:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f890:	2b00      	cmp	r3, #0
 800f892:	d028      	beq.n	800f8e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f894:	4b3a      	ldr	r3, [pc, #232]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f89a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f8a2:	4937      	ldr	r1, [pc, #220]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f8a4:	4313      	orrs	r3, r2
 800f8a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f8ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f8b2:	d106      	bne.n	800f8c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f8b4:	4b32      	ldr	r3, [pc, #200]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f8b6:	68db      	ldr	r3, [r3, #12]
 800f8b8:	4a31      	ldr	r2, [pc, #196]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f8ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f8be:	60d3      	str	r3, [r2, #12]
 800f8c0:	e011      	b.n	800f8e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f8c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f8ca:	d10c      	bne.n	800f8e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	3304      	adds	r3, #4
 800f8d0:	2101      	movs	r1, #1
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f000 f8c8 	bl	800fa68 <RCCEx_PLLSAI1_Config>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800f8dc:	7cfb      	ldrb	r3, [r7, #19]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d001      	beq.n	800f8e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800f8e2:	7cfb      	ldrb	r3, [r7, #19]
 800f8e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d028      	beq.n	800f944 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800f8f2:	4b23      	ldr	r3, [pc, #140]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f8f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f8f8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f900:	491f      	ldr	r1, [pc, #124]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f902:	4313      	orrs	r3, r2
 800f904:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f90c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f910:	d106      	bne.n	800f920 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f912:	4b1b      	ldr	r3, [pc, #108]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f914:	68db      	ldr	r3, [r3, #12]
 800f916:	4a1a      	ldr	r2, [pc, #104]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f918:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f91c:	60d3      	str	r3, [r2, #12]
 800f91e:	e011      	b.n	800f944 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f924:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f928:	d10c      	bne.n	800f944 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	3304      	adds	r3, #4
 800f92e:	2101      	movs	r1, #1
 800f930:	4618      	mov	r0, r3
 800f932:	f000 f899 	bl	800fa68 <RCCEx_PLLSAI1_Config>
 800f936:	4603      	mov	r3, r0
 800f938:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800f93a:	7cfb      	ldrb	r3, [r7, #19]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d001      	beq.n	800f944 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800f940:	7cfb      	ldrb	r3, [r7, #19]
 800f942:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d02b      	beq.n	800f9a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f950:	4b0b      	ldr	r3, [pc, #44]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f956:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f95e:	4908      	ldr	r1, [pc, #32]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f960:	4313      	orrs	r3, r2
 800f962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f96a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f96e:	d109      	bne.n	800f984 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f970:	4b03      	ldr	r3, [pc, #12]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f972:	68db      	ldr	r3, [r3, #12]
 800f974:	4a02      	ldr	r2, [pc, #8]	@ (800f980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800f976:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f97a:	60d3      	str	r3, [r2, #12]
 800f97c:	e014      	b.n	800f9a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800f97e:	bf00      	nop
 800f980:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f988:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f98c:	d10c      	bne.n	800f9a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	3304      	adds	r3, #4
 800f992:	2101      	movs	r1, #1
 800f994:	4618      	mov	r0, r3
 800f996:	f000 f867 	bl	800fa68 <RCCEx_PLLSAI1_Config>
 800f99a:	4603      	mov	r3, r0
 800f99c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800f99e:	7cfb      	ldrb	r3, [r7, #19]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d001      	beq.n	800f9a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800f9a4:	7cfb      	ldrb	r3, [r7, #19]
 800f9a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d02f      	beq.n	800fa14 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f9b4:	4b2b      	ldr	r3, [pc, #172]	@ (800fa64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800f9b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f9ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f9c2:	4928      	ldr	r1, [pc, #160]	@ (800fa64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800f9c4:	4313      	orrs	r3, r2
 800f9c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f9ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f9d2:	d10d      	bne.n	800f9f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	3304      	adds	r3, #4
 800f9d8:	2102      	movs	r1, #2
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f000 f844 	bl	800fa68 <RCCEx_PLLSAI1_Config>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800f9e4:	7cfb      	ldrb	r3, [r7, #19]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d014      	beq.n	800fa14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800f9ea:	7cfb      	ldrb	r3, [r7, #19]
 800f9ec:	74bb      	strb	r3, [r7, #18]
 800f9ee:	e011      	b.n	800fa14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f9f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f9f8:	d10c      	bne.n	800fa14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	3320      	adds	r3, #32
 800f9fe:	2102      	movs	r1, #2
 800fa00:	4618      	mov	r0, r3
 800fa02:	f000 f925 	bl	800fc50 <RCCEx_PLLSAI2_Config>
 800fa06:	4603      	mov	r3, r0
 800fa08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800fa0a:	7cfb      	ldrb	r3, [r7, #19]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d001      	beq.n	800fa14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800fa10:	7cfb      	ldrb	r3, [r7, #19]
 800fa12:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d00a      	beq.n	800fa36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800fa20:	4b10      	ldr	r3, [pc, #64]	@ (800fa64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800fa22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fa26:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fa2e:	490d      	ldr	r1, [pc, #52]	@ (800fa64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800fa30:	4313      	orrs	r3, r2
 800fa32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d00b      	beq.n	800fa5a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800fa42:	4b08      	ldr	r3, [pc, #32]	@ (800fa64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800fa44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fa48:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa52:	4904      	ldr	r1, [pc, #16]	@ (800fa64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800fa54:	4313      	orrs	r3, r2
 800fa56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800fa5a:	7cbb      	ldrb	r3, [r7, #18]
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3718      	adds	r7, #24
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}
 800fa64:	40021000 	.word	0x40021000

0800fa68 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b084      	sub	sp, #16
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
 800fa70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fa72:	2300      	movs	r3, #0
 800fa74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800fa76:	4b75      	ldr	r3, [pc, #468]	@ (800fc4c <RCCEx_PLLSAI1_Config+0x1e4>)
 800fa78:	68db      	ldr	r3, [r3, #12]
 800fa7a:	f003 0303 	and.w	r3, r3, #3
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d018      	beq.n	800fab4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800fa82:	4b72      	ldr	r3, [pc, #456]	@ (800fc4c <RCCEx_PLLSAI1_Config+0x1e4>)
 800fa84:	68db      	ldr	r3, [r3, #12]
 800fa86:	f003 0203 	and.w	r2, r3, #3
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d10d      	bne.n	800faae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	681b      	ldr	r3, [r3, #0]
       ||
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d009      	beq.n	800faae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800fa9a:	4b6c      	ldr	r3, [pc, #432]	@ (800fc4c <RCCEx_PLLSAI1_Config+0x1e4>)
 800fa9c:	68db      	ldr	r3, [r3, #12]
 800fa9e:	091b      	lsrs	r3, r3, #4
 800faa0:	f003 0307 	and.w	r3, r3, #7
 800faa4:	1c5a      	adds	r2, r3, #1
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	685b      	ldr	r3, [r3, #4]
       ||
 800faaa:	429a      	cmp	r2, r3
 800faac:	d047      	beq.n	800fb3e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800faae:	2301      	movs	r3, #1
 800fab0:	73fb      	strb	r3, [r7, #15]
 800fab2:	e044      	b.n	800fb3e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	2b03      	cmp	r3, #3
 800faba:	d018      	beq.n	800faee <RCCEx_PLLSAI1_Config+0x86>
 800fabc:	2b03      	cmp	r3, #3
 800fabe:	d825      	bhi.n	800fb0c <RCCEx_PLLSAI1_Config+0xa4>
 800fac0:	2b01      	cmp	r3, #1
 800fac2:	d002      	beq.n	800faca <RCCEx_PLLSAI1_Config+0x62>
 800fac4:	2b02      	cmp	r3, #2
 800fac6:	d009      	beq.n	800fadc <RCCEx_PLLSAI1_Config+0x74>
 800fac8:	e020      	b.n	800fb0c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800faca:	4b60      	ldr	r3, [pc, #384]	@ (800fc4c <RCCEx_PLLSAI1_Config+0x1e4>)
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	f003 0302 	and.w	r3, r3, #2
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d11d      	bne.n	800fb12 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800fad6:	2301      	movs	r3, #1
 800fad8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fada:	e01a      	b.n	800fb12 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800fadc:	4b5b      	ldr	r3, [pc, #364]	@ (800fc4c <RCCEx_PLLSAI1_Config+0x1e4>)
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d116      	bne.n	800fb16 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800fae8:	2301      	movs	r3, #1
 800faea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800faec:	e013      	b.n	800fb16 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800faee:	4b57      	ldr	r3, [pc, #348]	@ (800fc4c <RCCEx_PLLSAI1_Config+0x1e4>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d10f      	bne.n	800fb1a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800fafa:	4b54      	ldr	r3, [pc, #336]	@ (800fc4c <RCCEx_PLLSAI1_Config+0x1e4>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d109      	bne.n	800fb1a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800fb06:	2301      	movs	r3, #1
 800fb08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800fb0a:	e006      	b.n	800fb1a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800fb0c:	2301      	movs	r3, #1
 800fb0e:	73fb      	strb	r3, [r7, #15]
      break;
 800fb10:	e004      	b.n	800fb1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800fb12:	bf00      	nop
 800fb14:	e002      	b.n	800fb1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800fb16:	bf00      	nop
 800fb18:	e000      	b.n	800fb1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800fb1a:	bf00      	nop
    }

    if(status == HAL_OK)
 800fb1c:	7bfb      	ldrb	r3, [r7, #15]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d10d      	bne.n	800fb3e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800fb22:	4b4a      	ldr	r3, [pc, #296]	@ (800fc4c <RCCEx_PLLSAI1_Config+0x1e4>)
 800fb24:	68db      	ldr	r3, [r3, #12]
 800fb26:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	6819      	ldr	r1, [r3, #0]
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	685b      	ldr	r3, [r3, #4]
 800fb32:	3b01      	subs	r3, #1
 800fb34:	011b      	lsls	r3, r3, #4
 800fb36:	430b      	orrs	r3, r1
 800fb38:	4944      	ldr	r1, [pc, #272]	@ (800fc4c <RCCEx_PLLSAI1_Config+0x1e4>)
 800fb3a:	4313      	orrs	r3, r2
 800fb3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800fb3e:	7bfb      	ldrb	r3, [r7, #15]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d17d      	bne.n	800fc40 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800fb44:	4b41      	ldr	r3, [pc, #260]	@ (800fc4c <RCCEx_PLLSAI1_Config+0x1e4>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	4a40      	ldr	r2, [pc, #256]	@ (800fc4c <RCCEx_PLLSAI1_Config+0x1e4>)
 800fb4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800fb4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fb50:	f7fc fe0c 	bl	800c76c <HAL_GetTick>
 800fb54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800fb56:	e009      	b.n	800fb6c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fb58:	f7fc fe08 	bl	800c76c <HAL_GetTick>
 800fb5c:	4602      	mov	r2, r0
 800fb5e:	68bb      	ldr	r3, [r7, #8]
 800fb60:	1ad3      	subs	r3, r2, r3
 800fb62:	2b02      	cmp	r3, #2
 800fb64:	d902      	bls.n	800fb6c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800fb66:	2303      	movs	r3, #3
 800fb68:	73fb      	strb	r3, [r7, #15]
        break;
 800fb6a:	e005      	b.n	800fb78 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800fb6c:	4b37      	ldr	r3, [pc, #220]	@ (800fc4c <RCCEx_PLLSAI1_Config+0x1e4>)
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d1ef      	bne.n	800fb58 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800fb78:	7bfb      	ldrb	r3, [r7, #15]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d160      	bne.n	800fc40 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d111      	bne.n	800fba8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800fb84:	4b31      	ldr	r3, [pc, #196]	@ (800fc4c <RCCEx_PLLSAI1_Config+0x1e4>)
 800fb86:	691b      	ldr	r3, [r3, #16]
 800fb88:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800fb8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fb90:	687a      	ldr	r2, [r7, #4]
 800fb92:	6892      	ldr	r2, [r2, #8]
 800fb94:	0211      	lsls	r1, r2, #8
 800fb96:	687a      	ldr	r2, [r7, #4]
 800fb98:	68d2      	ldr	r2, [r2, #12]
 800fb9a:	0912      	lsrs	r2, r2, #4
 800fb9c:	0452      	lsls	r2, r2, #17
 800fb9e:	430a      	orrs	r2, r1
 800fba0:	492a      	ldr	r1, [pc, #168]	@ (800fc4c <RCCEx_PLLSAI1_Config+0x1e4>)
 800fba2:	4313      	orrs	r3, r2
 800fba4:	610b      	str	r3, [r1, #16]
 800fba6:	e027      	b.n	800fbf8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	2b01      	cmp	r3, #1
 800fbac:	d112      	bne.n	800fbd4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800fbae:	4b27      	ldr	r3, [pc, #156]	@ (800fc4c <RCCEx_PLLSAI1_Config+0x1e4>)
 800fbb0:	691b      	ldr	r3, [r3, #16]
 800fbb2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800fbb6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800fbba:	687a      	ldr	r2, [r7, #4]
 800fbbc:	6892      	ldr	r2, [r2, #8]
 800fbbe:	0211      	lsls	r1, r2, #8
 800fbc0:	687a      	ldr	r2, [r7, #4]
 800fbc2:	6912      	ldr	r2, [r2, #16]
 800fbc4:	0852      	lsrs	r2, r2, #1
 800fbc6:	3a01      	subs	r2, #1
 800fbc8:	0552      	lsls	r2, r2, #21
 800fbca:	430a      	orrs	r2, r1
 800fbcc:	491f      	ldr	r1, [pc, #124]	@ (800fc4c <RCCEx_PLLSAI1_Config+0x1e4>)
 800fbce:	4313      	orrs	r3, r2
 800fbd0:	610b      	str	r3, [r1, #16]
 800fbd2:	e011      	b.n	800fbf8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800fbd4:	4b1d      	ldr	r3, [pc, #116]	@ (800fc4c <RCCEx_PLLSAI1_Config+0x1e4>)
 800fbd6:	691b      	ldr	r3, [r3, #16]
 800fbd8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800fbdc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800fbe0:	687a      	ldr	r2, [r7, #4]
 800fbe2:	6892      	ldr	r2, [r2, #8]
 800fbe4:	0211      	lsls	r1, r2, #8
 800fbe6:	687a      	ldr	r2, [r7, #4]
 800fbe8:	6952      	ldr	r2, [r2, #20]
 800fbea:	0852      	lsrs	r2, r2, #1
 800fbec:	3a01      	subs	r2, #1
 800fbee:	0652      	lsls	r2, r2, #25
 800fbf0:	430a      	orrs	r2, r1
 800fbf2:	4916      	ldr	r1, [pc, #88]	@ (800fc4c <RCCEx_PLLSAI1_Config+0x1e4>)
 800fbf4:	4313      	orrs	r3, r2
 800fbf6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800fbf8:	4b14      	ldr	r3, [pc, #80]	@ (800fc4c <RCCEx_PLLSAI1_Config+0x1e4>)
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	4a13      	ldr	r2, [pc, #76]	@ (800fc4c <RCCEx_PLLSAI1_Config+0x1e4>)
 800fbfe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800fc02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fc04:	f7fc fdb2 	bl	800c76c <HAL_GetTick>
 800fc08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800fc0a:	e009      	b.n	800fc20 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fc0c:	f7fc fdae 	bl	800c76c <HAL_GetTick>
 800fc10:	4602      	mov	r2, r0
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	1ad3      	subs	r3, r2, r3
 800fc16:	2b02      	cmp	r3, #2
 800fc18:	d902      	bls.n	800fc20 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800fc1a:	2303      	movs	r3, #3
 800fc1c:	73fb      	strb	r3, [r7, #15]
          break;
 800fc1e:	e005      	b.n	800fc2c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800fc20:	4b0a      	ldr	r3, [pc, #40]	@ (800fc4c <RCCEx_PLLSAI1_Config+0x1e4>)
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d0ef      	beq.n	800fc0c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800fc2c:	7bfb      	ldrb	r3, [r7, #15]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d106      	bne.n	800fc40 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800fc32:	4b06      	ldr	r3, [pc, #24]	@ (800fc4c <RCCEx_PLLSAI1_Config+0x1e4>)
 800fc34:	691a      	ldr	r2, [r3, #16]
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	699b      	ldr	r3, [r3, #24]
 800fc3a:	4904      	ldr	r1, [pc, #16]	@ (800fc4c <RCCEx_PLLSAI1_Config+0x1e4>)
 800fc3c:	4313      	orrs	r3, r2
 800fc3e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800fc40:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc42:	4618      	mov	r0, r3
 800fc44:	3710      	adds	r7, #16
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}
 800fc4a:	bf00      	nop
 800fc4c:	40021000 	.word	0x40021000

0800fc50 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b084      	sub	sp, #16
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	6078      	str	r0, [r7, #4]
 800fc58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800fc5e:	4b6a      	ldr	r3, [pc, #424]	@ (800fe08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fc60:	68db      	ldr	r3, [r3, #12]
 800fc62:	f003 0303 	and.w	r3, r3, #3
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d018      	beq.n	800fc9c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800fc6a:	4b67      	ldr	r3, [pc, #412]	@ (800fe08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fc6c:	68db      	ldr	r3, [r3, #12]
 800fc6e:	f003 0203 	and.w	r2, r3, #3
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	429a      	cmp	r2, r3
 800fc78:	d10d      	bne.n	800fc96 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
       ||
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d009      	beq.n	800fc96 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800fc82:	4b61      	ldr	r3, [pc, #388]	@ (800fe08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fc84:	68db      	ldr	r3, [r3, #12]
 800fc86:	091b      	lsrs	r3, r3, #4
 800fc88:	f003 0307 	and.w	r3, r3, #7
 800fc8c:	1c5a      	adds	r2, r3, #1
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	685b      	ldr	r3, [r3, #4]
       ||
 800fc92:	429a      	cmp	r2, r3
 800fc94:	d047      	beq.n	800fd26 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800fc96:	2301      	movs	r3, #1
 800fc98:	73fb      	strb	r3, [r7, #15]
 800fc9a:	e044      	b.n	800fd26 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	2b03      	cmp	r3, #3
 800fca2:	d018      	beq.n	800fcd6 <RCCEx_PLLSAI2_Config+0x86>
 800fca4:	2b03      	cmp	r3, #3
 800fca6:	d825      	bhi.n	800fcf4 <RCCEx_PLLSAI2_Config+0xa4>
 800fca8:	2b01      	cmp	r3, #1
 800fcaa:	d002      	beq.n	800fcb2 <RCCEx_PLLSAI2_Config+0x62>
 800fcac:	2b02      	cmp	r3, #2
 800fcae:	d009      	beq.n	800fcc4 <RCCEx_PLLSAI2_Config+0x74>
 800fcb0:	e020      	b.n	800fcf4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800fcb2:	4b55      	ldr	r3, [pc, #340]	@ (800fe08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	f003 0302 	and.w	r3, r3, #2
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d11d      	bne.n	800fcfa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800fcbe:	2301      	movs	r3, #1
 800fcc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fcc2:	e01a      	b.n	800fcfa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800fcc4:	4b50      	ldr	r3, [pc, #320]	@ (800fe08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d116      	bne.n	800fcfe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800fcd0:	2301      	movs	r3, #1
 800fcd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800fcd4:	e013      	b.n	800fcfe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800fcd6:	4b4c      	ldr	r3, [pc, #304]	@ (800fe08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d10f      	bne.n	800fd02 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800fce2:	4b49      	ldr	r3, [pc, #292]	@ (800fe08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d109      	bne.n	800fd02 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800fcee:	2301      	movs	r3, #1
 800fcf0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800fcf2:	e006      	b.n	800fd02 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800fcf4:	2301      	movs	r3, #1
 800fcf6:	73fb      	strb	r3, [r7, #15]
      break;
 800fcf8:	e004      	b.n	800fd04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800fcfa:	bf00      	nop
 800fcfc:	e002      	b.n	800fd04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800fcfe:	bf00      	nop
 800fd00:	e000      	b.n	800fd04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800fd02:	bf00      	nop
    }

    if(status == HAL_OK)
 800fd04:	7bfb      	ldrb	r3, [r7, #15]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d10d      	bne.n	800fd26 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800fd0a:	4b3f      	ldr	r3, [pc, #252]	@ (800fe08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fd0c:	68db      	ldr	r3, [r3, #12]
 800fd0e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	6819      	ldr	r1, [r3, #0]
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	685b      	ldr	r3, [r3, #4]
 800fd1a:	3b01      	subs	r3, #1
 800fd1c:	011b      	lsls	r3, r3, #4
 800fd1e:	430b      	orrs	r3, r1
 800fd20:	4939      	ldr	r1, [pc, #228]	@ (800fe08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fd22:	4313      	orrs	r3, r2
 800fd24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800fd26:	7bfb      	ldrb	r3, [r7, #15]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d167      	bne.n	800fdfc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800fd2c:	4b36      	ldr	r3, [pc, #216]	@ (800fe08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	4a35      	ldr	r2, [pc, #212]	@ (800fe08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fd32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fd36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fd38:	f7fc fd18 	bl	800c76c <HAL_GetTick>
 800fd3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800fd3e:	e009      	b.n	800fd54 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800fd40:	f7fc fd14 	bl	800c76c <HAL_GetTick>
 800fd44:	4602      	mov	r2, r0
 800fd46:	68bb      	ldr	r3, [r7, #8]
 800fd48:	1ad3      	subs	r3, r2, r3
 800fd4a:	2b02      	cmp	r3, #2
 800fd4c:	d902      	bls.n	800fd54 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800fd4e:	2303      	movs	r3, #3
 800fd50:	73fb      	strb	r3, [r7, #15]
        break;
 800fd52:	e005      	b.n	800fd60 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800fd54:	4b2c      	ldr	r3, [pc, #176]	@ (800fe08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d1ef      	bne.n	800fd40 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800fd60:	7bfb      	ldrb	r3, [r7, #15]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d14a      	bne.n	800fdfc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d111      	bne.n	800fd90 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800fd6c:	4b26      	ldr	r3, [pc, #152]	@ (800fe08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fd6e:	695b      	ldr	r3, [r3, #20]
 800fd70:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800fd74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fd78:	687a      	ldr	r2, [r7, #4]
 800fd7a:	6892      	ldr	r2, [r2, #8]
 800fd7c:	0211      	lsls	r1, r2, #8
 800fd7e:	687a      	ldr	r2, [r7, #4]
 800fd80:	68d2      	ldr	r2, [r2, #12]
 800fd82:	0912      	lsrs	r2, r2, #4
 800fd84:	0452      	lsls	r2, r2, #17
 800fd86:	430a      	orrs	r2, r1
 800fd88:	491f      	ldr	r1, [pc, #124]	@ (800fe08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fd8a:	4313      	orrs	r3, r2
 800fd8c:	614b      	str	r3, [r1, #20]
 800fd8e:	e011      	b.n	800fdb4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800fd90:	4b1d      	ldr	r3, [pc, #116]	@ (800fe08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fd92:	695b      	ldr	r3, [r3, #20]
 800fd94:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800fd98:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800fd9c:	687a      	ldr	r2, [r7, #4]
 800fd9e:	6892      	ldr	r2, [r2, #8]
 800fda0:	0211      	lsls	r1, r2, #8
 800fda2:	687a      	ldr	r2, [r7, #4]
 800fda4:	6912      	ldr	r2, [r2, #16]
 800fda6:	0852      	lsrs	r2, r2, #1
 800fda8:	3a01      	subs	r2, #1
 800fdaa:	0652      	lsls	r2, r2, #25
 800fdac:	430a      	orrs	r2, r1
 800fdae:	4916      	ldr	r1, [pc, #88]	@ (800fe08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fdb0:	4313      	orrs	r3, r2
 800fdb2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800fdb4:	4b14      	ldr	r3, [pc, #80]	@ (800fe08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	4a13      	ldr	r2, [pc, #76]	@ (800fe08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fdba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fdbe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fdc0:	f7fc fcd4 	bl	800c76c <HAL_GetTick>
 800fdc4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800fdc6:	e009      	b.n	800fddc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800fdc8:	f7fc fcd0 	bl	800c76c <HAL_GetTick>
 800fdcc:	4602      	mov	r2, r0
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	1ad3      	subs	r3, r2, r3
 800fdd2:	2b02      	cmp	r3, #2
 800fdd4:	d902      	bls.n	800fddc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800fdd6:	2303      	movs	r3, #3
 800fdd8:	73fb      	strb	r3, [r7, #15]
          break;
 800fdda:	e005      	b.n	800fde8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800fddc:	4b0a      	ldr	r3, [pc, #40]	@ (800fe08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d0ef      	beq.n	800fdc8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800fde8:	7bfb      	ldrb	r3, [r7, #15]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d106      	bne.n	800fdfc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800fdee:	4b06      	ldr	r3, [pc, #24]	@ (800fe08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fdf0:	695a      	ldr	r2, [r3, #20]
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	695b      	ldr	r3, [r3, #20]
 800fdf6:	4904      	ldr	r1, [pc, #16]	@ (800fe08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800fdf8:	4313      	orrs	r3, r2
 800fdfa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800fdfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3710      	adds	r7, #16
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}
 800fe06:	bf00      	nop
 800fe08:	40021000 	.word	0x40021000

0800fe0c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b084      	sub	sp, #16
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800fe14:	2301      	movs	r3, #1
 800fe16:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d079      	beq.n	800ff12 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800fe24:	b2db      	uxtb	r3, r3
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d106      	bne.n	800fe38 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800fe32:	6878      	ldr	r0, [r7, #4]
 800fe34:	f7f1 fb38 	bl	80014a8 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	2202      	movs	r2, #2
 800fe3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	68db      	ldr	r3, [r3, #12]
 800fe46:	f003 0310 	and.w	r3, r3, #16
 800fe4a:	2b10      	cmp	r3, #16
 800fe4c:	d058      	beq.n	800ff00 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	22ca      	movs	r2, #202	@ 0xca
 800fe54:	625a      	str	r2, [r3, #36]	@ 0x24
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	2253      	movs	r2, #83	@ 0x53
 800fe5c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800fe5e:	6878      	ldr	r0, [r7, #4]
 800fe60:	f000 f9a4 	bl	80101ac <RTC_EnterInitMode>
 800fe64:	4603      	mov	r3, r0
 800fe66:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800fe68:	7bfb      	ldrb	r3, [r7, #15]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d127      	bne.n	800febe <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	689b      	ldr	r3, [r3, #8]
 800fe74:	687a      	ldr	r2, [r7, #4]
 800fe76:	6812      	ldr	r2, [r2, #0]
 800fe78:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800fe7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fe80:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	6899      	ldr	r1, [r3, #8]
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	685a      	ldr	r2, [r3, #4]
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	691b      	ldr	r3, [r3, #16]
 800fe90:	431a      	orrs	r2, r3
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	699b      	ldr	r3, [r3, #24]
 800fe96:	431a      	orrs	r2, r3
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	430a      	orrs	r2, r1
 800fe9e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	687a      	ldr	r2, [r7, #4]
 800fea6:	68d2      	ldr	r2, [r2, #12]
 800fea8:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	6919      	ldr	r1, [r3, #16]
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	689b      	ldr	r3, [r3, #8]
 800feb4:	041a      	lsls	r2, r3, #16
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	430a      	orrs	r2, r1
 800febc:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800febe:	6878      	ldr	r0, [r7, #4]
 800fec0:	f000 f9a8 	bl	8010214 <RTC_ExitInitMode>
 800fec4:	4603      	mov	r3, r0
 800fec6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800fec8:	7bfb      	ldrb	r3, [r7, #15]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d113      	bne.n	800fef6 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	f022 0203 	bic.w	r2, r2, #3
 800fedc:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	69da      	ldr	r2, [r3, #28]
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	695b      	ldr	r3, [r3, #20]
 800feec:	431a      	orrs	r2, r3
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	430a      	orrs	r2, r1
 800fef4:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	22ff      	movs	r2, #255	@ 0xff
 800fefc:	625a      	str	r2, [r3, #36]	@ 0x24
 800fefe:	e001      	b.n	800ff04 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800ff00:	2300      	movs	r3, #0
 800ff02:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800ff04:	7bfb      	ldrb	r3, [r7, #15]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d103      	bne.n	800ff12 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2201      	movs	r2, #1
 800ff0e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 800ff12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff14:	4618      	mov	r0, r3
 800ff16:	3710      	adds	r7, #16
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	bd80      	pop	{r7, pc}

0800ff1c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ff1c:	b590      	push	{r4, r7, lr}
 800ff1e:	b087      	sub	sp, #28
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	60f8      	str	r0, [r7, #12]
 800ff24:	60b9      	str	r1, [r7, #8]
 800ff26:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ff2e:	2b01      	cmp	r3, #1
 800ff30:	d101      	bne.n	800ff36 <HAL_RTC_SetTime+0x1a>
 800ff32:	2302      	movs	r3, #2
 800ff34:	e08b      	b.n	801004e <HAL_RTC_SetTime+0x132>
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	2201      	movs	r2, #1
 800ff3a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	2202      	movs	r2, #2
 800ff42:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	22ca      	movs	r2, #202	@ 0xca
 800ff4c:	625a      	str	r2, [r3, #36]	@ 0x24
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	2253      	movs	r2, #83	@ 0x53
 800ff54:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ff56:	68f8      	ldr	r0, [r7, #12]
 800ff58:	f000 f928 	bl	80101ac <RTC_EnterInitMode>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800ff60:	7cfb      	ldrb	r3, [r7, #19]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d163      	bne.n	801002e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d126      	bne.n	800ffba <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	689b      	ldr	r3, [r3, #8]
 800ff72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d102      	bne.n	800ff80 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ff80:	68bb      	ldr	r3, [r7, #8]
 800ff82:	781b      	ldrb	r3, [r3, #0]
 800ff84:	4618      	mov	r0, r3
 800ff86:	f000 f983 	bl	8010290 <RTC_ByteToBcd2>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	785b      	ldrb	r3, [r3, #1]
 800ff92:	4618      	mov	r0, r3
 800ff94:	f000 f97c 	bl	8010290 <RTC_ByteToBcd2>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ff9c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	789b      	ldrb	r3, [r3, #2]
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f000 f974 	bl	8010290 <RTC_ByteToBcd2>
 800ffa8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ffaa:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	78db      	ldrb	r3, [r3, #3]
 800ffb2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ffb4:	4313      	orrs	r3, r2
 800ffb6:	617b      	str	r3, [r7, #20]
 800ffb8:	e018      	b.n	800ffec <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	689b      	ldr	r3, [r3, #8]
 800ffc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d102      	bne.n	800ffce <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	2200      	movs	r2, #0
 800ffcc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	781b      	ldrb	r3, [r3, #0]
 800ffd2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	785b      	ldrb	r3, [r3, #1]
 800ffd8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ffda:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800ffdc:	68ba      	ldr	r2, [r7, #8]
 800ffde:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ffe0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ffe2:	68bb      	ldr	r3, [r7, #8]
 800ffe4:	78db      	ldrb	r3, [r3, #3]
 800ffe6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ffe8:	4313      	orrs	r3, r2
 800ffea:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	681a      	ldr	r2, [r3, #0]
 800fff0:	697b      	ldr	r3, [r7, #20]
 800fff2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800fff6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800fffa:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	689a      	ldr	r2, [r3, #8]
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 801000a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	6899      	ldr	r1, [r3, #8]
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	68da      	ldr	r2, [r3, #12]
 8010016:	68bb      	ldr	r3, [r7, #8]
 8010018:	691b      	ldr	r3, [r3, #16]
 801001a:	431a      	orrs	r2, r3
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	430a      	orrs	r2, r1
 8010022:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010024:	68f8      	ldr	r0, [r7, #12]
 8010026:	f000 f8f5 	bl	8010214 <RTC_ExitInitMode>
 801002a:	4603      	mov	r3, r0
 801002c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	22ff      	movs	r2, #255	@ 0xff
 8010034:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8010036:	7cfb      	ldrb	r3, [r7, #19]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d103      	bne.n	8010044 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	2201      	movs	r2, #1
 8010040:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	2200      	movs	r2, #0
 8010048:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 801004c:	7cfb      	ldrb	r3, [r7, #19]
}
 801004e:	4618      	mov	r0, r3
 8010050:	371c      	adds	r7, #28
 8010052:	46bd      	mov	sp, r7
 8010054:	bd90      	pop	{r4, r7, pc}

08010056 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010056:	b590      	push	{r4, r7, lr}
 8010058:	b087      	sub	sp, #28
 801005a:	af00      	add	r7, sp, #0
 801005c:	60f8      	str	r0, [r7, #12]
 801005e:	60b9      	str	r1, [r7, #8]
 8010060:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010068:	2b01      	cmp	r3, #1
 801006a:	d101      	bne.n	8010070 <HAL_RTC_SetDate+0x1a>
 801006c:	2302      	movs	r3, #2
 801006e:	e075      	b.n	801015c <HAL_RTC_SetDate+0x106>
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	2201      	movs	r2, #1
 8010074:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	2202      	movs	r2, #2
 801007c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d10e      	bne.n	80100a4 <HAL_RTC_SetDate+0x4e>
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	785b      	ldrb	r3, [r3, #1]
 801008a:	f003 0310 	and.w	r3, r3, #16
 801008e:	2b00      	cmp	r3, #0
 8010090:	d008      	beq.n	80100a4 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8010092:	68bb      	ldr	r3, [r7, #8]
 8010094:	785b      	ldrb	r3, [r3, #1]
 8010096:	f023 0310 	bic.w	r3, r3, #16
 801009a:	b2db      	uxtb	r3, r3
 801009c:	330a      	adds	r3, #10
 801009e:	b2da      	uxtb	r2, r3
 80100a0:	68bb      	ldr	r3, [r7, #8]
 80100a2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d11c      	bne.n	80100e4 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80100aa:	68bb      	ldr	r3, [r7, #8]
 80100ac:	78db      	ldrb	r3, [r3, #3]
 80100ae:	4618      	mov	r0, r3
 80100b0:	f000 f8ee 	bl	8010290 <RTC_ByteToBcd2>
 80100b4:	4603      	mov	r3, r0
 80100b6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	785b      	ldrb	r3, [r3, #1]
 80100bc:	4618      	mov	r0, r3
 80100be:	f000 f8e7 	bl	8010290 <RTC_ByteToBcd2>
 80100c2:	4603      	mov	r3, r0
 80100c4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80100c6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80100c8:	68bb      	ldr	r3, [r7, #8]
 80100ca:	789b      	ldrb	r3, [r3, #2]
 80100cc:	4618      	mov	r0, r3
 80100ce:	f000 f8df 	bl	8010290 <RTC_ByteToBcd2>
 80100d2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80100d4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80100d8:	68bb      	ldr	r3, [r7, #8]
 80100da:	781b      	ldrb	r3, [r3, #0]
 80100dc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80100de:	4313      	orrs	r3, r2
 80100e0:	617b      	str	r3, [r7, #20]
 80100e2:	e00e      	b.n	8010102 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80100e4:	68bb      	ldr	r3, [r7, #8]
 80100e6:	78db      	ldrb	r3, [r3, #3]
 80100e8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80100ea:	68bb      	ldr	r3, [r7, #8]
 80100ec:	785b      	ldrb	r3, [r3, #1]
 80100ee:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80100f0:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80100f2:	68ba      	ldr	r2, [r7, #8]
 80100f4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80100f6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	781b      	ldrb	r3, [r3, #0]
 80100fc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80100fe:	4313      	orrs	r3, r2
 8010100:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	22ca      	movs	r2, #202	@ 0xca
 8010108:	625a      	str	r2, [r3, #36]	@ 0x24
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	2253      	movs	r2, #83	@ 0x53
 8010110:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010112:	68f8      	ldr	r0, [r7, #12]
 8010114:	f000 f84a 	bl	80101ac <RTC_EnterInitMode>
 8010118:	4603      	mov	r3, r0
 801011a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 801011c:	7cfb      	ldrb	r3, [r7, #19]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d10c      	bne.n	801013c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	681a      	ldr	r2, [r3, #0]
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 801012c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010130:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010132:	68f8      	ldr	r0, [r7, #12]
 8010134:	f000 f86e 	bl	8010214 <RTC_ExitInitMode>
 8010138:	4603      	mov	r3, r0
 801013a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	22ff      	movs	r2, #255	@ 0xff
 8010142:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8010144:	7cfb      	ldrb	r3, [r7, #19]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d103      	bne.n	8010152 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	2201      	movs	r2, #1
 801014e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	2200      	movs	r2, #0
 8010156:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 801015a:	7cfb      	ldrb	r3, [r7, #19]
}
 801015c:	4618      	mov	r0, r3
 801015e:	371c      	adds	r7, #28
 8010160:	46bd      	mov	sp, r7
 8010162:	bd90      	pop	{r4, r7, pc}

08010164 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8010164:	b580      	push	{r7, lr}
 8010166:	b084      	sub	sp, #16
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	4a0d      	ldr	r2, [pc, #52]	@ (80101a8 <HAL_RTC_WaitForSynchro+0x44>)
 8010172:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8010174:	f7fc fafa 	bl	800c76c <HAL_GetTick>
 8010178:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801017a:	e009      	b.n	8010190 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801017c:	f7fc faf6 	bl	800c76c <HAL_GetTick>
 8010180:	4602      	mov	r2, r0
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	1ad3      	subs	r3, r2, r3
 8010186:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801018a:	d901      	bls.n	8010190 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 801018c:	2303      	movs	r3, #3
 801018e:	e007      	b.n	80101a0 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	68db      	ldr	r3, [r3, #12]
 8010196:	f003 0320 	and.w	r3, r3, #32
 801019a:	2b00      	cmp	r3, #0
 801019c:	d0ee      	beq.n	801017c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 801019e:	2300      	movs	r3, #0
}
 80101a0:	4618      	mov	r0, r3
 80101a2:	3710      	adds	r7, #16
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}
 80101a8:	0003ff5f 	.word	0x0003ff5f

080101ac <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b084      	sub	sp, #16
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80101b4:	2300      	movs	r3, #0
 80101b6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	68db      	ldr	r3, [r3, #12]
 80101be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d120      	bne.n	8010208 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	f04f 32ff 	mov.w	r2, #4294967295
 80101ce:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80101d0:	f7fc facc 	bl	800c76c <HAL_GetTick>
 80101d4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80101d6:	e00d      	b.n	80101f4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80101d8:	f7fc fac8 	bl	800c76c <HAL_GetTick>
 80101dc:	4602      	mov	r2, r0
 80101de:	68bb      	ldr	r3, [r7, #8]
 80101e0:	1ad3      	subs	r3, r2, r3
 80101e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80101e6:	d905      	bls.n	80101f4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80101e8:	2303      	movs	r3, #3
 80101ea:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2203      	movs	r2, #3
 80101f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	68db      	ldr	r3, [r3, #12]
 80101fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d102      	bne.n	8010208 <RTC_EnterInitMode+0x5c>
 8010202:	7bfb      	ldrb	r3, [r7, #15]
 8010204:	2b03      	cmp	r3, #3
 8010206:	d1e7      	bne.n	80101d8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8010208:	7bfb      	ldrb	r3, [r7, #15]
}
 801020a:	4618      	mov	r0, r3
 801020c:	3710      	adds	r7, #16
 801020e:	46bd      	mov	sp, r7
 8010210:	bd80      	pop	{r7, pc}
	...

08010214 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b084      	sub	sp, #16
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801021c:	2300      	movs	r3, #0
 801021e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8010220:	4b1a      	ldr	r3, [pc, #104]	@ (801028c <RTC_ExitInitMode+0x78>)
 8010222:	68db      	ldr	r3, [r3, #12]
 8010224:	4a19      	ldr	r2, [pc, #100]	@ (801028c <RTC_ExitInitMode+0x78>)
 8010226:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801022a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 801022c:	4b17      	ldr	r3, [pc, #92]	@ (801028c <RTC_ExitInitMode+0x78>)
 801022e:	689b      	ldr	r3, [r3, #8]
 8010230:	f003 0320 	and.w	r3, r3, #32
 8010234:	2b00      	cmp	r3, #0
 8010236:	d10c      	bne.n	8010252 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010238:	6878      	ldr	r0, [r7, #4]
 801023a:	f7ff ff93 	bl	8010164 <HAL_RTC_WaitForSynchro>
 801023e:	4603      	mov	r3, r0
 8010240:	2b00      	cmp	r3, #0
 8010242:	d01e      	beq.n	8010282 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	2203      	movs	r2, #3
 8010248:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 801024c:	2303      	movs	r3, #3
 801024e:	73fb      	strb	r3, [r7, #15]
 8010250:	e017      	b.n	8010282 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8010252:	4b0e      	ldr	r3, [pc, #56]	@ (801028c <RTC_ExitInitMode+0x78>)
 8010254:	689b      	ldr	r3, [r3, #8]
 8010256:	4a0d      	ldr	r2, [pc, #52]	@ (801028c <RTC_ExitInitMode+0x78>)
 8010258:	f023 0320 	bic.w	r3, r3, #32
 801025c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801025e:	6878      	ldr	r0, [r7, #4]
 8010260:	f7ff ff80 	bl	8010164 <HAL_RTC_WaitForSynchro>
 8010264:	4603      	mov	r3, r0
 8010266:	2b00      	cmp	r3, #0
 8010268:	d005      	beq.n	8010276 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	2203      	movs	r2, #3
 801026e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8010272:	2303      	movs	r3, #3
 8010274:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8010276:	4b05      	ldr	r3, [pc, #20]	@ (801028c <RTC_ExitInitMode+0x78>)
 8010278:	689b      	ldr	r3, [r3, #8]
 801027a:	4a04      	ldr	r2, [pc, #16]	@ (801028c <RTC_ExitInitMode+0x78>)
 801027c:	f043 0320 	orr.w	r3, r3, #32
 8010280:	6093      	str	r3, [r2, #8]
  }

  return status;
 8010282:	7bfb      	ldrb	r3, [r7, #15]
}
 8010284:	4618      	mov	r0, r3
 8010286:	3710      	adds	r7, #16
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}
 801028c:	40002800 	.word	0x40002800

08010290 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8010290:	b480      	push	{r7}
 8010292:	b085      	sub	sp, #20
 8010294:	af00      	add	r7, sp, #0
 8010296:	4603      	mov	r3, r0
 8010298:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 801029a:	2300      	movs	r3, #0
 801029c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 801029e:	79fb      	ldrb	r3, [r7, #7]
 80102a0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80102a2:	e005      	b.n	80102b0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	3301      	adds	r3, #1
 80102a8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80102aa:	7afb      	ldrb	r3, [r7, #11]
 80102ac:	3b0a      	subs	r3, #10
 80102ae:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80102b0:	7afb      	ldrb	r3, [r7, #11]
 80102b2:	2b09      	cmp	r3, #9
 80102b4:	d8f6      	bhi.n	80102a4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	b2db      	uxtb	r3, r3
 80102ba:	011b      	lsls	r3, r3, #4
 80102bc:	b2da      	uxtb	r2, r3
 80102be:	7afb      	ldrb	r3, [r7, #11]
 80102c0:	4313      	orrs	r3, r2
 80102c2:	b2db      	uxtb	r3, r3
}
 80102c4:	4618      	mov	r0, r3
 80102c6:	3714      	adds	r7, #20
 80102c8:	46bd      	mov	sp, r7
 80102ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ce:	4770      	bx	lr

080102d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b084      	sub	sp, #16
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d101      	bne.n	80102e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80102de:	2301      	movs	r3, #1
 80102e0:	e095      	b.n	801040e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d108      	bne.n	80102fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	685b      	ldr	r3, [r3, #4]
 80102ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80102f2:	d009      	beq.n	8010308 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2200      	movs	r2, #0
 80102f8:	61da      	str	r2, [r3, #28]
 80102fa:	e005      	b.n	8010308 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2200      	movs	r2, #0
 8010300:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	2200      	movs	r2, #0
 8010306:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	2200      	movs	r2, #0
 801030c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8010314:	b2db      	uxtb	r3, r3
 8010316:	2b00      	cmp	r3, #0
 8010318:	d106      	bne.n	8010328 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	2200      	movs	r2, #0
 801031e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	f7f1 f8f2 	bl	800150c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	2202      	movs	r2, #2
 801032c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	681a      	ldr	r2, [r3, #0]
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801033e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	68db      	ldr	r3, [r3, #12]
 8010344:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8010348:	d902      	bls.n	8010350 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801034a:	2300      	movs	r3, #0
 801034c:	60fb      	str	r3, [r7, #12]
 801034e:	e002      	b.n	8010356 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8010350:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010354:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	68db      	ldr	r3, [r3, #12]
 801035a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 801035e:	d007      	beq.n	8010370 <HAL_SPI_Init+0xa0>
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	68db      	ldr	r3, [r3, #12]
 8010364:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8010368:	d002      	beq.n	8010370 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	2200      	movs	r2, #0
 801036e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	685b      	ldr	r3, [r3, #4]
 8010374:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	689b      	ldr	r3, [r3, #8]
 801037c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8010380:	431a      	orrs	r2, r3
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	691b      	ldr	r3, [r3, #16]
 8010386:	f003 0302 	and.w	r3, r3, #2
 801038a:	431a      	orrs	r2, r3
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	695b      	ldr	r3, [r3, #20]
 8010390:	f003 0301 	and.w	r3, r3, #1
 8010394:	431a      	orrs	r2, r3
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	699b      	ldr	r3, [r3, #24]
 801039a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801039e:	431a      	orrs	r2, r3
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	69db      	ldr	r3, [r3, #28]
 80103a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80103a8:	431a      	orrs	r2, r3
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6a1b      	ldr	r3, [r3, #32]
 80103ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80103b2:	ea42 0103 	orr.w	r1, r2, r3
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103ba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	430a      	orrs	r2, r1
 80103c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	699b      	ldr	r3, [r3, #24]
 80103ca:	0c1b      	lsrs	r3, r3, #16
 80103cc:	f003 0204 	and.w	r2, r3, #4
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103d4:	f003 0310 	and.w	r3, r3, #16
 80103d8:	431a      	orrs	r2, r3
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103de:	f003 0308 	and.w	r3, r3, #8
 80103e2:	431a      	orrs	r2, r3
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	68db      	ldr	r3, [r3, #12]
 80103e8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80103ec:	ea42 0103 	orr.w	r1, r2, r3
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	430a      	orrs	r2, r1
 80103fc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2200      	movs	r2, #0
 8010402:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	2201      	movs	r2, #1
 8010408:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 801040c:	2300      	movs	r3, #0
}
 801040e:	4618      	mov	r0, r3
 8010410:	3710      	adds	r7, #16
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}
	...

08010418 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b088      	sub	sp, #32
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	685b      	ldr	r3, [r3, #4]
 8010426:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	689b      	ldr	r3, [r3, #8]
 801042e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8010430:	69bb      	ldr	r3, [r7, #24]
 8010432:	099b      	lsrs	r3, r3, #6
 8010434:	f003 0301 	and.w	r3, r3, #1
 8010438:	2b00      	cmp	r3, #0
 801043a:	d10f      	bne.n	801045c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801043c:	69bb      	ldr	r3, [r7, #24]
 801043e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8010442:	2b00      	cmp	r3, #0
 8010444:	d00a      	beq.n	801045c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8010446:	69fb      	ldr	r3, [r7, #28]
 8010448:	099b      	lsrs	r3, r3, #6
 801044a:	f003 0301 	and.w	r3, r3, #1
 801044e:	2b00      	cmp	r3, #0
 8010450:	d004      	beq.n	801045c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010456:	6878      	ldr	r0, [r7, #4]
 8010458:	4798      	blx	r3
    return;
 801045a:	e0d7      	b.n	801060c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 801045c:	69bb      	ldr	r3, [r7, #24]
 801045e:	085b      	lsrs	r3, r3, #1
 8010460:	f003 0301 	and.w	r3, r3, #1
 8010464:	2b00      	cmp	r3, #0
 8010466:	d00a      	beq.n	801047e <HAL_SPI_IRQHandler+0x66>
 8010468:	69fb      	ldr	r3, [r7, #28]
 801046a:	09db      	lsrs	r3, r3, #7
 801046c:	f003 0301 	and.w	r3, r3, #1
 8010470:	2b00      	cmp	r3, #0
 8010472:	d004      	beq.n	801047e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	4798      	blx	r3
    return;
 801047c:	e0c6      	b.n	801060c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801047e:	69bb      	ldr	r3, [r7, #24]
 8010480:	095b      	lsrs	r3, r3, #5
 8010482:	f003 0301 	and.w	r3, r3, #1
 8010486:	2b00      	cmp	r3, #0
 8010488:	d10c      	bne.n	80104a4 <HAL_SPI_IRQHandler+0x8c>
 801048a:	69bb      	ldr	r3, [r7, #24]
 801048c:	099b      	lsrs	r3, r3, #6
 801048e:	f003 0301 	and.w	r3, r3, #1
 8010492:	2b00      	cmp	r3, #0
 8010494:	d106      	bne.n	80104a4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8010496:	69bb      	ldr	r3, [r7, #24]
 8010498:	0a1b      	lsrs	r3, r3, #8
 801049a:	f003 0301 	and.w	r3, r3, #1
 801049e:	2b00      	cmp	r3, #0
 80104a0:	f000 80b4 	beq.w	801060c <HAL_SPI_IRQHandler+0x1f4>
 80104a4:	69fb      	ldr	r3, [r7, #28]
 80104a6:	095b      	lsrs	r3, r3, #5
 80104a8:	f003 0301 	and.w	r3, r3, #1
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	f000 80ad 	beq.w	801060c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80104b2:	69bb      	ldr	r3, [r7, #24]
 80104b4:	099b      	lsrs	r3, r3, #6
 80104b6:	f003 0301 	and.w	r3, r3, #1
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d023      	beq.n	8010506 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80104c4:	b2db      	uxtb	r3, r3
 80104c6:	2b03      	cmp	r3, #3
 80104c8:	d011      	beq.n	80104ee <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80104ce:	f043 0204 	orr.w	r2, r3, #4
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80104d6:	2300      	movs	r3, #0
 80104d8:	617b      	str	r3, [r7, #20]
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	68db      	ldr	r3, [r3, #12]
 80104e0:	617b      	str	r3, [r7, #20]
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	689b      	ldr	r3, [r3, #8]
 80104e8:	617b      	str	r3, [r7, #20]
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	e00b      	b.n	8010506 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80104ee:	2300      	movs	r3, #0
 80104f0:	613b      	str	r3, [r7, #16]
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	68db      	ldr	r3, [r3, #12]
 80104f8:	613b      	str	r3, [r7, #16]
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	689b      	ldr	r3, [r3, #8]
 8010500:	613b      	str	r3, [r7, #16]
 8010502:	693b      	ldr	r3, [r7, #16]
        return;
 8010504:	e082      	b.n	801060c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8010506:	69bb      	ldr	r3, [r7, #24]
 8010508:	095b      	lsrs	r3, r3, #5
 801050a:	f003 0301 	and.w	r3, r3, #1
 801050e:	2b00      	cmp	r3, #0
 8010510:	d014      	beq.n	801053c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010516:	f043 0201 	orr.w	r2, r3, #1
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801051e:	2300      	movs	r3, #0
 8010520:	60fb      	str	r3, [r7, #12]
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	689b      	ldr	r3, [r3, #8]
 8010528:	60fb      	str	r3, [r7, #12]
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	681a      	ldr	r2, [r3, #0]
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010538:	601a      	str	r2, [r3, #0]
 801053a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 801053c:	69bb      	ldr	r3, [r7, #24]
 801053e:	0a1b      	lsrs	r3, r3, #8
 8010540:	f003 0301 	and.w	r3, r3, #1
 8010544:	2b00      	cmp	r3, #0
 8010546:	d00c      	beq.n	8010562 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801054c:	f043 0208 	orr.w	r2, r3, #8
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010554:	2300      	movs	r3, #0
 8010556:	60bb      	str	r3, [r7, #8]
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	689b      	ldr	r3, [r3, #8]
 801055e:	60bb      	str	r3, [r7, #8]
 8010560:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010566:	2b00      	cmp	r3, #0
 8010568:	d04f      	beq.n	801060a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	685a      	ldr	r2, [r3, #4]
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8010578:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	2201      	movs	r2, #1
 801057e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8010582:	69fb      	ldr	r3, [r7, #28]
 8010584:	f003 0302 	and.w	r3, r3, #2
 8010588:	2b00      	cmp	r3, #0
 801058a:	d104      	bne.n	8010596 <HAL_SPI_IRQHandler+0x17e>
 801058c:	69fb      	ldr	r3, [r7, #28]
 801058e:	f003 0301 	and.w	r3, r3, #1
 8010592:	2b00      	cmp	r3, #0
 8010594:	d034      	beq.n	8010600 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	685a      	ldr	r2, [r3, #4]
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	f022 0203 	bic.w	r2, r2, #3
 80105a4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d011      	beq.n	80105d2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80105b2:	4a18      	ldr	r2, [pc, #96]	@ (8010614 <HAL_SPI_IRQHandler+0x1fc>)
 80105b4:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80105ba:	4618      	mov	r0, r3
 80105bc:	f7fc fc00 	bl	800cdc0 <HAL_DMA_Abort_IT>
 80105c0:	4603      	mov	r3, r0
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d005      	beq.n	80105d2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80105ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d016      	beq.n	8010608 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80105de:	4a0d      	ldr	r2, [pc, #52]	@ (8010614 <HAL_SPI_IRQHandler+0x1fc>)
 80105e0:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80105e6:	4618      	mov	r0, r3
 80105e8:	f7fc fbea 	bl	800cdc0 <HAL_DMA_Abort_IT>
 80105ec:	4603      	mov	r3, r0
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d00a      	beq.n	8010608 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80105f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80105fe:	e003      	b.n	8010608 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8010600:	6878      	ldr	r0, [r7, #4]
 8010602:	f000 f809 	bl	8010618 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8010606:	e000      	b.n	801060a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8010608:	bf00      	nop
    return;
 801060a:	bf00      	nop
  }
}
 801060c:	3720      	adds	r7, #32
 801060e:	46bd      	mov	sp, r7
 8010610:	bd80      	pop	{r7, pc}
 8010612:	bf00      	nop
 8010614:	0801062d 	.word	0x0801062d

08010618 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8010618:	b480      	push	{r7}
 801061a:	b083      	sub	sp, #12
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8010620:	bf00      	nop
 8010622:	370c      	adds	r7, #12
 8010624:	46bd      	mov	sp, r7
 8010626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062a:	4770      	bx	lr

0801062c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b084      	sub	sp, #16
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010638:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	2200      	movs	r2, #0
 801063e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	2200      	movs	r2, #0
 8010646:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8010648:	68f8      	ldr	r0, [r7, #12]
 801064a:	f7ff ffe5 	bl	8010618 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801064e:	bf00      	nop
 8010650:	3710      	adds	r7, #16
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}

08010656 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010656:	b580      	push	{r7, lr}
 8010658:	b082      	sub	sp, #8
 801065a:	af00      	add	r7, sp, #0
 801065c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d101      	bne.n	8010668 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010664:	2301      	movs	r3, #1
 8010666:	e049      	b.n	80106fc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801066e:	b2db      	uxtb	r3, r3
 8010670:	2b00      	cmp	r3, #0
 8010672:	d106      	bne.n	8010682 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	2200      	movs	r2, #0
 8010678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f7f0 ff91 	bl	80015a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	2202      	movs	r2, #2
 8010686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681a      	ldr	r2, [r3, #0]
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	3304      	adds	r3, #4
 8010692:	4619      	mov	r1, r3
 8010694:	4610      	mov	r0, r2
 8010696:	f000 fa37 	bl	8010b08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	2201      	movs	r2, #1
 801069e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2201      	movs	r2, #1
 80106a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	2201      	movs	r2, #1
 80106ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	2201      	movs	r2, #1
 80106b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	2201      	movs	r2, #1
 80106be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	2201      	movs	r2, #1
 80106c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	2201      	movs	r2, #1
 80106ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	2201      	movs	r2, #1
 80106d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	2201      	movs	r2, #1
 80106de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	2201      	movs	r2, #1
 80106e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	2201      	movs	r2, #1
 80106ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	2201      	movs	r2, #1
 80106f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80106fa:	2300      	movs	r3, #0
}
 80106fc:	4618      	mov	r0, r3
 80106fe:	3708      	adds	r7, #8
 8010700:	46bd      	mov	sp, r7
 8010702:	bd80      	pop	{r7, pc}

08010704 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b084      	sub	sp, #16
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	68db      	ldr	r3, [r3, #12]
 8010712:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	691b      	ldr	r3, [r3, #16]
 801071a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801071c:	68bb      	ldr	r3, [r7, #8]
 801071e:	f003 0302 	and.w	r3, r3, #2
 8010722:	2b00      	cmp	r3, #0
 8010724:	d020      	beq.n	8010768 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	f003 0302 	and.w	r3, r3, #2
 801072c:	2b00      	cmp	r3, #0
 801072e:	d01b      	beq.n	8010768 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	f06f 0202 	mvn.w	r2, #2
 8010738:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	2201      	movs	r2, #1
 801073e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	699b      	ldr	r3, [r3, #24]
 8010746:	f003 0303 	and.w	r3, r3, #3
 801074a:	2b00      	cmp	r3, #0
 801074c:	d003      	beq.n	8010756 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801074e:	6878      	ldr	r0, [r7, #4]
 8010750:	f000 f9bc 	bl	8010acc <HAL_TIM_IC_CaptureCallback>
 8010754:	e005      	b.n	8010762 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010756:	6878      	ldr	r0, [r7, #4]
 8010758:	f000 f9ae 	bl	8010ab8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801075c:	6878      	ldr	r0, [r7, #4]
 801075e:	f000 f9bf 	bl	8010ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2200      	movs	r2, #0
 8010766:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8010768:	68bb      	ldr	r3, [r7, #8]
 801076a:	f003 0304 	and.w	r3, r3, #4
 801076e:	2b00      	cmp	r3, #0
 8010770:	d020      	beq.n	80107b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	f003 0304 	and.w	r3, r3, #4
 8010778:	2b00      	cmp	r3, #0
 801077a:	d01b      	beq.n	80107b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	f06f 0204 	mvn.w	r2, #4
 8010784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	2202      	movs	r2, #2
 801078a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	699b      	ldr	r3, [r3, #24]
 8010792:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010796:	2b00      	cmp	r3, #0
 8010798:	d003      	beq.n	80107a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801079a:	6878      	ldr	r0, [r7, #4]
 801079c:	f000 f996 	bl	8010acc <HAL_TIM_IC_CaptureCallback>
 80107a0:	e005      	b.n	80107ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80107a2:	6878      	ldr	r0, [r7, #4]
 80107a4:	f000 f988 	bl	8010ab8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80107a8:	6878      	ldr	r0, [r7, #4]
 80107aa:	f000 f999 	bl	8010ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	2200      	movs	r2, #0
 80107b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80107b4:	68bb      	ldr	r3, [r7, #8]
 80107b6:	f003 0308 	and.w	r3, r3, #8
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d020      	beq.n	8010800 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	f003 0308 	and.w	r3, r3, #8
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d01b      	beq.n	8010800 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	f06f 0208 	mvn.w	r2, #8
 80107d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	2204      	movs	r2, #4
 80107d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	69db      	ldr	r3, [r3, #28]
 80107de:	f003 0303 	and.w	r3, r3, #3
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d003      	beq.n	80107ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f000 f970 	bl	8010acc <HAL_TIM_IC_CaptureCallback>
 80107ec:	e005      	b.n	80107fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80107ee:	6878      	ldr	r0, [r7, #4]
 80107f0:	f000 f962 	bl	8010ab8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80107f4:	6878      	ldr	r0, [r7, #4]
 80107f6:	f000 f973 	bl	8010ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	2200      	movs	r2, #0
 80107fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8010800:	68bb      	ldr	r3, [r7, #8]
 8010802:	f003 0310 	and.w	r3, r3, #16
 8010806:	2b00      	cmp	r3, #0
 8010808:	d020      	beq.n	801084c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	f003 0310 	and.w	r3, r3, #16
 8010810:	2b00      	cmp	r3, #0
 8010812:	d01b      	beq.n	801084c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	f06f 0210 	mvn.w	r2, #16
 801081c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	2208      	movs	r2, #8
 8010822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	69db      	ldr	r3, [r3, #28]
 801082a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801082e:	2b00      	cmp	r3, #0
 8010830:	d003      	beq.n	801083a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010832:	6878      	ldr	r0, [r7, #4]
 8010834:	f000 f94a 	bl	8010acc <HAL_TIM_IC_CaptureCallback>
 8010838:	e005      	b.n	8010846 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801083a:	6878      	ldr	r0, [r7, #4]
 801083c:	f000 f93c 	bl	8010ab8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	f000 f94d 	bl	8010ae0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	2200      	movs	r2, #0
 801084a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	f003 0301 	and.w	r3, r3, #1
 8010852:	2b00      	cmp	r3, #0
 8010854:	d00c      	beq.n	8010870 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	f003 0301 	and.w	r3, r3, #1
 801085c:	2b00      	cmp	r3, #0
 801085e:	d007      	beq.n	8010870 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	f06f 0201 	mvn.w	r2, #1
 8010868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801086a:	6878      	ldr	r0, [r7, #4]
 801086c:	f000 f91a 	bl	8010aa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010876:	2b00      	cmp	r3, #0
 8010878:	d104      	bne.n	8010884 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 801087a:	68bb      	ldr	r3, [r7, #8]
 801087c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8010880:	2b00      	cmp	r3, #0
 8010882:	d00c      	beq.n	801089e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801088a:	2b00      	cmp	r3, #0
 801088c:	d007      	beq.n	801089e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8010896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010898:	6878      	ldr	r0, [r7, #4]
 801089a:	f000 fb07 	bl	8010eac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d00c      	beq.n	80108c2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d007      	beq.n	80108c2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80108ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80108bc:	6878      	ldr	r0, [r7, #4]
 80108be:	f000 faff 	bl	8010ec0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80108c2:	68bb      	ldr	r3, [r7, #8]
 80108c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d00c      	beq.n	80108e6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d007      	beq.n	80108e6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80108de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f000 f907 	bl	8010af4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80108e6:	68bb      	ldr	r3, [r7, #8]
 80108e8:	f003 0320 	and.w	r3, r3, #32
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d00c      	beq.n	801090a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	f003 0320 	and.w	r3, r3, #32
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d007      	beq.n	801090a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	f06f 0220 	mvn.w	r2, #32
 8010902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010904:	6878      	ldr	r0, [r7, #4]
 8010906:	f000 fac7 	bl	8010e98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801090a:	bf00      	nop
 801090c:	3710      	adds	r7, #16
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}

08010912 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010912:	b580      	push	{r7, lr}
 8010914:	b084      	sub	sp, #16
 8010916:	af00      	add	r7, sp, #0
 8010918:	6078      	str	r0, [r7, #4]
 801091a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801091c:	2300      	movs	r3, #0
 801091e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010926:	2b01      	cmp	r3, #1
 8010928:	d101      	bne.n	801092e <HAL_TIM_ConfigClockSource+0x1c>
 801092a:	2302      	movs	r3, #2
 801092c:	e0b6      	b.n	8010a9c <HAL_TIM_ConfigClockSource+0x18a>
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	2201      	movs	r2, #1
 8010932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	2202      	movs	r2, #2
 801093a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	689b      	ldr	r3, [r3, #8]
 8010944:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010946:	68bb      	ldr	r3, [r7, #8]
 8010948:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801094c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8010950:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010952:	68bb      	ldr	r3, [r7, #8]
 8010954:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010958:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	68ba      	ldr	r2, [r7, #8]
 8010960:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801096a:	d03e      	beq.n	80109ea <HAL_TIM_ConfigClockSource+0xd8>
 801096c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010970:	f200 8087 	bhi.w	8010a82 <HAL_TIM_ConfigClockSource+0x170>
 8010974:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010978:	f000 8086 	beq.w	8010a88 <HAL_TIM_ConfigClockSource+0x176>
 801097c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010980:	d87f      	bhi.n	8010a82 <HAL_TIM_ConfigClockSource+0x170>
 8010982:	2b70      	cmp	r3, #112	@ 0x70
 8010984:	d01a      	beq.n	80109bc <HAL_TIM_ConfigClockSource+0xaa>
 8010986:	2b70      	cmp	r3, #112	@ 0x70
 8010988:	d87b      	bhi.n	8010a82 <HAL_TIM_ConfigClockSource+0x170>
 801098a:	2b60      	cmp	r3, #96	@ 0x60
 801098c:	d050      	beq.n	8010a30 <HAL_TIM_ConfigClockSource+0x11e>
 801098e:	2b60      	cmp	r3, #96	@ 0x60
 8010990:	d877      	bhi.n	8010a82 <HAL_TIM_ConfigClockSource+0x170>
 8010992:	2b50      	cmp	r3, #80	@ 0x50
 8010994:	d03c      	beq.n	8010a10 <HAL_TIM_ConfigClockSource+0xfe>
 8010996:	2b50      	cmp	r3, #80	@ 0x50
 8010998:	d873      	bhi.n	8010a82 <HAL_TIM_ConfigClockSource+0x170>
 801099a:	2b40      	cmp	r3, #64	@ 0x40
 801099c:	d058      	beq.n	8010a50 <HAL_TIM_ConfigClockSource+0x13e>
 801099e:	2b40      	cmp	r3, #64	@ 0x40
 80109a0:	d86f      	bhi.n	8010a82 <HAL_TIM_ConfigClockSource+0x170>
 80109a2:	2b30      	cmp	r3, #48	@ 0x30
 80109a4:	d064      	beq.n	8010a70 <HAL_TIM_ConfigClockSource+0x15e>
 80109a6:	2b30      	cmp	r3, #48	@ 0x30
 80109a8:	d86b      	bhi.n	8010a82 <HAL_TIM_ConfigClockSource+0x170>
 80109aa:	2b20      	cmp	r3, #32
 80109ac:	d060      	beq.n	8010a70 <HAL_TIM_ConfigClockSource+0x15e>
 80109ae:	2b20      	cmp	r3, #32
 80109b0:	d867      	bhi.n	8010a82 <HAL_TIM_ConfigClockSource+0x170>
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d05c      	beq.n	8010a70 <HAL_TIM_ConfigClockSource+0x15e>
 80109b6:	2b10      	cmp	r3, #16
 80109b8:	d05a      	beq.n	8010a70 <HAL_TIM_ConfigClockSource+0x15e>
 80109ba:	e062      	b.n	8010a82 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80109c0:	683b      	ldr	r3, [r7, #0]
 80109c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80109c4:	683b      	ldr	r3, [r7, #0]
 80109c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80109cc:	f000 f9bc 	bl	8010d48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	689b      	ldr	r3, [r3, #8]
 80109d6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80109d8:	68bb      	ldr	r3, [r7, #8]
 80109da:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80109de:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	68ba      	ldr	r2, [r7, #8]
 80109e6:	609a      	str	r2, [r3, #8]
      break;
 80109e8:	e04f      	b.n	8010a8a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80109fa:	f000 f9a5 	bl	8010d48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	689a      	ldr	r2, [r3, #8]
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010a0c:	609a      	str	r2, [r3, #8]
      break;
 8010a0e:	e03c      	b.n	8010a8a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010a14:	683b      	ldr	r3, [r7, #0]
 8010a16:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010a18:	683b      	ldr	r3, [r7, #0]
 8010a1a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010a1c:	461a      	mov	r2, r3
 8010a1e:	f000 f919 	bl	8010c54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	2150      	movs	r1, #80	@ 0x50
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f000 f972 	bl	8010d12 <TIM_ITRx_SetConfig>
      break;
 8010a2e:	e02c      	b.n	8010a8a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010a34:	683b      	ldr	r3, [r7, #0]
 8010a36:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010a38:	683b      	ldr	r3, [r7, #0]
 8010a3a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010a3c:	461a      	mov	r2, r3
 8010a3e:	f000 f938 	bl	8010cb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	2160      	movs	r1, #96	@ 0x60
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f000 f962 	bl	8010d12 <TIM_ITRx_SetConfig>
      break;
 8010a4e:	e01c      	b.n	8010a8a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8010a58:	683b      	ldr	r3, [r7, #0]
 8010a5a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010a5c:	461a      	mov	r2, r3
 8010a5e:	f000 f8f9 	bl	8010c54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	2140      	movs	r1, #64	@ 0x40
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f000 f952 	bl	8010d12 <TIM_ITRx_SetConfig>
      break;
 8010a6e:	e00c      	b.n	8010a8a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681a      	ldr	r2, [r3, #0]
 8010a74:	683b      	ldr	r3, [r7, #0]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	4619      	mov	r1, r3
 8010a7a:	4610      	mov	r0, r2
 8010a7c:	f000 f949 	bl	8010d12 <TIM_ITRx_SetConfig>
      break;
 8010a80:	e003      	b.n	8010a8a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8010a82:	2301      	movs	r3, #1
 8010a84:	73fb      	strb	r3, [r7, #15]
      break;
 8010a86:	e000      	b.n	8010a8a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8010a88:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	2201      	movs	r2, #1
 8010a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	2200      	movs	r2, #0
 8010a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	3710      	adds	r7, #16
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	bd80      	pop	{r7, pc}

08010aa4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010aa4:	b480      	push	{r7}
 8010aa6:	b083      	sub	sp, #12
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8010aac:	bf00      	nop
 8010aae:	370c      	adds	r7, #12
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab6:	4770      	bx	lr

08010ab8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010ab8:	b480      	push	{r7}
 8010aba:	b083      	sub	sp, #12
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010ac0:	bf00      	nop
 8010ac2:	370c      	adds	r7, #12
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aca:	4770      	bx	lr

08010acc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010acc:	b480      	push	{r7}
 8010ace:	b083      	sub	sp, #12
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010ad4:	bf00      	nop
 8010ad6:	370c      	adds	r7, #12
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ade:	4770      	bx	lr

08010ae0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010ae0:	b480      	push	{r7}
 8010ae2:	b083      	sub	sp, #12
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010ae8:	bf00      	nop
 8010aea:	370c      	adds	r7, #12
 8010aec:	46bd      	mov	sp, r7
 8010aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af2:	4770      	bx	lr

08010af4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010af4:	b480      	push	{r7}
 8010af6:	b083      	sub	sp, #12
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010afc:	bf00      	nop
 8010afe:	370c      	adds	r7, #12
 8010b00:	46bd      	mov	sp, r7
 8010b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b06:	4770      	bx	lr

08010b08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010b08:	b480      	push	{r7}
 8010b0a:	b085      	sub	sp, #20
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
 8010b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	4a46      	ldr	r2, [pc, #280]	@ (8010c34 <TIM_Base_SetConfig+0x12c>)
 8010b1c:	4293      	cmp	r3, r2
 8010b1e:	d013      	beq.n	8010b48 <TIM_Base_SetConfig+0x40>
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010b26:	d00f      	beq.n	8010b48 <TIM_Base_SetConfig+0x40>
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	4a43      	ldr	r2, [pc, #268]	@ (8010c38 <TIM_Base_SetConfig+0x130>)
 8010b2c:	4293      	cmp	r3, r2
 8010b2e:	d00b      	beq.n	8010b48 <TIM_Base_SetConfig+0x40>
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	4a42      	ldr	r2, [pc, #264]	@ (8010c3c <TIM_Base_SetConfig+0x134>)
 8010b34:	4293      	cmp	r3, r2
 8010b36:	d007      	beq.n	8010b48 <TIM_Base_SetConfig+0x40>
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	4a41      	ldr	r2, [pc, #260]	@ (8010c40 <TIM_Base_SetConfig+0x138>)
 8010b3c:	4293      	cmp	r3, r2
 8010b3e:	d003      	beq.n	8010b48 <TIM_Base_SetConfig+0x40>
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	4a40      	ldr	r2, [pc, #256]	@ (8010c44 <TIM_Base_SetConfig+0x13c>)
 8010b44:	4293      	cmp	r3, r2
 8010b46:	d108      	bne.n	8010b5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010b4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	685b      	ldr	r3, [r3, #4]
 8010b54:	68fa      	ldr	r2, [r7, #12]
 8010b56:	4313      	orrs	r3, r2
 8010b58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	4a35      	ldr	r2, [pc, #212]	@ (8010c34 <TIM_Base_SetConfig+0x12c>)
 8010b5e:	4293      	cmp	r3, r2
 8010b60:	d01f      	beq.n	8010ba2 <TIM_Base_SetConfig+0x9a>
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010b68:	d01b      	beq.n	8010ba2 <TIM_Base_SetConfig+0x9a>
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	4a32      	ldr	r2, [pc, #200]	@ (8010c38 <TIM_Base_SetConfig+0x130>)
 8010b6e:	4293      	cmp	r3, r2
 8010b70:	d017      	beq.n	8010ba2 <TIM_Base_SetConfig+0x9a>
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	4a31      	ldr	r2, [pc, #196]	@ (8010c3c <TIM_Base_SetConfig+0x134>)
 8010b76:	4293      	cmp	r3, r2
 8010b78:	d013      	beq.n	8010ba2 <TIM_Base_SetConfig+0x9a>
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	4a30      	ldr	r2, [pc, #192]	@ (8010c40 <TIM_Base_SetConfig+0x138>)
 8010b7e:	4293      	cmp	r3, r2
 8010b80:	d00f      	beq.n	8010ba2 <TIM_Base_SetConfig+0x9a>
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	4a2f      	ldr	r2, [pc, #188]	@ (8010c44 <TIM_Base_SetConfig+0x13c>)
 8010b86:	4293      	cmp	r3, r2
 8010b88:	d00b      	beq.n	8010ba2 <TIM_Base_SetConfig+0x9a>
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	4a2e      	ldr	r2, [pc, #184]	@ (8010c48 <TIM_Base_SetConfig+0x140>)
 8010b8e:	4293      	cmp	r3, r2
 8010b90:	d007      	beq.n	8010ba2 <TIM_Base_SetConfig+0x9a>
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	4a2d      	ldr	r2, [pc, #180]	@ (8010c4c <TIM_Base_SetConfig+0x144>)
 8010b96:	4293      	cmp	r3, r2
 8010b98:	d003      	beq.n	8010ba2 <TIM_Base_SetConfig+0x9a>
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	4a2c      	ldr	r2, [pc, #176]	@ (8010c50 <TIM_Base_SetConfig+0x148>)
 8010b9e:	4293      	cmp	r3, r2
 8010ba0:	d108      	bne.n	8010bb4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010baa:	683b      	ldr	r3, [r7, #0]
 8010bac:	68db      	ldr	r3, [r3, #12]
 8010bae:	68fa      	ldr	r2, [r7, #12]
 8010bb0:	4313      	orrs	r3, r2
 8010bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	695b      	ldr	r3, [r3, #20]
 8010bbe:	4313      	orrs	r3, r2
 8010bc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	68fa      	ldr	r2, [r7, #12]
 8010bc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010bc8:	683b      	ldr	r3, [r7, #0]
 8010bca:	689a      	ldr	r2, [r3, #8]
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	681a      	ldr	r2, [r3, #0]
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	4a16      	ldr	r2, [pc, #88]	@ (8010c34 <TIM_Base_SetConfig+0x12c>)
 8010bdc:	4293      	cmp	r3, r2
 8010bde:	d00f      	beq.n	8010c00 <TIM_Base_SetConfig+0xf8>
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	4a18      	ldr	r2, [pc, #96]	@ (8010c44 <TIM_Base_SetConfig+0x13c>)
 8010be4:	4293      	cmp	r3, r2
 8010be6:	d00b      	beq.n	8010c00 <TIM_Base_SetConfig+0xf8>
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	4a17      	ldr	r2, [pc, #92]	@ (8010c48 <TIM_Base_SetConfig+0x140>)
 8010bec:	4293      	cmp	r3, r2
 8010bee:	d007      	beq.n	8010c00 <TIM_Base_SetConfig+0xf8>
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	4a16      	ldr	r2, [pc, #88]	@ (8010c4c <TIM_Base_SetConfig+0x144>)
 8010bf4:	4293      	cmp	r3, r2
 8010bf6:	d003      	beq.n	8010c00 <TIM_Base_SetConfig+0xf8>
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	4a15      	ldr	r2, [pc, #84]	@ (8010c50 <TIM_Base_SetConfig+0x148>)
 8010bfc:	4293      	cmp	r3, r2
 8010bfe:	d103      	bne.n	8010c08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	691a      	ldr	r2, [r3, #16]
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2201      	movs	r2, #1
 8010c0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	691b      	ldr	r3, [r3, #16]
 8010c12:	f003 0301 	and.w	r3, r3, #1
 8010c16:	2b01      	cmp	r3, #1
 8010c18:	d105      	bne.n	8010c26 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	691b      	ldr	r3, [r3, #16]
 8010c1e:	f023 0201 	bic.w	r2, r3, #1
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	611a      	str	r2, [r3, #16]
  }
}
 8010c26:	bf00      	nop
 8010c28:	3714      	adds	r7, #20
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c30:	4770      	bx	lr
 8010c32:	bf00      	nop
 8010c34:	40012c00 	.word	0x40012c00
 8010c38:	40000400 	.word	0x40000400
 8010c3c:	40000800 	.word	0x40000800
 8010c40:	40000c00 	.word	0x40000c00
 8010c44:	40013400 	.word	0x40013400
 8010c48:	40014000 	.word	0x40014000
 8010c4c:	40014400 	.word	0x40014400
 8010c50:	40014800 	.word	0x40014800

08010c54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010c54:	b480      	push	{r7}
 8010c56:	b087      	sub	sp, #28
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	60f8      	str	r0, [r7, #12]
 8010c5c:	60b9      	str	r1, [r7, #8]
 8010c5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	6a1b      	ldr	r3, [r3, #32]
 8010c64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	6a1b      	ldr	r3, [r3, #32]
 8010c6a:	f023 0201 	bic.w	r2, r3, #1
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	699b      	ldr	r3, [r3, #24]
 8010c76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010c78:	693b      	ldr	r3, [r7, #16]
 8010c7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010c7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	011b      	lsls	r3, r3, #4
 8010c84:	693a      	ldr	r2, [r7, #16]
 8010c86:	4313      	orrs	r3, r2
 8010c88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010c8a:	697b      	ldr	r3, [r7, #20]
 8010c8c:	f023 030a 	bic.w	r3, r3, #10
 8010c90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010c92:	697a      	ldr	r2, [r7, #20]
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	4313      	orrs	r3, r2
 8010c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	693a      	ldr	r2, [r7, #16]
 8010c9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	697a      	ldr	r2, [r7, #20]
 8010ca4:	621a      	str	r2, [r3, #32]
}
 8010ca6:	bf00      	nop
 8010ca8:	371c      	adds	r7, #28
 8010caa:	46bd      	mov	sp, r7
 8010cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb0:	4770      	bx	lr

08010cb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010cb2:	b480      	push	{r7}
 8010cb4:	b087      	sub	sp, #28
 8010cb6:	af00      	add	r7, sp, #0
 8010cb8:	60f8      	str	r0, [r7, #12]
 8010cba:	60b9      	str	r1, [r7, #8]
 8010cbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	6a1b      	ldr	r3, [r3, #32]
 8010cc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	6a1b      	ldr	r3, [r3, #32]
 8010cc8:	f023 0210 	bic.w	r2, r3, #16
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	699b      	ldr	r3, [r3, #24]
 8010cd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010cd6:	693b      	ldr	r3, [r7, #16]
 8010cd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8010cdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	031b      	lsls	r3, r3, #12
 8010ce2:	693a      	ldr	r2, [r7, #16]
 8010ce4:	4313      	orrs	r3, r2
 8010ce6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010ce8:	697b      	ldr	r3, [r7, #20]
 8010cea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8010cee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010cf0:	68bb      	ldr	r3, [r7, #8]
 8010cf2:	011b      	lsls	r3, r3, #4
 8010cf4:	697a      	ldr	r2, [r7, #20]
 8010cf6:	4313      	orrs	r3, r2
 8010cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	693a      	ldr	r2, [r7, #16]
 8010cfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	697a      	ldr	r2, [r7, #20]
 8010d04:	621a      	str	r2, [r3, #32]
}
 8010d06:	bf00      	nop
 8010d08:	371c      	adds	r7, #28
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d10:	4770      	bx	lr

08010d12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010d12:	b480      	push	{r7}
 8010d14:	b085      	sub	sp, #20
 8010d16:	af00      	add	r7, sp, #0
 8010d18:	6078      	str	r0, [r7, #4]
 8010d1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	689b      	ldr	r3, [r3, #8]
 8010d20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010d28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010d2a:	683a      	ldr	r2, [r7, #0]
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	4313      	orrs	r3, r2
 8010d30:	f043 0307 	orr.w	r3, r3, #7
 8010d34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	68fa      	ldr	r2, [r7, #12]
 8010d3a:	609a      	str	r2, [r3, #8]
}
 8010d3c:	bf00      	nop
 8010d3e:	3714      	adds	r7, #20
 8010d40:	46bd      	mov	sp, r7
 8010d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d46:	4770      	bx	lr

08010d48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010d48:	b480      	push	{r7}
 8010d4a:	b087      	sub	sp, #28
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	60f8      	str	r0, [r7, #12]
 8010d50:	60b9      	str	r1, [r7, #8]
 8010d52:	607a      	str	r2, [r7, #4]
 8010d54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	689b      	ldr	r3, [r3, #8]
 8010d5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010d5c:	697b      	ldr	r3, [r7, #20]
 8010d5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010d62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010d64:	683b      	ldr	r3, [r7, #0]
 8010d66:	021a      	lsls	r2, r3, #8
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	431a      	orrs	r2, r3
 8010d6c:	68bb      	ldr	r3, [r7, #8]
 8010d6e:	4313      	orrs	r3, r2
 8010d70:	697a      	ldr	r2, [r7, #20]
 8010d72:	4313      	orrs	r3, r2
 8010d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	697a      	ldr	r2, [r7, #20]
 8010d7a:	609a      	str	r2, [r3, #8]
}
 8010d7c:	bf00      	nop
 8010d7e:	371c      	adds	r7, #28
 8010d80:	46bd      	mov	sp, r7
 8010d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d86:	4770      	bx	lr

08010d88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010d88:	b480      	push	{r7}
 8010d8a:	b085      	sub	sp, #20
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
 8010d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010d98:	2b01      	cmp	r3, #1
 8010d9a:	d101      	bne.n	8010da0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010d9c:	2302      	movs	r3, #2
 8010d9e:	e068      	b.n	8010e72 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	2201      	movs	r2, #1
 8010da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	2202      	movs	r2, #2
 8010dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	685b      	ldr	r3, [r3, #4]
 8010db6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	689b      	ldr	r3, [r3, #8]
 8010dbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	4a2e      	ldr	r2, [pc, #184]	@ (8010e80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8010dc6:	4293      	cmp	r3, r2
 8010dc8:	d004      	beq.n	8010dd4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	4a2d      	ldr	r2, [pc, #180]	@ (8010e84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8010dd0:	4293      	cmp	r3, r2
 8010dd2:	d108      	bne.n	8010de6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8010dda:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010ddc:	683b      	ldr	r3, [r7, #0]
 8010dde:	685b      	ldr	r3, [r3, #4]
 8010de0:	68fa      	ldr	r2, [r7, #12]
 8010de2:	4313      	orrs	r3, r2
 8010de4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010dec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010dee:	683b      	ldr	r3, [r7, #0]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	68fa      	ldr	r2, [r7, #12]
 8010df4:	4313      	orrs	r3, r2
 8010df6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	68fa      	ldr	r2, [r7, #12]
 8010dfe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	4a1e      	ldr	r2, [pc, #120]	@ (8010e80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8010e06:	4293      	cmp	r3, r2
 8010e08:	d01d      	beq.n	8010e46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010e12:	d018      	beq.n	8010e46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	4a1b      	ldr	r2, [pc, #108]	@ (8010e88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010e1a:	4293      	cmp	r3, r2
 8010e1c:	d013      	beq.n	8010e46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	4a1a      	ldr	r2, [pc, #104]	@ (8010e8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010e24:	4293      	cmp	r3, r2
 8010e26:	d00e      	beq.n	8010e46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	4a18      	ldr	r2, [pc, #96]	@ (8010e90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8010e2e:	4293      	cmp	r3, r2
 8010e30:	d009      	beq.n	8010e46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	4a13      	ldr	r2, [pc, #76]	@ (8010e84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8010e38:	4293      	cmp	r3, r2
 8010e3a:	d004      	beq.n	8010e46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	4a14      	ldr	r2, [pc, #80]	@ (8010e94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010e42:	4293      	cmp	r3, r2
 8010e44:	d10c      	bne.n	8010e60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010e46:	68bb      	ldr	r3, [r7, #8]
 8010e48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010e4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010e4e:	683b      	ldr	r3, [r7, #0]
 8010e50:	689b      	ldr	r3, [r3, #8]
 8010e52:	68ba      	ldr	r2, [r7, #8]
 8010e54:	4313      	orrs	r3, r2
 8010e56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	68ba      	ldr	r2, [r7, #8]
 8010e5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	2201      	movs	r2, #1
 8010e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010e70:	2300      	movs	r3, #0
}
 8010e72:	4618      	mov	r0, r3
 8010e74:	3714      	adds	r7, #20
 8010e76:	46bd      	mov	sp, r7
 8010e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7c:	4770      	bx	lr
 8010e7e:	bf00      	nop
 8010e80:	40012c00 	.word	0x40012c00
 8010e84:	40013400 	.word	0x40013400
 8010e88:	40000400 	.word	0x40000400
 8010e8c:	40000800 	.word	0x40000800
 8010e90:	40000c00 	.word	0x40000c00
 8010e94:	40014000 	.word	0x40014000

08010e98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010e98:	b480      	push	{r7}
 8010e9a:	b083      	sub	sp, #12
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010ea0:	bf00      	nop
 8010ea2:	370c      	adds	r7, #12
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eaa:	4770      	bx	lr

08010eac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010eac:	b480      	push	{r7}
 8010eae:	b083      	sub	sp, #12
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010eb4:	bf00      	nop
 8010eb6:	370c      	adds	r7, #12
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ebe:	4770      	bx	lr

08010ec0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010ec0:	b480      	push	{r7}
 8010ec2:	b083      	sub	sp, #12
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010ec8:	bf00      	nop
 8010eca:	370c      	adds	r7, #12
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed2:	4770      	bx	lr

08010ed4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b082      	sub	sp, #8
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d101      	bne.n	8010ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010ee2:	2301      	movs	r3, #1
 8010ee4:	e040      	b.n	8010f68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d106      	bne.n	8010efc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f7f0 fb8c 	bl	8001614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2224      	movs	r2, #36	@ 0x24
 8010f00:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	681a      	ldr	r2, [r3, #0]
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	f022 0201 	bic.w	r2, r2, #1
 8010f10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d002      	beq.n	8010f20 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8010f1a:	6878      	ldr	r0, [r7, #4]
 8010f1c:	f000 fe90 	bl	8011c40 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010f20:	6878      	ldr	r0, [r7, #4]
 8010f22:	f000 fbd5 	bl	80116d0 <UART_SetConfig>
 8010f26:	4603      	mov	r3, r0
 8010f28:	2b01      	cmp	r3, #1
 8010f2a:	d101      	bne.n	8010f30 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8010f2c:	2301      	movs	r3, #1
 8010f2e:	e01b      	b.n	8010f68 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	685a      	ldr	r2, [r3, #4]
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010f3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	689a      	ldr	r2, [r3, #8]
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010f4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	681a      	ldr	r2, [r3, #0]
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	f042 0201 	orr.w	r2, r2, #1
 8010f5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010f60:	6878      	ldr	r0, [r7, #4]
 8010f62:	f000 ff0f 	bl	8011d84 <UART_CheckIdleState>
 8010f66:	4603      	mov	r3, r0
}
 8010f68:	4618      	mov	r0, r3
 8010f6a:	3708      	adds	r7, #8
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	bd80      	pop	{r7, pc}

08010f70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b08a      	sub	sp, #40	@ 0x28
 8010f74:	af02      	add	r7, sp, #8
 8010f76:	60f8      	str	r0, [r7, #12]
 8010f78:	60b9      	str	r1, [r7, #8]
 8010f7a:	603b      	str	r3, [r7, #0]
 8010f7c:	4613      	mov	r3, r2
 8010f7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010f84:	2b20      	cmp	r3, #32
 8010f86:	d177      	bne.n	8011078 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8010f88:	68bb      	ldr	r3, [r7, #8]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d002      	beq.n	8010f94 <HAL_UART_Transmit+0x24>
 8010f8e:	88fb      	ldrh	r3, [r7, #6]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d101      	bne.n	8010f98 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8010f94:	2301      	movs	r3, #1
 8010f96:	e070      	b.n	801107a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	2221      	movs	r2, #33	@ 0x21
 8010fa4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010fa6:	f7fb fbe1 	bl	800c76c <HAL_GetTick>
 8010faa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	88fa      	ldrh	r2, [r7, #6]
 8010fb0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	88fa      	ldrh	r2, [r7, #6]
 8010fb8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	689b      	ldr	r3, [r3, #8]
 8010fc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010fc4:	d108      	bne.n	8010fd8 <HAL_UART_Transmit+0x68>
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	691b      	ldr	r3, [r3, #16]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d104      	bne.n	8010fd8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8010fce:	2300      	movs	r3, #0
 8010fd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010fd2:	68bb      	ldr	r3, [r7, #8]
 8010fd4:	61bb      	str	r3, [r7, #24]
 8010fd6:	e003      	b.n	8010fe0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8010fd8:	68bb      	ldr	r3, [r7, #8]
 8010fda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010fdc:	2300      	movs	r3, #0
 8010fde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010fe0:	e02f      	b.n	8011042 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	9300      	str	r3, [sp, #0]
 8010fe6:	697b      	ldr	r3, [r7, #20]
 8010fe8:	2200      	movs	r2, #0
 8010fea:	2180      	movs	r1, #128	@ 0x80
 8010fec:	68f8      	ldr	r0, [r7, #12]
 8010fee:	f000 ff71 	bl	8011ed4 <UART_WaitOnFlagUntilTimeout>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d004      	beq.n	8011002 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	2220      	movs	r2, #32
 8010ffc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8010ffe:	2303      	movs	r3, #3
 8011000:	e03b      	b.n	801107a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8011002:	69fb      	ldr	r3, [r7, #28]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d10b      	bne.n	8011020 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011008:	69bb      	ldr	r3, [r7, #24]
 801100a:	881a      	ldrh	r2, [r3, #0]
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011014:	b292      	uxth	r2, r2
 8011016:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8011018:	69bb      	ldr	r3, [r7, #24]
 801101a:	3302      	adds	r3, #2
 801101c:	61bb      	str	r3, [r7, #24]
 801101e:	e007      	b.n	8011030 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8011020:	69fb      	ldr	r3, [r7, #28]
 8011022:	781a      	ldrb	r2, [r3, #0]
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801102a:	69fb      	ldr	r3, [r7, #28]
 801102c:	3301      	adds	r3, #1
 801102e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8011036:	b29b      	uxth	r3, r3
 8011038:	3b01      	subs	r3, #1
 801103a:	b29a      	uxth	r2, r3
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8011048:	b29b      	uxth	r3, r3
 801104a:	2b00      	cmp	r3, #0
 801104c:	d1c9      	bne.n	8010fe2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801104e:	683b      	ldr	r3, [r7, #0]
 8011050:	9300      	str	r3, [sp, #0]
 8011052:	697b      	ldr	r3, [r7, #20]
 8011054:	2200      	movs	r2, #0
 8011056:	2140      	movs	r1, #64	@ 0x40
 8011058:	68f8      	ldr	r0, [r7, #12]
 801105a:	f000 ff3b 	bl	8011ed4 <UART_WaitOnFlagUntilTimeout>
 801105e:	4603      	mov	r3, r0
 8011060:	2b00      	cmp	r3, #0
 8011062:	d004      	beq.n	801106e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	2220      	movs	r2, #32
 8011068:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801106a:	2303      	movs	r3, #3
 801106c:	e005      	b.n	801107a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	2220      	movs	r2, #32
 8011072:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8011074:	2300      	movs	r3, #0
 8011076:	e000      	b.n	801107a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8011078:	2302      	movs	r3, #2
  }
}
 801107a:	4618      	mov	r0, r3
 801107c:	3720      	adds	r7, #32
 801107e:	46bd      	mov	sp, r7
 8011080:	bd80      	pop	{r7, pc}
	...

08011084 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b0ba      	sub	sp, #232	@ 0xe8
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	69db      	ldr	r3, [r3, #28]
 8011092:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	689b      	ldr	r3, [r3, #8]
 80110a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80110aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80110ae:	f640 030f 	movw	r3, #2063	@ 0x80f
 80110b2:	4013      	ands	r3, r2
 80110b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80110b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d115      	bne.n	80110ec <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80110c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80110c4:	f003 0320 	and.w	r3, r3, #32
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d00f      	beq.n	80110ec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80110cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80110d0:	f003 0320 	and.w	r3, r3, #32
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d009      	beq.n	80110ec <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80110dc:	2b00      	cmp	r3, #0
 80110de:	f000 82ca 	beq.w	8011676 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80110e6:	6878      	ldr	r0, [r7, #4]
 80110e8:	4798      	blx	r3
      }
      return;
 80110ea:	e2c4      	b.n	8011676 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80110ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	f000 8117 	beq.w	8011324 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80110f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80110fa:	f003 0301 	and.w	r3, r3, #1
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d106      	bne.n	8011110 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8011102:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8011106:	4b85      	ldr	r3, [pc, #532]	@ (801131c <HAL_UART_IRQHandler+0x298>)
 8011108:	4013      	ands	r3, r2
 801110a:	2b00      	cmp	r3, #0
 801110c:	f000 810a 	beq.w	8011324 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011114:	f003 0301 	and.w	r3, r3, #1
 8011118:	2b00      	cmp	r3, #0
 801111a:	d011      	beq.n	8011140 <HAL_UART_IRQHandler+0xbc>
 801111c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011124:	2b00      	cmp	r3, #0
 8011126:	d00b      	beq.n	8011140 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	2201      	movs	r2, #1
 801112e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011136:	f043 0201 	orr.w	r2, r3, #1
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011144:	f003 0302 	and.w	r3, r3, #2
 8011148:	2b00      	cmp	r3, #0
 801114a:	d011      	beq.n	8011170 <HAL_UART_IRQHandler+0xec>
 801114c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011150:	f003 0301 	and.w	r3, r3, #1
 8011154:	2b00      	cmp	r3, #0
 8011156:	d00b      	beq.n	8011170 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	2202      	movs	r2, #2
 801115e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011166:	f043 0204 	orr.w	r2, r3, #4
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011174:	f003 0304 	and.w	r3, r3, #4
 8011178:	2b00      	cmp	r3, #0
 801117a:	d011      	beq.n	80111a0 <HAL_UART_IRQHandler+0x11c>
 801117c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011180:	f003 0301 	and.w	r3, r3, #1
 8011184:	2b00      	cmp	r3, #0
 8011186:	d00b      	beq.n	80111a0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	2204      	movs	r2, #4
 801118e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011196:	f043 0202 	orr.w	r2, r3, #2
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80111a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80111a4:	f003 0308 	and.w	r3, r3, #8
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d017      	beq.n	80111dc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80111ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80111b0:	f003 0320 	and.w	r3, r3, #32
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d105      	bne.n	80111c4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80111b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80111bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d00b      	beq.n	80111dc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	2208      	movs	r2, #8
 80111ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80111d2:	f043 0208 	orr.w	r2, r3, #8
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80111dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80111e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d012      	beq.n	801120e <HAL_UART_IRQHandler+0x18a>
 80111e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80111ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d00c      	beq.n	801120e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80111fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011204:	f043 0220 	orr.w	r2, r3, #32
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011214:	2b00      	cmp	r3, #0
 8011216:	f000 8230 	beq.w	801167a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801121a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801121e:	f003 0320 	and.w	r3, r3, #32
 8011222:	2b00      	cmp	r3, #0
 8011224:	d00d      	beq.n	8011242 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8011226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801122a:	f003 0320 	and.w	r3, r3, #32
 801122e:	2b00      	cmp	r3, #0
 8011230:	d007      	beq.n	8011242 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011236:	2b00      	cmp	r3, #0
 8011238:	d003      	beq.n	8011242 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011248:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	689b      	ldr	r3, [r3, #8]
 8011252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011256:	2b40      	cmp	r3, #64	@ 0x40
 8011258:	d005      	beq.n	8011266 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801125a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801125e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011262:	2b00      	cmp	r3, #0
 8011264:	d04f      	beq.n	8011306 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011266:	6878      	ldr	r0, [r7, #4]
 8011268:	f000 fea1 	bl	8011fae <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	689b      	ldr	r3, [r3, #8]
 8011272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011276:	2b40      	cmp	r3, #64	@ 0x40
 8011278:	d141      	bne.n	80112fe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	3308      	adds	r3, #8
 8011280:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011284:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011288:	e853 3f00 	ldrex	r3, [r3]
 801128c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8011290:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011294:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011298:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	3308      	adds	r3, #8
 80112a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80112a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80112aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80112b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80112b6:	e841 2300 	strex	r3, r2, [r1]
 80112ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80112be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d1d9      	bne.n	801127a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d013      	beq.n	80112f6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80112d2:	4a13      	ldr	r2, [pc, #76]	@ (8011320 <HAL_UART_IRQHandler+0x29c>)
 80112d4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80112da:	4618      	mov	r0, r3
 80112dc:	f7fb fd70 	bl	800cdc0 <HAL_DMA_Abort_IT>
 80112e0:	4603      	mov	r3, r0
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d017      	beq.n	8011316 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80112ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80112ec:	687a      	ldr	r2, [r7, #4]
 80112ee:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80112f0:	4610      	mov	r0, r2
 80112f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80112f4:	e00f      	b.n	8011316 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80112f6:	6878      	ldr	r0, [r7, #4]
 80112f8:	f000 f9d4 	bl	80116a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80112fc:	e00b      	b.n	8011316 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80112fe:	6878      	ldr	r0, [r7, #4]
 8011300:	f000 f9d0 	bl	80116a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011304:	e007      	b.n	8011316 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011306:	6878      	ldr	r0, [r7, #4]
 8011308:	f000 f9cc 	bl	80116a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	2200      	movs	r2, #0
 8011310:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8011314:	e1b1      	b.n	801167a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011316:	bf00      	nop
    return;
 8011318:	e1af      	b.n	801167a <HAL_UART_IRQHandler+0x5f6>
 801131a:	bf00      	nop
 801131c:	04000120 	.word	0x04000120
 8011320:	08012077 	.word	0x08012077

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011328:	2b01      	cmp	r3, #1
 801132a:	f040 816a 	bne.w	8011602 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801132e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011332:	f003 0310 	and.w	r3, r3, #16
 8011336:	2b00      	cmp	r3, #0
 8011338:	f000 8163 	beq.w	8011602 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801133c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011340:	f003 0310 	and.w	r3, r3, #16
 8011344:	2b00      	cmp	r3, #0
 8011346:	f000 815c 	beq.w	8011602 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	2210      	movs	r2, #16
 8011350:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	689b      	ldr	r3, [r3, #8]
 8011358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801135c:	2b40      	cmp	r3, #64	@ 0x40
 801135e:	f040 80d4 	bne.w	801150a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	685b      	ldr	r3, [r3, #4]
 801136a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 801136e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8011372:	2b00      	cmp	r3, #0
 8011374:	f000 80ad 	beq.w	80114d2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801137e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8011382:	429a      	cmp	r2, r3
 8011384:	f080 80a5 	bcs.w	80114d2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801138e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	f003 0320 	and.w	r3, r3, #32
 801139e:	2b00      	cmp	r3, #0
 80113a0:	f040 8086 	bne.w	80114b0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80113b0:	e853 3f00 	ldrex	r3, [r3]
 80113b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80113b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80113bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80113c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	461a      	mov	r2, r3
 80113ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80113ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80113d2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80113da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80113de:	e841 2300 	strex	r3, r2, [r1]
 80113e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80113e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d1da      	bne.n	80113a4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	3308      	adds	r3, #8
 80113f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80113f8:	e853 3f00 	ldrex	r3, [r3]
 80113fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80113fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011400:	f023 0301 	bic.w	r3, r3, #1
 8011404:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	3308      	adds	r3, #8
 801140e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011412:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8011416:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011418:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801141a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801141e:	e841 2300 	strex	r3, r2, [r1]
 8011422:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8011424:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011426:	2b00      	cmp	r3, #0
 8011428:	d1e1      	bne.n	80113ee <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	3308      	adds	r3, #8
 8011430:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011432:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011434:	e853 3f00 	ldrex	r3, [r3]
 8011438:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801143a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801143c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011440:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	3308      	adds	r3, #8
 801144a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801144e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011450:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011452:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8011454:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011456:	e841 2300 	strex	r3, r2, [r1]
 801145a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801145c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801145e:	2b00      	cmp	r3, #0
 8011460:	d1e3      	bne.n	801142a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	2220      	movs	r2, #32
 8011466:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	2200      	movs	r2, #0
 801146e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011476:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011478:	e853 3f00 	ldrex	r3, [r3]
 801147c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801147e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011480:	f023 0310 	bic.w	r3, r3, #16
 8011484:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	461a      	mov	r2, r3
 801148e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011492:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011494:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011496:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011498:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801149a:	e841 2300 	strex	r3, r2, [r1]
 801149e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80114a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d1e4      	bne.n	8011470 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80114aa:	4618      	mov	r0, r3
 80114ac:	f7fb fc4a 	bl	800cd44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	2202      	movs	r2, #2
 80114b4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80114c2:	b29b      	uxth	r3, r3
 80114c4:	1ad3      	subs	r3, r2, r3
 80114c6:	b29b      	uxth	r3, r3
 80114c8:	4619      	mov	r1, r3
 80114ca:	6878      	ldr	r0, [r7, #4]
 80114cc:	f000 f8f4 	bl	80116b8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80114d0:	e0d5      	b.n	801167e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80114d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80114dc:	429a      	cmp	r2, r3
 80114de:	f040 80ce 	bne.w	801167e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	f003 0320 	and.w	r3, r3, #32
 80114ee:	2b20      	cmp	r3, #32
 80114f0:	f040 80c5 	bne.w	801167e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	2202      	movs	r2, #2
 80114f8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8011500:	4619      	mov	r1, r3
 8011502:	6878      	ldr	r0, [r7, #4]
 8011504:	f000 f8d8 	bl	80116b8 <HAL_UARTEx_RxEventCallback>
      return;
 8011508:	e0b9      	b.n	801167e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8011516:	b29b      	uxth	r3, r3
 8011518:	1ad3      	subs	r3, r2, r3
 801151a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8011524:	b29b      	uxth	r3, r3
 8011526:	2b00      	cmp	r3, #0
 8011528:	f000 80ab 	beq.w	8011682 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 801152c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8011530:	2b00      	cmp	r3, #0
 8011532:	f000 80a6 	beq.w	8011682 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801153c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801153e:	e853 3f00 	ldrex	r3, [r3]
 8011542:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011546:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801154a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	461a      	mov	r2, r3
 8011554:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011558:	647b      	str	r3, [r7, #68]	@ 0x44
 801155a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801155c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801155e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011560:	e841 2300 	strex	r3, r2, [r1]
 8011564:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011568:	2b00      	cmp	r3, #0
 801156a:	d1e4      	bne.n	8011536 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	3308      	adds	r3, #8
 8011572:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011576:	e853 3f00 	ldrex	r3, [r3]
 801157a:	623b      	str	r3, [r7, #32]
   return(result);
 801157c:	6a3b      	ldr	r3, [r7, #32]
 801157e:	f023 0301 	bic.w	r3, r3, #1
 8011582:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	3308      	adds	r3, #8
 801158c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8011590:	633a      	str	r2, [r7, #48]	@ 0x30
 8011592:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011594:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011596:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011598:	e841 2300 	strex	r3, r2, [r1]
 801159c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801159e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d1e3      	bne.n	801156c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	2220      	movs	r2, #32
 80115a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	2200      	movs	r2, #0
 80115b0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	2200      	movs	r2, #0
 80115b6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115be:	693b      	ldr	r3, [r7, #16]
 80115c0:	e853 3f00 	ldrex	r3, [r3]
 80115c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	f023 0310 	bic.w	r3, r3, #16
 80115cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	461a      	mov	r2, r3
 80115d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80115da:	61fb      	str	r3, [r7, #28]
 80115dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115de:	69b9      	ldr	r1, [r7, #24]
 80115e0:	69fa      	ldr	r2, [r7, #28]
 80115e2:	e841 2300 	strex	r3, r2, [r1]
 80115e6:	617b      	str	r3, [r7, #20]
   return(result);
 80115e8:	697b      	ldr	r3, [r7, #20]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d1e4      	bne.n	80115b8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	2202      	movs	r2, #2
 80115f2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80115f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80115f8:	4619      	mov	r1, r3
 80115fa:	6878      	ldr	r0, [r7, #4]
 80115fc:	f000 f85c 	bl	80116b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011600:	e03f      	b.n	8011682 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011606:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801160a:	2b00      	cmp	r3, #0
 801160c:	d00e      	beq.n	801162c <HAL_UART_IRQHandler+0x5a8>
 801160e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011616:	2b00      	cmp	r3, #0
 8011618:	d008      	beq.n	801162c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8011622:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f000 fd66 	bl	80120f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801162a:	e02d      	b.n	8011688 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 801162c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011630:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011634:	2b00      	cmp	r3, #0
 8011636:	d00e      	beq.n	8011656 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8011638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801163c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011640:	2b00      	cmp	r3, #0
 8011642:	d008      	beq.n	8011656 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011648:	2b00      	cmp	r3, #0
 801164a:	d01c      	beq.n	8011686 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011650:	6878      	ldr	r0, [r7, #4]
 8011652:	4798      	blx	r3
    }
    return;
 8011654:	e017      	b.n	8011686 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801165a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801165e:	2b00      	cmp	r3, #0
 8011660:	d012      	beq.n	8011688 <HAL_UART_IRQHandler+0x604>
 8011662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801166a:	2b00      	cmp	r3, #0
 801166c:	d00c      	beq.n	8011688 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 801166e:	6878      	ldr	r0, [r7, #4]
 8011670:	f000 fd17 	bl	80120a2 <UART_EndTransmit_IT>
    return;
 8011674:	e008      	b.n	8011688 <HAL_UART_IRQHandler+0x604>
      return;
 8011676:	bf00      	nop
 8011678:	e006      	b.n	8011688 <HAL_UART_IRQHandler+0x604>
    return;
 801167a:	bf00      	nop
 801167c:	e004      	b.n	8011688 <HAL_UART_IRQHandler+0x604>
      return;
 801167e:	bf00      	nop
 8011680:	e002      	b.n	8011688 <HAL_UART_IRQHandler+0x604>
      return;
 8011682:	bf00      	nop
 8011684:	e000      	b.n	8011688 <HAL_UART_IRQHandler+0x604>
    return;
 8011686:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8011688:	37e8      	adds	r7, #232	@ 0xe8
 801168a:	46bd      	mov	sp, r7
 801168c:	bd80      	pop	{r7, pc}
 801168e:	bf00      	nop

08011690 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011690:	b480      	push	{r7}
 8011692:	b083      	sub	sp, #12
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011698:	bf00      	nop
 801169a:	370c      	adds	r7, #12
 801169c:	46bd      	mov	sp, r7
 801169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a2:	4770      	bx	lr

080116a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80116a4:	b480      	push	{r7}
 80116a6:	b083      	sub	sp, #12
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80116ac:	bf00      	nop
 80116ae:	370c      	adds	r7, #12
 80116b0:	46bd      	mov	sp, r7
 80116b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b6:	4770      	bx	lr

080116b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80116b8:	b480      	push	{r7}
 80116ba:	b083      	sub	sp, #12
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
 80116c0:	460b      	mov	r3, r1
 80116c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80116c4:	bf00      	nop
 80116c6:	370c      	adds	r7, #12
 80116c8:	46bd      	mov	sp, r7
 80116ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ce:	4770      	bx	lr

080116d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80116d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80116d4:	b08a      	sub	sp, #40	@ 0x28
 80116d6:	af00      	add	r7, sp, #0
 80116d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80116da:	2300      	movs	r3, #0
 80116dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	689a      	ldr	r2, [r3, #8]
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	691b      	ldr	r3, [r3, #16]
 80116e8:	431a      	orrs	r2, r3
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	695b      	ldr	r3, [r3, #20]
 80116ee:	431a      	orrs	r2, r3
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	69db      	ldr	r3, [r3, #28]
 80116f4:	4313      	orrs	r3, r2
 80116f6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	681a      	ldr	r2, [r3, #0]
 80116fe:	4ba4      	ldr	r3, [pc, #656]	@ (8011990 <UART_SetConfig+0x2c0>)
 8011700:	4013      	ands	r3, r2
 8011702:	68fa      	ldr	r2, [r7, #12]
 8011704:	6812      	ldr	r2, [r2, #0]
 8011706:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011708:	430b      	orrs	r3, r1
 801170a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	685b      	ldr	r3, [r3, #4]
 8011712:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	68da      	ldr	r2, [r3, #12]
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	430a      	orrs	r2, r1
 8011720:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	699b      	ldr	r3, [r3, #24]
 8011726:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	4a99      	ldr	r2, [pc, #612]	@ (8011994 <UART_SetConfig+0x2c4>)
 801172e:	4293      	cmp	r3, r2
 8011730:	d004      	beq.n	801173c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	6a1b      	ldr	r3, [r3, #32]
 8011736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011738:	4313      	orrs	r3, r2
 801173a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	689b      	ldr	r3, [r3, #8]
 8011742:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801174c:	430a      	orrs	r2, r1
 801174e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	4a90      	ldr	r2, [pc, #576]	@ (8011998 <UART_SetConfig+0x2c8>)
 8011756:	4293      	cmp	r3, r2
 8011758:	d126      	bne.n	80117a8 <UART_SetConfig+0xd8>
 801175a:	4b90      	ldr	r3, [pc, #576]	@ (801199c <UART_SetConfig+0x2cc>)
 801175c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011760:	f003 0303 	and.w	r3, r3, #3
 8011764:	2b03      	cmp	r3, #3
 8011766:	d81b      	bhi.n	80117a0 <UART_SetConfig+0xd0>
 8011768:	a201      	add	r2, pc, #4	@ (adr r2, 8011770 <UART_SetConfig+0xa0>)
 801176a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801176e:	bf00      	nop
 8011770:	08011781 	.word	0x08011781
 8011774:	08011791 	.word	0x08011791
 8011778:	08011789 	.word	0x08011789
 801177c:	08011799 	.word	0x08011799
 8011780:	2301      	movs	r3, #1
 8011782:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011786:	e116      	b.n	80119b6 <UART_SetConfig+0x2e6>
 8011788:	2302      	movs	r3, #2
 801178a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801178e:	e112      	b.n	80119b6 <UART_SetConfig+0x2e6>
 8011790:	2304      	movs	r3, #4
 8011792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011796:	e10e      	b.n	80119b6 <UART_SetConfig+0x2e6>
 8011798:	2308      	movs	r3, #8
 801179a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801179e:	e10a      	b.n	80119b6 <UART_SetConfig+0x2e6>
 80117a0:	2310      	movs	r3, #16
 80117a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80117a6:	e106      	b.n	80119b6 <UART_SetConfig+0x2e6>
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	4a7c      	ldr	r2, [pc, #496]	@ (80119a0 <UART_SetConfig+0x2d0>)
 80117ae:	4293      	cmp	r3, r2
 80117b0:	d138      	bne.n	8011824 <UART_SetConfig+0x154>
 80117b2:	4b7a      	ldr	r3, [pc, #488]	@ (801199c <UART_SetConfig+0x2cc>)
 80117b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80117b8:	f003 030c 	and.w	r3, r3, #12
 80117bc:	2b0c      	cmp	r3, #12
 80117be:	d82d      	bhi.n	801181c <UART_SetConfig+0x14c>
 80117c0:	a201      	add	r2, pc, #4	@ (adr r2, 80117c8 <UART_SetConfig+0xf8>)
 80117c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117c6:	bf00      	nop
 80117c8:	080117fd 	.word	0x080117fd
 80117cc:	0801181d 	.word	0x0801181d
 80117d0:	0801181d 	.word	0x0801181d
 80117d4:	0801181d 	.word	0x0801181d
 80117d8:	0801180d 	.word	0x0801180d
 80117dc:	0801181d 	.word	0x0801181d
 80117e0:	0801181d 	.word	0x0801181d
 80117e4:	0801181d 	.word	0x0801181d
 80117e8:	08011805 	.word	0x08011805
 80117ec:	0801181d 	.word	0x0801181d
 80117f0:	0801181d 	.word	0x0801181d
 80117f4:	0801181d 	.word	0x0801181d
 80117f8:	08011815 	.word	0x08011815
 80117fc:	2300      	movs	r3, #0
 80117fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011802:	e0d8      	b.n	80119b6 <UART_SetConfig+0x2e6>
 8011804:	2302      	movs	r3, #2
 8011806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801180a:	e0d4      	b.n	80119b6 <UART_SetConfig+0x2e6>
 801180c:	2304      	movs	r3, #4
 801180e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011812:	e0d0      	b.n	80119b6 <UART_SetConfig+0x2e6>
 8011814:	2308      	movs	r3, #8
 8011816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801181a:	e0cc      	b.n	80119b6 <UART_SetConfig+0x2e6>
 801181c:	2310      	movs	r3, #16
 801181e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011822:	e0c8      	b.n	80119b6 <UART_SetConfig+0x2e6>
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	4a5e      	ldr	r2, [pc, #376]	@ (80119a4 <UART_SetConfig+0x2d4>)
 801182a:	4293      	cmp	r3, r2
 801182c:	d125      	bne.n	801187a <UART_SetConfig+0x1aa>
 801182e:	4b5b      	ldr	r3, [pc, #364]	@ (801199c <UART_SetConfig+0x2cc>)
 8011830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011834:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8011838:	2b30      	cmp	r3, #48	@ 0x30
 801183a:	d016      	beq.n	801186a <UART_SetConfig+0x19a>
 801183c:	2b30      	cmp	r3, #48	@ 0x30
 801183e:	d818      	bhi.n	8011872 <UART_SetConfig+0x1a2>
 8011840:	2b20      	cmp	r3, #32
 8011842:	d00a      	beq.n	801185a <UART_SetConfig+0x18a>
 8011844:	2b20      	cmp	r3, #32
 8011846:	d814      	bhi.n	8011872 <UART_SetConfig+0x1a2>
 8011848:	2b00      	cmp	r3, #0
 801184a:	d002      	beq.n	8011852 <UART_SetConfig+0x182>
 801184c:	2b10      	cmp	r3, #16
 801184e:	d008      	beq.n	8011862 <UART_SetConfig+0x192>
 8011850:	e00f      	b.n	8011872 <UART_SetConfig+0x1a2>
 8011852:	2300      	movs	r3, #0
 8011854:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011858:	e0ad      	b.n	80119b6 <UART_SetConfig+0x2e6>
 801185a:	2302      	movs	r3, #2
 801185c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011860:	e0a9      	b.n	80119b6 <UART_SetConfig+0x2e6>
 8011862:	2304      	movs	r3, #4
 8011864:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011868:	e0a5      	b.n	80119b6 <UART_SetConfig+0x2e6>
 801186a:	2308      	movs	r3, #8
 801186c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011870:	e0a1      	b.n	80119b6 <UART_SetConfig+0x2e6>
 8011872:	2310      	movs	r3, #16
 8011874:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011878:	e09d      	b.n	80119b6 <UART_SetConfig+0x2e6>
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	4a4a      	ldr	r2, [pc, #296]	@ (80119a8 <UART_SetConfig+0x2d8>)
 8011880:	4293      	cmp	r3, r2
 8011882:	d125      	bne.n	80118d0 <UART_SetConfig+0x200>
 8011884:	4b45      	ldr	r3, [pc, #276]	@ (801199c <UART_SetConfig+0x2cc>)
 8011886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801188a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801188e:	2bc0      	cmp	r3, #192	@ 0xc0
 8011890:	d016      	beq.n	80118c0 <UART_SetConfig+0x1f0>
 8011892:	2bc0      	cmp	r3, #192	@ 0xc0
 8011894:	d818      	bhi.n	80118c8 <UART_SetConfig+0x1f8>
 8011896:	2b80      	cmp	r3, #128	@ 0x80
 8011898:	d00a      	beq.n	80118b0 <UART_SetConfig+0x1e0>
 801189a:	2b80      	cmp	r3, #128	@ 0x80
 801189c:	d814      	bhi.n	80118c8 <UART_SetConfig+0x1f8>
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d002      	beq.n	80118a8 <UART_SetConfig+0x1d8>
 80118a2:	2b40      	cmp	r3, #64	@ 0x40
 80118a4:	d008      	beq.n	80118b8 <UART_SetConfig+0x1e8>
 80118a6:	e00f      	b.n	80118c8 <UART_SetConfig+0x1f8>
 80118a8:	2300      	movs	r3, #0
 80118aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80118ae:	e082      	b.n	80119b6 <UART_SetConfig+0x2e6>
 80118b0:	2302      	movs	r3, #2
 80118b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80118b6:	e07e      	b.n	80119b6 <UART_SetConfig+0x2e6>
 80118b8:	2304      	movs	r3, #4
 80118ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80118be:	e07a      	b.n	80119b6 <UART_SetConfig+0x2e6>
 80118c0:	2308      	movs	r3, #8
 80118c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80118c6:	e076      	b.n	80119b6 <UART_SetConfig+0x2e6>
 80118c8:	2310      	movs	r3, #16
 80118ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80118ce:	e072      	b.n	80119b6 <UART_SetConfig+0x2e6>
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	4a35      	ldr	r2, [pc, #212]	@ (80119ac <UART_SetConfig+0x2dc>)
 80118d6:	4293      	cmp	r3, r2
 80118d8:	d12a      	bne.n	8011930 <UART_SetConfig+0x260>
 80118da:	4b30      	ldr	r3, [pc, #192]	@ (801199c <UART_SetConfig+0x2cc>)
 80118dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80118e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80118e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80118e8:	d01a      	beq.n	8011920 <UART_SetConfig+0x250>
 80118ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80118ee:	d81b      	bhi.n	8011928 <UART_SetConfig+0x258>
 80118f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80118f4:	d00c      	beq.n	8011910 <UART_SetConfig+0x240>
 80118f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80118fa:	d815      	bhi.n	8011928 <UART_SetConfig+0x258>
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d003      	beq.n	8011908 <UART_SetConfig+0x238>
 8011900:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011904:	d008      	beq.n	8011918 <UART_SetConfig+0x248>
 8011906:	e00f      	b.n	8011928 <UART_SetConfig+0x258>
 8011908:	2300      	movs	r3, #0
 801190a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801190e:	e052      	b.n	80119b6 <UART_SetConfig+0x2e6>
 8011910:	2302      	movs	r3, #2
 8011912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011916:	e04e      	b.n	80119b6 <UART_SetConfig+0x2e6>
 8011918:	2304      	movs	r3, #4
 801191a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801191e:	e04a      	b.n	80119b6 <UART_SetConfig+0x2e6>
 8011920:	2308      	movs	r3, #8
 8011922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011926:	e046      	b.n	80119b6 <UART_SetConfig+0x2e6>
 8011928:	2310      	movs	r3, #16
 801192a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801192e:	e042      	b.n	80119b6 <UART_SetConfig+0x2e6>
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	4a17      	ldr	r2, [pc, #92]	@ (8011994 <UART_SetConfig+0x2c4>)
 8011936:	4293      	cmp	r3, r2
 8011938:	d13a      	bne.n	80119b0 <UART_SetConfig+0x2e0>
 801193a:	4b18      	ldr	r3, [pc, #96]	@ (801199c <UART_SetConfig+0x2cc>)
 801193c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011940:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8011944:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011948:	d01a      	beq.n	8011980 <UART_SetConfig+0x2b0>
 801194a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801194e:	d81b      	bhi.n	8011988 <UART_SetConfig+0x2b8>
 8011950:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011954:	d00c      	beq.n	8011970 <UART_SetConfig+0x2a0>
 8011956:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801195a:	d815      	bhi.n	8011988 <UART_SetConfig+0x2b8>
 801195c:	2b00      	cmp	r3, #0
 801195e:	d003      	beq.n	8011968 <UART_SetConfig+0x298>
 8011960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011964:	d008      	beq.n	8011978 <UART_SetConfig+0x2a8>
 8011966:	e00f      	b.n	8011988 <UART_SetConfig+0x2b8>
 8011968:	2300      	movs	r3, #0
 801196a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801196e:	e022      	b.n	80119b6 <UART_SetConfig+0x2e6>
 8011970:	2302      	movs	r3, #2
 8011972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011976:	e01e      	b.n	80119b6 <UART_SetConfig+0x2e6>
 8011978:	2304      	movs	r3, #4
 801197a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801197e:	e01a      	b.n	80119b6 <UART_SetConfig+0x2e6>
 8011980:	2308      	movs	r3, #8
 8011982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8011986:	e016      	b.n	80119b6 <UART_SetConfig+0x2e6>
 8011988:	2310      	movs	r3, #16
 801198a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801198e:	e012      	b.n	80119b6 <UART_SetConfig+0x2e6>
 8011990:	efff69f3 	.word	0xefff69f3
 8011994:	40008000 	.word	0x40008000
 8011998:	40013800 	.word	0x40013800
 801199c:	40021000 	.word	0x40021000
 80119a0:	40004400 	.word	0x40004400
 80119a4:	40004800 	.word	0x40004800
 80119a8:	40004c00 	.word	0x40004c00
 80119ac:	40005000 	.word	0x40005000
 80119b0:	2310      	movs	r3, #16
 80119b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	4a9f      	ldr	r2, [pc, #636]	@ (8011c38 <UART_SetConfig+0x568>)
 80119bc:	4293      	cmp	r3, r2
 80119be:	d17a      	bne.n	8011ab6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80119c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80119c4:	2b08      	cmp	r3, #8
 80119c6:	d824      	bhi.n	8011a12 <UART_SetConfig+0x342>
 80119c8:	a201      	add	r2, pc, #4	@ (adr r2, 80119d0 <UART_SetConfig+0x300>)
 80119ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119ce:	bf00      	nop
 80119d0:	080119f5 	.word	0x080119f5
 80119d4:	08011a13 	.word	0x08011a13
 80119d8:	080119fd 	.word	0x080119fd
 80119dc:	08011a13 	.word	0x08011a13
 80119e0:	08011a03 	.word	0x08011a03
 80119e4:	08011a13 	.word	0x08011a13
 80119e8:	08011a13 	.word	0x08011a13
 80119ec:	08011a13 	.word	0x08011a13
 80119f0:	08011a0b 	.word	0x08011a0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80119f4:	f7fd fcc2 	bl	800f37c <HAL_RCC_GetPCLK1Freq>
 80119f8:	61f8      	str	r0, [r7, #28]
        break;
 80119fa:	e010      	b.n	8011a1e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80119fc:	4b8f      	ldr	r3, [pc, #572]	@ (8011c3c <UART_SetConfig+0x56c>)
 80119fe:	61fb      	str	r3, [r7, #28]
        break;
 8011a00:	e00d      	b.n	8011a1e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011a02:	f7fd fc23 	bl	800f24c <HAL_RCC_GetSysClockFreq>
 8011a06:	61f8      	str	r0, [r7, #28]
        break;
 8011a08:	e009      	b.n	8011a1e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011a0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011a0e:	61fb      	str	r3, [r7, #28]
        break;
 8011a10:	e005      	b.n	8011a1e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8011a12:	2300      	movs	r3, #0
 8011a14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8011a16:	2301      	movs	r3, #1
 8011a18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8011a1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011a1e:	69fb      	ldr	r3, [r7, #28]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	f000 80fb 	beq.w	8011c1c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	685a      	ldr	r2, [r3, #4]
 8011a2a:	4613      	mov	r3, r2
 8011a2c:	005b      	lsls	r3, r3, #1
 8011a2e:	4413      	add	r3, r2
 8011a30:	69fa      	ldr	r2, [r7, #28]
 8011a32:	429a      	cmp	r2, r3
 8011a34:	d305      	bcc.n	8011a42 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	685b      	ldr	r3, [r3, #4]
 8011a3a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8011a3c:	69fa      	ldr	r2, [r7, #28]
 8011a3e:	429a      	cmp	r2, r3
 8011a40:	d903      	bls.n	8011a4a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8011a42:	2301      	movs	r3, #1
 8011a44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8011a48:	e0e8      	b.n	8011c1c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8011a4a:	69fb      	ldr	r3, [r7, #28]
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	461c      	mov	r4, r3
 8011a50:	4615      	mov	r5, r2
 8011a52:	f04f 0200 	mov.w	r2, #0
 8011a56:	f04f 0300 	mov.w	r3, #0
 8011a5a:	022b      	lsls	r3, r5, #8
 8011a5c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8011a60:	0222      	lsls	r2, r4, #8
 8011a62:	68f9      	ldr	r1, [r7, #12]
 8011a64:	6849      	ldr	r1, [r1, #4]
 8011a66:	0849      	lsrs	r1, r1, #1
 8011a68:	2000      	movs	r0, #0
 8011a6a:	4688      	mov	r8, r1
 8011a6c:	4681      	mov	r9, r0
 8011a6e:	eb12 0a08 	adds.w	sl, r2, r8
 8011a72:	eb43 0b09 	adc.w	fp, r3, r9
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	685b      	ldr	r3, [r3, #4]
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	603b      	str	r3, [r7, #0]
 8011a7e:	607a      	str	r2, [r7, #4]
 8011a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011a84:	4650      	mov	r0, sl
 8011a86:	4659      	mov	r1, fp
 8011a88:	f7ef f8d6 	bl	8000c38 <__aeabi_uldivmod>
 8011a8c:	4602      	mov	r2, r0
 8011a8e:	460b      	mov	r3, r1
 8011a90:	4613      	mov	r3, r2
 8011a92:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011a94:	69bb      	ldr	r3, [r7, #24]
 8011a96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011a9a:	d308      	bcc.n	8011aae <UART_SetConfig+0x3de>
 8011a9c:	69bb      	ldr	r3, [r7, #24]
 8011a9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011aa2:	d204      	bcs.n	8011aae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	69ba      	ldr	r2, [r7, #24]
 8011aaa:	60da      	str	r2, [r3, #12]
 8011aac:	e0b6      	b.n	8011c1c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8011aae:	2301      	movs	r3, #1
 8011ab0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8011ab4:	e0b2      	b.n	8011c1c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	69db      	ldr	r3, [r3, #28]
 8011aba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011abe:	d15e      	bne.n	8011b7e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8011ac0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011ac4:	2b08      	cmp	r3, #8
 8011ac6:	d828      	bhi.n	8011b1a <UART_SetConfig+0x44a>
 8011ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8011ad0 <UART_SetConfig+0x400>)
 8011aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ace:	bf00      	nop
 8011ad0:	08011af5 	.word	0x08011af5
 8011ad4:	08011afd 	.word	0x08011afd
 8011ad8:	08011b05 	.word	0x08011b05
 8011adc:	08011b1b 	.word	0x08011b1b
 8011ae0:	08011b0b 	.word	0x08011b0b
 8011ae4:	08011b1b 	.word	0x08011b1b
 8011ae8:	08011b1b 	.word	0x08011b1b
 8011aec:	08011b1b 	.word	0x08011b1b
 8011af0:	08011b13 	.word	0x08011b13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011af4:	f7fd fc42 	bl	800f37c <HAL_RCC_GetPCLK1Freq>
 8011af8:	61f8      	str	r0, [r7, #28]
        break;
 8011afa:	e014      	b.n	8011b26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011afc:	f7fd fc54 	bl	800f3a8 <HAL_RCC_GetPCLK2Freq>
 8011b00:	61f8      	str	r0, [r7, #28]
        break;
 8011b02:	e010      	b.n	8011b26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011b04:	4b4d      	ldr	r3, [pc, #308]	@ (8011c3c <UART_SetConfig+0x56c>)
 8011b06:	61fb      	str	r3, [r7, #28]
        break;
 8011b08:	e00d      	b.n	8011b26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011b0a:	f7fd fb9f 	bl	800f24c <HAL_RCC_GetSysClockFreq>
 8011b0e:	61f8      	str	r0, [r7, #28]
        break;
 8011b10:	e009      	b.n	8011b26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011b12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011b16:	61fb      	str	r3, [r7, #28]
        break;
 8011b18:	e005      	b.n	8011b26 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8011b1e:	2301      	movs	r3, #1
 8011b20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8011b24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011b26:	69fb      	ldr	r3, [r7, #28]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d077      	beq.n	8011c1c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8011b2c:	69fb      	ldr	r3, [r7, #28]
 8011b2e:	005a      	lsls	r2, r3, #1
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	685b      	ldr	r3, [r3, #4]
 8011b34:	085b      	lsrs	r3, r3, #1
 8011b36:	441a      	add	r2, r3
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	685b      	ldr	r3, [r3, #4]
 8011b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b40:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011b42:	69bb      	ldr	r3, [r7, #24]
 8011b44:	2b0f      	cmp	r3, #15
 8011b46:	d916      	bls.n	8011b76 <UART_SetConfig+0x4a6>
 8011b48:	69bb      	ldr	r3, [r7, #24]
 8011b4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011b4e:	d212      	bcs.n	8011b76 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011b50:	69bb      	ldr	r3, [r7, #24]
 8011b52:	b29b      	uxth	r3, r3
 8011b54:	f023 030f 	bic.w	r3, r3, #15
 8011b58:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011b5a:	69bb      	ldr	r3, [r7, #24]
 8011b5c:	085b      	lsrs	r3, r3, #1
 8011b5e:	b29b      	uxth	r3, r3
 8011b60:	f003 0307 	and.w	r3, r3, #7
 8011b64:	b29a      	uxth	r2, r3
 8011b66:	8afb      	ldrh	r3, [r7, #22]
 8011b68:	4313      	orrs	r3, r2
 8011b6a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	8afa      	ldrh	r2, [r7, #22]
 8011b72:	60da      	str	r2, [r3, #12]
 8011b74:	e052      	b.n	8011c1c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8011b76:	2301      	movs	r3, #1
 8011b78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8011b7c:	e04e      	b.n	8011c1c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011b7e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011b82:	2b08      	cmp	r3, #8
 8011b84:	d827      	bhi.n	8011bd6 <UART_SetConfig+0x506>
 8011b86:	a201      	add	r2, pc, #4	@ (adr r2, 8011b8c <UART_SetConfig+0x4bc>)
 8011b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b8c:	08011bb1 	.word	0x08011bb1
 8011b90:	08011bb9 	.word	0x08011bb9
 8011b94:	08011bc1 	.word	0x08011bc1
 8011b98:	08011bd7 	.word	0x08011bd7
 8011b9c:	08011bc7 	.word	0x08011bc7
 8011ba0:	08011bd7 	.word	0x08011bd7
 8011ba4:	08011bd7 	.word	0x08011bd7
 8011ba8:	08011bd7 	.word	0x08011bd7
 8011bac:	08011bcf 	.word	0x08011bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011bb0:	f7fd fbe4 	bl	800f37c <HAL_RCC_GetPCLK1Freq>
 8011bb4:	61f8      	str	r0, [r7, #28]
        break;
 8011bb6:	e014      	b.n	8011be2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011bb8:	f7fd fbf6 	bl	800f3a8 <HAL_RCC_GetPCLK2Freq>
 8011bbc:	61f8      	str	r0, [r7, #28]
        break;
 8011bbe:	e010      	b.n	8011be2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011bc0:	4b1e      	ldr	r3, [pc, #120]	@ (8011c3c <UART_SetConfig+0x56c>)
 8011bc2:	61fb      	str	r3, [r7, #28]
        break;
 8011bc4:	e00d      	b.n	8011be2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011bc6:	f7fd fb41 	bl	800f24c <HAL_RCC_GetSysClockFreq>
 8011bca:	61f8      	str	r0, [r7, #28]
        break;
 8011bcc:	e009      	b.n	8011be2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011bce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011bd2:	61fb      	str	r3, [r7, #28]
        break;
 8011bd4:	e005      	b.n	8011be2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8011bda:	2301      	movs	r3, #1
 8011bdc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8011be0:	bf00      	nop
    }

    if (pclk != 0U)
 8011be2:	69fb      	ldr	r3, [r7, #28]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d019      	beq.n	8011c1c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	685b      	ldr	r3, [r3, #4]
 8011bec:	085a      	lsrs	r2, r3, #1
 8011bee:	69fb      	ldr	r3, [r7, #28]
 8011bf0:	441a      	add	r2, r3
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	685b      	ldr	r3, [r3, #4]
 8011bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8011bfa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011bfc:	69bb      	ldr	r3, [r7, #24]
 8011bfe:	2b0f      	cmp	r3, #15
 8011c00:	d909      	bls.n	8011c16 <UART_SetConfig+0x546>
 8011c02:	69bb      	ldr	r3, [r7, #24]
 8011c04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011c08:	d205      	bcs.n	8011c16 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011c0a:	69bb      	ldr	r3, [r7, #24]
 8011c0c:	b29a      	uxth	r2, r3
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	60da      	str	r2, [r3, #12]
 8011c14:	e002      	b.n	8011c1c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8011c16:	2301      	movs	r3, #1
 8011c18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	2200      	movs	r2, #0
 8011c20:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	2200      	movs	r2, #0
 8011c26:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8011c28:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	3728      	adds	r7, #40	@ 0x28
 8011c30:	46bd      	mov	sp, r7
 8011c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011c36:	bf00      	nop
 8011c38:	40008000 	.word	0x40008000
 8011c3c:	00f42400 	.word	0x00f42400

08011c40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011c40:	b480      	push	{r7}
 8011c42:	b083      	sub	sp, #12
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c4c:	f003 0308 	and.w	r3, r3, #8
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d00a      	beq.n	8011c6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	685b      	ldr	r3, [r3, #4]
 8011c5a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	430a      	orrs	r2, r1
 8011c68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c6e:	f003 0301 	and.w	r3, r3, #1
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d00a      	beq.n	8011c8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	685b      	ldr	r3, [r3, #4]
 8011c7c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	430a      	orrs	r2, r1
 8011c8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c90:	f003 0302 	and.w	r3, r3, #2
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d00a      	beq.n	8011cae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	685b      	ldr	r3, [r3, #4]
 8011c9e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	430a      	orrs	r2, r1
 8011cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cb2:	f003 0304 	and.w	r3, r3, #4
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d00a      	beq.n	8011cd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	685b      	ldr	r3, [r3, #4]
 8011cc0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	430a      	orrs	r2, r1
 8011cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cd4:	f003 0310 	and.w	r3, r3, #16
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d00a      	beq.n	8011cf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	689b      	ldr	r3, [r3, #8]
 8011ce2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	430a      	orrs	r2, r1
 8011cf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cf6:	f003 0320 	and.w	r3, r3, #32
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d00a      	beq.n	8011d14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	689b      	ldr	r3, [r3, #8]
 8011d04:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	430a      	orrs	r2, r1
 8011d12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d01a      	beq.n	8011d56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	685b      	ldr	r3, [r3, #4]
 8011d26:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	430a      	orrs	r2, r1
 8011d34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011d3e:	d10a      	bne.n	8011d56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	685b      	ldr	r3, [r3, #4]
 8011d46:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	430a      	orrs	r2, r1
 8011d54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d00a      	beq.n	8011d78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	685b      	ldr	r3, [r3, #4]
 8011d68:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	430a      	orrs	r2, r1
 8011d76:	605a      	str	r2, [r3, #4]
  }
}
 8011d78:	bf00      	nop
 8011d7a:	370c      	adds	r7, #12
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d82:	4770      	bx	lr

08011d84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b098      	sub	sp, #96	@ 0x60
 8011d88:	af02      	add	r7, sp, #8
 8011d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	2200      	movs	r2, #0
 8011d90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011d94:	f7fa fcea 	bl	800c76c <HAL_GetTick>
 8011d98:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	f003 0308 	and.w	r3, r3, #8
 8011da4:	2b08      	cmp	r3, #8
 8011da6:	d12e      	bne.n	8011e06 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011da8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011dac:	9300      	str	r3, [sp, #0]
 8011dae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011db0:	2200      	movs	r2, #0
 8011db2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8011db6:	6878      	ldr	r0, [r7, #4]
 8011db8:	f000 f88c 	bl	8011ed4 <UART_WaitOnFlagUntilTimeout>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d021      	beq.n	8011e06 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dca:	e853 3f00 	ldrex	r3, [r3]
 8011dce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011dd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011dd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	461a      	mov	r2, r3
 8011dde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011de0:	647b      	str	r3, [r7, #68]	@ 0x44
 8011de2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011de4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011de6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011de8:	e841 2300 	strex	r3, r2, [r1]
 8011dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d1e6      	bne.n	8011dc2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2220      	movs	r2, #32
 8011df8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011e02:	2303      	movs	r3, #3
 8011e04:	e062      	b.n	8011ecc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	f003 0304 	and.w	r3, r3, #4
 8011e10:	2b04      	cmp	r3, #4
 8011e12:	d149      	bne.n	8011ea8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011e14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011e18:	9300      	str	r3, [sp, #0]
 8011e1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e1c:	2200      	movs	r2, #0
 8011e1e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8011e22:	6878      	ldr	r0, [r7, #4]
 8011e24:	f000 f856 	bl	8011ed4 <UART_WaitOnFlagUntilTimeout>
 8011e28:	4603      	mov	r3, r0
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d03c      	beq.n	8011ea8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e36:	e853 3f00 	ldrex	r3, [r3]
 8011e3a:	623b      	str	r3, [r7, #32]
   return(result);
 8011e3c:	6a3b      	ldr	r3, [r7, #32]
 8011e3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	461a      	mov	r2, r3
 8011e4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011e4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8011e4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011e52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011e54:	e841 2300 	strex	r3, r2, [r1]
 8011e58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d1e6      	bne.n	8011e2e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	3308      	adds	r3, #8
 8011e66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e68:	693b      	ldr	r3, [r7, #16]
 8011e6a:	e853 3f00 	ldrex	r3, [r3]
 8011e6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	f023 0301 	bic.w	r3, r3, #1
 8011e76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	3308      	adds	r3, #8
 8011e7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011e80:	61fa      	str	r2, [r7, #28]
 8011e82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e84:	69b9      	ldr	r1, [r7, #24]
 8011e86:	69fa      	ldr	r2, [r7, #28]
 8011e88:	e841 2300 	strex	r3, r2, [r1]
 8011e8c:	617b      	str	r3, [r7, #20]
   return(result);
 8011e8e:	697b      	ldr	r3, [r7, #20]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d1e5      	bne.n	8011e60 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	2220      	movs	r2, #32
 8011e98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011ea4:	2303      	movs	r3, #3
 8011ea6:	e011      	b.n	8011ecc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2220      	movs	r2, #32
 8011eac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	2220      	movs	r2, #32
 8011eb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	2200      	movs	r2, #0
 8011eba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8011eca:	2300      	movs	r3, #0
}
 8011ecc:	4618      	mov	r0, r3
 8011ece:	3758      	adds	r7, #88	@ 0x58
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bd80      	pop	{r7, pc}

08011ed4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b084      	sub	sp, #16
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	60f8      	str	r0, [r7, #12]
 8011edc:	60b9      	str	r1, [r7, #8]
 8011ede:	603b      	str	r3, [r7, #0]
 8011ee0:	4613      	mov	r3, r2
 8011ee2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011ee4:	e04f      	b.n	8011f86 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011ee6:	69bb      	ldr	r3, [r7, #24]
 8011ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011eec:	d04b      	beq.n	8011f86 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011eee:	f7fa fc3d 	bl	800c76c <HAL_GetTick>
 8011ef2:	4602      	mov	r2, r0
 8011ef4:	683b      	ldr	r3, [r7, #0]
 8011ef6:	1ad3      	subs	r3, r2, r3
 8011ef8:	69ba      	ldr	r2, [r7, #24]
 8011efa:	429a      	cmp	r2, r3
 8011efc:	d302      	bcc.n	8011f04 <UART_WaitOnFlagUntilTimeout+0x30>
 8011efe:	69bb      	ldr	r3, [r7, #24]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d101      	bne.n	8011f08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011f04:	2303      	movs	r3, #3
 8011f06:	e04e      	b.n	8011fa6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	f003 0304 	and.w	r3, r3, #4
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d037      	beq.n	8011f86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011f16:	68bb      	ldr	r3, [r7, #8]
 8011f18:	2b80      	cmp	r3, #128	@ 0x80
 8011f1a:	d034      	beq.n	8011f86 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011f1c:	68bb      	ldr	r3, [r7, #8]
 8011f1e:	2b40      	cmp	r3, #64	@ 0x40
 8011f20:	d031      	beq.n	8011f86 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	69db      	ldr	r3, [r3, #28]
 8011f28:	f003 0308 	and.w	r3, r3, #8
 8011f2c:	2b08      	cmp	r3, #8
 8011f2e:	d110      	bne.n	8011f52 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	2208      	movs	r2, #8
 8011f36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011f38:	68f8      	ldr	r0, [r7, #12]
 8011f3a:	f000 f838 	bl	8011fae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	2208      	movs	r2, #8
 8011f42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	2200      	movs	r2, #0
 8011f4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8011f4e:	2301      	movs	r3, #1
 8011f50:	e029      	b.n	8011fa6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	69db      	ldr	r3, [r3, #28]
 8011f58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011f5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011f60:	d111      	bne.n	8011f86 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011f6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011f6c:	68f8      	ldr	r0, [r7, #12]
 8011f6e:	f000 f81e 	bl	8011fae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	2220      	movs	r2, #32
 8011f76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8011f82:	2303      	movs	r3, #3
 8011f84:	e00f      	b.n	8011fa6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	69da      	ldr	r2, [r3, #28]
 8011f8c:	68bb      	ldr	r3, [r7, #8]
 8011f8e:	4013      	ands	r3, r2
 8011f90:	68ba      	ldr	r2, [r7, #8]
 8011f92:	429a      	cmp	r2, r3
 8011f94:	bf0c      	ite	eq
 8011f96:	2301      	moveq	r3, #1
 8011f98:	2300      	movne	r3, #0
 8011f9a:	b2db      	uxtb	r3, r3
 8011f9c:	461a      	mov	r2, r3
 8011f9e:	79fb      	ldrb	r3, [r7, #7]
 8011fa0:	429a      	cmp	r2, r3
 8011fa2:	d0a0      	beq.n	8011ee6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011fa4:	2300      	movs	r3, #0
}
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	3710      	adds	r7, #16
 8011faa:	46bd      	mov	sp, r7
 8011fac:	bd80      	pop	{r7, pc}

08011fae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011fae:	b480      	push	{r7}
 8011fb0:	b095      	sub	sp, #84	@ 0x54
 8011fb2:	af00      	add	r7, sp, #0
 8011fb4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011fbe:	e853 3f00 	ldrex	r3, [r3]
 8011fc2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fc6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	461a      	mov	r2, r3
 8011fd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011fd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8011fd6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fd8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011fda:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011fdc:	e841 2300 	strex	r3, r2, [r1]
 8011fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d1e6      	bne.n	8011fb6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	3308      	adds	r3, #8
 8011fee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ff0:	6a3b      	ldr	r3, [r7, #32]
 8011ff2:	e853 3f00 	ldrex	r3, [r3]
 8011ff6:	61fb      	str	r3, [r7, #28]
   return(result);
 8011ff8:	69fb      	ldr	r3, [r7, #28]
 8011ffa:	f023 0301 	bic.w	r3, r3, #1
 8011ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	3308      	adds	r3, #8
 8012006:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012008:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801200a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801200c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801200e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012010:	e841 2300 	strex	r3, r2, [r1]
 8012014:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8012016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012018:	2b00      	cmp	r3, #0
 801201a:	d1e5      	bne.n	8011fe8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012020:	2b01      	cmp	r3, #1
 8012022:	d118      	bne.n	8012056 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	e853 3f00 	ldrex	r3, [r3]
 8012030:	60bb      	str	r3, [r7, #8]
   return(result);
 8012032:	68bb      	ldr	r3, [r7, #8]
 8012034:	f023 0310 	bic.w	r3, r3, #16
 8012038:	647b      	str	r3, [r7, #68]	@ 0x44
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	461a      	mov	r2, r3
 8012040:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012042:	61bb      	str	r3, [r7, #24]
 8012044:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012046:	6979      	ldr	r1, [r7, #20]
 8012048:	69ba      	ldr	r2, [r7, #24]
 801204a:	e841 2300 	strex	r3, r2, [r1]
 801204e:	613b      	str	r3, [r7, #16]
   return(result);
 8012050:	693b      	ldr	r3, [r7, #16]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d1e6      	bne.n	8012024 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	2220      	movs	r2, #32
 801205a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	2200      	movs	r2, #0
 8012062:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2200      	movs	r2, #0
 8012068:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801206a:	bf00      	nop
 801206c:	3754      	adds	r7, #84	@ 0x54
 801206e:	46bd      	mov	sp, r7
 8012070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012074:	4770      	bx	lr

08012076 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012076:	b580      	push	{r7, lr}
 8012078:	b084      	sub	sp, #16
 801207a:	af00      	add	r7, sp, #0
 801207c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012082:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	2200      	movs	r2, #0
 8012088:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	2200      	movs	r2, #0
 8012090:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012094:	68f8      	ldr	r0, [r7, #12]
 8012096:	f7ff fb05 	bl	80116a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801209a:	bf00      	nop
 801209c:	3710      	adds	r7, #16
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}

080120a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80120a2:	b580      	push	{r7, lr}
 80120a4:	b088      	sub	sp, #32
 80120a6:	af00      	add	r7, sp, #0
 80120a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	e853 3f00 	ldrex	r3, [r3]
 80120b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80120b8:	68bb      	ldr	r3, [r7, #8]
 80120ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80120be:	61fb      	str	r3, [r7, #28]
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	461a      	mov	r2, r3
 80120c6:	69fb      	ldr	r3, [r7, #28]
 80120c8:	61bb      	str	r3, [r7, #24]
 80120ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120cc:	6979      	ldr	r1, [r7, #20]
 80120ce:	69ba      	ldr	r2, [r7, #24]
 80120d0:	e841 2300 	strex	r3, r2, [r1]
 80120d4:	613b      	str	r3, [r7, #16]
   return(result);
 80120d6:	693b      	ldr	r3, [r7, #16]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d1e6      	bne.n	80120aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	2220      	movs	r2, #32
 80120e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	2200      	movs	r2, #0
 80120e6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80120e8:	6878      	ldr	r0, [r7, #4]
 80120ea:	f7ff fad1 	bl	8011690 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80120ee:	bf00      	nop
 80120f0:	3720      	adds	r7, #32
 80120f2:	46bd      	mov	sp, r7
 80120f4:	bd80      	pop	{r7, pc}

080120f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80120f6:	b480      	push	{r7}
 80120f8:	b083      	sub	sp, #12
 80120fa:	af00      	add	r7, sp, #0
 80120fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80120fe:	bf00      	nop
 8012100:	370c      	adds	r7, #12
 8012102:	46bd      	mov	sp, r7
 8012104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012108:	4770      	bx	lr
	...

0801210c <std>:
 801210c:	2300      	movs	r3, #0
 801210e:	b510      	push	{r4, lr}
 8012110:	4604      	mov	r4, r0
 8012112:	e9c0 3300 	strd	r3, r3, [r0]
 8012116:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801211a:	6083      	str	r3, [r0, #8]
 801211c:	8181      	strh	r1, [r0, #12]
 801211e:	6643      	str	r3, [r0, #100]	@ 0x64
 8012120:	81c2      	strh	r2, [r0, #14]
 8012122:	6183      	str	r3, [r0, #24]
 8012124:	4619      	mov	r1, r3
 8012126:	2208      	movs	r2, #8
 8012128:	305c      	adds	r0, #92	@ 0x5c
 801212a:	f000 f93c 	bl	80123a6 <memset>
 801212e:	4b0d      	ldr	r3, [pc, #52]	@ (8012164 <std+0x58>)
 8012130:	6263      	str	r3, [r4, #36]	@ 0x24
 8012132:	4b0d      	ldr	r3, [pc, #52]	@ (8012168 <std+0x5c>)
 8012134:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012136:	4b0d      	ldr	r3, [pc, #52]	@ (801216c <std+0x60>)
 8012138:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801213a:	4b0d      	ldr	r3, [pc, #52]	@ (8012170 <std+0x64>)
 801213c:	6323      	str	r3, [r4, #48]	@ 0x30
 801213e:	4b0d      	ldr	r3, [pc, #52]	@ (8012174 <std+0x68>)
 8012140:	6224      	str	r4, [r4, #32]
 8012142:	429c      	cmp	r4, r3
 8012144:	d006      	beq.n	8012154 <std+0x48>
 8012146:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801214a:	4294      	cmp	r4, r2
 801214c:	d002      	beq.n	8012154 <std+0x48>
 801214e:	33d0      	adds	r3, #208	@ 0xd0
 8012150:	429c      	cmp	r4, r3
 8012152:	d105      	bne.n	8012160 <std+0x54>
 8012154:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801215c:	f000 b99c 	b.w	8012498 <__retarget_lock_init_recursive>
 8012160:	bd10      	pop	{r4, pc}
 8012162:	bf00      	nop
 8012164:	08012321 	.word	0x08012321
 8012168:	08012343 	.word	0x08012343
 801216c:	0801237b 	.word	0x0801237b
 8012170:	0801239f 	.word	0x0801239f
 8012174:	200009f4 	.word	0x200009f4

08012178 <stdio_exit_handler>:
 8012178:	4a02      	ldr	r2, [pc, #8]	@ (8012184 <stdio_exit_handler+0xc>)
 801217a:	4903      	ldr	r1, [pc, #12]	@ (8012188 <stdio_exit_handler+0x10>)
 801217c:	4803      	ldr	r0, [pc, #12]	@ (801218c <stdio_exit_handler+0x14>)
 801217e:	f000 b869 	b.w	8012254 <_fwalk_sglue>
 8012182:	bf00      	nop
 8012184:	2000022c 	.word	0x2000022c
 8012188:	08012fe5 	.word	0x08012fe5
 801218c:	2000023c 	.word	0x2000023c

08012190 <cleanup_stdio>:
 8012190:	6841      	ldr	r1, [r0, #4]
 8012192:	4b0c      	ldr	r3, [pc, #48]	@ (80121c4 <cleanup_stdio+0x34>)
 8012194:	4299      	cmp	r1, r3
 8012196:	b510      	push	{r4, lr}
 8012198:	4604      	mov	r4, r0
 801219a:	d001      	beq.n	80121a0 <cleanup_stdio+0x10>
 801219c:	f000 ff22 	bl	8012fe4 <_fflush_r>
 80121a0:	68a1      	ldr	r1, [r4, #8]
 80121a2:	4b09      	ldr	r3, [pc, #36]	@ (80121c8 <cleanup_stdio+0x38>)
 80121a4:	4299      	cmp	r1, r3
 80121a6:	d002      	beq.n	80121ae <cleanup_stdio+0x1e>
 80121a8:	4620      	mov	r0, r4
 80121aa:	f000 ff1b 	bl	8012fe4 <_fflush_r>
 80121ae:	68e1      	ldr	r1, [r4, #12]
 80121b0:	4b06      	ldr	r3, [pc, #24]	@ (80121cc <cleanup_stdio+0x3c>)
 80121b2:	4299      	cmp	r1, r3
 80121b4:	d004      	beq.n	80121c0 <cleanup_stdio+0x30>
 80121b6:	4620      	mov	r0, r4
 80121b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121bc:	f000 bf12 	b.w	8012fe4 <_fflush_r>
 80121c0:	bd10      	pop	{r4, pc}
 80121c2:	bf00      	nop
 80121c4:	200009f4 	.word	0x200009f4
 80121c8:	20000a5c 	.word	0x20000a5c
 80121cc:	20000ac4 	.word	0x20000ac4

080121d0 <global_stdio_init.part.0>:
 80121d0:	b510      	push	{r4, lr}
 80121d2:	4b0b      	ldr	r3, [pc, #44]	@ (8012200 <global_stdio_init.part.0+0x30>)
 80121d4:	4c0b      	ldr	r4, [pc, #44]	@ (8012204 <global_stdio_init.part.0+0x34>)
 80121d6:	4a0c      	ldr	r2, [pc, #48]	@ (8012208 <global_stdio_init.part.0+0x38>)
 80121d8:	601a      	str	r2, [r3, #0]
 80121da:	4620      	mov	r0, r4
 80121dc:	2200      	movs	r2, #0
 80121de:	2104      	movs	r1, #4
 80121e0:	f7ff ff94 	bl	801210c <std>
 80121e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80121e8:	2201      	movs	r2, #1
 80121ea:	2109      	movs	r1, #9
 80121ec:	f7ff ff8e 	bl	801210c <std>
 80121f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80121f4:	2202      	movs	r2, #2
 80121f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121fa:	2112      	movs	r1, #18
 80121fc:	f7ff bf86 	b.w	801210c <std>
 8012200:	20000b2c 	.word	0x20000b2c
 8012204:	200009f4 	.word	0x200009f4
 8012208:	08012179 	.word	0x08012179

0801220c <__sfp_lock_acquire>:
 801220c:	4801      	ldr	r0, [pc, #4]	@ (8012214 <__sfp_lock_acquire+0x8>)
 801220e:	f000 b944 	b.w	801249a <__retarget_lock_acquire_recursive>
 8012212:	bf00      	nop
 8012214:	20000b35 	.word	0x20000b35

08012218 <__sfp_lock_release>:
 8012218:	4801      	ldr	r0, [pc, #4]	@ (8012220 <__sfp_lock_release+0x8>)
 801221a:	f000 b93f 	b.w	801249c <__retarget_lock_release_recursive>
 801221e:	bf00      	nop
 8012220:	20000b35 	.word	0x20000b35

08012224 <__sinit>:
 8012224:	b510      	push	{r4, lr}
 8012226:	4604      	mov	r4, r0
 8012228:	f7ff fff0 	bl	801220c <__sfp_lock_acquire>
 801222c:	6a23      	ldr	r3, [r4, #32]
 801222e:	b11b      	cbz	r3, 8012238 <__sinit+0x14>
 8012230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012234:	f7ff bff0 	b.w	8012218 <__sfp_lock_release>
 8012238:	4b04      	ldr	r3, [pc, #16]	@ (801224c <__sinit+0x28>)
 801223a:	6223      	str	r3, [r4, #32]
 801223c:	4b04      	ldr	r3, [pc, #16]	@ (8012250 <__sinit+0x2c>)
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d1f5      	bne.n	8012230 <__sinit+0xc>
 8012244:	f7ff ffc4 	bl	80121d0 <global_stdio_init.part.0>
 8012248:	e7f2      	b.n	8012230 <__sinit+0xc>
 801224a:	bf00      	nop
 801224c:	08012191 	.word	0x08012191
 8012250:	20000b2c 	.word	0x20000b2c

08012254 <_fwalk_sglue>:
 8012254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012258:	4607      	mov	r7, r0
 801225a:	4688      	mov	r8, r1
 801225c:	4614      	mov	r4, r2
 801225e:	2600      	movs	r6, #0
 8012260:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012264:	f1b9 0901 	subs.w	r9, r9, #1
 8012268:	d505      	bpl.n	8012276 <_fwalk_sglue+0x22>
 801226a:	6824      	ldr	r4, [r4, #0]
 801226c:	2c00      	cmp	r4, #0
 801226e:	d1f7      	bne.n	8012260 <_fwalk_sglue+0xc>
 8012270:	4630      	mov	r0, r6
 8012272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012276:	89ab      	ldrh	r3, [r5, #12]
 8012278:	2b01      	cmp	r3, #1
 801227a:	d907      	bls.n	801228c <_fwalk_sglue+0x38>
 801227c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012280:	3301      	adds	r3, #1
 8012282:	d003      	beq.n	801228c <_fwalk_sglue+0x38>
 8012284:	4629      	mov	r1, r5
 8012286:	4638      	mov	r0, r7
 8012288:	47c0      	blx	r8
 801228a:	4306      	orrs	r6, r0
 801228c:	3568      	adds	r5, #104	@ 0x68
 801228e:	e7e9      	b.n	8012264 <_fwalk_sglue+0x10>

08012290 <iprintf>:
 8012290:	b40f      	push	{r0, r1, r2, r3}
 8012292:	b507      	push	{r0, r1, r2, lr}
 8012294:	4906      	ldr	r1, [pc, #24]	@ (80122b0 <iprintf+0x20>)
 8012296:	ab04      	add	r3, sp, #16
 8012298:	6808      	ldr	r0, [r1, #0]
 801229a:	f853 2b04 	ldr.w	r2, [r3], #4
 801229e:	6881      	ldr	r1, [r0, #8]
 80122a0:	9301      	str	r3, [sp, #4]
 80122a2:	f000 fb77 	bl	8012994 <_vfiprintf_r>
 80122a6:	b003      	add	sp, #12
 80122a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80122ac:	b004      	add	sp, #16
 80122ae:	4770      	bx	lr
 80122b0:	20000238 	.word	0x20000238

080122b4 <sniprintf>:
 80122b4:	b40c      	push	{r2, r3}
 80122b6:	b530      	push	{r4, r5, lr}
 80122b8:	4b18      	ldr	r3, [pc, #96]	@ (801231c <sniprintf+0x68>)
 80122ba:	1e0c      	subs	r4, r1, #0
 80122bc:	681d      	ldr	r5, [r3, #0]
 80122be:	b09d      	sub	sp, #116	@ 0x74
 80122c0:	da08      	bge.n	80122d4 <sniprintf+0x20>
 80122c2:	238b      	movs	r3, #139	@ 0x8b
 80122c4:	602b      	str	r3, [r5, #0]
 80122c6:	f04f 30ff 	mov.w	r0, #4294967295
 80122ca:	b01d      	add	sp, #116	@ 0x74
 80122cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80122d0:	b002      	add	sp, #8
 80122d2:	4770      	bx	lr
 80122d4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80122d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80122dc:	f04f 0300 	mov.w	r3, #0
 80122e0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80122e2:	bf14      	ite	ne
 80122e4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80122e8:	4623      	moveq	r3, r4
 80122ea:	9304      	str	r3, [sp, #16]
 80122ec:	9307      	str	r3, [sp, #28]
 80122ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80122f2:	9002      	str	r0, [sp, #8]
 80122f4:	9006      	str	r0, [sp, #24]
 80122f6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80122fa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80122fc:	ab21      	add	r3, sp, #132	@ 0x84
 80122fe:	a902      	add	r1, sp, #8
 8012300:	4628      	mov	r0, r5
 8012302:	9301      	str	r3, [sp, #4]
 8012304:	f000 fa20 	bl	8012748 <_svfiprintf_r>
 8012308:	1c43      	adds	r3, r0, #1
 801230a:	bfbc      	itt	lt
 801230c:	238b      	movlt	r3, #139	@ 0x8b
 801230e:	602b      	strlt	r3, [r5, #0]
 8012310:	2c00      	cmp	r4, #0
 8012312:	d0da      	beq.n	80122ca <sniprintf+0x16>
 8012314:	9b02      	ldr	r3, [sp, #8]
 8012316:	2200      	movs	r2, #0
 8012318:	701a      	strb	r2, [r3, #0]
 801231a:	e7d6      	b.n	80122ca <sniprintf+0x16>
 801231c:	20000238 	.word	0x20000238

08012320 <__sread>:
 8012320:	b510      	push	{r4, lr}
 8012322:	460c      	mov	r4, r1
 8012324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012328:	f000 f868 	bl	80123fc <_read_r>
 801232c:	2800      	cmp	r0, #0
 801232e:	bfab      	itete	ge
 8012330:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012332:	89a3      	ldrhlt	r3, [r4, #12]
 8012334:	181b      	addge	r3, r3, r0
 8012336:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801233a:	bfac      	ite	ge
 801233c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801233e:	81a3      	strhlt	r3, [r4, #12]
 8012340:	bd10      	pop	{r4, pc}

08012342 <__swrite>:
 8012342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012346:	461f      	mov	r7, r3
 8012348:	898b      	ldrh	r3, [r1, #12]
 801234a:	05db      	lsls	r3, r3, #23
 801234c:	4605      	mov	r5, r0
 801234e:	460c      	mov	r4, r1
 8012350:	4616      	mov	r6, r2
 8012352:	d505      	bpl.n	8012360 <__swrite+0x1e>
 8012354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012358:	2302      	movs	r3, #2
 801235a:	2200      	movs	r2, #0
 801235c:	f000 f83c 	bl	80123d8 <_lseek_r>
 8012360:	89a3      	ldrh	r3, [r4, #12]
 8012362:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012366:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801236a:	81a3      	strh	r3, [r4, #12]
 801236c:	4632      	mov	r2, r6
 801236e:	463b      	mov	r3, r7
 8012370:	4628      	mov	r0, r5
 8012372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012376:	f000 b853 	b.w	8012420 <_write_r>

0801237a <__sseek>:
 801237a:	b510      	push	{r4, lr}
 801237c:	460c      	mov	r4, r1
 801237e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012382:	f000 f829 	bl	80123d8 <_lseek_r>
 8012386:	1c43      	adds	r3, r0, #1
 8012388:	89a3      	ldrh	r3, [r4, #12]
 801238a:	bf15      	itete	ne
 801238c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801238e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012392:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012396:	81a3      	strheq	r3, [r4, #12]
 8012398:	bf18      	it	ne
 801239a:	81a3      	strhne	r3, [r4, #12]
 801239c:	bd10      	pop	{r4, pc}

0801239e <__sclose>:
 801239e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123a2:	f000 b809 	b.w	80123b8 <_close_r>

080123a6 <memset>:
 80123a6:	4402      	add	r2, r0
 80123a8:	4603      	mov	r3, r0
 80123aa:	4293      	cmp	r3, r2
 80123ac:	d100      	bne.n	80123b0 <memset+0xa>
 80123ae:	4770      	bx	lr
 80123b0:	f803 1b01 	strb.w	r1, [r3], #1
 80123b4:	e7f9      	b.n	80123aa <memset+0x4>
	...

080123b8 <_close_r>:
 80123b8:	b538      	push	{r3, r4, r5, lr}
 80123ba:	4d06      	ldr	r5, [pc, #24]	@ (80123d4 <_close_r+0x1c>)
 80123bc:	2300      	movs	r3, #0
 80123be:	4604      	mov	r4, r0
 80123c0:	4608      	mov	r0, r1
 80123c2:	602b      	str	r3, [r5, #0]
 80123c4:	f7ef fc1b 	bl	8001bfe <_close>
 80123c8:	1c43      	adds	r3, r0, #1
 80123ca:	d102      	bne.n	80123d2 <_close_r+0x1a>
 80123cc:	682b      	ldr	r3, [r5, #0]
 80123ce:	b103      	cbz	r3, 80123d2 <_close_r+0x1a>
 80123d0:	6023      	str	r3, [r4, #0]
 80123d2:	bd38      	pop	{r3, r4, r5, pc}
 80123d4:	20000b30 	.word	0x20000b30

080123d8 <_lseek_r>:
 80123d8:	b538      	push	{r3, r4, r5, lr}
 80123da:	4d07      	ldr	r5, [pc, #28]	@ (80123f8 <_lseek_r+0x20>)
 80123dc:	4604      	mov	r4, r0
 80123de:	4608      	mov	r0, r1
 80123e0:	4611      	mov	r1, r2
 80123e2:	2200      	movs	r2, #0
 80123e4:	602a      	str	r2, [r5, #0]
 80123e6:	461a      	mov	r2, r3
 80123e8:	f7ef fc30 	bl	8001c4c <_lseek>
 80123ec:	1c43      	adds	r3, r0, #1
 80123ee:	d102      	bne.n	80123f6 <_lseek_r+0x1e>
 80123f0:	682b      	ldr	r3, [r5, #0]
 80123f2:	b103      	cbz	r3, 80123f6 <_lseek_r+0x1e>
 80123f4:	6023      	str	r3, [r4, #0]
 80123f6:	bd38      	pop	{r3, r4, r5, pc}
 80123f8:	20000b30 	.word	0x20000b30

080123fc <_read_r>:
 80123fc:	b538      	push	{r3, r4, r5, lr}
 80123fe:	4d07      	ldr	r5, [pc, #28]	@ (801241c <_read_r+0x20>)
 8012400:	4604      	mov	r4, r0
 8012402:	4608      	mov	r0, r1
 8012404:	4611      	mov	r1, r2
 8012406:	2200      	movs	r2, #0
 8012408:	602a      	str	r2, [r5, #0]
 801240a:	461a      	mov	r2, r3
 801240c:	f7ef fbbe 	bl	8001b8c <_read>
 8012410:	1c43      	adds	r3, r0, #1
 8012412:	d102      	bne.n	801241a <_read_r+0x1e>
 8012414:	682b      	ldr	r3, [r5, #0]
 8012416:	b103      	cbz	r3, 801241a <_read_r+0x1e>
 8012418:	6023      	str	r3, [r4, #0]
 801241a:	bd38      	pop	{r3, r4, r5, pc}
 801241c:	20000b30 	.word	0x20000b30

08012420 <_write_r>:
 8012420:	b538      	push	{r3, r4, r5, lr}
 8012422:	4d07      	ldr	r5, [pc, #28]	@ (8012440 <_write_r+0x20>)
 8012424:	4604      	mov	r4, r0
 8012426:	4608      	mov	r0, r1
 8012428:	4611      	mov	r1, r2
 801242a:	2200      	movs	r2, #0
 801242c:	602a      	str	r2, [r5, #0]
 801242e:	461a      	mov	r2, r3
 8012430:	f7ef fbc9 	bl	8001bc6 <_write>
 8012434:	1c43      	adds	r3, r0, #1
 8012436:	d102      	bne.n	801243e <_write_r+0x1e>
 8012438:	682b      	ldr	r3, [r5, #0]
 801243a:	b103      	cbz	r3, 801243e <_write_r+0x1e>
 801243c:	6023      	str	r3, [r4, #0]
 801243e:	bd38      	pop	{r3, r4, r5, pc}
 8012440:	20000b30 	.word	0x20000b30

08012444 <__errno>:
 8012444:	4b01      	ldr	r3, [pc, #4]	@ (801244c <__errno+0x8>)
 8012446:	6818      	ldr	r0, [r3, #0]
 8012448:	4770      	bx	lr
 801244a:	bf00      	nop
 801244c:	20000238 	.word	0x20000238

08012450 <__libc_init_array>:
 8012450:	b570      	push	{r4, r5, r6, lr}
 8012452:	4d0d      	ldr	r5, [pc, #52]	@ (8012488 <__libc_init_array+0x38>)
 8012454:	4c0d      	ldr	r4, [pc, #52]	@ (801248c <__libc_init_array+0x3c>)
 8012456:	1b64      	subs	r4, r4, r5
 8012458:	10a4      	asrs	r4, r4, #2
 801245a:	2600      	movs	r6, #0
 801245c:	42a6      	cmp	r6, r4
 801245e:	d109      	bne.n	8012474 <__libc_init_array+0x24>
 8012460:	4d0b      	ldr	r5, [pc, #44]	@ (8012490 <__libc_init_array+0x40>)
 8012462:	4c0c      	ldr	r4, [pc, #48]	@ (8012494 <__libc_init_array+0x44>)
 8012464:	f001 ff06 	bl	8014274 <_init>
 8012468:	1b64      	subs	r4, r4, r5
 801246a:	10a4      	asrs	r4, r4, #2
 801246c:	2600      	movs	r6, #0
 801246e:	42a6      	cmp	r6, r4
 8012470:	d105      	bne.n	801247e <__libc_init_array+0x2e>
 8012472:	bd70      	pop	{r4, r5, r6, pc}
 8012474:	f855 3b04 	ldr.w	r3, [r5], #4
 8012478:	4798      	blx	r3
 801247a:	3601      	adds	r6, #1
 801247c:	e7ee      	b.n	801245c <__libc_init_array+0xc>
 801247e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012482:	4798      	blx	r3
 8012484:	3601      	adds	r6, #1
 8012486:	e7f2      	b.n	801246e <__libc_init_array+0x1e>
 8012488:	080147d8 	.word	0x080147d8
 801248c:	080147d8 	.word	0x080147d8
 8012490:	080147d8 	.word	0x080147d8
 8012494:	080147dc 	.word	0x080147dc

08012498 <__retarget_lock_init_recursive>:
 8012498:	4770      	bx	lr

0801249a <__retarget_lock_acquire_recursive>:
 801249a:	4770      	bx	lr

0801249c <__retarget_lock_release_recursive>:
 801249c:	4770      	bx	lr
	...

080124a0 <_free_r>:
 80124a0:	b538      	push	{r3, r4, r5, lr}
 80124a2:	4605      	mov	r5, r0
 80124a4:	2900      	cmp	r1, #0
 80124a6:	d041      	beq.n	801252c <_free_r+0x8c>
 80124a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80124ac:	1f0c      	subs	r4, r1, #4
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	bfb8      	it	lt
 80124b2:	18e4      	addlt	r4, r4, r3
 80124b4:	f000 f8e0 	bl	8012678 <__malloc_lock>
 80124b8:	4a1d      	ldr	r2, [pc, #116]	@ (8012530 <_free_r+0x90>)
 80124ba:	6813      	ldr	r3, [r2, #0]
 80124bc:	b933      	cbnz	r3, 80124cc <_free_r+0x2c>
 80124be:	6063      	str	r3, [r4, #4]
 80124c0:	6014      	str	r4, [r2, #0]
 80124c2:	4628      	mov	r0, r5
 80124c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124c8:	f000 b8dc 	b.w	8012684 <__malloc_unlock>
 80124cc:	42a3      	cmp	r3, r4
 80124ce:	d908      	bls.n	80124e2 <_free_r+0x42>
 80124d0:	6820      	ldr	r0, [r4, #0]
 80124d2:	1821      	adds	r1, r4, r0
 80124d4:	428b      	cmp	r3, r1
 80124d6:	bf01      	itttt	eq
 80124d8:	6819      	ldreq	r1, [r3, #0]
 80124da:	685b      	ldreq	r3, [r3, #4]
 80124dc:	1809      	addeq	r1, r1, r0
 80124de:	6021      	streq	r1, [r4, #0]
 80124e0:	e7ed      	b.n	80124be <_free_r+0x1e>
 80124e2:	461a      	mov	r2, r3
 80124e4:	685b      	ldr	r3, [r3, #4]
 80124e6:	b10b      	cbz	r3, 80124ec <_free_r+0x4c>
 80124e8:	42a3      	cmp	r3, r4
 80124ea:	d9fa      	bls.n	80124e2 <_free_r+0x42>
 80124ec:	6811      	ldr	r1, [r2, #0]
 80124ee:	1850      	adds	r0, r2, r1
 80124f0:	42a0      	cmp	r0, r4
 80124f2:	d10b      	bne.n	801250c <_free_r+0x6c>
 80124f4:	6820      	ldr	r0, [r4, #0]
 80124f6:	4401      	add	r1, r0
 80124f8:	1850      	adds	r0, r2, r1
 80124fa:	4283      	cmp	r3, r0
 80124fc:	6011      	str	r1, [r2, #0]
 80124fe:	d1e0      	bne.n	80124c2 <_free_r+0x22>
 8012500:	6818      	ldr	r0, [r3, #0]
 8012502:	685b      	ldr	r3, [r3, #4]
 8012504:	6053      	str	r3, [r2, #4]
 8012506:	4408      	add	r0, r1
 8012508:	6010      	str	r0, [r2, #0]
 801250a:	e7da      	b.n	80124c2 <_free_r+0x22>
 801250c:	d902      	bls.n	8012514 <_free_r+0x74>
 801250e:	230c      	movs	r3, #12
 8012510:	602b      	str	r3, [r5, #0]
 8012512:	e7d6      	b.n	80124c2 <_free_r+0x22>
 8012514:	6820      	ldr	r0, [r4, #0]
 8012516:	1821      	adds	r1, r4, r0
 8012518:	428b      	cmp	r3, r1
 801251a:	bf04      	itt	eq
 801251c:	6819      	ldreq	r1, [r3, #0]
 801251e:	685b      	ldreq	r3, [r3, #4]
 8012520:	6063      	str	r3, [r4, #4]
 8012522:	bf04      	itt	eq
 8012524:	1809      	addeq	r1, r1, r0
 8012526:	6021      	streq	r1, [r4, #0]
 8012528:	6054      	str	r4, [r2, #4]
 801252a:	e7ca      	b.n	80124c2 <_free_r+0x22>
 801252c:	bd38      	pop	{r3, r4, r5, pc}
 801252e:	bf00      	nop
 8012530:	20000b3c 	.word	0x20000b3c

08012534 <sbrk_aligned>:
 8012534:	b570      	push	{r4, r5, r6, lr}
 8012536:	4e0f      	ldr	r6, [pc, #60]	@ (8012574 <sbrk_aligned+0x40>)
 8012538:	460c      	mov	r4, r1
 801253a:	6831      	ldr	r1, [r6, #0]
 801253c:	4605      	mov	r5, r0
 801253e:	b911      	cbnz	r1, 8012546 <sbrk_aligned+0x12>
 8012540:	f000 fe26 	bl	8013190 <_sbrk_r>
 8012544:	6030      	str	r0, [r6, #0]
 8012546:	4621      	mov	r1, r4
 8012548:	4628      	mov	r0, r5
 801254a:	f000 fe21 	bl	8013190 <_sbrk_r>
 801254e:	1c43      	adds	r3, r0, #1
 8012550:	d103      	bne.n	801255a <sbrk_aligned+0x26>
 8012552:	f04f 34ff 	mov.w	r4, #4294967295
 8012556:	4620      	mov	r0, r4
 8012558:	bd70      	pop	{r4, r5, r6, pc}
 801255a:	1cc4      	adds	r4, r0, #3
 801255c:	f024 0403 	bic.w	r4, r4, #3
 8012560:	42a0      	cmp	r0, r4
 8012562:	d0f8      	beq.n	8012556 <sbrk_aligned+0x22>
 8012564:	1a21      	subs	r1, r4, r0
 8012566:	4628      	mov	r0, r5
 8012568:	f000 fe12 	bl	8013190 <_sbrk_r>
 801256c:	3001      	adds	r0, #1
 801256e:	d1f2      	bne.n	8012556 <sbrk_aligned+0x22>
 8012570:	e7ef      	b.n	8012552 <sbrk_aligned+0x1e>
 8012572:	bf00      	nop
 8012574:	20000b38 	.word	0x20000b38

08012578 <_malloc_r>:
 8012578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801257c:	1ccd      	adds	r5, r1, #3
 801257e:	f025 0503 	bic.w	r5, r5, #3
 8012582:	3508      	adds	r5, #8
 8012584:	2d0c      	cmp	r5, #12
 8012586:	bf38      	it	cc
 8012588:	250c      	movcc	r5, #12
 801258a:	2d00      	cmp	r5, #0
 801258c:	4606      	mov	r6, r0
 801258e:	db01      	blt.n	8012594 <_malloc_r+0x1c>
 8012590:	42a9      	cmp	r1, r5
 8012592:	d904      	bls.n	801259e <_malloc_r+0x26>
 8012594:	230c      	movs	r3, #12
 8012596:	6033      	str	r3, [r6, #0]
 8012598:	2000      	movs	r0, #0
 801259a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801259e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012674 <_malloc_r+0xfc>
 80125a2:	f000 f869 	bl	8012678 <__malloc_lock>
 80125a6:	f8d8 3000 	ldr.w	r3, [r8]
 80125aa:	461c      	mov	r4, r3
 80125ac:	bb44      	cbnz	r4, 8012600 <_malloc_r+0x88>
 80125ae:	4629      	mov	r1, r5
 80125b0:	4630      	mov	r0, r6
 80125b2:	f7ff ffbf 	bl	8012534 <sbrk_aligned>
 80125b6:	1c43      	adds	r3, r0, #1
 80125b8:	4604      	mov	r4, r0
 80125ba:	d158      	bne.n	801266e <_malloc_r+0xf6>
 80125bc:	f8d8 4000 	ldr.w	r4, [r8]
 80125c0:	4627      	mov	r7, r4
 80125c2:	2f00      	cmp	r7, #0
 80125c4:	d143      	bne.n	801264e <_malloc_r+0xd6>
 80125c6:	2c00      	cmp	r4, #0
 80125c8:	d04b      	beq.n	8012662 <_malloc_r+0xea>
 80125ca:	6823      	ldr	r3, [r4, #0]
 80125cc:	4639      	mov	r1, r7
 80125ce:	4630      	mov	r0, r6
 80125d0:	eb04 0903 	add.w	r9, r4, r3
 80125d4:	f000 fddc 	bl	8013190 <_sbrk_r>
 80125d8:	4581      	cmp	r9, r0
 80125da:	d142      	bne.n	8012662 <_malloc_r+0xea>
 80125dc:	6821      	ldr	r1, [r4, #0]
 80125de:	1a6d      	subs	r5, r5, r1
 80125e0:	4629      	mov	r1, r5
 80125e2:	4630      	mov	r0, r6
 80125e4:	f7ff ffa6 	bl	8012534 <sbrk_aligned>
 80125e8:	3001      	adds	r0, #1
 80125ea:	d03a      	beq.n	8012662 <_malloc_r+0xea>
 80125ec:	6823      	ldr	r3, [r4, #0]
 80125ee:	442b      	add	r3, r5
 80125f0:	6023      	str	r3, [r4, #0]
 80125f2:	f8d8 3000 	ldr.w	r3, [r8]
 80125f6:	685a      	ldr	r2, [r3, #4]
 80125f8:	bb62      	cbnz	r2, 8012654 <_malloc_r+0xdc>
 80125fa:	f8c8 7000 	str.w	r7, [r8]
 80125fe:	e00f      	b.n	8012620 <_malloc_r+0xa8>
 8012600:	6822      	ldr	r2, [r4, #0]
 8012602:	1b52      	subs	r2, r2, r5
 8012604:	d420      	bmi.n	8012648 <_malloc_r+0xd0>
 8012606:	2a0b      	cmp	r2, #11
 8012608:	d917      	bls.n	801263a <_malloc_r+0xc2>
 801260a:	1961      	adds	r1, r4, r5
 801260c:	42a3      	cmp	r3, r4
 801260e:	6025      	str	r5, [r4, #0]
 8012610:	bf18      	it	ne
 8012612:	6059      	strne	r1, [r3, #4]
 8012614:	6863      	ldr	r3, [r4, #4]
 8012616:	bf08      	it	eq
 8012618:	f8c8 1000 	streq.w	r1, [r8]
 801261c:	5162      	str	r2, [r4, r5]
 801261e:	604b      	str	r3, [r1, #4]
 8012620:	4630      	mov	r0, r6
 8012622:	f000 f82f 	bl	8012684 <__malloc_unlock>
 8012626:	f104 000b 	add.w	r0, r4, #11
 801262a:	1d23      	adds	r3, r4, #4
 801262c:	f020 0007 	bic.w	r0, r0, #7
 8012630:	1ac2      	subs	r2, r0, r3
 8012632:	bf1c      	itt	ne
 8012634:	1a1b      	subne	r3, r3, r0
 8012636:	50a3      	strne	r3, [r4, r2]
 8012638:	e7af      	b.n	801259a <_malloc_r+0x22>
 801263a:	6862      	ldr	r2, [r4, #4]
 801263c:	42a3      	cmp	r3, r4
 801263e:	bf0c      	ite	eq
 8012640:	f8c8 2000 	streq.w	r2, [r8]
 8012644:	605a      	strne	r2, [r3, #4]
 8012646:	e7eb      	b.n	8012620 <_malloc_r+0xa8>
 8012648:	4623      	mov	r3, r4
 801264a:	6864      	ldr	r4, [r4, #4]
 801264c:	e7ae      	b.n	80125ac <_malloc_r+0x34>
 801264e:	463c      	mov	r4, r7
 8012650:	687f      	ldr	r7, [r7, #4]
 8012652:	e7b6      	b.n	80125c2 <_malloc_r+0x4a>
 8012654:	461a      	mov	r2, r3
 8012656:	685b      	ldr	r3, [r3, #4]
 8012658:	42a3      	cmp	r3, r4
 801265a:	d1fb      	bne.n	8012654 <_malloc_r+0xdc>
 801265c:	2300      	movs	r3, #0
 801265e:	6053      	str	r3, [r2, #4]
 8012660:	e7de      	b.n	8012620 <_malloc_r+0xa8>
 8012662:	230c      	movs	r3, #12
 8012664:	6033      	str	r3, [r6, #0]
 8012666:	4630      	mov	r0, r6
 8012668:	f000 f80c 	bl	8012684 <__malloc_unlock>
 801266c:	e794      	b.n	8012598 <_malloc_r+0x20>
 801266e:	6005      	str	r5, [r0, #0]
 8012670:	e7d6      	b.n	8012620 <_malloc_r+0xa8>
 8012672:	bf00      	nop
 8012674:	20000b3c 	.word	0x20000b3c

08012678 <__malloc_lock>:
 8012678:	4801      	ldr	r0, [pc, #4]	@ (8012680 <__malloc_lock+0x8>)
 801267a:	f7ff bf0e 	b.w	801249a <__retarget_lock_acquire_recursive>
 801267e:	bf00      	nop
 8012680:	20000b34 	.word	0x20000b34

08012684 <__malloc_unlock>:
 8012684:	4801      	ldr	r0, [pc, #4]	@ (801268c <__malloc_unlock+0x8>)
 8012686:	f7ff bf09 	b.w	801249c <__retarget_lock_release_recursive>
 801268a:	bf00      	nop
 801268c:	20000b34 	.word	0x20000b34

08012690 <__ssputs_r>:
 8012690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012694:	688e      	ldr	r6, [r1, #8]
 8012696:	461f      	mov	r7, r3
 8012698:	42be      	cmp	r6, r7
 801269a:	680b      	ldr	r3, [r1, #0]
 801269c:	4682      	mov	sl, r0
 801269e:	460c      	mov	r4, r1
 80126a0:	4690      	mov	r8, r2
 80126a2:	d82d      	bhi.n	8012700 <__ssputs_r+0x70>
 80126a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80126a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80126ac:	d026      	beq.n	80126fc <__ssputs_r+0x6c>
 80126ae:	6965      	ldr	r5, [r4, #20]
 80126b0:	6909      	ldr	r1, [r1, #16]
 80126b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80126b6:	eba3 0901 	sub.w	r9, r3, r1
 80126ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80126be:	1c7b      	adds	r3, r7, #1
 80126c0:	444b      	add	r3, r9
 80126c2:	106d      	asrs	r5, r5, #1
 80126c4:	429d      	cmp	r5, r3
 80126c6:	bf38      	it	cc
 80126c8:	461d      	movcc	r5, r3
 80126ca:	0553      	lsls	r3, r2, #21
 80126cc:	d527      	bpl.n	801271e <__ssputs_r+0x8e>
 80126ce:	4629      	mov	r1, r5
 80126d0:	f7ff ff52 	bl	8012578 <_malloc_r>
 80126d4:	4606      	mov	r6, r0
 80126d6:	b360      	cbz	r0, 8012732 <__ssputs_r+0xa2>
 80126d8:	6921      	ldr	r1, [r4, #16]
 80126da:	464a      	mov	r2, r9
 80126dc:	f000 fd68 	bl	80131b0 <memcpy>
 80126e0:	89a3      	ldrh	r3, [r4, #12]
 80126e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80126e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80126ea:	81a3      	strh	r3, [r4, #12]
 80126ec:	6126      	str	r6, [r4, #16]
 80126ee:	6165      	str	r5, [r4, #20]
 80126f0:	444e      	add	r6, r9
 80126f2:	eba5 0509 	sub.w	r5, r5, r9
 80126f6:	6026      	str	r6, [r4, #0]
 80126f8:	60a5      	str	r5, [r4, #8]
 80126fa:	463e      	mov	r6, r7
 80126fc:	42be      	cmp	r6, r7
 80126fe:	d900      	bls.n	8012702 <__ssputs_r+0x72>
 8012700:	463e      	mov	r6, r7
 8012702:	6820      	ldr	r0, [r4, #0]
 8012704:	4632      	mov	r2, r6
 8012706:	4641      	mov	r1, r8
 8012708:	f000 fd28 	bl	801315c <memmove>
 801270c:	68a3      	ldr	r3, [r4, #8]
 801270e:	1b9b      	subs	r3, r3, r6
 8012710:	60a3      	str	r3, [r4, #8]
 8012712:	6823      	ldr	r3, [r4, #0]
 8012714:	4433      	add	r3, r6
 8012716:	6023      	str	r3, [r4, #0]
 8012718:	2000      	movs	r0, #0
 801271a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801271e:	462a      	mov	r2, r5
 8012720:	f000 fd54 	bl	80131cc <_realloc_r>
 8012724:	4606      	mov	r6, r0
 8012726:	2800      	cmp	r0, #0
 8012728:	d1e0      	bne.n	80126ec <__ssputs_r+0x5c>
 801272a:	6921      	ldr	r1, [r4, #16]
 801272c:	4650      	mov	r0, sl
 801272e:	f7ff feb7 	bl	80124a0 <_free_r>
 8012732:	230c      	movs	r3, #12
 8012734:	f8ca 3000 	str.w	r3, [sl]
 8012738:	89a3      	ldrh	r3, [r4, #12]
 801273a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801273e:	81a3      	strh	r3, [r4, #12]
 8012740:	f04f 30ff 	mov.w	r0, #4294967295
 8012744:	e7e9      	b.n	801271a <__ssputs_r+0x8a>
	...

08012748 <_svfiprintf_r>:
 8012748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801274c:	4698      	mov	r8, r3
 801274e:	898b      	ldrh	r3, [r1, #12]
 8012750:	061b      	lsls	r3, r3, #24
 8012752:	b09d      	sub	sp, #116	@ 0x74
 8012754:	4607      	mov	r7, r0
 8012756:	460d      	mov	r5, r1
 8012758:	4614      	mov	r4, r2
 801275a:	d510      	bpl.n	801277e <_svfiprintf_r+0x36>
 801275c:	690b      	ldr	r3, [r1, #16]
 801275e:	b973      	cbnz	r3, 801277e <_svfiprintf_r+0x36>
 8012760:	2140      	movs	r1, #64	@ 0x40
 8012762:	f7ff ff09 	bl	8012578 <_malloc_r>
 8012766:	6028      	str	r0, [r5, #0]
 8012768:	6128      	str	r0, [r5, #16]
 801276a:	b930      	cbnz	r0, 801277a <_svfiprintf_r+0x32>
 801276c:	230c      	movs	r3, #12
 801276e:	603b      	str	r3, [r7, #0]
 8012770:	f04f 30ff 	mov.w	r0, #4294967295
 8012774:	b01d      	add	sp, #116	@ 0x74
 8012776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801277a:	2340      	movs	r3, #64	@ 0x40
 801277c:	616b      	str	r3, [r5, #20]
 801277e:	2300      	movs	r3, #0
 8012780:	9309      	str	r3, [sp, #36]	@ 0x24
 8012782:	2320      	movs	r3, #32
 8012784:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012788:	f8cd 800c 	str.w	r8, [sp, #12]
 801278c:	2330      	movs	r3, #48	@ 0x30
 801278e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801292c <_svfiprintf_r+0x1e4>
 8012792:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012796:	f04f 0901 	mov.w	r9, #1
 801279a:	4623      	mov	r3, r4
 801279c:	469a      	mov	sl, r3
 801279e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80127a2:	b10a      	cbz	r2, 80127a8 <_svfiprintf_r+0x60>
 80127a4:	2a25      	cmp	r2, #37	@ 0x25
 80127a6:	d1f9      	bne.n	801279c <_svfiprintf_r+0x54>
 80127a8:	ebba 0b04 	subs.w	fp, sl, r4
 80127ac:	d00b      	beq.n	80127c6 <_svfiprintf_r+0x7e>
 80127ae:	465b      	mov	r3, fp
 80127b0:	4622      	mov	r2, r4
 80127b2:	4629      	mov	r1, r5
 80127b4:	4638      	mov	r0, r7
 80127b6:	f7ff ff6b 	bl	8012690 <__ssputs_r>
 80127ba:	3001      	adds	r0, #1
 80127bc:	f000 80a7 	beq.w	801290e <_svfiprintf_r+0x1c6>
 80127c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80127c2:	445a      	add	r2, fp
 80127c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80127c6:	f89a 3000 	ldrb.w	r3, [sl]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	f000 809f 	beq.w	801290e <_svfiprintf_r+0x1c6>
 80127d0:	2300      	movs	r3, #0
 80127d2:	f04f 32ff 	mov.w	r2, #4294967295
 80127d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80127da:	f10a 0a01 	add.w	sl, sl, #1
 80127de:	9304      	str	r3, [sp, #16]
 80127e0:	9307      	str	r3, [sp, #28]
 80127e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80127e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80127e8:	4654      	mov	r4, sl
 80127ea:	2205      	movs	r2, #5
 80127ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127f0:	484e      	ldr	r0, [pc, #312]	@ (801292c <_svfiprintf_r+0x1e4>)
 80127f2:	f7ed fced 	bl	80001d0 <memchr>
 80127f6:	9a04      	ldr	r2, [sp, #16]
 80127f8:	b9d8      	cbnz	r0, 8012832 <_svfiprintf_r+0xea>
 80127fa:	06d0      	lsls	r0, r2, #27
 80127fc:	bf44      	itt	mi
 80127fe:	2320      	movmi	r3, #32
 8012800:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012804:	0711      	lsls	r1, r2, #28
 8012806:	bf44      	itt	mi
 8012808:	232b      	movmi	r3, #43	@ 0x2b
 801280a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801280e:	f89a 3000 	ldrb.w	r3, [sl]
 8012812:	2b2a      	cmp	r3, #42	@ 0x2a
 8012814:	d015      	beq.n	8012842 <_svfiprintf_r+0xfa>
 8012816:	9a07      	ldr	r2, [sp, #28]
 8012818:	4654      	mov	r4, sl
 801281a:	2000      	movs	r0, #0
 801281c:	f04f 0c0a 	mov.w	ip, #10
 8012820:	4621      	mov	r1, r4
 8012822:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012826:	3b30      	subs	r3, #48	@ 0x30
 8012828:	2b09      	cmp	r3, #9
 801282a:	d94b      	bls.n	80128c4 <_svfiprintf_r+0x17c>
 801282c:	b1b0      	cbz	r0, 801285c <_svfiprintf_r+0x114>
 801282e:	9207      	str	r2, [sp, #28]
 8012830:	e014      	b.n	801285c <_svfiprintf_r+0x114>
 8012832:	eba0 0308 	sub.w	r3, r0, r8
 8012836:	fa09 f303 	lsl.w	r3, r9, r3
 801283a:	4313      	orrs	r3, r2
 801283c:	9304      	str	r3, [sp, #16]
 801283e:	46a2      	mov	sl, r4
 8012840:	e7d2      	b.n	80127e8 <_svfiprintf_r+0xa0>
 8012842:	9b03      	ldr	r3, [sp, #12]
 8012844:	1d19      	adds	r1, r3, #4
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	9103      	str	r1, [sp, #12]
 801284a:	2b00      	cmp	r3, #0
 801284c:	bfbb      	ittet	lt
 801284e:	425b      	neglt	r3, r3
 8012850:	f042 0202 	orrlt.w	r2, r2, #2
 8012854:	9307      	strge	r3, [sp, #28]
 8012856:	9307      	strlt	r3, [sp, #28]
 8012858:	bfb8      	it	lt
 801285a:	9204      	strlt	r2, [sp, #16]
 801285c:	7823      	ldrb	r3, [r4, #0]
 801285e:	2b2e      	cmp	r3, #46	@ 0x2e
 8012860:	d10a      	bne.n	8012878 <_svfiprintf_r+0x130>
 8012862:	7863      	ldrb	r3, [r4, #1]
 8012864:	2b2a      	cmp	r3, #42	@ 0x2a
 8012866:	d132      	bne.n	80128ce <_svfiprintf_r+0x186>
 8012868:	9b03      	ldr	r3, [sp, #12]
 801286a:	1d1a      	adds	r2, r3, #4
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	9203      	str	r2, [sp, #12]
 8012870:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012874:	3402      	adds	r4, #2
 8012876:	9305      	str	r3, [sp, #20]
 8012878:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801293c <_svfiprintf_r+0x1f4>
 801287c:	7821      	ldrb	r1, [r4, #0]
 801287e:	2203      	movs	r2, #3
 8012880:	4650      	mov	r0, sl
 8012882:	f7ed fca5 	bl	80001d0 <memchr>
 8012886:	b138      	cbz	r0, 8012898 <_svfiprintf_r+0x150>
 8012888:	9b04      	ldr	r3, [sp, #16]
 801288a:	eba0 000a 	sub.w	r0, r0, sl
 801288e:	2240      	movs	r2, #64	@ 0x40
 8012890:	4082      	lsls	r2, r0
 8012892:	4313      	orrs	r3, r2
 8012894:	3401      	adds	r4, #1
 8012896:	9304      	str	r3, [sp, #16]
 8012898:	f814 1b01 	ldrb.w	r1, [r4], #1
 801289c:	4824      	ldr	r0, [pc, #144]	@ (8012930 <_svfiprintf_r+0x1e8>)
 801289e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80128a2:	2206      	movs	r2, #6
 80128a4:	f7ed fc94 	bl	80001d0 <memchr>
 80128a8:	2800      	cmp	r0, #0
 80128aa:	d036      	beq.n	801291a <_svfiprintf_r+0x1d2>
 80128ac:	4b21      	ldr	r3, [pc, #132]	@ (8012934 <_svfiprintf_r+0x1ec>)
 80128ae:	bb1b      	cbnz	r3, 80128f8 <_svfiprintf_r+0x1b0>
 80128b0:	9b03      	ldr	r3, [sp, #12]
 80128b2:	3307      	adds	r3, #7
 80128b4:	f023 0307 	bic.w	r3, r3, #7
 80128b8:	3308      	adds	r3, #8
 80128ba:	9303      	str	r3, [sp, #12]
 80128bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128be:	4433      	add	r3, r6
 80128c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80128c2:	e76a      	b.n	801279a <_svfiprintf_r+0x52>
 80128c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80128c8:	460c      	mov	r4, r1
 80128ca:	2001      	movs	r0, #1
 80128cc:	e7a8      	b.n	8012820 <_svfiprintf_r+0xd8>
 80128ce:	2300      	movs	r3, #0
 80128d0:	3401      	adds	r4, #1
 80128d2:	9305      	str	r3, [sp, #20]
 80128d4:	4619      	mov	r1, r3
 80128d6:	f04f 0c0a 	mov.w	ip, #10
 80128da:	4620      	mov	r0, r4
 80128dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80128e0:	3a30      	subs	r2, #48	@ 0x30
 80128e2:	2a09      	cmp	r2, #9
 80128e4:	d903      	bls.n	80128ee <_svfiprintf_r+0x1a6>
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d0c6      	beq.n	8012878 <_svfiprintf_r+0x130>
 80128ea:	9105      	str	r1, [sp, #20]
 80128ec:	e7c4      	b.n	8012878 <_svfiprintf_r+0x130>
 80128ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80128f2:	4604      	mov	r4, r0
 80128f4:	2301      	movs	r3, #1
 80128f6:	e7f0      	b.n	80128da <_svfiprintf_r+0x192>
 80128f8:	ab03      	add	r3, sp, #12
 80128fa:	9300      	str	r3, [sp, #0]
 80128fc:	462a      	mov	r2, r5
 80128fe:	4b0e      	ldr	r3, [pc, #56]	@ (8012938 <_svfiprintf_r+0x1f0>)
 8012900:	a904      	add	r1, sp, #16
 8012902:	4638      	mov	r0, r7
 8012904:	f3af 8000 	nop.w
 8012908:	1c42      	adds	r2, r0, #1
 801290a:	4606      	mov	r6, r0
 801290c:	d1d6      	bne.n	80128bc <_svfiprintf_r+0x174>
 801290e:	89ab      	ldrh	r3, [r5, #12]
 8012910:	065b      	lsls	r3, r3, #25
 8012912:	f53f af2d 	bmi.w	8012770 <_svfiprintf_r+0x28>
 8012916:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012918:	e72c      	b.n	8012774 <_svfiprintf_r+0x2c>
 801291a:	ab03      	add	r3, sp, #12
 801291c:	9300      	str	r3, [sp, #0]
 801291e:	462a      	mov	r2, r5
 8012920:	4b05      	ldr	r3, [pc, #20]	@ (8012938 <_svfiprintf_r+0x1f0>)
 8012922:	a904      	add	r1, sp, #16
 8012924:	4638      	mov	r0, r7
 8012926:	f000 f9bb 	bl	8012ca0 <_printf_i>
 801292a:	e7ed      	b.n	8012908 <_svfiprintf_r+0x1c0>
 801292c:	0801475c 	.word	0x0801475c
 8012930:	08014766 	.word	0x08014766
 8012934:	00000000 	.word	0x00000000
 8012938:	08012691 	.word	0x08012691
 801293c:	08014762 	.word	0x08014762

08012940 <__sfputc_r>:
 8012940:	6893      	ldr	r3, [r2, #8]
 8012942:	3b01      	subs	r3, #1
 8012944:	2b00      	cmp	r3, #0
 8012946:	b410      	push	{r4}
 8012948:	6093      	str	r3, [r2, #8]
 801294a:	da08      	bge.n	801295e <__sfputc_r+0x1e>
 801294c:	6994      	ldr	r4, [r2, #24]
 801294e:	42a3      	cmp	r3, r4
 8012950:	db01      	blt.n	8012956 <__sfputc_r+0x16>
 8012952:	290a      	cmp	r1, #10
 8012954:	d103      	bne.n	801295e <__sfputc_r+0x1e>
 8012956:	f85d 4b04 	ldr.w	r4, [sp], #4
 801295a:	f000 bb6b 	b.w	8013034 <__swbuf_r>
 801295e:	6813      	ldr	r3, [r2, #0]
 8012960:	1c58      	adds	r0, r3, #1
 8012962:	6010      	str	r0, [r2, #0]
 8012964:	7019      	strb	r1, [r3, #0]
 8012966:	4608      	mov	r0, r1
 8012968:	f85d 4b04 	ldr.w	r4, [sp], #4
 801296c:	4770      	bx	lr

0801296e <__sfputs_r>:
 801296e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012970:	4606      	mov	r6, r0
 8012972:	460f      	mov	r7, r1
 8012974:	4614      	mov	r4, r2
 8012976:	18d5      	adds	r5, r2, r3
 8012978:	42ac      	cmp	r4, r5
 801297a:	d101      	bne.n	8012980 <__sfputs_r+0x12>
 801297c:	2000      	movs	r0, #0
 801297e:	e007      	b.n	8012990 <__sfputs_r+0x22>
 8012980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012984:	463a      	mov	r2, r7
 8012986:	4630      	mov	r0, r6
 8012988:	f7ff ffda 	bl	8012940 <__sfputc_r>
 801298c:	1c43      	adds	r3, r0, #1
 801298e:	d1f3      	bne.n	8012978 <__sfputs_r+0xa>
 8012990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012994 <_vfiprintf_r>:
 8012994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012998:	460d      	mov	r5, r1
 801299a:	b09d      	sub	sp, #116	@ 0x74
 801299c:	4614      	mov	r4, r2
 801299e:	4698      	mov	r8, r3
 80129a0:	4606      	mov	r6, r0
 80129a2:	b118      	cbz	r0, 80129ac <_vfiprintf_r+0x18>
 80129a4:	6a03      	ldr	r3, [r0, #32]
 80129a6:	b90b      	cbnz	r3, 80129ac <_vfiprintf_r+0x18>
 80129a8:	f7ff fc3c 	bl	8012224 <__sinit>
 80129ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80129ae:	07d9      	lsls	r1, r3, #31
 80129b0:	d405      	bmi.n	80129be <_vfiprintf_r+0x2a>
 80129b2:	89ab      	ldrh	r3, [r5, #12]
 80129b4:	059a      	lsls	r2, r3, #22
 80129b6:	d402      	bmi.n	80129be <_vfiprintf_r+0x2a>
 80129b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80129ba:	f7ff fd6e 	bl	801249a <__retarget_lock_acquire_recursive>
 80129be:	89ab      	ldrh	r3, [r5, #12]
 80129c0:	071b      	lsls	r3, r3, #28
 80129c2:	d501      	bpl.n	80129c8 <_vfiprintf_r+0x34>
 80129c4:	692b      	ldr	r3, [r5, #16]
 80129c6:	b99b      	cbnz	r3, 80129f0 <_vfiprintf_r+0x5c>
 80129c8:	4629      	mov	r1, r5
 80129ca:	4630      	mov	r0, r6
 80129cc:	f000 fb70 	bl	80130b0 <__swsetup_r>
 80129d0:	b170      	cbz	r0, 80129f0 <_vfiprintf_r+0x5c>
 80129d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80129d4:	07dc      	lsls	r4, r3, #31
 80129d6:	d504      	bpl.n	80129e2 <_vfiprintf_r+0x4e>
 80129d8:	f04f 30ff 	mov.w	r0, #4294967295
 80129dc:	b01d      	add	sp, #116	@ 0x74
 80129de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129e2:	89ab      	ldrh	r3, [r5, #12]
 80129e4:	0598      	lsls	r0, r3, #22
 80129e6:	d4f7      	bmi.n	80129d8 <_vfiprintf_r+0x44>
 80129e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80129ea:	f7ff fd57 	bl	801249c <__retarget_lock_release_recursive>
 80129ee:	e7f3      	b.n	80129d8 <_vfiprintf_r+0x44>
 80129f0:	2300      	movs	r3, #0
 80129f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80129f4:	2320      	movs	r3, #32
 80129f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80129fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80129fe:	2330      	movs	r3, #48	@ 0x30
 8012a00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012bb0 <_vfiprintf_r+0x21c>
 8012a04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012a08:	f04f 0901 	mov.w	r9, #1
 8012a0c:	4623      	mov	r3, r4
 8012a0e:	469a      	mov	sl, r3
 8012a10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a14:	b10a      	cbz	r2, 8012a1a <_vfiprintf_r+0x86>
 8012a16:	2a25      	cmp	r2, #37	@ 0x25
 8012a18:	d1f9      	bne.n	8012a0e <_vfiprintf_r+0x7a>
 8012a1a:	ebba 0b04 	subs.w	fp, sl, r4
 8012a1e:	d00b      	beq.n	8012a38 <_vfiprintf_r+0xa4>
 8012a20:	465b      	mov	r3, fp
 8012a22:	4622      	mov	r2, r4
 8012a24:	4629      	mov	r1, r5
 8012a26:	4630      	mov	r0, r6
 8012a28:	f7ff ffa1 	bl	801296e <__sfputs_r>
 8012a2c:	3001      	adds	r0, #1
 8012a2e:	f000 80a7 	beq.w	8012b80 <_vfiprintf_r+0x1ec>
 8012a32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012a34:	445a      	add	r2, fp
 8012a36:	9209      	str	r2, [sp, #36]	@ 0x24
 8012a38:	f89a 3000 	ldrb.w	r3, [sl]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	f000 809f 	beq.w	8012b80 <_vfiprintf_r+0x1ec>
 8012a42:	2300      	movs	r3, #0
 8012a44:	f04f 32ff 	mov.w	r2, #4294967295
 8012a48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012a4c:	f10a 0a01 	add.w	sl, sl, #1
 8012a50:	9304      	str	r3, [sp, #16]
 8012a52:	9307      	str	r3, [sp, #28]
 8012a54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012a58:	931a      	str	r3, [sp, #104]	@ 0x68
 8012a5a:	4654      	mov	r4, sl
 8012a5c:	2205      	movs	r2, #5
 8012a5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a62:	4853      	ldr	r0, [pc, #332]	@ (8012bb0 <_vfiprintf_r+0x21c>)
 8012a64:	f7ed fbb4 	bl	80001d0 <memchr>
 8012a68:	9a04      	ldr	r2, [sp, #16]
 8012a6a:	b9d8      	cbnz	r0, 8012aa4 <_vfiprintf_r+0x110>
 8012a6c:	06d1      	lsls	r1, r2, #27
 8012a6e:	bf44      	itt	mi
 8012a70:	2320      	movmi	r3, #32
 8012a72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a76:	0713      	lsls	r3, r2, #28
 8012a78:	bf44      	itt	mi
 8012a7a:	232b      	movmi	r3, #43	@ 0x2b
 8012a7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a80:	f89a 3000 	ldrb.w	r3, [sl]
 8012a84:	2b2a      	cmp	r3, #42	@ 0x2a
 8012a86:	d015      	beq.n	8012ab4 <_vfiprintf_r+0x120>
 8012a88:	9a07      	ldr	r2, [sp, #28]
 8012a8a:	4654      	mov	r4, sl
 8012a8c:	2000      	movs	r0, #0
 8012a8e:	f04f 0c0a 	mov.w	ip, #10
 8012a92:	4621      	mov	r1, r4
 8012a94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a98:	3b30      	subs	r3, #48	@ 0x30
 8012a9a:	2b09      	cmp	r3, #9
 8012a9c:	d94b      	bls.n	8012b36 <_vfiprintf_r+0x1a2>
 8012a9e:	b1b0      	cbz	r0, 8012ace <_vfiprintf_r+0x13a>
 8012aa0:	9207      	str	r2, [sp, #28]
 8012aa2:	e014      	b.n	8012ace <_vfiprintf_r+0x13a>
 8012aa4:	eba0 0308 	sub.w	r3, r0, r8
 8012aa8:	fa09 f303 	lsl.w	r3, r9, r3
 8012aac:	4313      	orrs	r3, r2
 8012aae:	9304      	str	r3, [sp, #16]
 8012ab0:	46a2      	mov	sl, r4
 8012ab2:	e7d2      	b.n	8012a5a <_vfiprintf_r+0xc6>
 8012ab4:	9b03      	ldr	r3, [sp, #12]
 8012ab6:	1d19      	adds	r1, r3, #4
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	9103      	str	r1, [sp, #12]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	bfbb      	ittet	lt
 8012ac0:	425b      	neglt	r3, r3
 8012ac2:	f042 0202 	orrlt.w	r2, r2, #2
 8012ac6:	9307      	strge	r3, [sp, #28]
 8012ac8:	9307      	strlt	r3, [sp, #28]
 8012aca:	bfb8      	it	lt
 8012acc:	9204      	strlt	r2, [sp, #16]
 8012ace:	7823      	ldrb	r3, [r4, #0]
 8012ad0:	2b2e      	cmp	r3, #46	@ 0x2e
 8012ad2:	d10a      	bne.n	8012aea <_vfiprintf_r+0x156>
 8012ad4:	7863      	ldrb	r3, [r4, #1]
 8012ad6:	2b2a      	cmp	r3, #42	@ 0x2a
 8012ad8:	d132      	bne.n	8012b40 <_vfiprintf_r+0x1ac>
 8012ada:	9b03      	ldr	r3, [sp, #12]
 8012adc:	1d1a      	adds	r2, r3, #4
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	9203      	str	r2, [sp, #12]
 8012ae2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012ae6:	3402      	adds	r4, #2
 8012ae8:	9305      	str	r3, [sp, #20]
 8012aea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012bc0 <_vfiprintf_r+0x22c>
 8012aee:	7821      	ldrb	r1, [r4, #0]
 8012af0:	2203      	movs	r2, #3
 8012af2:	4650      	mov	r0, sl
 8012af4:	f7ed fb6c 	bl	80001d0 <memchr>
 8012af8:	b138      	cbz	r0, 8012b0a <_vfiprintf_r+0x176>
 8012afa:	9b04      	ldr	r3, [sp, #16]
 8012afc:	eba0 000a 	sub.w	r0, r0, sl
 8012b00:	2240      	movs	r2, #64	@ 0x40
 8012b02:	4082      	lsls	r2, r0
 8012b04:	4313      	orrs	r3, r2
 8012b06:	3401      	adds	r4, #1
 8012b08:	9304      	str	r3, [sp, #16]
 8012b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b0e:	4829      	ldr	r0, [pc, #164]	@ (8012bb4 <_vfiprintf_r+0x220>)
 8012b10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012b14:	2206      	movs	r2, #6
 8012b16:	f7ed fb5b 	bl	80001d0 <memchr>
 8012b1a:	2800      	cmp	r0, #0
 8012b1c:	d03f      	beq.n	8012b9e <_vfiprintf_r+0x20a>
 8012b1e:	4b26      	ldr	r3, [pc, #152]	@ (8012bb8 <_vfiprintf_r+0x224>)
 8012b20:	bb1b      	cbnz	r3, 8012b6a <_vfiprintf_r+0x1d6>
 8012b22:	9b03      	ldr	r3, [sp, #12]
 8012b24:	3307      	adds	r3, #7
 8012b26:	f023 0307 	bic.w	r3, r3, #7
 8012b2a:	3308      	adds	r3, #8
 8012b2c:	9303      	str	r3, [sp, #12]
 8012b2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b30:	443b      	add	r3, r7
 8012b32:	9309      	str	r3, [sp, #36]	@ 0x24
 8012b34:	e76a      	b.n	8012a0c <_vfiprintf_r+0x78>
 8012b36:	fb0c 3202 	mla	r2, ip, r2, r3
 8012b3a:	460c      	mov	r4, r1
 8012b3c:	2001      	movs	r0, #1
 8012b3e:	e7a8      	b.n	8012a92 <_vfiprintf_r+0xfe>
 8012b40:	2300      	movs	r3, #0
 8012b42:	3401      	adds	r4, #1
 8012b44:	9305      	str	r3, [sp, #20]
 8012b46:	4619      	mov	r1, r3
 8012b48:	f04f 0c0a 	mov.w	ip, #10
 8012b4c:	4620      	mov	r0, r4
 8012b4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b52:	3a30      	subs	r2, #48	@ 0x30
 8012b54:	2a09      	cmp	r2, #9
 8012b56:	d903      	bls.n	8012b60 <_vfiprintf_r+0x1cc>
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d0c6      	beq.n	8012aea <_vfiprintf_r+0x156>
 8012b5c:	9105      	str	r1, [sp, #20]
 8012b5e:	e7c4      	b.n	8012aea <_vfiprintf_r+0x156>
 8012b60:	fb0c 2101 	mla	r1, ip, r1, r2
 8012b64:	4604      	mov	r4, r0
 8012b66:	2301      	movs	r3, #1
 8012b68:	e7f0      	b.n	8012b4c <_vfiprintf_r+0x1b8>
 8012b6a:	ab03      	add	r3, sp, #12
 8012b6c:	9300      	str	r3, [sp, #0]
 8012b6e:	462a      	mov	r2, r5
 8012b70:	4b12      	ldr	r3, [pc, #72]	@ (8012bbc <_vfiprintf_r+0x228>)
 8012b72:	a904      	add	r1, sp, #16
 8012b74:	4630      	mov	r0, r6
 8012b76:	f3af 8000 	nop.w
 8012b7a:	4607      	mov	r7, r0
 8012b7c:	1c78      	adds	r0, r7, #1
 8012b7e:	d1d6      	bne.n	8012b2e <_vfiprintf_r+0x19a>
 8012b80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012b82:	07d9      	lsls	r1, r3, #31
 8012b84:	d405      	bmi.n	8012b92 <_vfiprintf_r+0x1fe>
 8012b86:	89ab      	ldrh	r3, [r5, #12]
 8012b88:	059a      	lsls	r2, r3, #22
 8012b8a:	d402      	bmi.n	8012b92 <_vfiprintf_r+0x1fe>
 8012b8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012b8e:	f7ff fc85 	bl	801249c <__retarget_lock_release_recursive>
 8012b92:	89ab      	ldrh	r3, [r5, #12]
 8012b94:	065b      	lsls	r3, r3, #25
 8012b96:	f53f af1f 	bmi.w	80129d8 <_vfiprintf_r+0x44>
 8012b9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012b9c:	e71e      	b.n	80129dc <_vfiprintf_r+0x48>
 8012b9e:	ab03      	add	r3, sp, #12
 8012ba0:	9300      	str	r3, [sp, #0]
 8012ba2:	462a      	mov	r2, r5
 8012ba4:	4b05      	ldr	r3, [pc, #20]	@ (8012bbc <_vfiprintf_r+0x228>)
 8012ba6:	a904      	add	r1, sp, #16
 8012ba8:	4630      	mov	r0, r6
 8012baa:	f000 f879 	bl	8012ca0 <_printf_i>
 8012bae:	e7e4      	b.n	8012b7a <_vfiprintf_r+0x1e6>
 8012bb0:	0801475c 	.word	0x0801475c
 8012bb4:	08014766 	.word	0x08014766
 8012bb8:	00000000 	.word	0x00000000
 8012bbc:	0801296f 	.word	0x0801296f
 8012bc0:	08014762 	.word	0x08014762

08012bc4 <_printf_common>:
 8012bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bc8:	4616      	mov	r6, r2
 8012bca:	4698      	mov	r8, r3
 8012bcc:	688a      	ldr	r2, [r1, #8]
 8012bce:	690b      	ldr	r3, [r1, #16]
 8012bd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012bd4:	4293      	cmp	r3, r2
 8012bd6:	bfb8      	it	lt
 8012bd8:	4613      	movlt	r3, r2
 8012bda:	6033      	str	r3, [r6, #0]
 8012bdc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012be0:	4607      	mov	r7, r0
 8012be2:	460c      	mov	r4, r1
 8012be4:	b10a      	cbz	r2, 8012bea <_printf_common+0x26>
 8012be6:	3301      	adds	r3, #1
 8012be8:	6033      	str	r3, [r6, #0]
 8012bea:	6823      	ldr	r3, [r4, #0]
 8012bec:	0699      	lsls	r1, r3, #26
 8012bee:	bf42      	ittt	mi
 8012bf0:	6833      	ldrmi	r3, [r6, #0]
 8012bf2:	3302      	addmi	r3, #2
 8012bf4:	6033      	strmi	r3, [r6, #0]
 8012bf6:	6825      	ldr	r5, [r4, #0]
 8012bf8:	f015 0506 	ands.w	r5, r5, #6
 8012bfc:	d106      	bne.n	8012c0c <_printf_common+0x48>
 8012bfe:	f104 0a19 	add.w	sl, r4, #25
 8012c02:	68e3      	ldr	r3, [r4, #12]
 8012c04:	6832      	ldr	r2, [r6, #0]
 8012c06:	1a9b      	subs	r3, r3, r2
 8012c08:	42ab      	cmp	r3, r5
 8012c0a:	dc26      	bgt.n	8012c5a <_printf_common+0x96>
 8012c0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012c10:	6822      	ldr	r2, [r4, #0]
 8012c12:	3b00      	subs	r3, #0
 8012c14:	bf18      	it	ne
 8012c16:	2301      	movne	r3, #1
 8012c18:	0692      	lsls	r2, r2, #26
 8012c1a:	d42b      	bmi.n	8012c74 <_printf_common+0xb0>
 8012c1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012c20:	4641      	mov	r1, r8
 8012c22:	4638      	mov	r0, r7
 8012c24:	47c8      	blx	r9
 8012c26:	3001      	adds	r0, #1
 8012c28:	d01e      	beq.n	8012c68 <_printf_common+0xa4>
 8012c2a:	6823      	ldr	r3, [r4, #0]
 8012c2c:	6922      	ldr	r2, [r4, #16]
 8012c2e:	f003 0306 	and.w	r3, r3, #6
 8012c32:	2b04      	cmp	r3, #4
 8012c34:	bf02      	ittt	eq
 8012c36:	68e5      	ldreq	r5, [r4, #12]
 8012c38:	6833      	ldreq	r3, [r6, #0]
 8012c3a:	1aed      	subeq	r5, r5, r3
 8012c3c:	68a3      	ldr	r3, [r4, #8]
 8012c3e:	bf0c      	ite	eq
 8012c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012c44:	2500      	movne	r5, #0
 8012c46:	4293      	cmp	r3, r2
 8012c48:	bfc4      	itt	gt
 8012c4a:	1a9b      	subgt	r3, r3, r2
 8012c4c:	18ed      	addgt	r5, r5, r3
 8012c4e:	2600      	movs	r6, #0
 8012c50:	341a      	adds	r4, #26
 8012c52:	42b5      	cmp	r5, r6
 8012c54:	d11a      	bne.n	8012c8c <_printf_common+0xc8>
 8012c56:	2000      	movs	r0, #0
 8012c58:	e008      	b.n	8012c6c <_printf_common+0xa8>
 8012c5a:	2301      	movs	r3, #1
 8012c5c:	4652      	mov	r2, sl
 8012c5e:	4641      	mov	r1, r8
 8012c60:	4638      	mov	r0, r7
 8012c62:	47c8      	blx	r9
 8012c64:	3001      	adds	r0, #1
 8012c66:	d103      	bne.n	8012c70 <_printf_common+0xac>
 8012c68:	f04f 30ff 	mov.w	r0, #4294967295
 8012c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c70:	3501      	adds	r5, #1
 8012c72:	e7c6      	b.n	8012c02 <_printf_common+0x3e>
 8012c74:	18e1      	adds	r1, r4, r3
 8012c76:	1c5a      	adds	r2, r3, #1
 8012c78:	2030      	movs	r0, #48	@ 0x30
 8012c7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012c7e:	4422      	add	r2, r4
 8012c80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012c84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012c88:	3302      	adds	r3, #2
 8012c8a:	e7c7      	b.n	8012c1c <_printf_common+0x58>
 8012c8c:	2301      	movs	r3, #1
 8012c8e:	4622      	mov	r2, r4
 8012c90:	4641      	mov	r1, r8
 8012c92:	4638      	mov	r0, r7
 8012c94:	47c8      	blx	r9
 8012c96:	3001      	adds	r0, #1
 8012c98:	d0e6      	beq.n	8012c68 <_printf_common+0xa4>
 8012c9a:	3601      	adds	r6, #1
 8012c9c:	e7d9      	b.n	8012c52 <_printf_common+0x8e>
	...

08012ca0 <_printf_i>:
 8012ca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012ca4:	7e0f      	ldrb	r7, [r1, #24]
 8012ca6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012ca8:	2f78      	cmp	r7, #120	@ 0x78
 8012caa:	4691      	mov	r9, r2
 8012cac:	4680      	mov	r8, r0
 8012cae:	460c      	mov	r4, r1
 8012cb0:	469a      	mov	sl, r3
 8012cb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012cb6:	d807      	bhi.n	8012cc8 <_printf_i+0x28>
 8012cb8:	2f62      	cmp	r7, #98	@ 0x62
 8012cba:	d80a      	bhi.n	8012cd2 <_printf_i+0x32>
 8012cbc:	2f00      	cmp	r7, #0
 8012cbe:	f000 80d1 	beq.w	8012e64 <_printf_i+0x1c4>
 8012cc2:	2f58      	cmp	r7, #88	@ 0x58
 8012cc4:	f000 80b8 	beq.w	8012e38 <_printf_i+0x198>
 8012cc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012ccc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012cd0:	e03a      	b.n	8012d48 <_printf_i+0xa8>
 8012cd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012cd6:	2b15      	cmp	r3, #21
 8012cd8:	d8f6      	bhi.n	8012cc8 <_printf_i+0x28>
 8012cda:	a101      	add	r1, pc, #4	@ (adr r1, 8012ce0 <_printf_i+0x40>)
 8012cdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012ce0:	08012d39 	.word	0x08012d39
 8012ce4:	08012d4d 	.word	0x08012d4d
 8012ce8:	08012cc9 	.word	0x08012cc9
 8012cec:	08012cc9 	.word	0x08012cc9
 8012cf0:	08012cc9 	.word	0x08012cc9
 8012cf4:	08012cc9 	.word	0x08012cc9
 8012cf8:	08012d4d 	.word	0x08012d4d
 8012cfc:	08012cc9 	.word	0x08012cc9
 8012d00:	08012cc9 	.word	0x08012cc9
 8012d04:	08012cc9 	.word	0x08012cc9
 8012d08:	08012cc9 	.word	0x08012cc9
 8012d0c:	08012e4b 	.word	0x08012e4b
 8012d10:	08012d77 	.word	0x08012d77
 8012d14:	08012e05 	.word	0x08012e05
 8012d18:	08012cc9 	.word	0x08012cc9
 8012d1c:	08012cc9 	.word	0x08012cc9
 8012d20:	08012e6d 	.word	0x08012e6d
 8012d24:	08012cc9 	.word	0x08012cc9
 8012d28:	08012d77 	.word	0x08012d77
 8012d2c:	08012cc9 	.word	0x08012cc9
 8012d30:	08012cc9 	.word	0x08012cc9
 8012d34:	08012e0d 	.word	0x08012e0d
 8012d38:	6833      	ldr	r3, [r6, #0]
 8012d3a:	1d1a      	adds	r2, r3, #4
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	6032      	str	r2, [r6, #0]
 8012d40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012d44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012d48:	2301      	movs	r3, #1
 8012d4a:	e09c      	b.n	8012e86 <_printf_i+0x1e6>
 8012d4c:	6833      	ldr	r3, [r6, #0]
 8012d4e:	6820      	ldr	r0, [r4, #0]
 8012d50:	1d19      	adds	r1, r3, #4
 8012d52:	6031      	str	r1, [r6, #0]
 8012d54:	0606      	lsls	r6, r0, #24
 8012d56:	d501      	bpl.n	8012d5c <_printf_i+0xbc>
 8012d58:	681d      	ldr	r5, [r3, #0]
 8012d5a:	e003      	b.n	8012d64 <_printf_i+0xc4>
 8012d5c:	0645      	lsls	r5, r0, #25
 8012d5e:	d5fb      	bpl.n	8012d58 <_printf_i+0xb8>
 8012d60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012d64:	2d00      	cmp	r5, #0
 8012d66:	da03      	bge.n	8012d70 <_printf_i+0xd0>
 8012d68:	232d      	movs	r3, #45	@ 0x2d
 8012d6a:	426d      	negs	r5, r5
 8012d6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012d70:	4858      	ldr	r0, [pc, #352]	@ (8012ed4 <_printf_i+0x234>)
 8012d72:	230a      	movs	r3, #10
 8012d74:	e011      	b.n	8012d9a <_printf_i+0xfa>
 8012d76:	6821      	ldr	r1, [r4, #0]
 8012d78:	6833      	ldr	r3, [r6, #0]
 8012d7a:	0608      	lsls	r0, r1, #24
 8012d7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8012d80:	d402      	bmi.n	8012d88 <_printf_i+0xe8>
 8012d82:	0649      	lsls	r1, r1, #25
 8012d84:	bf48      	it	mi
 8012d86:	b2ad      	uxthmi	r5, r5
 8012d88:	2f6f      	cmp	r7, #111	@ 0x6f
 8012d8a:	4852      	ldr	r0, [pc, #328]	@ (8012ed4 <_printf_i+0x234>)
 8012d8c:	6033      	str	r3, [r6, #0]
 8012d8e:	bf14      	ite	ne
 8012d90:	230a      	movne	r3, #10
 8012d92:	2308      	moveq	r3, #8
 8012d94:	2100      	movs	r1, #0
 8012d96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012d9a:	6866      	ldr	r6, [r4, #4]
 8012d9c:	60a6      	str	r6, [r4, #8]
 8012d9e:	2e00      	cmp	r6, #0
 8012da0:	db05      	blt.n	8012dae <_printf_i+0x10e>
 8012da2:	6821      	ldr	r1, [r4, #0]
 8012da4:	432e      	orrs	r6, r5
 8012da6:	f021 0104 	bic.w	r1, r1, #4
 8012daa:	6021      	str	r1, [r4, #0]
 8012dac:	d04b      	beq.n	8012e46 <_printf_i+0x1a6>
 8012dae:	4616      	mov	r6, r2
 8012db0:	fbb5 f1f3 	udiv	r1, r5, r3
 8012db4:	fb03 5711 	mls	r7, r3, r1, r5
 8012db8:	5dc7      	ldrb	r7, [r0, r7]
 8012dba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012dbe:	462f      	mov	r7, r5
 8012dc0:	42bb      	cmp	r3, r7
 8012dc2:	460d      	mov	r5, r1
 8012dc4:	d9f4      	bls.n	8012db0 <_printf_i+0x110>
 8012dc6:	2b08      	cmp	r3, #8
 8012dc8:	d10b      	bne.n	8012de2 <_printf_i+0x142>
 8012dca:	6823      	ldr	r3, [r4, #0]
 8012dcc:	07df      	lsls	r7, r3, #31
 8012dce:	d508      	bpl.n	8012de2 <_printf_i+0x142>
 8012dd0:	6923      	ldr	r3, [r4, #16]
 8012dd2:	6861      	ldr	r1, [r4, #4]
 8012dd4:	4299      	cmp	r1, r3
 8012dd6:	bfde      	ittt	le
 8012dd8:	2330      	movle	r3, #48	@ 0x30
 8012dda:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012dde:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012de2:	1b92      	subs	r2, r2, r6
 8012de4:	6122      	str	r2, [r4, #16]
 8012de6:	f8cd a000 	str.w	sl, [sp]
 8012dea:	464b      	mov	r3, r9
 8012dec:	aa03      	add	r2, sp, #12
 8012dee:	4621      	mov	r1, r4
 8012df0:	4640      	mov	r0, r8
 8012df2:	f7ff fee7 	bl	8012bc4 <_printf_common>
 8012df6:	3001      	adds	r0, #1
 8012df8:	d14a      	bne.n	8012e90 <_printf_i+0x1f0>
 8012dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8012dfe:	b004      	add	sp, #16
 8012e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e04:	6823      	ldr	r3, [r4, #0]
 8012e06:	f043 0320 	orr.w	r3, r3, #32
 8012e0a:	6023      	str	r3, [r4, #0]
 8012e0c:	4832      	ldr	r0, [pc, #200]	@ (8012ed8 <_printf_i+0x238>)
 8012e0e:	2778      	movs	r7, #120	@ 0x78
 8012e10:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012e14:	6823      	ldr	r3, [r4, #0]
 8012e16:	6831      	ldr	r1, [r6, #0]
 8012e18:	061f      	lsls	r7, r3, #24
 8012e1a:	f851 5b04 	ldr.w	r5, [r1], #4
 8012e1e:	d402      	bmi.n	8012e26 <_printf_i+0x186>
 8012e20:	065f      	lsls	r7, r3, #25
 8012e22:	bf48      	it	mi
 8012e24:	b2ad      	uxthmi	r5, r5
 8012e26:	6031      	str	r1, [r6, #0]
 8012e28:	07d9      	lsls	r1, r3, #31
 8012e2a:	bf44      	itt	mi
 8012e2c:	f043 0320 	orrmi.w	r3, r3, #32
 8012e30:	6023      	strmi	r3, [r4, #0]
 8012e32:	b11d      	cbz	r5, 8012e3c <_printf_i+0x19c>
 8012e34:	2310      	movs	r3, #16
 8012e36:	e7ad      	b.n	8012d94 <_printf_i+0xf4>
 8012e38:	4826      	ldr	r0, [pc, #152]	@ (8012ed4 <_printf_i+0x234>)
 8012e3a:	e7e9      	b.n	8012e10 <_printf_i+0x170>
 8012e3c:	6823      	ldr	r3, [r4, #0]
 8012e3e:	f023 0320 	bic.w	r3, r3, #32
 8012e42:	6023      	str	r3, [r4, #0]
 8012e44:	e7f6      	b.n	8012e34 <_printf_i+0x194>
 8012e46:	4616      	mov	r6, r2
 8012e48:	e7bd      	b.n	8012dc6 <_printf_i+0x126>
 8012e4a:	6833      	ldr	r3, [r6, #0]
 8012e4c:	6825      	ldr	r5, [r4, #0]
 8012e4e:	6961      	ldr	r1, [r4, #20]
 8012e50:	1d18      	adds	r0, r3, #4
 8012e52:	6030      	str	r0, [r6, #0]
 8012e54:	062e      	lsls	r6, r5, #24
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	d501      	bpl.n	8012e5e <_printf_i+0x1be>
 8012e5a:	6019      	str	r1, [r3, #0]
 8012e5c:	e002      	b.n	8012e64 <_printf_i+0x1c4>
 8012e5e:	0668      	lsls	r0, r5, #25
 8012e60:	d5fb      	bpl.n	8012e5a <_printf_i+0x1ba>
 8012e62:	8019      	strh	r1, [r3, #0]
 8012e64:	2300      	movs	r3, #0
 8012e66:	6123      	str	r3, [r4, #16]
 8012e68:	4616      	mov	r6, r2
 8012e6a:	e7bc      	b.n	8012de6 <_printf_i+0x146>
 8012e6c:	6833      	ldr	r3, [r6, #0]
 8012e6e:	1d1a      	adds	r2, r3, #4
 8012e70:	6032      	str	r2, [r6, #0]
 8012e72:	681e      	ldr	r6, [r3, #0]
 8012e74:	6862      	ldr	r2, [r4, #4]
 8012e76:	2100      	movs	r1, #0
 8012e78:	4630      	mov	r0, r6
 8012e7a:	f7ed f9a9 	bl	80001d0 <memchr>
 8012e7e:	b108      	cbz	r0, 8012e84 <_printf_i+0x1e4>
 8012e80:	1b80      	subs	r0, r0, r6
 8012e82:	6060      	str	r0, [r4, #4]
 8012e84:	6863      	ldr	r3, [r4, #4]
 8012e86:	6123      	str	r3, [r4, #16]
 8012e88:	2300      	movs	r3, #0
 8012e8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012e8e:	e7aa      	b.n	8012de6 <_printf_i+0x146>
 8012e90:	6923      	ldr	r3, [r4, #16]
 8012e92:	4632      	mov	r2, r6
 8012e94:	4649      	mov	r1, r9
 8012e96:	4640      	mov	r0, r8
 8012e98:	47d0      	blx	sl
 8012e9a:	3001      	adds	r0, #1
 8012e9c:	d0ad      	beq.n	8012dfa <_printf_i+0x15a>
 8012e9e:	6823      	ldr	r3, [r4, #0]
 8012ea0:	079b      	lsls	r3, r3, #30
 8012ea2:	d413      	bmi.n	8012ecc <_printf_i+0x22c>
 8012ea4:	68e0      	ldr	r0, [r4, #12]
 8012ea6:	9b03      	ldr	r3, [sp, #12]
 8012ea8:	4298      	cmp	r0, r3
 8012eaa:	bfb8      	it	lt
 8012eac:	4618      	movlt	r0, r3
 8012eae:	e7a6      	b.n	8012dfe <_printf_i+0x15e>
 8012eb0:	2301      	movs	r3, #1
 8012eb2:	4632      	mov	r2, r6
 8012eb4:	4649      	mov	r1, r9
 8012eb6:	4640      	mov	r0, r8
 8012eb8:	47d0      	blx	sl
 8012eba:	3001      	adds	r0, #1
 8012ebc:	d09d      	beq.n	8012dfa <_printf_i+0x15a>
 8012ebe:	3501      	adds	r5, #1
 8012ec0:	68e3      	ldr	r3, [r4, #12]
 8012ec2:	9903      	ldr	r1, [sp, #12]
 8012ec4:	1a5b      	subs	r3, r3, r1
 8012ec6:	42ab      	cmp	r3, r5
 8012ec8:	dcf2      	bgt.n	8012eb0 <_printf_i+0x210>
 8012eca:	e7eb      	b.n	8012ea4 <_printf_i+0x204>
 8012ecc:	2500      	movs	r5, #0
 8012ece:	f104 0619 	add.w	r6, r4, #25
 8012ed2:	e7f5      	b.n	8012ec0 <_printf_i+0x220>
 8012ed4:	0801476d 	.word	0x0801476d
 8012ed8:	0801477e 	.word	0x0801477e

08012edc <__sflush_r>:
 8012edc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ee4:	0716      	lsls	r6, r2, #28
 8012ee6:	4605      	mov	r5, r0
 8012ee8:	460c      	mov	r4, r1
 8012eea:	d454      	bmi.n	8012f96 <__sflush_r+0xba>
 8012eec:	684b      	ldr	r3, [r1, #4]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	dc02      	bgt.n	8012ef8 <__sflush_r+0x1c>
 8012ef2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	dd48      	ble.n	8012f8a <__sflush_r+0xae>
 8012ef8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012efa:	2e00      	cmp	r6, #0
 8012efc:	d045      	beq.n	8012f8a <__sflush_r+0xae>
 8012efe:	2300      	movs	r3, #0
 8012f00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012f04:	682f      	ldr	r7, [r5, #0]
 8012f06:	6a21      	ldr	r1, [r4, #32]
 8012f08:	602b      	str	r3, [r5, #0]
 8012f0a:	d030      	beq.n	8012f6e <__sflush_r+0x92>
 8012f0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012f0e:	89a3      	ldrh	r3, [r4, #12]
 8012f10:	0759      	lsls	r1, r3, #29
 8012f12:	d505      	bpl.n	8012f20 <__sflush_r+0x44>
 8012f14:	6863      	ldr	r3, [r4, #4]
 8012f16:	1ad2      	subs	r2, r2, r3
 8012f18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012f1a:	b10b      	cbz	r3, 8012f20 <__sflush_r+0x44>
 8012f1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012f1e:	1ad2      	subs	r2, r2, r3
 8012f20:	2300      	movs	r3, #0
 8012f22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012f24:	6a21      	ldr	r1, [r4, #32]
 8012f26:	4628      	mov	r0, r5
 8012f28:	47b0      	blx	r6
 8012f2a:	1c43      	adds	r3, r0, #1
 8012f2c:	89a3      	ldrh	r3, [r4, #12]
 8012f2e:	d106      	bne.n	8012f3e <__sflush_r+0x62>
 8012f30:	6829      	ldr	r1, [r5, #0]
 8012f32:	291d      	cmp	r1, #29
 8012f34:	d82b      	bhi.n	8012f8e <__sflush_r+0xb2>
 8012f36:	4a2a      	ldr	r2, [pc, #168]	@ (8012fe0 <__sflush_r+0x104>)
 8012f38:	40ca      	lsrs	r2, r1
 8012f3a:	07d6      	lsls	r6, r2, #31
 8012f3c:	d527      	bpl.n	8012f8e <__sflush_r+0xb2>
 8012f3e:	2200      	movs	r2, #0
 8012f40:	6062      	str	r2, [r4, #4]
 8012f42:	04d9      	lsls	r1, r3, #19
 8012f44:	6922      	ldr	r2, [r4, #16]
 8012f46:	6022      	str	r2, [r4, #0]
 8012f48:	d504      	bpl.n	8012f54 <__sflush_r+0x78>
 8012f4a:	1c42      	adds	r2, r0, #1
 8012f4c:	d101      	bne.n	8012f52 <__sflush_r+0x76>
 8012f4e:	682b      	ldr	r3, [r5, #0]
 8012f50:	b903      	cbnz	r3, 8012f54 <__sflush_r+0x78>
 8012f52:	6560      	str	r0, [r4, #84]	@ 0x54
 8012f54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012f56:	602f      	str	r7, [r5, #0]
 8012f58:	b1b9      	cbz	r1, 8012f8a <__sflush_r+0xae>
 8012f5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012f5e:	4299      	cmp	r1, r3
 8012f60:	d002      	beq.n	8012f68 <__sflush_r+0x8c>
 8012f62:	4628      	mov	r0, r5
 8012f64:	f7ff fa9c 	bl	80124a0 <_free_r>
 8012f68:	2300      	movs	r3, #0
 8012f6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8012f6c:	e00d      	b.n	8012f8a <__sflush_r+0xae>
 8012f6e:	2301      	movs	r3, #1
 8012f70:	4628      	mov	r0, r5
 8012f72:	47b0      	blx	r6
 8012f74:	4602      	mov	r2, r0
 8012f76:	1c50      	adds	r0, r2, #1
 8012f78:	d1c9      	bne.n	8012f0e <__sflush_r+0x32>
 8012f7a:	682b      	ldr	r3, [r5, #0]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d0c6      	beq.n	8012f0e <__sflush_r+0x32>
 8012f80:	2b1d      	cmp	r3, #29
 8012f82:	d001      	beq.n	8012f88 <__sflush_r+0xac>
 8012f84:	2b16      	cmp	r3, #22
 8012f86:	d11e      	bne.n	8012fc6 <__sflush_r+0xea>
 8012f88:	602f      	str	r7, [r5, #0]
 8012f8a:	2000      	movs	r0, #0
 8012f8c:	e022      	b.n	8012fd4 <__sflush_r+0xf8>
 8012f8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012f92:	b21b      	sxth	r3, r3
 8012f94:	e01b      	b.n	8012fce <__sflush_r+0xf2>
 8012f96:	690f      	ldr	r7, [r1, #16]
 8012f98:	2f00      	cmp	r7, #0
 8012f9a:	d0f6      	beq.n	8012f8a <__sflush_r+0xae>
 8012f9c:	0793      	lsls	r3, r2, #30
 8012f9e:	680e      	ldr	r6, [r1, #0]
 8012fa0:	bf08      	it	eq
 8012fa2:	694b      	ldreq	r3, [r1, #20]
 8012fa4:	600f      	str	r7, [r1, #0]
 8012fa6:	bf18      	it	ne
 8012fa8:	2300      	movne	r3, #0
 8012faa:	eba6 0807 	sub.w	r8, r6, r7
 8012fae:	608b      	str	r3, [r1, #8]
 8012fb0:	f1b8 0f00 	cmp.w	r8, #0
 8012fb4:	dde9      	ble.n	8012f8a <__sflush_r+0xae>
 8012fb6:	6a21      	ldr	r1, [r4, #32]
 8012fb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012fba:	4643      	mov	r3, r8
 8012fbc:	463a      	mov	r2, r7
 8012fbe:	4628      	mov	r0, r5
 8012fc0:	47b0      	blx	r6
 8012fc2:	2800      	cmp	r0, #0
 8012fc4:	dc08      	bgt.n	8012fd8 <__sflush_r+0xfc>
 8012fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012fca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012fce:	81a3      	strh	r3, [r4, #12]
 8012fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8012fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fd8:	4407      	add	r7, r0
 8012fda:	eba8 0800 	sub.w	r8, r8, r0
 8012fde:	e7e7      	b.n	8012fb0 <__sflush_r+0xd4>
 8012fe0:	20400001 	.word	0x20400001

08012fe4 <_fflush_r>:
 8012fe4:	b538      	push	{r3, r4, r5, lr}
 8012fe6:	690b      	ldr	r3, [r1, #16]
 8012fe8:	4605      	mov	r5, r0
 8012fea:	460c      	mov	r4, r1
 8012fec:	b913      	cbnz	r3, 8012ff4 <_fflush_r+0x10>
 8012fee:	2500      	movs	r5, #0
 8012ff0:	4628      	mov	r0, r5
 8012ff2:	bd38      	pop	{r3, r4, r5, pc}
 8012ff4:	b118      	cbz	r0, 8012ffe <_fflush_r+0x1a>
 8012ff6:	6a03      	ldr	r3, [r0, #32]
 8012ff8:	b90b      	cbnz	r3, 8012ffe <_fflush_r+0x1a>
 8012ffa:	f7ff f913 	bl	8012224 <__sinit>
 8012ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d0f3      	beq.n	8012fee <_fflush_r+0xa>
 8013006:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013008:	07d0      	lsls	r0, r2, #31
 801300a:	d404      	bmi.n	8013016 <_fflush_r+0x32>
 801300c:	0599      	lsls	r1, r3, #22
 801300e:	d402      	bmi.n	8013016 <_fflush_r+0x32>
 8013010:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013012:	f7ff fa42 	bl	801249a <__retarget_lock_acquire_recursive>
 8013016:	4628      	mov	r0, r5
 8013018:	4621      	mov	r1, r4
 801301a:	f7ff ff5f 	bl	8012edc <__sflush_r>
 801301e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013020:	07da      	lsls	r2, r3, #31
 8013022:	4605      	mov	r5, r0
 8013024:	d4e4      	bmi.n	8012ff0 <_fflush_r+0xc>
 8013026:	89a3      	ldrh	r3, [r4, #12]
 8013028:	059b      	lsls	r3, r3, #22
 801302a:	d4e1      	bmi.n	8012ff0 <_fflush_r+0xc>
 801302c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801302e:	f7ff fa35 	bl	801249c <__retarget_lock_release_recursive>
 8013032:	e7dd      	b.n	8012ff0 <_fflush_r+0xc>

08013034 <__swbuf_r>:
 8013034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013036:	460e      	mov	r6, r1
 8013038:	4614      	mov	r4, r2
 801303a:	4605      	mov	r5, r0
 801303c:	b118      	cbz	r0, 8013046 <__swbuf_r+0x12>
 801303e:	6a03      	ldr	r3, [r0, #32]
 8013040:	b90b      	cbnz	r3, 8013046 <__swbuf_r+0x12>
 8013042:	f7ff f8ef 	bl	8012224 <__sinit>
 8013046:	69a3      	ldr	r3, [r4, #24]
 8013048:	60a3      	str	r3, [r4, #8]
 801304a:	89a3      	ldrh	r3, [r4, #12]
 801304c:	071a      	lsls	r2, r3, #28
 801304e:	d501      	bpl.n	8013054 <__swbuf_r+0x20>
 8013050:	6923      	ldr	r3, [r4, #16]
 8013052:	b943      	cbnz	r3, 8013066 <__swbuf_r+0x32>
 8013054:	4621      	mov	r1, r4
 8013056:	4628      	mov	r0, r5
 8013058:	f000 f82a 	bl	80130b0 <__swsetup_r>
 801305c:	b118      	cbz	r0, 8013066 <__swbuf_r+0x32>
 801305e:	f04f 37ff 	mov.w	r7, #4294967295
 8013062:	4638      	mov	r0, r7
 8013064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013066:	6823      	ldr	r3, [r4, #0]
 8013068:	6922      	ldr	r2, [r4, #16]
 801306a:	1a98      	subs	r0, r3, r2
 801306c:	6963      	ldr	r3, [r4, #20]
 801306e:	b2f6      	uxtb	r6, r6
 8013070:	4283      	cmp	r3, r0
 8013072:	4637      	mov	r7, r6
 8013074:	dc05      	bgt.n	8013082 <__swbuf_r+0x4e>
 8013076:	4621      	mov	r1, r4
 8013078:	4628      	mov	r0, r5
 801307a:	f7ff ffb3 	bl	8012fe4 <_fflush_r>
 801307e:	2800      	cmp	r0, #0
 8013080:	d1ed      	bne.n	801305e <__swbuf_r+0x2a>
 8013082:	68a3      	ldr	r3, [r4, #8]
 8013084:	3b01      	subs	r3, #1
 8013086:	60a3      	str	r3, [r4, #8]
 8013088:	6823      	ldr	r3, [r4, #0]
 801308a:	1c5a      	adds	r2, r3, #1
 801308c:	6022      	str	r2, [r4, #0]
 801308e:	701e      	strb	r6, [r3, #0]
 8013090:	6962      	ldr	r2, [r4, #20]
 8013092:	1c43      	adds	r3, r0, #1
 8013094:	429a      	cmp	r2, r3
 8013096:	d004      	beq.n	80130a2 <__swbuf_r+0x6e>
 8013098:	89a3      	ldrh	r3, [r4, #12]
 801309a:	07db      	lsls	r3, r3, #31
 801309c:	d5e1      	bpl.n	8013062 <__swbuf_r+0x2e>
 801309e:	2e0a      	cmp	r6, #10
 80130a0:	d1df      	bne.n	8013062 <__swbuf_r+0x2e>
 80130a2:	4621      	mov	r1, r4
 80130a4:	4628      	mov	r0, r5
 80130a6:	f7ff ff9d 	bl	8012fe4 <_fflush_r>
 80130aa:	2800      	cmp	r0, #0
 80130ac:	d0d9      	beq.n	8013062 <__swbuf_r+0x2e>
 80130ae:	e7d6      	b.n	801305e <__swbuf_r+0x2a>

080130b0 <__swsetup_r>:
 80130b0:	b538      	push	{r3, r4, r5, lr}
 80130b2:	4b29      	ldr	r3, [pc, #164]	@ (8013158 <__swsetup_r+0xa8>)
 80130b4:	4605      	mov	r5, r0
 80130b6:	6818      	ldr	r0, [r3, #0]
 80130b8:	460c      	mov	r4, r1
 80130ba:	b118      	cbz	r0, 80130c4 <__swsetup_r+0x14>
 80130bc:	6a03      	ldr	r3, [r0, #32]
 80130be:	b90b      	cbnz	r3, 80130c4 <__swsetup_r+0x14>
 80130c0:	f7ff f8b0 	bl	8012224 <__sinit>
 80130c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130c8:	0719      	lsls	r1, r3, #28
 80130ca:	d422      	bmi.n	8013112 <__swsetup_r+0x62>
 80130cc:	06da      	lsls	r2, r3, #27
 80130ce:	d407      	bmi.n	80130e0 <__swsetup_r+0x30>
 80130d0:	2209      	movs	r2, #9
 80130d2:	602a      	str	r2, [r5, #0]
 80130d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80130d8:	81a3      	strh	r3, [r4, #12]
 80130da:	f04f 30ff 	mov.w	r0, #4294967295
 80130de:	e033      	b.n	8013148 <__swsetup_r+0x98>
 80130e0:	0758      	lsls	r0, r3, #29
 80130e2:	d512      	bpl.n	801310a <__swsetup_r+0x5a>
 80130e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80130e6:	b141      	cbz	r1, 80130fa <__swsetup_r+0x4a>
 80130e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80130ec:	4299      	cmp	r1, r3
 80130ee:	d002      	beq.n	80130f6 <__swsetup_r+0x46>
 80130f0:	4628      	mov	r0, r5
 80130f2:	f7ff f9d5 	bl	80124a0 <_free_r>
 80130f6:	2300      	movs	r3, #0
 80130f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80130fa:	89a3      	ldrh	r3, [r4, #12]
 80130fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013100:	81a3      	strh	r3, [r4, #12]
 8013102:	2300      	movs	r3, #0
 8013104:	6063      	str	r3, [r4, #4]
 8013106:	6923      	ldr	r3, [r4, #16]
 8013108:	6023      	str	r3, [r4, #0]
 801310a:	89a3      	ldrh	r3, [r4, #12]
 801310c:	f043 0308 	orr.w	r3, r3, #8
 8013110:	81a3      	strh	r3, [r4, #12]
 8013112:	6923      	ldr	r3, [r4, #16]
 8013114:	b94b      	cbnz	r3, 801312a <__swsetup_r+0x7a>
 8013116:	89a3      	ldrh	r3, [r4, #12]
 8013118:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801311c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013120:	d003      	beq.n	801312a <__swsetup_r+0x7a>
 8013122:	4621      	mov	r1, r4
 8013124:	4628      	mov	r0, r5
 8013126:	f000 f8a5 	bl	8013274 <__smakebuf_r>
 801312a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801312e:	f013 0201 	ands.w	r2, r3, #1
 8013132:	d00a      	beq.n	801314a <__swsetup_r+0x9a>
 8013134:	2200      	movs	r2, #0
 8013136:	60a2      	str	r2, [r4, #8]
 8013138:	6962      	ldr	r2, [r4, #20]
 801313a:	4252      	negs	r2, r2
 801313c:	61a2      	str	r2, [r4, #24]
 801313e:	6922      	ldr	r2, [r4, #16]
 8013140:	b942      	cbnz	r2, 8013154 <__swsetup_r+0xa4>
 8013142:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013146:	d1c5      	bne.n	80130d4 <__swsetup_r+0x24>
 8013148:	bd38      	pop	{r3, r4, r5, pc}
 801314a:	0799      	lsls	r1, r3, #30
 801314c:	bf58      	it	pl
 801314e:	6962      	ldrpl	r2, [r4, #20]
 8013150:	60a2      	str	r2, [r4, #8]
 8013152:	e7f4      	b.n	801313e <__swsetup_r+0x8e>
 8013154:	2000      	movs	r0, #0
 8013156:	e7f7      	b.n	8013148 <__swsetup_r+0x98>
 8013158:	20000238 	.word	0x20000238

0801315c <memmove>:
 801315c:	4288      	cmp	r0, r1
 801315e:	b510      	push	{r4, lr}
 8013160:	eb01 0402 	add.w	r4, r1, r2
 8013164:	d902      	bls.n	801316c <memmove+0x10>
 8013166:	4284      	cmp	r4, r0
 8013168:	4623      	mov	r3, r4
 801316a:	d807      	bhi.n	801317c <memmove+0x20>
 801316c:	1e43      	subs	r3, r0, #1
 801316e:	42a1      	cmp	r1, r4
 8013170:	d008      	beq.n	8013184 <memmove+0x28>
 8013172:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013176:	f803 2f01 	strb.w	r2, [r3, #1]!
 801317a:	e7f8      	b.n	801316e <memmove+0x12>
 801317c:	4402      	add	r2, r0
 801317e:	4601      	mov	r1, r0
 8013180:	428a      	cmp	r2, r1
 8013182:	d100      	bne.n	8013186 <memmove+0x2a>
 8013184:	bd10      	pop	{r4, pc}
 8013186:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801318a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801318e:	e7f7      	b.n	8013180 <memmove+0x24>

08013190 <_sbrk_r>:
 8013190:	b538      	push	{r3, r4, r5, lr}
 8013192:	4d06      	ldr	r5, [pc, #24]	@ (80131ac <_sbrk_r+0x1c>)
 8013194:	2300      	movs	r3, #0
 8013196:	4604      	mov	r4, r0
 8013198:	4608      	mov	r0, r1
 801319a:	602b      	str	r3, [r5, #0]
 801319c:	f7ee fd64 	bl	8001c68 <_sbrk>
 80131a0:	1c43      	adds	r3, r0, #1
 80131a2:	d102      	bne.n	80131aa <_sbrk_r+0x1a>
 80131a4:	682b      	ldr	r3, [r5, #0]
 80131a6:	b103      	cbz	r3, 80131aa <_sbrk_r+0x1a>
 80131a8:	6023      	str	r3, [r4, #0]
 80131aa:	bd38      	pop	{r3, r4, r5, pc}
 80131ac:	20000b30 	.word	0x20000b30

080131b0 <memcpy>:
 80131b0:	440a      	add	r2, r1
 80131b2:	4291      	cmp	r1, r2
 80131b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80131b8:	d100      	bne.n	80131bc <memcpy+0xc>
 80131ba:	4770      	bx	lr
 80131bc:	b510      	push	{r4, lr}
 80131be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80131c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80131c6:	4291      	cmp	r1, r2
 80131c8:	d1f9      	bne.n	80131be <memcpy+0xe>
 80131ca:	bd10      	pop	{r4, pc}

080131cc <_realloc_r>:
 80131cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131d0:	4607      	mov	r7, r0
 80131d2:	4614      	mov	r4, r2
 80131d4:	460d      	mov	r5, r1
 80131d6:	b921      	cbnz	r1, 80131e2 <_realloc_r+0x16>
 80131d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80131dc:	4611      	mov	r1, r2
 80131de:	f7ff b9cb 	b.w	8012578 <_malloc_r>
 80131e2:	b92a      	cbnz	r2, 80131f0 <_realloc_r+0x24>
 80131e4:	f7ff f95c 	bl	80124a0 <_free_r>
 80131e8:	4625      	mov	r5, r4
 80131ea:	4628      	mov	r0, r5
 80131ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131f0:	f000 f89e 	bl	8013330 <_malloc_usable_size_r>
 80131f4:	4284      	cmp	r4, r0
 80131f6:	4606      	mov	r6, r0
 80131f8:	d802      	bhi.n	8013200 <_realloc_r+0x34>
 80131fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80131fe:	d8f4      	bhi.n	80131ea <_realloc_r+0x1e>
 8013200:	4621      	mov	r1, r4
 8013202:	4638      	mov	r0, r7
 8013204:	f7ff f9b8 	bl	8012578 <_malloc_r>
 8013208:	4680      	mov	r8, r0
 801320a:	b908      	cbnz	r0, 8013210 <_realloc_r+0x44>
 801320c:	4645      	mov	r5, r8
 801320e:	e7ec      	b.n	80131ea <_realloc_r+0x1e>
 8013210:	42b4      	cmp	r4, r6
 8013212:	4622      	mov	r2, r4
 8013214:	4629      	mov	r1, r5
 8013216:	bf28      	it	cs
 8013218:	4632      	movcs	r2, r6
 801321a:	f7ff ffc9 	bl	80131b0 <memcpy>
 801321e:	4629      	mov	r1, r5
 8013220:	4638      	mov	r0, r7
 8013222:	f7ff f93d 	bl	80124a0 <_free_r>
 8013226:	e7f1      	b.n	801320c <_realloc_r+0x40>

08013228 <__swhatbuf_r>:
 8013228:	b570      	push	{r4, r5, r6, lr}
 801322a:	460c      	mov	r4, r1
 801322c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013230:	2900      	cmp	r1, #0
 8013232:	b096      	sub	sp, #88	@ 0x58
 8013234:	4615      	mov	r5, r2
 8013236:	461e      	mov	r6, r3
 8013238:	da0d      	bge.n	8013256 <__swhatbuf_r+0x2e>
 801323a:	89a3      	ldrh	r3, [r4, #12]
 801323c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013240:	f04f 0100 	mov.w	r1, #0
 8013244:	bf14      	ite	ne
 8013246:	2340      	movne	r3, #64	@ 0x40
 8013248:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801324c:	2000      	movs	r0, #0
 801324e:	6031      	str	r1, [r6, #0]
 8013250:	602b      	str	r3, [r5, #0]
 8013252:	b016      	add	sp, #88	@ 0x58
 8013254:	bd70      	pop	{r4, r5, r6, pc}
 8013256:	466a      	mov	r2, sp
 8013258:	f000 f848 	bl	80132ec <_fstat_r>
 801325c:	2800      	cmp	r0, #0
 801325e:	dbec      	blt.n	801323a <__swhatbuf_r+0x12>
 8013260:	9901      	ldr	r1, [sp, #4]
 8013262:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013266:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801326a:	4259      	negs	r1, r3
 801326c:	4159      	adcs	r1, r3
 801326e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013272:	e7eb      	b.n	801324c <__swhatbuf_r+0x24>

08013274 <__smakebuf_r>:
 8013274:	898b      	ldrh	r3, [r1, #12]
 8013276:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013278:	079d      	lsls	r5, r3, #30
 801327a:	4606      	mov	r6, r0
 801327c:	460c      	mov	r4, r1
 801327e:	d507      	bpl.n	8013290 <__smakebuf_r+0x1c>
 8013280:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013284:	6023      	str	r3, [r4, #0]
 8013286:	6123      	str	r3, [r4, #16]
 8013288:	2301      	movs	r3, #1
 801328a:	6163      	str	r3, [r4, #20]
 801328c:	b003      	add	sp, #12
 801328e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013290:	ab01      	add	r3, sp, #4
 8013292:	466a      	mov	r2, sp
 8013294:	f7ff ffc8 	bl	8013228 <__swhatbuf_r>
 8013298:	9f00      	ldr	r7, [sp, #0]
 801329a:	4605      	mov	r5, r0
 801329c:	4639      	mov	r1, r7
 801329e:	4630      	mov	r0, r6
 80132a0:	f7ff f96a 	bl	8012578 <_malloc_r>
 80132a4:	b948      	cbnz	r0, 80132ba <__smakebuf_r+0x46>
 80132a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80132aa:	059a      	lsls	r2, r3, #22
 80132ac:	d4ee      	bmi.n	801328c <__smakebuf_r+0x18>
 80132ae:	f023 0303 	bic.w	r3, r3, #3
 80132b2:	f043 0302 	orr.w	r3, r3, #2
 80132b6:	81a3      	strh	r3, [r4, #12]
 80132b8:	e7e2      	b.n	8013280 <__smakebuf_r+0xc>
 80132ba:	89a3      	ldrh	r3, [r4, #12]
 80132bc:	6020      	str	r0, [r4, #0]
 80132be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80132c2:	81a3      	strh	r3, [r4, #12]
 80132c4:	9b01      	ldr	r3, [sp, #4]
 80132c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80132ca:	b15b      	cbz	r3, 80132e4 <__smakebuf_r+0x70>
 80132cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80132d0:	4630      	mov	r0, r6
 80132d2:	f000 f81d 	bl	8013310 <_isatty_r>
 80132d6:	b128      	cbz	r0, 80132e4 <__smakebuf_r+0x70>
 80132d8:	89a3      	ldrh	r3, [r4, #12]
 80132da:	f023 0303 	bic.w	r3, r3, #3
 80132de:	f043 0301 	orr.w	r3, r3, #1
 80132e2:	81a3      	strh	r3, [r4, #12]
 80132e4:	89a3      	ldrh	r3, [r4, #12]
 80132e6:	431d      	orrs	r5, r3
 80132e8:	81a5      	strh	r5, [r4, #12]
 80132ea:	e7cf      	b.n	801328c <__smakebuf_r+0x18>

080132ec <_fstat_r>:
 80132ec:	b538      	push	{r3, r4, r5, lr}
 80132ee:	4d07      	ldr	r5, [pc, #28]	@ (801330c <_fstat_r+0x20>)
 80132f0:	2300      	movs	r3, #0
 80132f2:	4604      	mov	r4, r0
 80132f4:	4608      	mov	r0, r1
 80132f6:	4611      	mov	r1, r2
 80132f8:	602b      	str	r3, [r5, #0]
 80132fa:	f7ee fc8c 	bl	8001c16 <_fstat>
 80132fe:	1c43      	adds	r3, r0, #1
 8013300:	d102      	bne.n	8013308 <_fstat_r+0x1c>
 8013302:	682b      	ldr	r3, [r5, #0]
 8013304:	b103      	cbz	r3, 8013308 <_fstat_r+0x1c>
 8013306:	6023      	str	r3, [r4, #0]
 8013308:	bd38      	pop	{r3, r4, r5, pc}
 801330a:	bf00      	nop
 801330c:	20000b30 	.word	0x20000b30

08013310 <_isatty_r>:
 8013310:	b538      	push	{r3, r4, r5, lr}
 8013312:	4d06      	ldr	r5, [pc, #24]	@ (801332c <_isatty_r+0x1c>)
 8013314:	2300      	movs	r3, #0
 8013316:	4604      	mov	r4, r0
 8013318:	4608      	mov	r0, r1
 801331a:	602b      	str	r3, [r5, #0]
 801331c:	f7ee fc8b 	bl	8001c36 <_isatty>
 8013320:	1c43      	adds	r3, r0, #1
 8013322:	d102      	bne.n	801332a <_isatty_r+0x1a>
 8013324:	682b      	ldr	r3, [r5, #0]
 8013326:	b103      	cbz	r3, 801332a <_isatty_r+0x1a>
 8013328:	6023      	str	r3, [r4, #0]
 801332a:	bd38      	pop	{r3, r4, r5, pc}
 801332c:	20000b30 	.word	0x20000b30

08013330 <_malloc_usable_size_r>:
 8013330:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013334:	1f18      	subs	r0, r3, #4
 8013336:	2b00      	cmp	r3, #0
 8013338:	bfbc      	itt	lt
 801333a:	580b      	ldrlt	r3, [r1, r0]
 801333c:	18c0      	addlt	r0, r0, r3
 801333e:	4770      	bx	lr

08013340 <pow>:
 8013340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013342:	ed2d 8b02 	vpush	{d8}
 8013346:	eeb0 8a40 	vmov.f32	s16, s0
 801334a:	eef0 8a60 	vmov.f32	s17, s1
 801334e:	ec55 4b11 	vmov	r4, r5, d1
 8013352:	f000 f8ad 	bl	80134b0 <__ieee754_pow>
 8013356:	4622      	mov	r2, r4
 8013358:	462b      	mov	r3, r5
 801335a:	4620      	mov	r0, r4
 801335c:	4629      	mov	r1, r5
 801335e:	ec57 6b10 	vmov	r6, r7, d0
 8013362:	f7ed fbdb 	bl	8000b1c <__aeabi_dcmpun>
 8013366:	2800      	cmp	r0, #0
 8013368:	d13b      	bne.n	80133e2 <pow+0xa2>
 801336a:	ec51 0b18 	vmov	r0, r1, d8
 801336e:	2200      	movs	r2, #0
 8013370:	2300      	movs	r3, #0
 8013372:	f7ed fba1 	bl	8000ab8 <__aeabi_dcmpeq>
 8013376:	b1b8      	cbz	r0, 80133a8 <pow+0x68>
 8013378:	2200      	movs	r2, #0
 801337a:	2300      	movs	r3, #0
 801337c:	4620      	mov	r0, r4
 801337e:	4629      	mov	r1, r5
 8013380:	f7ed fb9a 	bl	8000ab8 <__aeabi_dcmpeq>
 8013384:	2800      	cmp	r0, #0
 8013386:	d146      	bne.n	8013416 <pow+0xd6>
 8013388:	ec45 4b10 	vmov	d0, r4, r5
 801338c:	f000 f848 	bl	8013420 <finite>
 8013390:	b338      	cbz	r0, 80133e2 <pow+0xa2>
 8013392:	2200      	movs	r2, #0
 8013394:	2300      	movs	r3, #0
 8013396:	4620      	mov	r0, r4
 8013398:	4629      	mov	r1, r5
 801339a:	f7ed fb97 	bl	8000acc <__aeabi_dcmplt>
 801339e:	b300      	cbz	r0, 80133e2 <pow+0xa2>
 80133a0:	f7ff f850 	bl	8012444 <__errno>
 80133a4:	2322      	movs	r3, #34	@ 0x22
 80133a6:	e01b      	b.n	80133e0 <pow+0xa0>
 80133a8:	ec47 6b10 	vmov	d0, r6, r7
 80133ac:	f000 f838 	bl	8013420 <finite>
 80133b0:	b9e0      	cbnz	r0, 80133ec <pow+0xac>
 80133b2:	eeb0 0a48 	vmov.f32	s0, s16
 80133b6:	eef0 0a68 	vmov.f32	s1, s17
 80133ba:	f000 f831 	bl	8013420 <finite>
 80133be:	b1a8      	cbz	r0, 80133ec <pow+0xac>
 80133c0:	ec45 4b10 	vmov	d0, r4, r5
 80133c4:	f000 f82c 	bl	8013420 <finite>
 80133c8:	b180      	cbz	r0, 80133ec <pow+0xac>
 80133ca:	4632      	mov	r2, r6
 80133cc:	463b      	mov	r3, r7
 80133ce:	4630      	mov	r0, r6
 80133d0:	4639      	mov	r1, r7
 80133d2:	f7ed fba3 	bl	8000b1c <__aeabi_dcmpun>
 80133d6:	2800      	cmp	r0, #0
 80133d8:	d0e2      	beq.n	80133a0 <pow+0x60>
 80133da:	f7ff f833 	bl	8012444 <__errno>
 80133de:	2321      	movs	r3, #33	@ 0x21
 80133e0:	6003      	str	r3, [r0, #0]
 80133e2:	ecbd 8b02 	vpop	{d8}
 80133e6:	ec47 6b10 	vmov	d0, r6, r7
 80133ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133ec:	2200      	movs	r2, #0
 80133ee:	2300      	movs	r3, #0
 80133f0:	4630      	mov	r0, r6
 80133f2:	4639      	mov	r1, r7
 80133f4:	f7ed fb60 	bl	8000ab8 <__aeabi_dcmpeq>
 80133f8:	2800      	cmp	r0, #0
 80133fa:	d0f2      	beq.n	80133e2 <pow+0xa2>
 80133fc:	eeb0 0a48 	vmov.f32	s0, s16
 8013400:	eef0 0a68 	vmov.f32	s1, s17
 8013404:	f000 f80c 	bl	8013420 <finite>
 8013408:	2800      	cmp	r0, #0
 801340a:	d0ea      	beq.n	80133e2 <pow+0xa2>
 801340c:	ec45 4b10 	vmov	d0, r4, r5
 8013410:	f000 f806 	bl	8013420 <finite>
 8013414:	e7c3      	b.n	801339e <pow+0x5e>
 8013416:	4f01      	ldr	r7, [pc, #4]	@ (801341c <pow+0xdc>)
 8013418:	2600      	movs	r6, #0
 801341a:	e7e2      	b.n	80133e2 <pow+0xa2>
 801341c:	3ff00000 	.word	0x3ff00000

08013420 <finite>:
 8013420:	b082      	sub	sp, #8
 8013422:	ed8d 0b00 	vstr	d0, [sp]
 8013426:	9801      	ldr	r0, [sp, #4]
 8013428:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 801342c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8013430:	0fc0      	lsrs	r0, r0, #31
 8013432:	b002      	add	sp, #8
 8013434:	4770      	bx	lr
	...

08013438 <trunc>:
 8013438:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 801343c:	ec5c bb10 	vmov	fp, ip, d0
 8013440:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8013444:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8013448:	2913      	cmp	r1, #19
 801344a:	4664      	mov	r4, ip
 801344c:	dc14      	bgt.n	8013478 <trunc+0x40>
 801344e:	2900      	cmp	r1, #0
 8013450:	bfa4      	itt	ge
 8013452:	4b15      	ldrge	r3, [pc, #84]	@ (80134a8 <trunc+0x70>)
 8013454:	fa43 f101 	asrge.w	r1, r3, r1
 8013458:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 801345c:	bfad      	iteet	ge
 801345e:	4021      	andge	r1, r4
 8013460:	2200      	movlt	r2, #0
 8013462:	4603      	movlt	r3, r0
 8013464:	2200      	movge	r2, #0
 8013466:	bfa8      	it	ge
 8013468:	ea41 0300 	orrge.w	r3, r1, r0
 801346c:	4693      	mov	fp, r2
 801346e:	469c      	mov	ip, r3
 8013470:	ec4c bb10 	vmov	d0, fp, ip
 8013474:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8013478:	2933      	cmp	r1, #51	@ 0x33
 801347a:	dd0b      	ble.n	8013494 <trunc+0x5c>
 801347c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8013480:	d1f6      	bne.n	8013470 <trunc+0x38>
 8013482:	465a      	mov	r2, fp
 8013484:	4663      	mov	r3, ip
 8013486:	4658      	mov	r0, fp
 8013488:	4621      	mov	r1, r4
 801348a:	f7ec fef7 	bl	800027c <__adddf3>
 801348e:	4683      	mov	fp, r0
 8013490:	468c      	mov	ip, r1
 8013492:	e7ed      	b.n	8013470 <trunc+0x38>
 8013494:	f2a0 4013 	subw	r0, r0, #1043	@ 0x413
 8013498:	f04f 33ff 	mov.w	r3, #4294967295
 801349c:	40c3      	lsrs	r3, r0
 801349e:	ea2b 0603 	bic.w	r6, fp, r3
 80134a2:	46b3      	mov	fp, r6
 80134a4:	46a4      	mov	ip, r4
 80134a6:	e7e3      	b.n	8013470 <trunc+0x38>
 80134a8:	fff00000 	.word	0xfff00000
 80134ac:	00000000 	.word	0x00000000

080134b0 <__ieee754_pow>:
 80134b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134b4:	b091      	sub	sp, #68	@ 0x44
 80134b6:	ed8d 1b00 	vstr	d1, [sp]
 80134ba:	e9dd 1900 	ldrd	r1, r9, [sp]
 80134be:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80134c2:	ea5a 0001 	orrs.w	r0, sl, r1
 80134c6:	ec57 6b10 	vmov	r6, r7, d0
 80134ca:	d113      	bne.n	80134f4 <__ieee754_pow+0x44>
 80134cc:	19b3      	adds	r3, r6, r6
 80134ce:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80134d2:	4152      	adcs	r2, r2
 80134d4:	4298      	cmp	r0, r3
 80134d6:	4b9a      	ldr	r3, [pc, #616]	@ (8013740 <__ieee754_pow+0x290>)
 80134d8:	4193      	sbcs	r3, r2
 80134da:	f080 84ee 	bcs.w	8013eba <__ieee754_pow+0xa0a>
 80134de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80134e2:	4630      	mov	r0, r6
 80134e4:	4639      	mov	r1, r7
 80134e6:	f7ec fec9 	bl	800027c <__adddf3>
 80134ea:	ec41 0b10 	vmov	d0, r0, r1
 80134ee:	b011      	add	sp, #68	@ 0x44
 80134f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134f4:	4a93      	ldr	r2, [pc, #588]	@ (8013744 <__ieee754_pow+0x294>)
 80134f6:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 80134fa:	4295      	cmp	r5, r2
 80134fc:	46b8      	mov	r8, r7
 80134fe:	4633      	mov	r3, r6
 8013500:	d80a      	bhi.n	8013518 <__ieee754_pow+0x68>
 8013502:	d104      	bne.n	801350e <__ieee754_pow+0x5e>
 8013504:	2e00      	cmp	r6, #0
 8013506:	d1ea      	bne.n	80134de <__ieee754_pow+0x2e>
 8013508:	45aa      	cmp	sl, r5
 801350a:	d8e8      	bhi.n	80134de <__ieee754_pow+0x2e>
 801350c:	e001      	b.n	8013512 <__ieee754_pow+0x62>
 801350e:	4592      	cmp	sl, r2
 8013510:	d802      	bhi.n	8013518 <__ieee754_pow+0x68>
 8013512:	4592      	cmp	sl, r2
 8013514:	d10f      	bne.n	8013536 <__ieee754_pow+0x86>
 8013516:	b171      	cbz	r1, 8013536 <__ieee754_pow+0x86>
 8013518:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801351c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8013520:	ea58 0803 	orrs.w	r8, r8, r3
 8013524:	d1db      	bne.n	80134de <__ieee754_pow+0x2e>
 8013526:	e9dd 3200 	ldrd	r3, r2, [sp]
 801352a:	18db      	adds	r3, r3, r3
 801352c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8013530:	4152      	adcs	r2, r2
 8013532:	4598      	cmp	r8, r3
 8013534:	e7cf      	b.n	80134d6 <__ieee754_pow+0x26>
 8013536:	f1b8 0f00 	cmp.w	r8, #0
 801353a:	46ab      	mov	fp, r5
 801353c:	da43      	bge.n	80135c6 <__ieee754_pow+0x116>
 801353e:	4a82      	ldr	r2, [pc, #520]	@ (8013748 <__ieee754_pow+0x298>)
 8013540:	4592      	cmp	sl, r2
 8013542:	d856      	bhi.n	80135f2 <__ieee754_pow+0x142>
 8013544:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8013548:	4592      	cmp	sl, r2
 801354a:	f240 84c5 	bls.w	8013ed8 <__ieee754_pow+0xa28>
 801354e:	ea4f 522a 	mov.w	r2, sl, asr #20
 8013552:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8013556:	2a14      	cmp	r2, #20
 8013558:	dd18      	ble.n	801358c <__ieee754_pow+0xdc>
 801355a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801355e:	fa21 f402 	lsr.w	r4, r1, r2
 8013562:	fa04 f202 	lsl.w	r2, r4, r2
 8013566:	428a      	cmp	r2, r1
 8013568:	f040 84b6 	bne.w	8013ed8 <__ieee754_pow+0xa28>
 801356c:	f004 0401 	and.w	r4, r4, #1
 8013570:	f1c4 0402 	rsb	r4, r4, #2
 8013574:	2900      	cmp	r1, #0
 8013576:	d159      	bne.n	801362c <__ieee754_pow+0x17c>
 8013578:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801357c:	d148      	bne.n	8013610 <__ieee754_pow+0x160>
 801357e:	4632      	mov	r2, r6
 8013580:	463b      	mov	r3, r7
 8013582:	4630      	mov	r0, r6
 8013584:	4639      	mov	r1, r7
 8013586:	f7ed f82f 	bl	80005e8 <__aeabi_dmul>
 801358a:	e7ae      	b.n	80134ea <__ieee754_pow+0x3a>
 801358c:	2900      	cmp	r1, #0
 801358e:	d14c      	bne.n	801362a <__ieee754_pow+0x17a>
 8013590:	f1c2 0214 	rsb	r2, r2, #20
 8013594:	fa4a f402 	asr.w	r4, sl, r2
 8013598:	fa04 f202 	lsl.w	r2, r4, r2
 801359c:	4552      	cmp	r2, sl
 801359e:	f040 8498 	bne.w	8013ed2 <__ieee754_pow+0xa22>
 80135a2:	f004 0401 	and.w	r4, r4, #1
 80135a6:	f1c4 0402 	rsb	r4, r4, #2
 80135aa:	4a68      	ldr	r2, [pc, #416]	@ (801374c <__ieee754_pow+0x29c>)
 80135ac:	4592      	cmp	sl, r2
 80135ae:	d1e3      	bne.n	8013578 <__ieee754_pow+0xc8>
 80135b0:	f1b9 0f00 	cmp.w	r9, #0
 80135b4:	f280 8489 	bge.w	8013eca <__ieee754_pow+0xa1a>
 80135b8:	4964      	ldr	r1, [pc, #400]	@ (801374c <__ieee754_pow+0x29c>)
 80135ba:	4632      	mov	r2, r6
 80135bc:	463b      	mov	r3, r7
 80135be:	2000      	movs	r0, #0
 80135c0:	f7ed f93c 	bl	800083c <__aeabi_ddiv>
 80135c4:	e791      	b.n	80134ea <__ieee754_pow+0x3a>
 80135c6:	2400      	movs	r4, #0
 80135c8:	bb81      	cbnz	r1, 801362c <__ieee754_pow+0x17c>
 80135ca:	4a5e      	ldr	r2, [pc, #376]	@ (8013744 <__ieee754_pow+0x294>)
 80135cc:	4592      	cmp	sl, r2
 80135ce:	d1ec      	bne.n	80135aa <__ieee754_pow+0xfa>
 80135d0:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 80135d4:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80135d8:	431a      	orrs	r2, r3
 80135da:	f000 846e 	beq.w	8013eba <__ieee754_pow+0xa0a>
 80135de:	4b5c      	ldr	r3, [pc, #368]	@ (8013750 <__ieee754_pow+0x2a0>)
 80135e0:	429d      	cmp	r5, r3
 80135e2:	d908      	bls.n	80135f6 <__ieee754_pow+0x146>
 80135e4:	f1b9 0f00 	cmp.w	r9, #0
 80135e8:	f280 846b 	bge.w	8013ec2 <__ieee754_pow+0xa12>
 80135ec:	2000      	movs	r0, #0
 80135ee:	2100      	movs	r1, #0
 80135f0:	e77b      	b.n	80134ea <__ieee754_pow+0x3a>
 80135f2:	2402      	movs	r4, #2
 80135f4:	e7e8      	b.n	80135c8 <__ieee754_pow+0x118>
 80135f6:	f1b9 0f00 	cmp.w	r9, #0
 80135fa:	f04f 0000 	mov.w	r0, #0
 80135fe:	f04f 0100 	mov.w	r1, #0
 8013602:	f6bf af72 	bge.w	80134ea <__ieee754_pow+0x3a>
 8013606:	e9dd 0300 	ldrd	r0, r3, [sp]
 801360a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801360e:	e76c      	b.n	80134ea <__ieee754_pow+0x3a>
 8013610:	4a50      	ldr	r2, [pc, #320]	@ (8013754 <__ieee754_pow+0x2a4>)
 8013612:	4591      	cmp	r9, r2
 8013614:	d10a      	bne.n	801362c <__ieee754_pow+0x17c>
 8013616:	f1b8 0f00 	cmp.w	r8, #0
 801361a:	db07      	blt.n	801362c <__ieee754_pow+0x17c>
 801361c:	ec47 6b10 	vmov	d0, r6, r7
 8013620:	b011      	add	sp, #68	@ 0x44
 8013622:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013626:	f000 bd4f 	b.w	80140c8 <__ieee754_sqrt>
 801362a:	2400      	movs	r4, #0
 801362c:	ec47 6b10 	vmov	d0, r6, r7
 8013630:	9302      	str	r3, [sp, #8]
 8013632:	f000 fc87 	bl	8013f44 <fabs>
 8013636:	9b02      	ldr	r3, [sp, #8]
 8013638:	ec51 0b10 	vmov	r0, r1, d0
 801363c:	bb43      	cbnz	r3, 8013690 <__ieee754_pow+0x1e0>
 801363e:	4b43      	ldr	r3, [pc, #268]	@ (801374c <__ieee754_pow+0x29c>)
 8013640:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8013644:	429a      	cmp	r2, r3
 8013646:	d000      	beq.n	801364a <__ieee754_pow+0x19a>
 8013648:	bb15      	cbnz	r5, 8013690 <__ieee754_pow+0x1e0>
 801364a:	f1b9 0f00 	cmp.w	r9, #0
 801364e:	da05      	bge.n	801365c <__ieee754_pow+0x1ac>
 8013650:	4602      	mov	r2, r0
 8013652:	460b      	mov	r3, r1
 8013654:	2000      	movs	r0, #0
 8013656:	493d      	ldr	r1, [pc, #244]	@ (801374c <__ieee754_pow+0x29c>)
 8013658:	f7ed f8f0 	bl	800083c <__aeabi_ddiv>
 801365c:	f1b8 0f00 	cmp.w	r8, #0
 8013660:	f6bf af43 	bge.w	80134ea <__ieee754_pow+0x3a>
 8013664:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8013668:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 801366c:	4325      	orrs	r5, r4
 801366e:	d108      	bne.n	8013682 <__ieee754_pow+0x1d2>
 8013670:	4602      	mov	r2, r0
 8013672:	460b      	mov	r3, r1
 8013674:	4610      	mov	r0, r2
 8013676:	4619      	mov	r1, r3
 8013678:	f7ec fdfe 	bl	8000278 <__aeabi_dsub>
 801367c:	4602      	mov	r2, r0
 801367e:	460b      	mov	r3, r1
 8013680:	e79e      	b.n	80135c0 <__ieee754_pow+0x110>
 8013682:	2c01      	cmp	r4, #1
 8013684:	f47f af31 	bne.w	80134ea <__ieee754_pow+0x3a>
 8013688:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801368c:	4619      	mov	r1, r3
 801368e:	e72c      	b.n	80134ea <__ieee754_pow+0x3a>
 8013690:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8013694:	3b01      	subs	r3, #1
 8013696:	ea53 0204 	orrs.w	r2, r3, r4
 801369a:	d102      	bne.n	80136a2 <__ieee754_pow+0x1f2>
 801369c:	4632      	mov	r2, r6
 801369e:	463b      	mov	r3, r7
 80136a0:	e7e8      	b.n	8013674 <__ieee754_pow+0x1c4>
 80136a2:	3c01      	subs	r4, #1
 80136a4:	431c      	orrs	r4, r3
 80136a6:	d016      	beq.n	80136d6 <__ieee754_pow+0x226>
 80136a8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8013730 <__ieee754_pow+0x280>
 80136ac:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80136b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80136b4:	f240 8110 	bls.w	80138d8 <__ieee754_pow+0x428>
 80136b8:	4b27      	ldr	r3, [pc, #156]	@ (8013758 <__ieee754_pow+0x2a8>)
 80136ba:	459a      	cmp	sl, r3
 80136bc:	4b24      	ldr	r3, [pc, #144]	@ (8013750 <__ieee754_pow+0x2a0>)
 80136be:	d916      	bls.n	80136ee <__ieee754_pow+0x23e>
 80136c0:	429d      	cmp	r5, r3
 80136c2:	d80b      	bhi.n	80136dc <__ieee754_pow+0x22c>
 80136c4:	f1b9 0f00 	cmp.w	r9, #0
 80136c8:	da0b      	bge.n	80136e2 <__ieee754_pow+0x232>
 80136ca:	2000      	movs	r0, #0
 80136cc:	b011      	add	sp, #68	@ 0x44
 80136ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136d2:	f000 bcf1 	b.w	80140b8 <__math_oflow>
 80136d6:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8013738 <__ieee754_pow+0x288>
 80136da:	e7e7      	b.n	80136ac <__ieee754_pow+0x1fc>
 80136dc:	f1b9 0f00 	cmp.w	r9, #0
 80136e0:	dcf3      	bgt.n	80136ca <__ieee754_pow+0x21a>
 80136e2:	2000      	movs	r0, #0
 80136e4:	b011      	add	sp, #68	@ 0x44
 80136e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136ea:	f000 bcdd 	b.w	80140a8 <__math_uflow>
 80136ee:	429d      	cmp	r5, r3
 80136f0:	d20c      	bcs.n	801370c <__ieee754_pow+0x25c>
 80136f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80136f6:	2200      	movs	r2, #0
 80136f8:	2300      	movs	r3, #0
 80136fa:	f7ed f9e7 	bl	8000acc <__aeabi_dcmplt>
 80136fe:	3800      	subs	r0, #0
 8013700:	bf18      	it	ne
 8013702:	2001      	movne	r0, #1
 8013704:	f1b9 0f00 	cmp.w	r9, #0
 8013708:	daec      	bge.n	80136e4 <__ieee754_pow+0x234>
 801370a:	e7df      	b.n	80136cc <__ieee754_pow+0x21c>
 801370c:	4b0f      	ldr	r3, [pc, #60]	@ (801374c <__ieee754_pow+0x29c>)
 801370e:	429d      	cmp	r5, r3
 8013710:	f04f 0200 	mov.w	r2, #0
 8013714:	d922      	bls.n	801375c <__ieee754_pow+0x2ac>
 8013716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801371a:	2300      	movs	r3, #0
 801371c:	f7ed f9d6 	bl	8000acc <__aeabi_dcmplt>
 8013720:	3800      	subs	r0, #0
 8013722:	bf18      	it	ne
 8013724:	2001      	movne	r0, #1
 8013726:	f1b9 0f00 	cmp.w	r9, #0
 801372a:	dccf      	bgt.n	80136cc <__ieee754_pow+0x21c>
 801372c:	e7da      	b.n	80136e4 <__ieee754_pow+0x234>
 801372e:	bf00      	nop
 8013730:	00000000 	.word	0x00000000
 8013734:	3ff00000 	.word	0x3ff00000
 8013738:	00000000 	.word	0x00000000
 801373c:	bff00000 	.word	0xbff00000
 8013740:	fff00000 	.word	0xfff00000
 8013744:	7ff00000 	.word	0x7ff00000
 8013748:	433fffff 	.word	0x433fffff
 801374c:	3ff00000 	.word	0x3ff00000
 8013750:	3fefffff 	.word	0x3fefffff
 8013754:	3fe00000 	.word	0x3fe00000
 8013758:	43f00000 	.word	0x43f00000
 801375c:	4b5a      	ldr	r3, [pc, #360]	@ (80138c8 <__ieee754_pow+0x418>)
 801375e:	f7ec fd8b 	bl	8000278 <__aeabi_dsub>
 8013762:	a351      	add	r3, pc, #324	@ (adr r3, 80138a8 <__ieee754_pow+0x3f8>)
 8013764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013768:	4604      	mov	r4, r0
 801376a:	460d      	mov	r5, r1
 801376c:	f7ec ff3c 	bl	80005e8 <__aeabi_dmul>
 8013770:	a34f      	add	r3, pc, #316	@ (adr r3, 80138b0 <__ieee754_pow+0x400>)
 8013772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013776:	4606      	mov	r6, r0
 8013778:	460f      	mov	r7, r1
 801377a:	4620      	mov	r0, r4
 801377c:	4629      	mov	r1, r5
 801377e:	f7ec ff33 	bl	80005e8 <__aeabi_dmul>
 8013782:	4b52      	ldr	r3, [pc, #328]	@ (80138cc <__ieee754_pow+0x41c>)
 8013784:	4682      	mov	sl, r0
 8013786:	468b      	mov	fp, r1
 8013788:	2200      	movs	r2, #0
 801378a:	4620      	mov	r0, r4
 801378c:	4629      	mov	r1, r5
 801378e:	f7ec ff2b 	bl	80005e8 <__aeabi_dmul>
 8013792:	4602      	mov	r2, r0
 8013794:	460b      	mov	r3, r1
 8013796:	a148      	add	r1, pc, #288	@ (adr r1, 80138b8 <__ieee754_pow+0x408>)
 8013798:	e9d1 0100 	ldrd	r0, r1, [r1]
 801379c:	f7ec fd6c 	bl	8000278 <__aeabi_dsub>
 80137a0:	4622      	mov	r2, r4
 80137a2:	462b      	mov	r3, r5
 80137a4:	f7ec ff20 	bl	80005e8 <__aeabi_dmul>
 80137a8:	4602      	mov	r2, r0
 80137aa:	460b      	mov	r3, r1
 80137ac:	2000      	movs	r0, #0
 80137ae:	4948      	ldr	r1, [pc, #288]	@ (80138d0 <__ieee754_pow+0x420>)
 80137b0:	f7ec fd62 	bl	8000278 <__aeabi_dsub>
 80137b4:	4622      	mov	r2, r4
 80137b6:	4680      	mov	r8, r0
 80137b8:	4689      	mov	r9, r1
 80137ba:	462b      	mov	r3, r5
 80137bc:	4620      	mov	r0, r4
 80137be:	4629      	mov	r1, r5
 80137c0:	f7ec ff12 	bl	80005e8 <__aeabi_dmul>
 80137c4:	4602      	mov	r2, r0
 80137c6:	460b      	mov	r3, r1
 80137c8:	4640      	mov	r0, r8
 80137ca:	4649      	mov	r1, r9
 80137cc:	f7ec ff0c 	bl	80005e8 <__aeabi_dmul>
 80137d0:	a33b      	add	r3, pc, #236	@ (adr r3, 80138c0 <__ieee754_pow+0x410>)
 80137d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137d6:	f7ec ff07 	bl	80005e8 <__aeabi_dmul>
 80137da:	4602      	mov	r2, r0
 80137dc:	460b      	mov	r3, r1
 80137de:	4650      	mov	r0, sl
 80137e0:	4659      	mov	r1, fp
 80137e2:	f7ec fd49 	bl	8000278 <__aeabi_dsub>
 80137e6:	4602      	mov	r2, r0
 80137e8:	460b      	mov	r3, r1
 80137ea:	4680      	mov	r8, r0
 80137ec:	4689      	mov	r9, r1
 80137ee:	4630      	mov	r0, r6
 80137f0:	4639      	mov	r1, r7
 80137f2:	f7ec fd43 	bl	800027c <__adddf3>
 80137f6:	2400      	movs	r4, #0
 80137f8:	4632      	mov	r2, r6
 80137fa:	463b      	mov	r3, r7
 80137fc:	4620      	mov	r0, r4
 80137fe:	460d      	mov	r5, r1
 8013800:	f7ec fd3a 	bl	8000278 <__aeabi_dsub>
 8013804:	4602      	mov	r2, r0
 8013806:	460b      	mov	r3, r1
 8013808:	4640      	mov	r0, r8
 801380a:	4649      	mov	r1, r9
 801380c:	f7ec fd34 	bl	8000278 <__aeabi_dsub>
 8013810:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013814:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013818:	2300      	movs	r3, #0
 801381a:	9304      	str	r3, [sp, #16]
 801381c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013820:	4606      	mov	r6, r0
 8013822:	460f      	mov	r7, r1
 8013824:	465b      	mov	r3, fp
 8013826:	4652      	mov	r2, sl
 8013828:	e9dd 0100 	ldrd	r0, r1, [sp]
 801382c:	f7ec fd24 	bl	8000278 <__aeabi_dsub>
 8013830:	4622      	mov	r2, r4
 8013832:	462b      	mov	r3, r5
 8013834:	f7ec fed8 	bl	80005e8 <__aeabi_dmul>
 8013838:	e9dd 2300 	ldrd	r2, r3, [sp]
 801383c:	4680      	mov	r8, r0
 801383e:	4689      	mov	r9, r1
 8013840:	4630      	mov	r0, r6
 8013842:	4639      	mov	r1, r7
 8013844:	f7ec fed0 	bl	80005e8 <__aeabi_dmul>
 8013848:	4602      	mov	r2, r0
 801384a:	460b      	mov	r3, r1
 801384c:	4640      	mov	r0, r8
 801384e:	4649      	mov	r1, r9
 8013850:	f7ec fd14 	bl	800027c <__adddf3>
 8013854:	465b      	mov	r3, fp
 8013856:	4606      	mov	r6, r0
 8013858:	460f      	mov	r7, r1
 801385a:	4652      	mov	r2, sl
 801385c:	4620      	mov	r0, r4
 801385e:	4629      	mov	r1, r5
 8013860:	f7ec fec2 	bl	80005e8 <__aeabi_dmul>
 8013864:	460b      	mov	r3, r1
 8013866:	4602      	mov	r2, r0
 8013868:	4680      	mov	r8, r0
 801386a:	4689      	mov	r9, r1
 801386c:	4630      	mov	r0, r6
 801386e:	4639      	mov	r1, r7
 8013870:	f7ec fd04 	bl	800027c <__adddf3>
 8013874:	4b17      	ldr	r3, [pc, #92]	@ (80138d4 <__ieee754_pow+0x424>)
 8013876:	4299      	cmp	r1, r3
 8013878:	4604      	mov	r4, r0
 801387a:	460d      	mov	r5, r1
 801387c:	468b      	mov	fp, r1
 801387e:	f340 820b 	ble.w	8013c98 <__ieee754_pow+0x7e8>
 8013882:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8013886:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801388a:	4303      	orrs	r3, r0
 801388c:	f000 81ea 	beq.w	8013c64 <__ieee754_pow+0x7b4>
 8013890:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013894:	2200      	movs	r2, #0
 8013896:	2300      	movs	r3, #0
 8013898:	f7ed f918 	bl	8000acc <__aeabi_dcmplt>
 801389c:	3800      	subs	r0, #0
 801389e:	bf18      	it	ne
 80138a0:	2001      	movne	r0, #1
 80138a2:	e713      	b.n	80136cc <__ieee754_pow+0x21c>
 80138a4:	f3af 8000 	nop.w
 80138a8:	60000000 	.word	0x60000000
 80138ac:	3ff71547 	.word	0x3ff71547
 80138b0:	f85ddf44 	.word	0xf85ddf44
 80138b4:	3e54ae0b 	.word	0x3e54ae0b
 80138b8:	55555555 	.word	0x55555555
 80138bc:	3fd55555 	.word	0x3fd55555
 80138c0:	652b82fe 	.word	0x652b82fe
 80138c4:	3ff71547 	.word	0x3ff71547
 80138c8:	3ff00000 	.word	0x3ff00000
 80138cc:	3fd00000 	.word	0x3fd00000
 80138d0:	3fe00000 	.word	0x3fe00000
 80138d4:	408fffff 	.word	0x408fffff
 80138d8:	4bd5      	ldr	r3, [pc, #852]	@ (8013c30 <__ieee754_pow+0x780>)
 80138da:	ea08 0303 	and.w	r3, r8, r3
 80138de:	2200      	movs	r2, #0
 80138e0:	b92b      	cbnz	r3, 80138ee <__ieee754_pow+0x43e>
 80138e2:	4bd4      	ldr	r3, [pc, #848]	@ (8013c34 <__ieee754_pow+0x784>)
 80138e4:	f7ec fe80 	bl	80005e8 <__aeabi_dmul>
 80138e8:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80138ec:	468b      	mov	fp, r1
 80138ee:	ea4f 532b 	mov.w	r3, fp, asr #20
 80138f2:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80138f6:	4413      	add	r3, r2
 80138f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80138fa:	4bcf      	ldr	r3, [pc, #828]	@ (8013c38 <__ieee754_pow+0x788>)
 80138fc:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8013900:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8013904:	459b      	cmp	fp, r3
 8013906:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801390a:	dd08      	ble.n	801391e <__ieee754_pow+0x46e>
 801390c:	4bcb      	ldr	r3, [pc, #812]	@ (8013c3c <__ieee754_pow+0x78c>)
 801390e:	459b      	cmp	fp, r3
 8013910:	f340 81a5 	ble.w	8013c5e <__ieee754_pow+0x7ae>
 8013914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013916:	3301      	adds	r3, #1
 8013918:	930a      	str	r3, [sp, #40]	@ 0x28
 801391a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801391e:	f04f 0a00 	mov.w	sl, #0
 8013922:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8013926:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013928:	4bc5      	ldr	r3, [pc, #788]	@ (8013c40 <__ieee754_pow+0x790>)
 801392a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801392e:	ed93 7b00 	vldr	d7, [r3]
 8013932:	4629      	mov	r1, r5
 8013934:	ec53 2b17 	vmov	r2, r3, d7
 8013938:	ed8d 7b06 	vstr	d7, [sp, #24]
 801393c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013940:	f7ec fc9a 	bl	8000278 <__aeabi_dsub>
 8013944:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013948:	4606      	mov	r6, r0
 801394a:	460f      	mov	r7, r1
 801394c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013950:	f7ec fc94 	bl	800027c <__adddf3>
 8013954:	4602      	mov	r2, r0
 8013956:	460b      	mov	r3, r1
 8013958:	2000      	movs	r0, #0
 801395a:	49ba      	ldr	r1, [pc, #744]	@ (8013c44 <__ieee754_pow+0x794>)
 801395c:	f7ec ff6e 	bl	800083c <__aeabi_ddiv>
 8013960:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8013964:	4602      	mov	r2, r0
 8013966:	460b      	mov	r3, r1
 8013968:	4630      	mov	r0, r6
 801396a:	4639      	mov	r1, r7
 801396c:	f7ec fe3c 	bl	80005e8 <__aeabi_dmul>
 8013970:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013974:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8013978:	106d      	asrs	r5, r5, #1
 801397a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801397e:	f04f 0b00 	mov.w	fp, #0
 8013982:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8013986:	4661      	mov	r1, ip
 8013988:	2200      	movs	r2, #0
 801398a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801398e:	4658      	mov	r0, fp
 8013990:	46e1      	mov	r9, ip
 8013992:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8013996:	4614      	mov	r4, r2
 8013998:	461d      	mov	r5, r3
 801399a:	f7ec fe25 	bl	80005e8 <__aeabi_dmul>
 801399e:	4602      	mov	r2, r0
 80139a0:	460b      	mov	r3, r1
 80139a2:	4630      	mov	r0, r6
 80139a4:	4639      	mov	r1, r7
 80139a6:	f7ec fc67 	bl	8000278 <__aeabi_dsub>
 80139aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80139ae:	4606      	mov	r6, r0
 80139b0:	460f      	mov	r7, r1
 80139b2:	4620      	mov	r0, r4
 80139b4:	4629      	mov	r1, r5
 80139b6:	f7ec fc5f 	bl	8000278 <__aeabi_dsub>
 80139ba:	4602      	mov	r2, r0
 80139bc:	460b      	mov	r3, r1
 80139be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80139c2:	f7ec fc59 	bl	8000278 <__aeabi_dsub>
 80139c6:	465a      	mov	r2, fp
 80139c8:	464b      	mov	r3, r9
 80139ca:	f7ec fe0d 	bl	80005e8 <__aeabi_dmul>
 80139ce:	4602      	mov	r2, r0
 80139d0:	460b      	mov	r3, r1
 80139d2:	4630      	mov	r0, r6
 80139d4:	4639      	mov	r1, r7
 80139d6:	f7ec fc4f 	bl	8000278 <__aeabi_dsub>
 80139da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80139de:	f7ec fe03 	bl	80005e8 <__aeabi_dmul>
 80139e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80139e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80139ea:	4610      	mov	r0, r2
 80139ec:	4619      	mov	r1, r3
 80139ee:	f7ec fdfb 	bl	80005e8 <__aeabi_dmul>
 80139f2:	a37d      	add	r3, pc, #500	@ (adr r3, 8013be8 <__ieee754_pow+0x738>)
 80139f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139f8:	4604      	mov	r4, r0
 80139fa:	460d      	mov	r5, r1
 80139fc:	f7ec fdf4 	bl	80005e8 <__aeabi_dmul>
 8013a00:	a37b      	add	r3, pc, #492	@ (adr r3, 8013bf0 <__ieee754_pow+0x740>)
 8013a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a06:	f7ec fc39 	bl	800027c <__adddf3>
 8013a0a:	4622      	mov	r2, r4
 8013a0c:	462b      	mov	r3, r5
 8013a0e:	f7ec fdeb 	bl	80005e8 <__aeabi_dmul>
 8013a12:	a379      	add	r3, pc, #484	@ (adr r3, 8013bf8 <__ieee754_pow+0x748>)
 8013a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a18:	f7ec fc30 	bl	800027c <__adddf3>
 8013a1c:	4622      	mov	r2, r4
 8013a1e:	462b      	mov	r3, r5
 8013a20:	f7ec fde2 	bl	80005e8 <__aeabi_dmul>
 8013a24:	a376      	add	r3, pc, #472	@ (adr r3, 8013c00 <__ieee754_pow+0x750>)
 8013a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a2a:	f7ec fc27 	bl	800027c <__adddf3>
 8013a2e:	4622      	mov	r2, r4
 8013a30:	462b      	mov	r3, r5
 8013a32:	f7ec fdd9 	bl	80005e8 <__aeabi_dmul>
 8013a36:	a374      	add	r3, pc, #464	@ (adr r3, 8013c08 <__ieee754_pow+0x758>)
 8013a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a3c:	f7ec fc1e 	bl	800027c <__adddf3>
 8013a40:	4622      	mov	r2, r4
 8013a42:	462b      	mov	r3, r5
 8013a44:	f7ec fdd0 	bl	80005e8 <__aeabi_dmul>
 8013a48:	a371      	add	r3, pc, #452	@ (adr r3, 8013c10 <__ieee754_pow+0x760>)
 8013a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a4e:	f7ec fc15 	bl	800027c <__adddf3>
 8013a52:	4622      	mov	r2, r4
 8013a54:	4606      	mov	r6, r0
 8013a56:	460f      	mov	r7, r1
 8013a58:	462b      	mov	r3, r5
 8013a5a:	4620      	mov	r0, r4
 8013a5c:	4629      	mov	r1, r5
 8013a5e:	f7ec fdc3 	bl	80005e8 <__aeabi_dmul>
 8013a62:	4602      	mov	r2, r0
 8013a64:	460b      	mov	r3, r1
 8013a66:	4630      	mov	r0, r6
 8013a68:	4639      	mov	r1, r7
 8013a6a:	f7ec fdbd 	bl	80005e8 <__aeabi_dmul>
 8013a6e:	465a      	mov	r2, fp
 8013a70:	4604      	mov	r4, r0
 8013a72:	460d      	mov	r5, r1
 8013a74:	464b      	mov	r3, r9
 8013a76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a7a:	f7ec fbff 	bl	800027c <__adddf3>
 8013a7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013a82:	f7ec fdb1 	bl	80005e8 <__aeabi_dmul>
 8013a86:	4622      	mov	r2, r4
 8013a88:	462b      	mov	r3, r5
 8013a8a:	f7ec fbf7 	bl	800027c <__adddf3>
 8013a8e:	465a      	mov	r2, fp
 8013a90:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013a94:	464b      	mov	r3, r9
 8013a96:	4658      	mov	r0, fp
 8013a98:	4649      	mov	r1, r9
 8013a9a:	f7ec fda5 	bl	80005e8 <__aeabi_dmul>
 8013a9e:	4b6a      	ldr	r3, [pc, #424]	@ (8013c48 <__ieee754_pow+0x798>)
 8013aa0:	2200      	movs	r2, #0
 8013aa2:	4606      	mov	r6, r0
 8013aa4:	460f      	mov	r7, r1
 8013aa6:	f7ec fbe9 	bl	800027c <__adddf3>
 8013aaa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013aae:	f7ec fbe5 	bl	800027c <__adddf3>
 8013ab2:	46d8      	mov	r8, fp
 8013ab4:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8013ab8:	460d      	mov	r5, r1
 8013aba:	465a      	mov	r2, fp
 8013abc:	460b      	mov	r3, r1
 8013abe:	4640      	mov	r0, r8
 8013ac0:	4649      	mov	r1, r9
 8013ac2:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8013ac6:	f7ec fd8f 	bl	80005e8 <__aeabi_dmul>
 8013aca:	465c      	mov	r4, fp
 8013acc:	4680      	mov	r8, r0
 8013ace:	4689      	mov	r9, r1
 8013ad0:	4b5d      	ldr	r3, [pc, #372]	@ (8013c48 <__ieee754_pow+0x798>)
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	4620      	mov	r0, r4
 8013ad6:	4629      	mov	r1, r5
 8013ad8:	f7ec fbce 	bl	8000278 <__aeabi_dsub>
 8013adc:	4632      	mov	r2, r6
 8013ade:	463b      	mov	r3, r7
 8013ae0:	f7ec fbca 	bl	8000278 <__aeabi_dsub>
 8013ae4:	4602      	mov	r2, r0
 8013ae6:	460b      	mov	r3, r1
 8013ae8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013aec:	f7ec fbc4 	bl	8000278 <__aeabi_dsub>
 8013af0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013af4:	f7ec fd78 	bl	80005e8 <__aeabi_dmul>
 8013af8:	4622      	mov	r2, r4
 8013afa:	4606      	mov	r6, r0
 8013afc:	460f      	mov	r7, r1
 8013afe:	462b      	mov	r3, r5
 8013b00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013b04:	f7ec fd70 	bl	80005e8 <__aeabi_dmul>
 8013b08:	4602      	mov	r2, r0
 8013b0a:	460b      	mov	r3, r1
 8013b0c:	4630      	mov	r0, r6
 8013b0e:	4639      	mov	r1, r7
 8013b10:	f7ec fbb4 	bl	800027c <__adddf3>
 8013b14:	4606      	mov	r6, r0
 8013b16:	460f      	mov	r7, r1
 8013b18:	4602      	mov	r2, r0
 8013b1a:	460b      	mov	r3, r1
 8013b1c:	4640      	mov	r0, r8
 8013b1e:	4649      	mov	r1, r9
 8013b20:	f7ec fbac 	bl	800027c <__adddf3>
 8013b24:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8013b28:	a33b      	add	r3, pc, #236	@ (adr r3, 8013c18 <__ieee754_pow+0x768>)
 8013b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b2e:	4658      	mov	r0, fp
 8013b30:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8013b34:	460d      	mov	r5, r1
 8013b36:	f7ec fd57 	bl	80005e8 <__aeabi_dmul>
 8013b3a:	465c      	mov	r4, fp
 8013b3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013b40:	4642      	mov	r2, r8
 8013b42:	464b      	mov	r3, r9
 8013b44:	4620      	mov	r0, r4
 8013b46:	4629      	mov	r1, r5
 8013b48:	f7ec fb96 	bl	8000278 <__aeabi_dsub>
 8013b4c:	4602      	mov	r2, r0
 8013b4e:	460b      	mov	r3, r1
 8013b50:	4630      	mov	r0, r6
 8013b52:	4639      	mov	r1, r7
 8013b54:	f7ec fb90 	bl	8000278 <__aeabi_dsub>
 8013b58:	a331      	add	r3, pc, #196	@ (adr r3, 8013c20 <__ieee754_pow+0x770>)
 8013b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b5e:	f7ec fd43 	bl	80005e8 <__aeabi_dmul>
 8013b62:	a331      	add	r3, pc, #196	@ (adr r3, 8013c28 <__ieee754_pow+0x778>)
 8013b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b68:	4606      	mov	r6, r0
 8013b6a:	460f      	mov	r7, r1
 8013b6c:	4620      	mov	r0, r4
 8013b6e:	4629      	mov	r1, r5
 8013b70:	f7ec fd3a 	bl	80005e8 <__aeabi_dmul>
 8013b74:	4602      	mov	r2, r0
 8013b76:	460b      	mov	r3, r1
 8013b78:	4630      	mov	r0, r6
 8013b7a:	4639      	mov	r1, r7
 8013b7c:	f7ec fb7e 	bl	800027c <__adddf3>
 8013b80:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013b82:	4b32      	ldr	r3, [pc, #200]	@ (8013c4c <__ieee754_pow+0x79c>)
 8013b84:	4413      	add	r3, r2
 8013b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b8a:	f7ec fb77 	bl	800027c <__adddf3>
 8013b8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013b92:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013b94:	f7ec fcbe 	bl	8000514 <__aeabi_i2d>
 8013b98:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013b9a:	4b2d      	ldr	r3, [pc, #180]	@ (8013c50 <__ieee754_pow+0x7a0>)
 8013b9c:	4413      	add	r3, r2
 8013b9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013ba2:	4606      	mov	r6, r0
 8013ba4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013ba8:	460f      	mov	r7, r1
 8013baa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013bae:	f7ec fb65 	bl	800027c <__adddf3>
 8013bb2:	4642      	mov	r2, r8
 8013bb4:	464b      	mov	r3, r9
 8013bb6:	f7ec fb61 	bl	800027c <__adddf3>
 8013bba:	4632      	mov	r2, r6
 8013bbc:	463b      	mov	r3, r7
 8013bbe:	f7ec fb5d 	bl	800027c <__adddf3>
 8013bc2:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8013bc6:	4632      	mov	r2, r6
 8013bc8:	463b      	mov	r3, r7
 8013bca:	4658      	mov	r0, fp
 8013bcc:	460d      	mov	r5, r1
 8013bce:	f7ec fb53 	bl	8000278 <__aeabi_dsub>
 8013bd2:	4642      	mov	r2, r8
 8013bd4:	464b      	mov	r3, r9
 8013bd6:	f7ec fb4f 	bl	8000278 <__aeabi_dsub>
 8013bda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013bde:	f7ec fb4b 	bl	8000278 <__aeabi_dsub>
 8013be2:	465c      	mov	r4, fp
 8013be4:	e036      	b.n	8013c54 <__ieee754_pow+0x7a4>
 8013be6:	bf00      	nop
 8013be8:	4a454eef 	.word	0x4a454eef
 8013bec:	3fca7e28 	.word	0x3fca7e28
 8013bf0:	93c9db65 	.word	0x93c9db65
 8013bf4:	3fcd864a 	.word	0x3fcd864a
 8013bf8:	a91d4101 	.word	0xa91d4101
 8013bfc:	3fd17460 	.word	0x3fd17460
 8013c00:	518f264d 	.word	0x518f264d
 8013c04:	3fd55555 	.word	0x3fd55555
 8013c08:	db6fabff 	.word	0xdb6fabff
 8013c0c:	3fdb6db6 	.word	0x3fdb6db6
 8013c10:	33333303 	.word	0x33333303
 8013c14:	3fe33333 	.word	0x3fe33333
 8013c18:	e0000000 	.word	0xe0000000
 8013c1c:	3feec709 	.word	0x3feec709
 8013c20:	dc3a03fd 	.word	0xdc3a03fd
 8013c24:	3feec709 	.word	0x3feec709
 8013c28:	145b01f5 	.word	0x145b01f5
 8013c2c:	be3e2fe0 	.word	0xbe3e2fe0
 8013c30:	7ff00000 	.word	0x7ff00000
 8013c34:	43400000 	.word	0x43400000
 8013c38:	0003988e 	.word	0x0003988e
 8013c3c:	000bb679 	.word	0x000bb679
 8013c40:	080147b0 	.word	0x080147b0
 8013c44:	3ff00000 	.word	0x3ff00000
 8013c48:	40080000 	.word	0x40080000
 8013c4c:	08014790 	.word	0x08014790
 8013c50:	080147a0 	.word	0x080147a0
 8013c54:	4602      	mov	r2, r0
 8013c56:	460b      	mov	r3, r1
 8013c58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013c5c:	e5d6      	b.n	801380c <__ieee754_pow+0x35c>
 8013c5e:	f04f 0a01 	mov.w	sl, #1
 8013c62:	e65e      	b.n	8013922 <__ieee754_pow+0x472>
 8013c64:	a3b5      	add	r3, pc, #724	@ (adr r3, 8013f3c <__ieee754_pow+0xa8c>)
 8013c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c6a:	4630      	mov	r0, r6
 8013c6c:	4639      	mov	r1, r7
 8013c6e:	f7ec fb05 	bl	800027c <__adddf3>
 8013c72:	4642      	mov	r2, r8
 8013c74:	e9cd 0100 	strd	r0, r1, [sp]
 8013c78:	464b      	mov	r3, r9
 8013c7a:	4620      	mov	r0, r4
 8013c7c:	4629      	mov	r1, r5
 8013c7e:	f7ec fafb 	bl	8000278 <__aeabi_dsub>
 8013c82:	4602      	mov	r2, r0
 8013c84:	460b      	mov	r3, r1
 8013c86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013c8a:	f7ec ff3d 	bl	8000b08 <__aeabi_dcmpgt>
 8013c8e:	2800      	cmp	r0, #0
 8013c90:	f47f adfe 	bne.w	8013890 <__ieee754_pow+0x3e0>
 8013c94:	4ba2      	ldr	r3, [pc, #648]	@ (8013f20 <__ieee754_pow+0xa70>)
 8013c96:	e022      	b.n	8013cde <__ieee754_pow+0x82e>
 8013c98:	4ca2      	ldr	r4, [pc, #648]	@ (8013f24 <__ieee754_pow+0xa74>)
 8013c9a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013c9e:	42a3      	cmp	r3, r4
 8013ca0:	d919      	bls.n	8013cd6 <__ieee754_pow+0x826>
 8013ca2:	4ba1      	ldr	r3, [pc, #644]	@ (8013f28 <__ieee754_pow+0xa78>)
 8013ca4:	440b      	add	r3, r1
 8013ca6:	4303      	orrs	r3, r0
 8013ca8:	d009      	beq.n	8013cbe <__ieee754_pow+0x80e>
 8013caa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013cae:	2200      	movs	r2, #0
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	f7ec ff0b 	bl	8000acc <__aeabi_dcmplt>
 8013cb6:	3800      	subs	r0, #0
 8013cb8:	bf18      	it	ne
 8013cba:	2001      	movne	r0, #1
 8013cbc:	e512      	b.n	80136e4 <__ieee754_pow+0x234>
 8013cbe:	4642      	mov	r2, r8
 8013cc0:	464b      	mov	r3, r9
 8013cc2:	f7ec fad9 	bl	8000278 <__aeabi_dsub>
 8013cc6:	4632      	mov	r2, r6
 8013cc8:	463b      	mov	r3, r7
 8013cca:	f7ec ff13 	bl	8000af4 <__aeabi_dcmpge>
 8013cce:	2800      	cmp	r0, #0
 8013cd0:	d1eb      	bne.n	8013caa <__ieee754_pow+0x7fa>
 8013cd2:	4b96      	ldr	r3, [pc, #600]	@ (8013f2c <__ieee754_pow+0xa7c>)
 8013cd4:	e003      	b.n	8013cde <__ieee754_pow+0x82e>
 8013cd6:	4a96      	ldr	r2, [pc, #600]	@ (8013f30 <__ieee754_pow+0xa80>)
 8013cd8:	4293      	cmp	r3, r2
 8013cda:	f240 80e7 	bls.w	8013eac <__ieee754_pow+0x9fc>
 8013cde:	151b      	asrs	r3, r3, #20
 8013ce0:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8013ce4:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8013ce8:	fa4a fa03 	asr.w	sl, sl, r3
 8013cec:	44da      	add	sl, fp
 8013cee:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8013cf2:	4890      	ldr	r0, [pc, #576]	@ (8013f34 <__ieee754_pow+0xa84>)
 8013cf4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8013cf8:	4108      	asrs	r0, r1
 8013cfa:	ea00 030a 	and.w	r3, r0, sl
 8013cfe:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8013d02:	f1c1 0114 	rsb	r1, r1, #20
 8013d06:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8013d0a:	fa4a fa01 	asr.w	sl, sl, r1
 8013d0e:	f1bb 0f00 	cmp.w	fp, #0
 8013d12:	4640      	mov	r0, r8
 8013d14:	4649      	mov	r1, r9
 8013d16:	f04f 0200 	mov.w	r2, #0
 8013d1a:	bfb8      	it	lt
 8013d1c:	f1ca 0a00 	rsblt	sl, sl, #0
 8013d20:	f7ec faaa 	bl	8000278 <__aeabi_dsub>
 8013d24:	4680      	mov	r8, r0
 8013d26:	4689      	mov	r9, r1
 8013d28:	4632      	mov	r2, r6
 8013d2a:	463b      	mov	r3, r7
 8013d2c:	4640      	mov	r0, r8
 8013d2e:	4649      	mov	r1, r9
 8013d30:	f7ec faa4 	bl	800027c <__adddf3>
 8013d34:	2400      	movs	r4, #0
 8013d36:	a36a      	add	r3, pc, #424	@ (adr r3, 8013ee0 <__ieee754_pow+0xa30>)
 8013d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d3c:	4620      	mov	r0, r4
 8013d3e:	460d      	mov	r5, r1
 8013d40:	f7ec fc52 	bl	80005e8 <__aeabi_dmul>
 8013d44:	4642      	mov	r2, r8
 8013d46:	e9cd 0100 	strd	r0, r1, [sp]
 8013d4a:	464b      	mov	r3, r9
 8013d4c:	4620      	mov	r0, r4
 8013d4e:	4629      	mov	r1, r5
 8013d50:	f7ec fa92 	bl	8000278 <__aeabi_dsub>
 8013d54:	4602      	mov	r2, r0
 8013d56:	460b      	mov	r3, r1
 8013d58:	4630      	mov	r0, r6
 8013d5a:	4639      	mov	r1, r7
 8013d5c:	f7ec fa8c 	bl	8000278 <__aeabi_dsub>
 8013d60:	a361      	add	r3, pc, #388	@ (adr r3, 8013ee8 <__ieee754_pow+0xa38>)
 8013d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d66:	f7ec fc3f 	bl	80005e8 <__aeabi_dmul>
 8013d6a:	a361      	add	r3, pc, #388	@ (adr r3, 8013ef0 <__ieee754_pow+0xa40>)
 8013d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d70:	4680      	mov	r8, r0
 8013d72:	4689      	mov	r9, r1
 8013d74:	4620      	mov	r0, r4
 8013d76:	4629      	mov	r1, r5
 8013d78:	f7ec fc36 	bl	80005e8 <__aeabi_dmul>
 8013d7c:	4602      	mov	r2, r0
 8013d7e:	460b      	mov	r3, r1
 8013d80:	4640      	mov	r0, r8
 8013d82:	4649      	mov	r1, r9
 8013d84:	f7ec fa7a 	bl	800027c <__adddf3>
 8013d88:	4604      	mov	r4, r0
 8013d8a:	460d      	mov	r5, r1
 8013d8c:	4602      	mov	r2, r0
 8013d8e:	460b      	mov	r3, r1
 8013d90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013d94:	f7ec fa72 	bl	800027c <__adddf3>
 8013d98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013d9c:	4680      	mov	r8, r0
 8013d9e:	4689      	mov	r9, r1
 8013da0:	f7ec fa6a 	bl	8000278 <__aeabi_dsub>
 8013da4:	4602      	mov	r2, r0
 8013da6:	460b      	mov	r3, r1
 8013da8:	4620      	mov	r0, r4
 8013daa:	4629      	mov	r1, r5
 8013dac:	f7ec fa64 	bl	8000278 <__aeabi_dsub>
 8013db0:	4642      	mov	r2, r8
 8013db2:	4606      	mov	r6, r0
 8013db4:	460f      	mov	r7, r1
 8013db6:	464b      	mov	r3, r9
 8013db8:	4640      	mov	r0, r8
 8013dba:	4649      	mov	r1, r9
 8013dbc:	f7ec fc14 	bl	80005e8 <__aeabi_dmul>
 8013dc0:	a34d      	add	r3, pc, #308	@ (adr r3, 8013ef8 <__ieee754_pow+0xa48>)
 8013dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dc6:	4604      	mov	r4, r0
 8013dc8:	460d      	mov	r5, r1
 8013dca:	f7ec fc0d 	bl	80005e8 <__aeabi_dmul>
 8013dce:	a34c      	add	r3, pc, #304	@ (adr r3, 8013f00 <__ieee754_pow+0xa50>)
 8013dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dd4:	f7ec fa50 	bl	8000278 <__aeabi_dsub>
 8013dd8:	4622      	mov	r2, r4
 8013dda:	462b      	mov	r3, r5
 8013ddc:	f7ec fc04 	bl	80005e8 <__aeabi_dmul>
 8013de0:	a349      	add	r3, pc, #292	@ (adr r3, 8013f08 <__ieee754_pow+0xa58>)
 8013de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013de6:	f7ec fa49 	bl	800027c <__adddf3>
 8013dea:	4622      	mov	r2, r4
 8013dec:	462b      	mov	r3, r5
 8013dee:	f7ec fbfb 	bl	80005e8 <__aeabi_dmul>
 8013df2:	a347      	add	r3, pc, #284	@ (adr r3, 8013f10 <__ieee754_pow+0xa60>)
 8013df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013df8:	f7ec fa3e 	bl	8000278 <__aeabi_dsub>
 8013dfc:	4622      	mov	r2, r4
 8013dfe:	462b      	mov	r3, r5
 8013e00:	f7ec fbf2 	bl	80005e8 <__aeabi_dmul>
 8013e04:	a344      	add	r3, pc, #272	@ (adr r3, 8013f18 <__ieee754_pow+0xa68>)
 8013e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e0a:	f7ec fa37 	bl	800027c <__adddf3>
 8013e0e:	4622      	mov	r2, r4
 8013e10:	462b      	mov	r3, r5
 8013e12:	f7ec fbe9 	bl	80005e8 <__aeabi_dmul>
 8013e16:	4602      	mov	r2, r0
 8013e18:	460b      	mov	r3, r1
 8013e1a:	4640      	mov	r0, r8
 8013e1c:	4649      	mov	r1, r9
 8013e1e:	f7ec fa2b 	bl	8000278 <__aeabi_dsub>
 8013e22:	4604      	mov	r4, r0
 8013e24:	460d      	mov	r5, r1
 8013e26:	4602      	mov	r2, r0
 8013e28:	460b      	mov	r3, r1
 8013e2a:	4640      	mov	r0, r8
 8013e2c:	4649      	mov	r1, r9
 8013e2e:	f7ec fbdb 	bl	80005e8 <__aeabi_dmul>
 8013e32:	2200      	movs	r2, #0
 8013e34:	e9cd 0100 	strd	r0, r1, [sp]
 8013e38:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013e3c:	4620      	mov	r0, r4
 8013e3e:	4629      	mov	r1, r5
 8013e40:	f7ec fa1a 	bl	8000278 <__aeabi_dsub>
 8013e44:	4602      	mov	r2, r0
 8013e46:	460b      	mov	r3, r1
 8013e48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e4c:	f7ec fcf6 	bl	800083c <__aeabi_ddiv>
 8013e50:	4632      	mov	r2, r6
 8013e52:	4604      	mov	r4, r0
 8013e54:	460d      	mov	r5, r1
 8013e56:	463b      	mov	r3, r7
 8013e58:	4640      	mov	r0, r8
 8013e5a:	4649      	mov	r1, r9
 8013e5c:	f7ec fbc4 	bl	80005e8 <__aeabi_dmul>
 8013e60:	4632      	mov	r2, r6
 8013e62:	463b      	mov	r3, r7
 8013e64:	f7ec fa0a 	bl	800027c <__adddf3>
 8013e68:	4602      	mov	r2, r0
 8013e6a:	460b      	mov	r3, r1
 8013e6c:	4620      	mov	r0, r4
 8013e6e:	4629      	mov	r1, r5
 8013e70:	f7ec fa02 	bl	8000278 <__aeabi_dsub>
 8013e74:	4642      	mov	r2, r8
 8013e76:	464b      	mov	r3, r9
 8013e78:	f7ec f9fe 	bl	8000278 <__aeabi_dsub>
 8013e7c:	460b      	mov	r3, r1
 8013e7e:	4602      	mov	r2, r0
 8013e80:	492d      	ldr	r1, [pc, #180]	@ (8013f38 <__ieee754_pow+0xa88>)
 8013e82:	2000      	movs	r0, #0
 8013e84:	f7ec f9f8 	bl	8000278 <__aeabi_dsub>
 8013e88:	ec41 0b10 	vmov	d0, r0, r1
 8013e8c:	ee10 3a90 	vmov	r3, s1
 8013e90:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013e94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013e98:	da0b      	bge.n	8013eb2 <__ieee754_pow+0xa02>
 8013e9a:	4650      	mov	r0, sl
 8013e9c:	f000 f85c 	bl	8013f58 <scalbn>
 8013ea0:	ec51 0b10 	vmov	r0, r1, d0
 8013ea4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013ea8:	f7ff bb6d 	b.w	8013586 <__ieee754_pow+0xd6>
 8013eac:	f8dd a010 	ldr.w	sl, [sp, #16]
 8013eb0:	e73a      	b.n	8013d28 <__ieee754_pow+0x878>
 8013eb2:	ec51 0b10 	vmov	r0, r1, d0
 8013eb6:	4619      	mov	r1, r3
 8013eb8:	e7f4      	b.n	8013ea4 <__ieee754_pow+0x9f4>
 8013eba:	491f      	ldr	r1, [pc, #124]	@ (8013f38 <__ieee754_pow+0xa88>)
 8013ebc:	2000      	movs	r0, #0
 8013ebe:	f7ff bb14 	b.w	80134ea <__ieee754_pow+0x3a>
 8013ec2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ec6:	f7ff bb10 	b.w	80134ea <__ieee754_pow+0x3a>
 8013eca:	4630      	mov	r0, r6
 8013ecc:	4639      	mov	r1, r7
 8013ece:	f7ff bb0c 	b.w	80134ea <__ieee754_pow+0x3a>
 8013ed2:	460c      	mov	r4, r1
 8013ed4:	f7ff bb69 	b.w	80135aa <__ieee754_pow+0xfa>
 8013ed8:	2400      	movs	r4, #0
 8013eda:	f7ff bb4b 	b.w	8013574 <__ieee754_pow+0xc4>
 8013ede:	bf00      	nop
 8013ee0:	00000000 	.word	0x00000000
 8013ee4:	3fe62e43 	.word	0x3fe62e43
 8013ee8:	fefa39ef 	.word	0xfefa39ef
 8013eec:	3fe62e42 	.word	0x3fe62e42
 8013ef0:	0ca86c39 	.word	0x0ca86c39
 8013ef4:	be205c61 	.word	0xbe205c61
 8013ef8:	72bea4d0 	.word	0x72bea4d0
 8013efc:	3e663769 	.word	0x3e663769
 8013f00:	c5d26bf1 	.word	0xc5d26bf1
 8013f04:	3ebbbd41 	.word	0x3ebbbd41
 8013f08:	af25de2c 	.word	0xaf25de2c
 8013f0c:	3f11566a 	.word	0x3f11566a
 8013f10:	16bebd93 	.word	0x16bebd93
 8013f14:	3f66c16c 	.word	0x3f66c16c
 8013f18:	5555553e 	.word	0x5555553e
 8013f1c:	3fc55555 	.word	0x3fc55555
 8013f20:	40900000 	.word	0x40900000
 8013f24:	4090cbff 	.word	0x4090cbff
 8013f28:	3f6f3400 	.word	0x3f6f3400
 8013f2c:	4090cc00 	.word	0x4090cc00
 8013f30:	3fe00000 	.word	0x3fe00000
 8013f34:	fff00000 	.word	0xfff00000
 8013f38:	3ff00000 	.word	0x3ff00000
 8013f3c:	652b82fe 	.word	0x652b82fe
 8013f40:	3c971547 	.word	0x3c971547

08013f44 <fabs>:
 8013f44:	ec51 0b10 	vmov	r0, r1, d0
 8013f48:	4602      	mov	r2, r0
 8013f4a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013f4e:	ec43 2b10 	vmov	d0, r2, r3
 8013f52:	4770      	bx	lr
 8013f54:	0000      	movs	r0, r0
	...

08013f58 <scalbn>:
 8013f58:	b570      	push	{r4, r5, r6, lr}
 8013f5a:	ec55 4b10 	vmov	r4, r5, d0
 8013f5e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8013f62:	4606      	mov	r6, r0
 8013f64:	462b      	mov	r3, r5
 8013f66:	b991      	cbnz	r1, 8013f8e <scalbn+0x36>
 8013f68:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8013f6c:	4323      	orrs	r3, r4
 8013f6e:	d03b      	beq.n	8013fe8 <scalbn+0x90>
 8013f70:	4b33      	ldr	r3, [pc, #204]	@ (8014040 <scalbn+0xe8>)
 8013f72:	4620      	mov	r0, r4
 8013f74:	4629      	mov	r1, r5
 8013f76:	2200      	movs	r2, #0
 8013f78:	f7ec fb36 	bl	80005e8 <__aeabi_dmul>
 8013f7c:	4b31      	ldr	r3, [pc, #196]	@ (8014044 <scalbn+0xec>)
 8013f7e:	429e      	cmp	r6, r3
 8013f80:	4604      	mov	r4, r0
 8013f82:	460d      	mov	r5, r1
 8013f84:	da0f      	bge.n	8013fa6 <scalbn+0x4e>
 8013f86:	a326      	add	r3, pc, #152	@ (adr r3, 8014020 <scalbn+0xc8>)
 8013f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f8c:	e01e      	b.n	8013fcc <scalbn+0x74>
 8013f8e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8013f92:	4291      	cmp	r1, r2
 8013f94:	d10b      	bne.n	8013fae <scalbn+0x56>
 8013f96:	4622      	mov	r2, r4
 8013f98:	4620      	mov	r0, r4
 8013f9a:	4629      	mov	r1, r5
 8013f9c:	f7ec f96e 	bl	800027c <__adddf3>
 8013fa0:	4604      	mov	r4, r0
 8013fa2:	460d      	mov	r5, r1
 8013fa4:	e020      	b.n	8013fe8 <scalbn+0x90>
 8013fa6:	460b      	mov	r3, r1
 8013fa8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013fac:	3936      	subs	r1, #54	@ 0x36
 8013fae:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8013fb2:	4296      	cmp	r6, r2
 8013fb4:	dd0d      	ble.n	8013fd2 <scalbn+0x7a>
 8013fb6:	2d00      	cmp	r5, #0
 8013fb8:	a11b      	add	r1, pc, #108	@ (adr r1, 8014028 <scalbn+0xd0>)
 8013fba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fbe:	da02      	bge.n	8013fc6 <scalbn+0x6e>
 8013fc0:	a11b      	add	r1, pc, #108	@ (adr r1, 8014030 <scalbn+0xd8>)
 8013fc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fc6:	a318      	add	r3, pc, #96	@ (adr r3, 8014028 <scalbn+0xd0>)
 8013fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fcc:	f7ec fb0c 	bl	80005e8 <__aeabi_dmul>
 8013fd0:	e7e6      	b.n	8013fa0 <scalbn+0x48>
 8013fd2:	1872      	adds	r2, r6, r1
 8013fd4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8013fd8:	428a      	cmp	r2, r1
 8013fda:	dcec      	bgt.n	8013fb6 <scalbn+0x5e>
 8013fdc:	2a00      	cmp	r2, #0
 8013fde:	dd06      	ble.n	8013fee <scalbn+0x96>
 8013fe0:	f36f 531e 	bfc	r3, #20, #11
 8013fe4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013fe8:	ec45 4b10 	vmov	d0, r4, r5
 8013fec:	bd70      	pop	{r4, r5, r6, pc}
 8013fee:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8013ff2:	da08      	bge.n	8014006 <scalbn+0xae>
 8013ff4:	2d00      	cmp	r5, #0
 8013ff6:	a10a      	add	r1, pc, #40	@ (adr r1, 8014020 <scalbn+0xc8>)
 8013ff8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ffc:	dac3      	bge.n	8013f86 <scalbn+0x2e>
 8013ffe:	a10e      	add	r1, pc, #56	@ (adr r1, 8014038 <scalbn+0xe0>)
 8014000:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014004:	e7bf      	b.n	8013f86 <scalbn+0x2e>
 8014006:	3236      	adds	r2, #54	@ 0x36
 8014008:	f36f 531e 	bfc	r3, #20, #11
 801400c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014010:	4620      	mov	r0, r4
 8014012:	4b0d      	ldr	r3, [pc, #52]	@ (8014048 <scalbn+0xf0>)
 8014014:	4629      	mov	r1, r5
 8014016:	2200      	movs	r2, #0
 8014018:	e7d8      	b.n	8013fcc <scalbn+0x74>
 801401a:	bf00      	nop
 801401c:	f3af 8000 	nop.w
 8014020:	c2f8f359 	.word	0xc2f8f359
 8014024:	01a56e1f 	.word	0x01a56e1f
 8014028:	8800759c 	.word	0x8800759c
 801402c:	7e37e43c 	.word	0x7e37e43c
 8014030:	8800759c 	.word	0x8800759c
 8014034:	fe37e43c 	.word	0xfe37e43c
 8014038:	c2f8f359 	.word	0xc2f8f359
 801403c:	81a56e1f 	.word	0x81a56e1f
 8014040:	43500000 	.word	0x43500000
 8014044:	ffff3cb0 	.word	0xffff3cb0
 8014048:	3c900000 	.word	0x3c900000

0801404c <with_errno>:
 801404c:	b510      	push	{r4, lr}
 801404e:	ed2d 8b02 	vpush	{d8}
 8014052:	eeb0 8a40 	vmov.f32	s16, s0
 8014056:	eef0 8a60 	vmov.f32	s17, s1
 801405a:	4604      	mov	r4, r0
 801405c:	f7fe f9f2 	bl	8012444 <__errno>
 8014060:	eeb0 0a48 	vmov.f32	s0, s16
 8014064:	eef0 0a68 	vmov.f32	s1, s17
 8014068:	ecbd 8b02 	vpop	{d8}
 801406c:	6004      	str	r4, [r0, #0]
 801406e:	bd10      	pop	{r4, pc}

08014070 <xflow>:
 8014070:	4603      	mov	r3, r0
 8014072:	b507      	push	{r0, r1, r2, lr}
 8014074:	ec51 0b10 	vmov	r0, r1, d0
 8014078:	b183      	cbz	r3, 801409c <xflow+0x2c>
 801407a:	4602      	mov	r2, r0
 801407c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014080:	e9cd 2300 	strd	r2, r3, [sp]
 8014084:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014088:	f7ec faae 	bl	80005e8 <__aeabi_dmul>
 801408c:	ec41 0b10 	vmov	d0, r0, r1
 8014090:	2022      	movs	r0, #34	@ 0x22
 8014092:	b003      	add	sp, #12
 8014094:	f85d eb04 	ldr.w	lr, [sp], #4
 8014098:	f7ff bfd8 	b.w	801404c <with_errno>
 801409c:	4602      	mov	r2, r0
 801409e:	460b      	mov	r3, r1
 80140a0:	e7ee      	b.n	8014080 <xflow+0x10>
 80140a2:	0000      	movs	r0, r0
 80140a4:	0000      	movs	r0, r0
	...

080140a8 <__math_uflow>:
 80140a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80140b0 <__math_uflow+0x8>
 80140ac:	f7ff bfe0 	b.w	8014070 <xflow>
 80140b0:	00000000 	.word	0x00000000
 80140b4:	10000000 	.word	0x10000000

080140b8 <__math_oflow>:
 80140b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80140c0 <__math_oflow+0x8>
 80140bc:	f7ff bfd8 	b.w	8014070 <xflow>
 80140c0:	00000000 	.word	0x00000000
 80140c4:	70000000 	.word	0x70000000

080140c8 <__ieee754_sqrt>:
 80140c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140cc:	4a66      	ldr	r2, [pc, #408]	@ (8014268 <__ieee754_sqrt+0x1a0>)
 80140ce:	ec55 4b10 	vmov	r4, r5, d0
 80140d2:	43aa      	bics	r2, r5
 80140d4:	462b      	mov	r3, r5
 80140d6:	4621      	mov	r1, r4
 80140d8:	d110      	bne.n	80140fc <__ieee754_sqrt+0x34>
 80140da:	4622      	mov	r2, r4
 80140dc:	4620      	mov	r0, r4
 80140de:	4629      	mov	r1, r5
 80140e0:	f7ec fa82 	bl	80005e8 <__aeabi_dmul>
 80140e4:	4602      	mov	r2, r0
 80140e6:	460b      	mov	r3, r1
 80140e8:	4620      	mov	r0, r4
 80140ea:	4629      	mov	r1, r5
 80140ec:	f7ec f8c6 	bl	800027c <__adddf3>
 80140f0:	4604      	mov	r4, r0
 80140f2:	460d      	mov	r5, r1
 80140f4:	ec45 4b10 	vmov	d0, r4, r5
 80140f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140fc:	2d00      	cmp	r5, #0
 80140fe:	dc0e      	bgt.n	801411e <__ieee754_sqrt+0x56>
 8014100:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8014104:	4322      	orrs	r2, r4
 8014106:	d0f5      	beq.n	80140f4 <__ieee754_sqrt+0x2c>
 8014108:	b19d      	cbz	r5, 8014132 <__ieee754_sqrt+0x6a>
 801410a:	4622      	mov	r2, r4
 801410c:	4620      	mov	r0, r4
 801410e:	4629      	mov	r1, r5
 8014110:	f7ec f8b2 	bl	8000278 <__aeabi_dsub>
 8014114:	4602      	mov	r2, r0
 8014116:	460b      	mov	r3, r1
 8014118:	f7ec fb90 	bl	800083c <__aeabi_ddiv>
 801411c:	e7e8      	b.n	80140f0 <__ieee754_sqrt+0x28>
 801411e:	152a      	asrs	r2, r5, #20
 8014120:	d115      	bne.n	801414e <__ieee754_sqrt+0x86>
 8014122:	2000      	movs	r0, #0
 8014124:	e009      	b.n	801413a <__ieee754_sqrt+0x72>
 8014126:	0acb      	lsrs	r3, r1, #11
 8014128:	3a15      	subs	r2, #21
 801412a:	0549      	lsls	r1, r1, #21
 801412c:	2b00      	cmp	r3, #0
 801412e:	d0fa      	beq.n	8014126 <__ieee754_sqrt+0x5e>
 8014130:	e7f7      	b.n	8014122 <__ieee754_sqrt+0x5a>
 8014132:	462a      	mov	r2, r5
 8014134:	e7fa      	b.n	801412c <__ieee754_sqrt+0x64>
 8014136:	005b      	lsls	r3, r3, #1
 8014138:	3001      	adds	r0, #1
 801413a:	02dc      	lsls	r4, r3, #11
 801413c:	d5fb      	bpl.n	8014136 <__ieee754_sqrt+0x6e>
 801413e:	1e44      	subs	r4, r0, #1
 8014140:	1b12      	subs	r2, r2, r4
 8014142:	f1c0 0420 	rsb	r4, r0, #32
 8014146:	fa21 f404 	lsr.w	r4, r1, r4
 801414a:	4323      	orrs	r3, r4
 801414c:	4081      	lsls	r1, r0
 801414e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014152:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8014156:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801415a:	07d2      	lsls	r2, r2, #31
 801415c:	bf5c      	itt	pl
 801415e:	005b      	lslpl	r3, r3, #1
 8014160:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8014164:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014168:	bf58      	it	pl
 801416a:	0049      	lslpl	r1, r1, #1
 801416c:	2600      	movs	r6, #0
 801416e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8014172:	107f      	asrs	r7, r7, #1
 8014174:	0049      	lsls	r1, r1, #1
 8014176:	2016      	movs	r0, #22
 8014178:	4632      	mov	r2, r6
 801417a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801417e:	1915      	adds	r5, r2, r4
 8014180:	429d      	cmp	r5, r3
 8014182:	bfde      	ittt	le
 8014184:	192a      	addle	r2, r5, r4
 8014186:	1b5b      	suble	r3, r3, r5
 8014188:	1936      	addle	r6, r6, r4
 801418a:	0fcd      	lsrs	r5, r1, #31
 801418c:	3801      	subs	r0, #1
 801418e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8014192:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014196:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801419a:	d1f0      	bne.n	801417e <__ieee754_sqrt+0xb6>
 801419c:	4605      	mov	r5, r0
 801419e:	2420      	movs	r4, #32
 80141a0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80141a4:	4293      	cmp	r3, r2
 80141a6:	eb0c 0e00 	add.w	lr, ip, r0
 80141aa:	dc02      	bgt.n	80141b2 <__ieee754_sqrt+0xea>
 80141ac:	d113      	bne.n	80141d6 <__ieee754_sqrt+0x10e>
 80141ae:	458e      	cmp	lr, r1
 80141b0:	d811      	bhi.n	80141d6 <__ieee754_sqrt+0x10e>
 80141b2:	f1be 0f00 	cmp.w	lr, #0
 80141b6:	eb0e 000c 	add.w	r0, lr, ip
 80141ba:	da3f      	bge.n	801423c <__ieee754_sqrt+0x174>
 80141bc:	2800      	cmp	r0, #0
 80141be:	db3d      	blt.n	801423c <__ieee754_sqrt+0x174>
 80141c0:	f102 0801 	add.w	r8, r2, #1
 80141c4:	1a9b      	subs	r3, r3, r2
 80141c6:	458e      	cmp	lr, r1
 80141c8:	bf88      	it	hi
 80141ca:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80141ce:	eba1 010e 	sub.w	r1, r1, lr
 80141d2:	4465      	add	r5, ip
 80141d4:	4642      	mov	r2, r8
 80141d6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80141da:	3c01      	subs	r4, #1
 80141dc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80141e0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80141e4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80141e8:	d1dc      	bne.n	80141a4 <__ieee754_sqrt+0xdc>
 80141ea:	4319      	orrs	r1, r3
 80141ec:	d01b      	beq.n	8014226 <__ieee754_sqrt+0x15e>
 80141ee:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 801426c <__ieee754_sqrt+0x1a4>
 80141f2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8014270 <__ieee754_sqrt+0x1a8>
 80141f6:	e9da 0100 	ldrd	r0, r1, [sl]
 80141fa:	e9db 2300 	ldrd	r2, r3, [fp]
 80141fe:	f7ec f83b 	bl	8000278 <__aeabi_dsub>
 8014202:	e9da 8900 	ldrd	r8, r9, [sl]
 8014206:	4602      	mov	r2, r0
 8014208:	460b      	mov	r3, r1
 801420a:	4640      	mov	r0, r8
 801420c:	4649      	mov	r1, r9
 801420e:	f7ec fc67 	bl	8000ae0 <__aeabi_dcmple>
 8014212:	b140      	cbz	r0, 8014226 <__ieee754_sqrt+0x15e>
 8014214:	f1b5 3fff 	cmp.w	r5, #4294967295
 8014218:	e9da 0100 	ldrd	r0, r1, [sl]
 801421c:	e9db 2300 	ldrd	r2, r3, [fp]
 8014220:	d10e      	bne.n	8014240 <__ieee754_sqrt+0x178>
 8014222:	3601      	adds	r6, #1
 8014224:	4625      	mov	r5, r4
 8014226:	1073      	asrs	r3, r6, #1
 8014228:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 801422c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8014230:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8014234:	086b      	lsrs	r3, r5, #1
 8014236:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 801423a:	e759      	b.n	80140f0 <__ieee754_sqrt+0x28>
 801423c:	4690      	mov	r8, r2
 801423e:	e7c1      	b.n	80141c4 <__ieee754_sqrt+0xfc>
 8014240:	f7ec f81c 	bl	800027c <__adddf3>
 8014244:	e9da 8900 	ldrd	r8, r9, [sl]
 8014248:	4602      	mov	r2, r0
 801424a:	460b      	mov	r3, r1
 801424c:	4640      	mov	r0, r8
 801424e:	4649      	mov	r1, r9
 8014250:	f7ec fc3c 	bl	8000acc <__aeabi_dcmplt>
 8014254:	b120      	cbz	r0, 8014260 <__ieee754_sqrt+0x198>
 8014256:	1cab      	adds	r3, r5, #2
 8014258:	bf08      	it	eq
 801425a:	3601      	addeq	r6, #1
 801425c:	3502      	adds	r5, #2
 801425e:	e7e2      	b.n	8014226 <__ieee754_sqrt+0x15e>
 8014260:	1c6b      	adds	r3, r5, #1
 8014262:	f023 0501 	bic.w	r5, r3, #1
 8014266:	e7de      	b.n	8014226 <__ieee754_sqrt+0x15e>
 8014268:	7ff00000 	.word	0x7ff00000
 801426c:	080147c8 	.word	0x080147c8
 8014270:	080147c0 	.word	0x080147c0

08014274 <_init>:
 8014274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014276:	bf00      	nop
 8014278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801427a:	bc08      	pop	{r3}
 801427c:	469e      	mov	lr, r3
 801427e:	4770      	bx	lr

08014280 <_fini>:
 8014280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014282:	bf00      	nop
 8014284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014286:	bc08      	pop	{r3}
 8014288:	469e      	mov	lr, r3
 801428a:	4770      	bx	lr
