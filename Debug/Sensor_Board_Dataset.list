
Sensor_Board_Dataset.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014104  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  08014298  08014298  00015298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080147d8  080147d8  00016284  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080147d8  080147d8  000157d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080147e0  080147e0  00016284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080147e0  080147e0  000157e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080147e4  080147e4  000157e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000284  20000000  080147e8  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b8  20000284  08014a6c  00016284  2**2
                  ALLOC
 10 ._user_heap_stack 00001a04  20000b3c  08014a6c  00016b3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016284  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004097c  00000000  00000000  000162b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000062ac  00000000  00000000  00056c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003828  00000000  00000000  0005cee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002b9a  00000000  00000000  00060708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ef59  00000000  00000000  000632a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000365e2  00000000  00000000  000921fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a250  00000000  00000000  000c87dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e2a2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001008c  00000000  00000000  001e2a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001f2afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000284 	.word	0x20000284
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801427c 	.word	0x0801427c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000288 	.word	0x20000288
 80001cc:	0801427c 	.word	0x0801427c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b988 	b.w	8000f60 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	468e      	mov	lr, r1
 8000c70:	4604      	mov	r4, r0
 8000c72:	4688      	mov	r8, r1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d14a      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4617      	mov	r7, r2
 8000c7c:	d962      	bls.n	8000d44 <__udivmoddi4+0xdc>
 8000c7e:	fab2 f682 	clz	r6, r2
 8000c82:	b14e      	cbz	r6, 8000c98 <__udivmoddi4+0x30>
 8000c84:	f1c6 0320 	rsb	r3, r6, #32
 8000c88:	fa01 f806 	lsl.w	r8, r1, r6
 8000c8c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c90:	40b7      	lsls	r7, r6
 8000c92:	ea43 0808 	orr.w	r8, r3, r8
 8000c96:	40b4      	lsls	r4, r6
 8000c98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c9c:	fa1f fc87 	uxth.w	ip, r7
 8000ca0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ca4:	0c23      	lsrs	r3, r4, #16
 8000ca6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000caa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cae:	fb01 f20c 	mul.w	r2, r1, ip
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0x62>
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cbc:	f080 80ea 	bcs.w	8000e94 <__udivmoddi4+0x22c>
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	f240 80e7 	bls.w	8000e94 <__udivmoddi4+0x22c>
 8000cc6:	3902      	subs	r1, #2
 8000cc8:	443b      	add	r3, r7
 8000cca:	1a9a      	subs	r2, r3, r2
 8000ccc:	b2a3      	uxth	r3, r4
 8000cce:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cd2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cda:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cde:	459c      	cmp	ip, r3
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0x8e>
 8000ce2:	18fb      	adds	r3, r7, r3
 8000ce4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ce8:	f080 80d6 	bcs.w	8000e98 <__udivmoddi4+0x230>
 8000cec:	459c      	cmp	ip, r3
 8000cee:	f240 80d3 	bls.w	8000e98 <__udivmoddi4+0x230>
 8000cf2:	443b      	add	r3, r7
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cfa:	eba3 030c 	sub.w	r3, r3, ip
 8000cfe:	2100      	movs	r1, #0
 8000d00:	b11d      	cbz	r5, 8000d0a <__udivmoddi4+0xa2>
 8000d02:	40f3      	lsrs	r3, r6
 8000d04:	2200      	movs	r2, #0
 8000d06:	e9c5 3200 	strd	r3, r2, [r5]
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d905      	bls.n	8000d1e <__udivmoddi4+0xb6>
 8000d12:	b10d      	cbz	r5, 8000d18 <__udivmoddi4+0xb0>
 8000d14:	e9c5 0100 	strd	r0, r1, [r5]
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4608      	mov	r0, r1
 8000d1c:	e7f5      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000d1e:	fab3 f183 	clz	r1, r3
 8000d22:	2900      	cmp	r1, #0
 8000d24:	d146      	bne.n	8000db4 <__udivmoddi4+0x14c>
 8000d26:	4573      	cmp	r3, lr
 8000d28:	d302      	bcc.n	8000d30 <__udivmoddi4+0xc8>
 8000d2a:	4282      	cmp	r2, r0
 8000d2c:	f200 8105 	bhi.w	8000f3a <__udivmoddi4+0x2d2>
 8000d30:	1a84      	subs	r4, r0, r2
 8000d32:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d36:	2001      	movs	r0, #1
 8000d38:	4690      	mov	r8, r2
 8000d3a:	2d00      	cmp	r5, #0
 8000d3c:	d0e5      	beq.n	8000d0a <__udivmoddi4+0xa2>
 8000d3e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d42:	e7e2      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	f000 8090 	beq.w	8000e6a <__udivmoddi4+0x202>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	f040 80a4 	bne.w	8000e9c <__udivmoddi4+0x234>
 8000d54:	1a8a      	subs	r2, r1, r2
 8000d56:	0c03      	lsrs	r3, r0, #16
 8000d58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5c:	b280      	uxth	r0, r0
 8000d5e:	b2bc      	uxth	r4, r7
 8000d60:	2101      	movs	r1, #1
 8000d62:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d66:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d6e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x11e>
 8000d76:	18fb      	adds	r3, r7, r3
 8000d78:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d7c:	d202      	bcs.n	8000d84 <__udivmoddi4+0x11c>
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	f200 80e0 	bhi.w	8000f44 <__udivmoddi4+0x2dc>
 8000d84:	46c4      	mov	ip, r8
 8000d86:	1a9b      	subs	r3, r3, r2
 8000d88:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d8c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d90:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d94:	fb02 f404 	mul.w	r4, r2, r4
 8000d98:	429c      	cmp	r4, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x144>
 8000d9c:	18fb      	adds	r3, r7, r3
 8000d9e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x142>
 8000da4:	429c      	cmp	r4, r3
 8000da6:	f200 80ca 	bhi.w	8000f3e <__udivmoddi4+0x2d6>
 8000daa:	4602      	mov	r2, r0
 8000dac:	1b1b      	subs	r3, r3, r4
 8000dae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000db2:	e7a5      	b.n	8000d00 <__udivmoddi4+0x98>
 8000db4:	f1c1 0620 	rsb	r6, r1, #32
 8000db8:	408b      	lsls	r3, r1
 8000dba:	fa22 f706 	lsr.w	r7, r2, r6
 8000dbe:	431f      	orrs	r7, r3
 8000dc0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dc4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dc8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dcc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000dd0:	4323      	orrs	r3, r4
 8000dd2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dd6:	fa1f fc87 	uxth.w	ip, r7
 8000dda:	fbbe f0f9 	udiv	r0, lr, r9
 8000dde:	0c1c      	lsrs	r4, r3, #16
 8000de0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000de4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000de8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	fa02 f201 	lsl.w	r2, r2, r1
 8000df2:	d909      	bls.n	8000e08 <__udivmoddi4+0x1a0>
 8000df4:	193c      	adds	r4, r7, r4
 8000df6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dfa:	f080 809c 	bcs.w	8000f36 <__udivmoddi4+0x2ce>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f240 8099 	bls.w	8000f36 <__udivmoddi4+0x2ce>
 8000e04:	3802      	subs	r0, #2
 8000e06:	443c      	add	r4, r7
 8000e08:	eba4 040e 	sub.w	r4, r4, lr
 8000e0c:	fa1f fe83 	uxth.w	lr, r3
 8000e10:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e14:	fb09 4413 	mls	r4, r9, r3, r4
 8000e18:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e1c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e20:	45a4      	cmp	ip, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x1ce>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e2a:	f080 8082 	bcs.w	8000f32 <__udivmoddi4+0x2ca>
 8000e2e:	45a4      	cmp	ip, r4
 8000e30:	d97f      	bls.n	8000f32 <__udivmoddi4+0x2ca>
 8000e32:	3b02      	subs	r3, #2
 8000e34:	443c      	add	r4, r7
 8000e36:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e3a:	eba4 040c 	sub.w	r4, r4, ip
 8000e3e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e42:	4564      	cmp	r4, ip
 8000e44:	4673      	mov	r3, lr
 8000e46:	46e1      	mov	r9, ip
 8000e48:	d362      	bcc.n	8000f10 <__udivmoddi4+0x2a8>
 8000e4a:	d05f      	beq.n	8000f0c <__udivmoddi4+0x2a4>
 8000e4c:	b15d      	cbz	r5, 8000e66 <__udivmoddi4+0x1fe>
 8000e4e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e52:	eb64 0409 	sbc.w	r4, r4, r9
 8000e56:	fa04 f606 	lsl.w	r6, r4, r6
 8000e5a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e5e:	431e      	orrs	r6, r3
 8000e60:	40cc      	lsrs	r4, r1
 8000e62:	e9c5 6400 	strd	r6, r4, [r5]
 8000e66:	2100      	movs	r1, #0
 8000e68:	e74f      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000e6a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e6e:	0c01      	lsrs	r1, r0, #16
 8000e70:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e74:	b280      	uxth	r0, r0
 8000e76:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	4638      	mov	r0, r7
 8000e7e:	463c      	mov	r4, r7
 8000e80:	46b8      	mov	r8, r7
 8000e82:	46be      	mov	lr, r7
 8000e84:	2620      	movs	r6, #32
 8000e86:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e8a:	eba2 0208 	sub.w	r2, r2, r8
 8000e8e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e92:	e766      	b.n	8000d62 <__udivmoddi4+0xfa>
 8000e94:	4601      	mov	r1, r0
 8000e96:	e718      	b.n	8000cca <__udivmoddi4+0x62>
 8000e98:	4610      	mov	r0, r2
 8000e9a:	e72c      	b.n	8000cf6 <__udivmoddi4+0x8e>
 8000e9c:	f1c6 0220 	rsb	r2, r6, #32
 8000ea0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ea4:	40b7      	lsls	r7, r6
 8000ea6:	40b1      	lsls	r1, r6
 8000ea8:	fa20 f202 	lsr.w	r2, r0, r2
 8000eac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000eb6:	b2bc      	uxth	r4, r7
 8000eb8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb08 f904 	mul.w	r9, r8, r4
 8000ec6:	40b0      	lsls	r0, r6
 8000ec8:	4589      	cmp	r9, r1
 8000eca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ece:	b280      	uxth	r0, r0
 8000ed0:	d93e      	bls.n	8000f50 <__udivmoddi4+0x2e8>
 8000ed2:	1879      	adds	r1, r7, r1
 8000ed4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ed8:	d201      	bcs.n	8000ede <__udivmoddi4+0x276>
 8000eda:	4589      	cmp	r9, r1
 8000edc:	d81f      	bhi.n	8000f1e <__udivmoddi4+0x2b6>
 8000ede:	eba1 0109 	sub.w	r1, r1, r9
 8000ee2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee6:	fb09 f804 	mul.w	r8, r9, r4
 8000eea:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eee:	b292      	uxth	r2, r2
 8000ef0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef4:	4542      	cmp	r2, r8
 8000ef6:	d229      	bcs.n	8000f4c <__udivmoddi4+0x2e4>
 8000ef8:	18ba      	adds	r2, r7, r2
 8000efa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000efe:	d2c4      	bcs.n	8000e8a <__udivmoddi4+0x222>
 8000f00:	4542      	cmp	r2, r8
 8000f02:	d2c2      	bcs.n	8000e8a <__udivmoddi4+0x222>
 8000f04:	f1a9 0102 	sub.w	r1, r9, #2
 8000f08:	443a      	add	r2, r7
 8000f0a:	e7be      	b.n	8000e8a <__udivmoddi4+0x222>
 8000f0c:	45f0      	cmp	r8, lr
 8000f0e:	d29d      	bcs.n	8000e4c <__udivmoddi4+0x1e4>
 8000f10:	ebbe 0302 	subs.w	r3, lr, r2
 8000f14:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f18:	3801      	subs	r0, #1
 8000f1a:	46e1      	mov	r9, ip
 8000f1c:	e796      	b.n	8000e4c <__udivmoddi4+0x1e4>
 8000f1e:	eba7 0909 	sub.w	r9, r7, r9
 8000f22:	4449      	add	r1, r9
 8000f24:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f28:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f2c:	fb09 f804 	mul.w	r8, r9, r4
 8000f30:	e7db      	b.n	8000eea <__udivmoddi4+0x282>
 8000f32:	4673      	mov	r3, lr
 8000f34:	e77f      	b.n	8000e36 <__udivmoddi4+0x1ce>
 8000f36:	4650      	mov	r0, sl
 8000f38:	e766      	b.n	8000e08 <__udivmoddi4+0x1a0>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e6fd      	b.n	8000d3a <__udivmoddi4+0xd2>
 8000f3e:	443b      	add	r3, r7
 8000f40:	3a02      	subs	r2, #2
 8000f42:	e733      	b.n	8000dac <__udivmoddi4+0x144>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	443b      	add	r3, r7
 8000f4a:	e71c      	b.n	8000d86 <__udivmoddi4+0x11e>
 8000f4c:	4649      	mov	r1, r9
 8000f4e:	e79c      	b.n	8000e8a <__udivmoddi4+0x222>
 8000f50:	eba1 0109 	sub.w	r1, r1, r9
 8000f54:	46c4      	mov	ip, r8
 8000f56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f5a:	fb09 f804 	mul.w	r8, r9, r4
 8000f5e:	e7c4      	b.n	8000eea <__udivmoddi4+0x282>

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f68:	f00a fc28 	bl	800b7bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6c:	f000 f815 	bl	8000f9a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f70:	f000 fa10 	bl	8001394 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f74:	f000 f9e8 	bl	8001348 <MX_DMA_Init>
  MX_CRC_Init();
 8000f78:	f000 f862 	bl	8001040 <MX_CRC_Init>
  MX_RTC_Init();
 8000f7c:	f000 f882 	bl	8001084 <MX_RTC_Init>
  MX_TIM3_Init();
 8000f80:	f000 f964 	bl	800124c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000f84:	f000 f9b0 	bl	80012e8 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000f88:	f000 f8d8 	bl	800113c <MX_SPI2_Init>
  MX_TIM2_Init();
 8000f8c:	f000 f910 	bl	80011b0 <MX_TIM2_Init>
  MX_MEMS_Init();
 8000f90:	f010 f953 	bl	801123a <MX_MEMS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 8000f94:	f010 f957 	bl	8011246 <MX_MEMS_Process>
 8000f98:	e7fc      	b.n	8000f94 <main+0x30>

08000f9a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b096      	sub	sp, #88	@ 0x58
 8000f9e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2244      	movs	r2, #68	@ 0x44
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f011 fa00 	bl	80123ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fae:	463b      	mov	r3, r7
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fbc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fc0:	f00c fcaa 	bl	800d918 <HAL_PWREx_ControlVoltageScaling>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fca:	f000 fa1f 	bl	800140c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000fce:	230a      	movs	r3, #10
 8000fd0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd8:	2310      	movs	r3, #16
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000fec:	230a      	movs	r3, #10
 8000fee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ff0:	2307      	movs	r3, #7
 8000ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4618      	mov	r0, r3
 8001002:	f00c fcdf 	bl	800d9c4 <HAL_RCC_OscConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0x76>
  {
    Error_Handler();
 800100c:	f000 f9fe 	bl	800140c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001010:	230f      	movs	r3, #15
 8001012:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001014:	2303      	movs	r3, #3
 8001016:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001024:	463b      	mov	r3, r7
 8001026:	2104      	movs	r1, #4
 8001028:	4618      	mov	r0, r3
 800102a:	f00d f8a7 	bl	800e17c <HAL_RCC_ClockConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001034:	f000 f9ea 	bl	800140c <Error_Handler>
  }
}
 8001038:	bf00      	nop
 800103a:	3758      	adds	r7, #88	@ 0x58
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001044:	4b0d      	ldr	r3, [pc, #52]	@ (800107c <MX_CRC_Init+0x3c>)
 8001046:	4a0e      	ldr	r2, [pc, #56]	@ (8001080 <MX_CRC_Init+0x40>)
 8001048:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800104a:	4b0c      	ldr	r3, [pc, #48]	@ (800107c <MX_CRC_Init+0x3c>)
 800104c:	2200      	movs	r2, #0
 800104e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001050:	4b0a      	ldr	r3, [pc, #40]	@ (800107c <MX_CRC_Init+0x3c>)
 8001052:	2200      	movs	r2, #0
 8001054:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001056:	4b09      	ldr	r3, [pc, #36]	@ (800107c <MX_CRC_Init+0x3c>)
 8001058:	2200      	movs	r2, #0
 800105a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800105c:	4b07      	ldr	r3, [pc, #28]	@ (800107c <MX_CRC_Init+0x3c>)
 800105e:	2200      	movs	r2, #0
 8001060:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001062:	4b06      	ldr	r3, [pc, #24]	@ (800107c <MX_CRC_Init+0x3c>)
 8001064:	2201      	movs	r2, #1
 8001066:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001068:	4804      	ldr	r0, [pc, #16]	@ (800107c <MX_CRC_Init+0x3c>)
 800106a:	f00a fd59 	bl	800bb20 <HAL_CRC_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001074:	f000 f9ca 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200002a0 	.word	0x200002a0
 8001080:	40023000 	.word	0x40023000

08001084 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001098:	2300      	movs	r3, #0
 800109a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800109c:	4b25      	ldr	r3, [pc, #148]	@ (8001134 <MX_RTC_Init+0xb0>)
 800109e:	4a26      	ldr	r2, [pc, #152]	@ (8001138 <MX_RTC_Init+0xb4>)
 80010a0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010a2:	4b24      	ldr	r3, [pc, #144]	@ (8001134 <MX_RTC_Init+0xb0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010a8:	4b22      	ldr	r3, [pc, #136]	@ (8001134 <MX_RTC_Init+0xb0>)
 80010aa:	227f      	movs	r2, #127	@ 0x7f
 80010ac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010ae:	4b21      	ldr	r3, [pc, #132]	@ (8001134 <MX_RTC_Init+0xb0>)
 80010b0:	22ff      	movs	r2, #255	@ 0xff
 80010b2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001134 <MX_RTC_Init+0xb0>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80010ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001134 <MX_RTC_Init+0xb0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001134 <MX_RTC_Init+0xb0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <MX_RTC_Init+0xb0>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010cc:	4819      	ldr	r0, [pc, #100]	@ (8001134 <MX_RTC_Init+0xb0>)
 80010ce:	f00d ff35 	bl	800ef3c <HAL_RTC_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80010d8:	f000 f998 	bl	800140c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80010dc:	2300      	movs	r3, #0
 80010de:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2201      	movs	r2, #1
 80010f4:	4619      	mov	r1, r3
 80010f6:	480f      	ldr	r0, [pc, #60]	@ (8001134 <MX_RTC_Init+0xb0>)
 80010f8:	f00d ffa8 	bl	800f04c <HAL_RTC_SetTime>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001102:	f000 f983 	bl	800140c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001106:	2301      	movs	r3, #1
 8001108:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800110a:	2301      	movs	r3, #1
 800110c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800110e:	2301      	movs	r3, #1
 8001110:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001112:	2300      	movs	r3, #0
 8001114:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001116:	463b      	mov	r3, r7
 8001118:	2201      	movs	r2, #1
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	@ (8001134 <MX_RTC_Init+0xb0>)
 800111e:	f00e f832 	bl	800f186 <HAL_RTC_SetDate>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001128:	f000 f970 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200002c4 	.word	0x200002c4
 8001138:	40002800 	.word	0x40002800

0800113c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001140:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <MX_SPI2_Init+0x6c>)
 8001142:	4a1a      	ldr	r2, [pc, #104]	@ (80011ac <MX_SPI2_Init+0x70>)
 8001144:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8001146:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <MX_SPI2_Init+0x6c>)
 8001148:	2200      	movs	r2, #0
 800114a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800114c:	4b16      	ldr	r3, [pc, #88]	@ (80011a8 <MX_SPI2_Init+0x6c>)
 800114e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001152:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001154:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <MX_SPI2_Init+0x6c>)
 8001156:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800115a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800115c:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <MX_SPI2_Init+0x6c>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001162:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <MX_SPI2_Init+0x6c>)
 8001164:	2200      	movs	r2, #0
 8001166:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001168:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <MX_SPI2_Init+0x6c>)
 800116a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800116e:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001170:	4b0d      	ldr	r3, [pc, #52]	@ (80011a8 <MX_SPI2_Init+0x6c>)
 8001172:	2200      	movs	r2, #0
 8001174:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001176:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <MX_SPI2_Init+0x6c>)
 8001178:	2200      	movs	r2, #0
 800117a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800117c:	4b0a      	ldr	r3, [pc, #40]	@ (80011a8 <MX_SPI2_Init+0x6c>)
 800117e:	2200      	movs	r2, #0
 8001180:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001182:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <MX_SPI2_Init+0x6c>)
 8001184:	2207      	movs	r2, #7
 8001186:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001188:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <MX_SPI2_Init+0x6c>)
 800118a:	2200      	movs	r2, #0
 800118c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800118e:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <MX_SPI2_Init+0x6c>)
 8001190:	2200      	movs	r2, #0
 8001192:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001194:	4804      	ldr	r0, [pc, #16]	@ (80011a8 <MX_SPI2_Init+0x6c>)
 8001196:	f00e f933 	bl	800f400 <HAL_SPI_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_SPI2_Init+0x68>
  {
    Error_Handler();
 80011a0:	f000 f934 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	200002e8 	.word	0x200002e8
 80011ac:	40003800 	.word	0x40003800

080011b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b6:	f107 0310 	add.w	r3, r7, #16
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001248 <MX_TIM2_Init+0x98>)
 80011d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 19999;
 80011d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001248 <MX_TIM2_Init+0x98>)
 80011d8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80011dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011de:	4b1a      	ldr	r3, [pc, #104]	@ (8001248 <MX_TIM2_Init+0x98>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80011e4:	4b18      	ldr	r3, [pc, #96]	@ (8001248 <MX_TIM2_Init+0x98>)
 80011e6:	f04f 32ff 	mov.w	r2, #4294967295
 80011ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ec:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <MX_TIM2_Init+0x98>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f2:	4b15      	ldr	r3, [pc, #84]	@ (8001248 <MX_TIM2_Init+0x98>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011f8:	4813      	ldr	r0, [pc, #76]	@ (8001248 <MX_TIM2_Init+0x98>)
 80011fa:	f00e fac4 	bl	800f786 <HAL_TIM_Base_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001204:	f000 f902 	bl	800140c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001208:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800120c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800120e:	f107 0310 	add.w	r3, r7, #16
 8001212:	4619      	mov	r1, r3
 8001214:	480c      	ldr	r0, [pc, #48]	@ (8001248 <MX_TIM2_Init+0x98>)
 8001216:	f00e fc14 	bl	800fa42 <HAL_TIM_ConfigClockSource>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001220:	f000 f8f4 	bl	800140c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001224:	2300      	movs	r3, #0
 8001226:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	4619      	mov	r1, r3
 8001230:	4805      	ldr	r0, [pc, #20]	@ (8001248 <MX_TIM2_Init+0x98>)
 8001232:	f00e fe41 	bl	800feb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800123c:	f000 f8e6 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	3720      	adds	r7, #32
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2000034c 	.word	0x2000034c

0800124c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001252:	f107 0310 	add.w	r3, r7, #16
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800126a:	4b1d      	ldr	r3, [pc, #116]	@ (80012e0 <MX_TIM3_Init+0x94>)
 800126c:	4a1d      	ldr	r2, [pc, #116]	@ (80012e4 <MX_TIM3_Init+0x98>)
 800126e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001270:	4b1b      	ldr	r3, [pc, #108]	@ (80012e0 <MX_TIM3_Init+0x94>)
 8001272:	2200      	movs	r2, #0
 8001274:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001276:	4b1a      	ldr	r3, [pc, #104]	@ (80012e0 <MX_TIM3_Init+0x94>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800127c:	4b18      	ldr	r3, [pc, #96]	@ (80012e0 <MX_TIM3_Init+0x94>)
 800127e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001282:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001284:	4b16      	ldr	r3, [pc, #88]	@ (80012e0 <MX_TIM3_Init+0x94>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128a:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <MX_TIM3_Init+0x94>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001290:	4813      	ldr	r0, [pc, #76]	@ (80012e0 <MX_TIM3_Init+0x94>)
 8001292:	f00e fa78 	bl	800f786 <HAL_TIM_Base_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800129c:	f000 f8b6 	bl	800140c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012a6:	f107 0310 	add.w	r3, r7, #16
 80012aa:	4619      	mov	r1, r3
 80012ac:	480c      	ldr	r0, [pc, #48]	@ (80012e0 <MX_TIM3_Init+0x94>)
 80012ae:	f00e fbc8 	bl	800fa42 <HAL_TIM_ConfigClockSource>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80012b8:	f000 f8a8 	bl	800140c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	4619      	mov	r1, r3
 80012c8:	4805      	ldr	r0, [pc, #20]	@ (80012e0 <MX_TIM3_Init+0x94>)
 80012ca:	f00e fdf5 	bl	800feb8 <HAL_TIMEx_MasterConfigSynchronization>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80012d4:	f000 f89a 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	3720      	adds	r7, #32
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000398 	.word	0x20000398
 80012e4:	40000400 	.word	0x40000400

080012e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012ec:	4b14      	ldr	r3, [pc, #80]	@ (8001340 <MX_USART1_UART_Init+0x58>)
 80012ee:	4a15      	ldr	r2, [pc, #84]	@ (8001344 <MX_USART1_UART_Init+0x5c>)
 80012f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80012f2:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <MX_USART1_UART_Init+0x58>)
 80012f4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80012f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012fa:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <MX_USART1_UART_Init+0x58>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001300:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <MX_USART1_UART_Init+0x58>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <MX_USART1_UART_Init+0x58>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800130c:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <MX_USART1_UART_Init+0x58>)
 800130e:	220c      	movs	r2, #12
 8001310:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001312:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <MX_USART1_UART_Init+0x58>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001318:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <MX_USART1_UART_Init+0x58>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800131e:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <MX_USART1_UART_Init+0x58>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <MX_USART1_UART_Init+0x58>)
 8001326:	2200      	movs	r2, #0
 8001328:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800132a:	4805      	ldr	r0, [pc, #20]	@ (8001340 <MX_USART1_UART_Init+0x58>)
 800132c:	f00e fe6a 	bl	8010004 <HAL_UART_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001336:	f000 f869 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200003e4 	.word	0x200003e4
 8001344:	40013800 	.word	0x40013800

08001348 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800134e:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <MX_DMA_Init+0x48>)
 8001350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001352:	4a0f      	ldr	r2, [pc, #60]	@ (8001390 <MX_DMA_Init+0x48>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6493      	str	r3, [r2, #72]	@ 0x48
 800135a:	4b0d      	ldr	r3, [pc, #52]	@ (8001390 <MX_DMA_Init+0x48>)
 800135c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	2010      	movs	r0, #16
 800136c:	f00a fba1 	bl	800bab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001370:	2010      	movs	r0, #16
 8001372:	f00a fbba 	bl	800baea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	2011      	movs	r0, #17
 800137c:	f00a fb99 	bl	800bab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001380:	2011      	movs	r0, #17
 8001382:	f00a fbb2 	bl	800baea <HAL_NVIC_EnableIRQ>

}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000

08001394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139a:	4b1b      	ldr	r3, [pc, #108]	@ (8001408 <MX_GPIO_Init+0x74>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139e:	4a1a      	ldr	r2, [pc, #104]	@ (8001408 <MX_GPIO_Init+0x74>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a6:	4b18      	ldr	r3, [pc, #96]	@ (8001408 <MX_GPIO_Init+0x74>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013b2:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <MX_GPIO_Init+0x74>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b6:	4a14      	ldr	r2, [pc, #80]	@ (8001408 <MX_GPIO_Init+0x74>)
 80013b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013be:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <MX_GPIO_Init+0x74>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <MX_GPIO_Init+0x74>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001408 <MX_GPIO_Init+0x74>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <MX_GPIO_Init+0x74>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e2:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <MX_GPIO_Init+0x74>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e6:	4a08      	ldr	r2, [pc, #32]	@ (8001408 <MX_GPIO_Init+0x74>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ee:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <MX_GPIO_Init+0x74>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000

0800140c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001410:	b672      	cpsid	i
}
 8001412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <Error_Handler+0x8>

08001418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141e:	4b0f      	ldr	r3, [pc, #60]	@ (800145c <HAL_MspInit+0x44>)
 8001420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001422:	4a0e      	ldr	r2, [pc, #56]	@ (800145c <HAL_MspInit+0x44>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6613      	str	r3, [r2, #96]	@ 0x60
 800142a:	4b0c      	ldr	r3, [pc, #48]	@ (800145c <HAL_MspInit+0x44>)
 800142c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	4b09      	ldr	r3, [pc, #36]	@ (800145c <HAL_MspInit+0x44>)
 8001438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800143a:	4a08      	ldr	r2, [pc, #32]	@ (800145c <HAL_MspInit+0x44>)
 800143c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001440:	6593      	str	r3, [r2, #88]	@ 0x58
 8001442:	4b06      	ldr	r3, [pc, #24]	@ (800145c <HAL_MspInit+0x44>)
 8001444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000

08001460 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0a      	ldr	r2, [pc, #40]	@ (8001498 <HAL_CRC_MspInit+0x38>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d10b      	bne.n	800148a <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001472:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <HAL_CRC_MspInit+0x3c>)
 8001474:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001476:	4a09      	ldr	r2, [pc, #36]	@ (800149c <HAL_CRC_MspInit+0x3c>)
 8001478:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800147c:	6493      	str	r3, [r2, #72]	@ 0x48
 800147e:	4b07      	ldr	r3, [pc, #28]	@ (800149c <HAL_CRC_MspInit+0x3c>)
 8001480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001482:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 800148a:	bf00      	nop
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40023000 	.word	0x40023000
 800149c:	40021000 	.word	0x40021000

080014a0 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b0a4      	sub	sp, #144	@ 0x90
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a8:	f107 0308 	add.w	r3, r7, #8
 80014ac:	2288      	movs	r2, #136	@ 0x88
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f010 ff7c 	bl	80123ae <memset>
  if(hrtc->Instance==RTC)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a10      	ldr	r2, [pc, #64]	@ (80014fc <HAL_RTC_MspInit+0x5c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d118      	bne.n	80014f2 <HAL_RTC_MspInit+0x52>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014c4:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80014c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	4618      	mov	r0, r3
 80014d4:	f00d f876 	bl	800e5c4 <HAL_RCCEx_PeriphCLKConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80014de:	f7ff ff95 	bl	800140c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014e2:	4b07      	ldr	r3, [pc, #28]	@ (8001500 <HAL_RTC_MspInit+0x60>)
 80014e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014e8:	4a05      	ldr	r2, [pc, #20]	@ (8001500 <HAL_RTC_MspInit+0x60>)
 80014ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80014f2:	bf00      	nop
 80014f4:	3790      	adds	r7, #144	@ 0x90
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40002800 	.word	0x40002800
 8001500:	40021000 	.word	0x40021000

08001504 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	@ 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a1b      	ldr	r2, [pc, #108]	@ (8001590 <HAL_SPI_MspInit+0x8c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d130      	bne.n	8001588 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001526:	4b1b      	ldr	r3, [pc, #108]	@ (8001594 <HAL_SPI_MspInit+0x90>)
 8001528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152a:	4a1a      	ldr	r2, [pc, #104]	@ (8001594 <HAL_SPI_MspInit+0x90>)
 800152c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001530:	6593      	str	r3, [r2, #88]	@ 0x58
 8001532:	4b18      	ldr	r3, [pc, #96]	@ (8001594 <HAL_SPI_MspInit+0x90>)
 8001534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001536:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	4b15      	ldr	r3, [pc, #84]	@ (8001594 <HAL_SPI_MspInit+0x90>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001542:	4a14      	ldr	r2, [pc, #80]	@ (8001594 <HAL_SPI_MspInit+0x90>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800154a:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <HAL_SPI_MspInit+0x90>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001556:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800155a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001568:	2305      	movs	r3, #5
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	4809      	ldr	r0, [pc, #36]	@ (8001598 <HAL_SPI_MspInit+0x94>)
 8001574:	f00a fdda 	bl	800c12c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001578:	2200      	movs	r2, #0
 800157a:	2100      	movs	r1, #0
 800157c:	2024      	movs	r0, #36	@ 0x24
 800157e:	f00a fa98 	bl	800bab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001582:	2024      	movs	r0, #36	@ 0x24
 8001584:	f00a fab1 	bl	800baea <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001588:	bf00      	nop
 800158a:	3728      	adds	r7, #40	@ 0x28
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40003800 	.word	0x40003800
 8001594:	40021000 	.word	0x40021000
 8001598:	48000400 	.word	0x48000400

0800159c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015ac:	d10c      	bne.n	80015c8 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ae:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <HAL_TIM_Base_MspInit+0x68>)
 80015b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b2:	4a14      	ldr	r2, [pc, #80]	@ (8001604 <HAL_TIM_Base_MspInit+0x68>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80015ba:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <HAL_TIM_Base_MspInit+0x68>)
 80015bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015c6:	e018      	b.n	80015fa <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001608 <HAL_TIM_Base_MspInit+0x6c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d113      	bne.n	80015fa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <HAL_TIM_Base_MspInit+0x68>)
 80015d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001604 <HAL_TIM_Base_MspInit+0x68>)
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80015de:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <HAL_TIM_Base_MspInit+0x68>)
 80015e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2100      	movs	r1, #0
 80015ee:	201d      	movs	r0, #29
 80015f0:	f00a fa5f 	bl	800bab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015f4:	201d      	movs	r0, #29
 80015f6:	f00a fa78 	bl	800baea <HAL_NVIC_EnableIRQ>
}
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000
 8001608:	40000400 	.word	0x40000400

0800160c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b0ac      	sub	sp, #176	@ 0xb0
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	2288      	movs	r2, #136	@ 0x88
 800162a:	2100      	movs	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f010 febe 	bl	80123ae <memset>
  if(huart->Instance==USART1)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a26      	ldr	r2, [pc, #152]	@ (80016d0 <HAL_UART_MspInit+0xc4>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d144      	bne.n	80016c6 <HAL_UART_MspInit+0xba>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800163c:	2301      	movs	r3, #1
 800163e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001640:	2300      	movs	r3, #0
 8001642:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4618      	mov	r0, r3
 800164a:	f00c ffbb 	bl	800e5c4 <HAL_RCCEx_PeriphCLKConfig>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001654:	f7ff feda 	bl	800140c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001658:	4b1e      	ldr	r3, [pc, #120]	@ (80016d4 <HAL_UART_MspInit+0xc8>)
 800165a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800165c:	4a1d      	ldr	r2, [pc, #116]	@ (80016d4 <HAL_UART_MspInit+0xc8>)
 800165e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001662:	6613      	str	r3, [r2, #96]	@ 0x60
 8001664:	4b1b      	ldr	r3, [pc, #108]	@ (80016d4 <HAL_UART_MspInit+0xc8>)
 8001666:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001668:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001670:	4b18      	ldr	r3, [pc, #96]	@ (80016d4 <HAL_UART_MspInit+0xc8>)
 8001672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001674:	4a17      	ldr	r2, [pc, #92]	@ (80016d4 <HAL_UART_MspInit+0xc8>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800167c:	4b15      	ldr	r3, [pc, #84]	@ (80016d4 <HAL_UART_MspInit+0xc8>)
 800167e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001688:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800168c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016a2:	2307      	movs	r3, #7
 80016a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016ac:	4619      	mov	r1, r3
 80016ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016b2:	f00a fd3b 	bl	800c12c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	2025      	movs	r0, #37	@ 0x25
 80016bc:	f00a f9f9 	bl	800bab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016c0:	2025      	movs	r0, #37	@ 0x25
 80016c2:	f00a fa12 	bl	800baea <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80016c6:	bf00      	nop
 80016c8:	37b0      	adds	r7, #176	@ 0xb0
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40013800 	.word	0x40013800
 80016d4:	40021000 	.word	0x40021000

080016d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <NMI_Handler+0x4>

080016e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <HardFault_Handler+0x4>

080016e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <MemManage_Handler+0x4>

080016f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <BusFault_Handler+0x4>

080016f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <UsageFault_Handler+0x4>

08001700 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800172e:	f00a f8a1 	bl	800b874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800173c:	4802      	ldr	r0, [pc, #8]	@ (8001748 <DMA1_Channel6_IRQHandler+0x10>)
 800173e:	f00a fc18 	bl	800bf72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	2000079c 	.word	0x2000079c

0800174c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001750:	4802      	ldr	r0, [pc, #8]	@ (800175c <DMA1_Channel7_IRQHandler+0x10>)
 8001752:	f00a fc0e 	bl	800bf72 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200007e4 	.word	0x200007e4

08001760 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001764:	4802      	ldr	r0, [pc, #8]	@ (8001770 <TIM3_IRQHandler+0x10>)
 8001766:	f00e f865 	bl	800f834 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000398 	.word	0x20000398

08001774 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001778:	4802      	ldr	r0, [pc, #8]	@ (8001784 <SPI2_IRQHandler+0x10>)
 800177a:	f00d fee5 	bl	800f548 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200002e8 	.word	0x200002e8

08001788 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800178c:	4802      	ldr	r0, [pc, #8]	@ (8001798 <USART1_IRQHandler+0x10>)
 800178e:	f00e fd11 	bl	80101b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200003e4 	.word	0x200003e4

0800179c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80017a6:	4b19      	ldr	r3, [pc, #100]	@ (800180c <BSP_I2C1_Init+0x70>)
 80017a8:	4a19      	ldr	r2, [pc, #100]	@ (8001810 <BSP_I2C1_Init+0x74>)
 80017aa:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80017ac:	4b19      	ldr	r3, [pc, #100]	@ (8001814 <BSP_I2C1_Init+0x78>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	4918      	ldr	r1, [pc, #96]	@ (8001814 <BSP_I2C1_Init+0x78>)
 80017b4:	600a      	str	r2, [r1, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d122      	bne.n	8001800 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80017ba:	4814      	ldr	r0, [pc, #80]	@ (800180c <BSP_I2C1_Init+0x70>)
 80017bc:	f00b fc9e 	bl	800d0fc <HAL_I2C_GetState>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d11c      	bne.n	8001800 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80017c6:	4811      	ldr	r0, [pc, #68]	@ (800180c <BSP_I2C1_Init+0x70>)
 80017c8:	f000 f952 	bl	8001a70 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d116      	bne.n	8001800 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80017d2:	480e      	ldr	r0, [pc, #56]	@ (800180c <BSP_I2C1_Init+0x70>)
 80017d4:	f000 f908 	bl	80019e8 <MX_I2C1_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80017de:	f06f 0307 	mvn.w	r3, #7
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	e00c      	b.n	8001800 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017e6:	2100      	movs	r1, #0
 80017e8:	4808      	ldr	r0, [pc, #32]	@ (800180c <BSP_I2C1_Init+0x70>)
 80017ea:	f00b ffef 	bl	800d7cc <HAL_I2CEx_ConfigAnalogFilter>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80017f4:	f06f 0307 	mvn.w	r3, #7
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	e001      	b.n	8001800 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001800:	687b      	ldr	r3, [r7, #4]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	2000046c 	.word	0x2000046c
 8001810:	40005400 	.word	0x40005400
 8001814:	200004c0 	.word	0x200004c0

08001818 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001822:	4b0f      	ldr	r3, [pc, #60]	@ (8001860 <BSP_I2C1_DeInit+0x48>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d014      	beq.n	8001854 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800182a:	4b0d      	ldr	r3, [pc, #52]	@ (8001860 <BSP_I2C1_DeInit+0x48>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	3b01      	subs	r3, #1
 8001830:	4a0b      	ldr	r2, [pc, #44]	@ (8001860 <BSP_I2C1_DeInit+0x48>)
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	4b0a      	ldr	r3, [pc, #40]	@ (8001860 <BSP_I2C1_DeInit+0x48>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d10b      	bne.n	8001854 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 800183c:	4809      	ldr	r0, [pc, #36]	@ (8001864 <BSP_I2C1_DeInit+0x4c>)
 800183e:	f000 f985 	bl	8001b4c <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001842:	4808      	ldr	r0, [pc, #32]	@ (8001864 <BSP_I2C1_DeInit+0x4c>)
 8001844:	f00a ffdb 	bl	800c7fe <HAL_I2C_DeInit>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d002      	beq.n	8001854 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800184e:	f06f 0307 	mvn.w	r3, #7
 8001852:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001854:	687b      	ldr	r3, [r7, #4]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200004c0 	.word	0x200004c0
 8001864:	2000046c 	.word	0x2000046c

08001868 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	@ 0x28
 800186c:	af04      	add	r7, sp, #16
 800186e:	60ba      	str	r2, [r7, #8]
 8001870:	461a      	mov	r2, r3
 8001872:	4603      	mov	r3, r0
 8001874:	81fb      	strh	r3, [r7, #14]
 8001876:	460b      	mov	r3, r1
 8001878:	81bb      	strh	r3, [r7, #12]
 800187a:	4613      	mov	r3, r2
 800187c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001882:	89ba      	ldrh	r2, [r7, #12]
 8001884:	89f9      	ldrh	r1, [r7, #14]
 8001886:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800188a:	9302      	str	r3, [sp, #8]
 800188c:	88fb      	ldrh	r3, [r7, #6]
 800188e:	9301      	str	r3, [sp, #4]
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	2301      	movs	r3, #1
 8001896:	480c      	ldr	r0, [pc, #48]	@ (80018c8 <BSP_I2C1_WriteReg+0x60>)
 8001898:	f00b fa02 	bl	800cca0 <HAL_I2C_Mem_Write>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00c      	beq.n	80018bc <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80018a2:	4809      	ldr	r0, [pc, #36]	@ (80018c8 <BSP_I2C1_WriteReg+0x60>)
 80018a4:	f00b fc38 	bl	800d118 <HAL_I2C_GetError>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	d103      	bne.n	80018b6 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80018ae:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	e002      	b.n	80018bc <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80018b6:	f06f 0303 	mvn.w	r3, #3
 80018ba:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80018bc:	697b      	ldr	r3, [r7, #20]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	2000046c 	.word	0x2000046c

080018cc <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	@ 0x28
 80018d0:	af04      	add	r7, sp, #16
 80018d2:	60ba      	str	r2, [r7, #8]
 80018d4:	461a      	mov	r2, r3
 80018d6:	4603      	mov	r3, r0
 80018d8:	81fb      	strh	r3, [r7, #14]
 80018da:	460b      	mov	r3, r1
 80018dc:	81bb      	strh	r3, [r7, #12]
 80018de:	4613      	mov	r3, r2
 80018e0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80018e6:	89ba      	ldrh	r2, [r7, #12]
 80018e8:	89f9      	ldrh	r1, [r7, #14]
 80018ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018ee:	9302      	str	r3, [sp, #8]
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	2301      	movs	r3, #1
 80018fa:	480c      	ldr	r0, [pc, #48]	@ (800192c <BSP_I2C1_ReadReg+0x60>)
 80018fc:	f00b fae4 	bl	800cec8 <HAL_I2C_Mem_Read>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00c      	beq.n	8001920 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001906:	4809      	ldr	r0, [pc, #36]	@ (800192c <BSP_I2C1_ReadReg+0x60>)
 8001908:	f00b fc06 	bl	800d118 <HAL_I2C_GetError>
 800190c:	4603      	mov	r3, r0
 800190e:	2b04      	cmp	r3, #4
 8001910:	d103      	bne.n	800191a <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001912:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	e002      	b.n	8001920 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800191a:	f06f 0303 	mvn.w	r3, #3
 800191e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001920:	697b      	ldr	r3, [r7, #20]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	2000046c 	.word	0x2000046c

08001930 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af02      	add	r7, sp, #8
 8001936:	4603      	mov	r3, r0
 8001938:	6039      	str	r1, [r7, #0]
 800193a:	80fb      	strh	r3, [r7, #6]
 800193c:	4613      	mov	r3, r2
 800193e:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001944:	88bb      	ldrh	r3, [r7, #4]
 8001946:	88f9      	ldrh	r1, [r7, #6]
 8001948:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800194c:	9200      	str	r2, [sp, #0]
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	480b      	ldr	r0, [pc, #44]	@ (8001980 <BSP_I2C1_Send+0x50>)
 8001952:	f00a ff97 	bl	800c884 <HAL_I2C_Master_Transmit>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00c      	beq.n	8001976 <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 800195c:	4808      	ldr	r0, [pc, #32]	@ (8001980 <BSP_I2C1_Send+0x50>)
 800195e:	f00b fbdb 	bl	800d118 <HAL_I2C_GetError>
 8001962:	4603      	mov	r3, r0
 8001964:	2b04      	cmp	r3, #4
 8001966:	d003      	beq.n	8001970 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001968:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	e002      	b.n	8001976 <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001970:	f06f 0303 	mvn.w	r3, #3
 8001974:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001976:	68fb      	ldr	r3, [r7, #12]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	2000046c 	.word	0x2000046c

08001984 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af02      	add	r7, sp, #8
 800198a:	4603      	mov	r3, r0
 800198c:	6039      	str	r1, [r7, #0]
 800198e:	80fb      	strh	r3, [r7, #6]
 8001990:	4613      	mov	r3, r2
 8001992:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001998:	88bb      	ldrh	r3, [r7, #4]
 800199a:	88f9      	ldrh	r1, [r7, #6]
 800199c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019a0:	9200      	str	r2, [sp, #0]
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	480b      	ldr	r0, [pc, #44]	@ (80019d4 <BSP_I2C1_Recv+0x50>)
 80019a6:	f00b f885 	bl	800cab4 <HAL_I2C_Master_Receive>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00c      	beq.n	80019ca <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80019b0:	4808      	ldr	r0, [pc, #32]	@ (80019d4 <BSP_I2C1_Recv+0x50>)
 80019b2:	f00b fbb1 	bl	800d118 <HAL_I2C_GetError>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d003      	beq.n	80019c4 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80019bc:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	e002      	b.n	80019ca <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80019c4:	f06f 0303 	mvn.w	r3, #3
 80019c8:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 80019ca:	68fb      	ldr	r3, [r7, #12]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	2000046c 	.word	0x2000046c

080019d8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80019dc:	f009 ff5e 	bl	800b89c <HAL_GetTick>
 80019e0:	4603      	mov	r3, r0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001a68 <MX_I2C1_Init+0x80>)
 80019f8:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00F12981;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a1b      	ldr	r2, [pc, #108]	@ (8001a6c <MX_I2C1_Init+0x84>)
 80019fe:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f00a fe4c 	bl	800c6c8 <HAL_I2C_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f00b fec5 	bl	800d7cc <HAL_I2CEx_ConfigAnalogFilter>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f00b ff07 	bl	800d862 <HAL_I2CEx_ConfigDigitalFilter>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40005400 	.word	0x40005400
 8001a6c:	00f12981 	.word	0x00f12981

08001a70 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b0ac      	sub	sp, #176	@ 0xb0
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	2288      	movs	r2, #136	@ 0x88
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f010 fc94 	bl	80123ae <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a86:	2340      	movs	r3, #64	@ 0x40
 8001a88:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4618      	mov	r0, r3
 8001a94:	f00c fd96 	bl	800e5c4 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a98:	4b29      	ldr	r3, [pc, #164]	@ (8001b40 <I2C1_MspInit+0xd0>)
 8001a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9c:	4a28      	ldr	r2, [pc, #160]	@ (8001b40 <I2C1_MspInit+0xd0>)
 8001a9e:	f043 0302 	orr.w	r3, r3, #2
 8001aa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aa4:	4b26      	ldr	r3, [pc, #152]	@ (8001b40 <I2C1_MspInit+0xd0>)
 8001aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001ab0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ab4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ab8:	2312      	movs	r3, #18
 8001aba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001aca:	2304      	movs	r3, #4
 8001acc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001ad0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	481b      	ldr	r0, [pc, #108]	@ (8001b44 <I2C1_MspInit+0xd4>)
 8001ad8:	f00a fb28 	bl	800c12c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001adc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ae0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ae4:	2312      	movs	r3, #18
 8001ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001af6:	2304      	movs	r3, #4
 8001af8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001afc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b00:	4619      	mov	r1, r3
 8001b02:	4810      	ldr	r0, [pc, #64]	@ (8001b44 <I2C1_MspInit+0xd4>)
 8001b04:	f00a fb12 	bl	800c12c <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB8);
 8001b08:	4b0f      	ldr	r3, [pc, #60]	@ (8001b48 <I2C1_MspInit+0xd8>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	4a0e      	ldr	r2, [pc, #56]	@ (8001b48 <I2C1_MspInit+0xd8>)
 8001b0e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b12:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8001b14:	4b0c      	ldr	r3, [pc, #48]	@ (8001b48 <I2C1_MspInit+0xd8>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	4a0b      	ldr	r2, [pc, #44]	@ (8001b48 <I2C1_MspInit+0xd8>)
 8001b1a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001b1e:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b20:	4b07      	ldr	r3, [pc, #28]	@ (8001b40 <I2C1_MspInit+0xd0>)
 8001b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b24:	4a06      	ldr	r2, [pc, #24]	@ (8001b40 <I2C1_MspInit+0xd0>)
 8001b26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b2c:	4b04      	ldr	r3, [pc, #16]	@ (8001b40 <I2C1_MspInit+0xd0>)
 8001b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	37b0      	adds	r7, #176	@ 0xb0
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40021000 	.word	0x40021000
 8001b44:	48000400 	.word	0x48000400
 8001b48:	40010000 	.word	0x40010000

08001b4c <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001b54:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <I2C1_MspDeInit+0x30>)
 8001b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b58:	4a08      	ldr	r2, [pc, #32]	@ (8001b7c <I2C1_MspDeInit+0x30>)
 8001b5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001b5e:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001b60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b64:	4806      	ldr	r0, [pc, #24]	@ (8001b80 <I2C1_MspDeInit+0x34>)
 8001b66:	f00a fc8b 	bl	800c480 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001b6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b6e:	4804      	ldr	r0, [pc, #16]	@ (8001b80 <I2C1_MspDeInit+0x34>)
 8001b70:	f00a fc86 	bl	800c480 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	48000400 	.word	0x48000400

08001b84 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	e00a      	b.n	8001bac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b96:	f3af 8000 	nop.w
 8001b9a:	4601      	mov	r1, r0
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	60ba      	str	r2, [r7, #8]
 8001ba2:	b2ca      	uxtb	r2, r1
 8001ba4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	dbf0      	blt.n	8001b96 <_read+0x12>
  }

  return len;
 8001bb4:	687b      	ldr	r3, [r7, #4]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b086      	sub	sp, #24
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	e009      	b.n	8001be4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	60ba      	str	r2, [r7, #8]
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f009 fd25 	bl	800b628 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	3301      	adds	r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	dbf1      	blt.n	8001bd0 <_write+0x12>
  }
  return len;
 8001bec:	687b      	ldr	r3, [r7, #4]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <_close>:

int _close(int file)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c1e:	605a      	str	r2, [r3, #4]
  return 0;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <_isatty>:

int _isatty(int file)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c36:	2301      	movs	r3, #1
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c68:	4a14      	ldr	r2, [pc, #80]	@ (8001cbc <_sbrk+0x5c>)
 8001c6a:	4b15      	ldr	r3, [pc, #84]	@ (8001cc0 <_sbrk+0x60>)
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c74:	4b13      	ldr	r3, [pc, #76]	@ (8001cc4 <_sbrk+0x64>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d102      	bne.n	8001c82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <_sbrk+0x64>)
 8001c7e:	4a12      	ldr	r2, [pc, #72]	@ (8001cc8 <_sbrk+0x68>)
 8001c80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c82:	4b10      	ldr	r3, [pc, #64]	@ (8001cc4 <_sbrk+0x64>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d207      	bcs.n	8001ca0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c90:	f010 fbdc 	bl	801244c <__errno>
 8001c94:	4603      	mov	r3, r0
 8001c96:	220c      	movs	r2, #12
 8001c98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9e:	e009      	b.n	8001cb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca0:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <_sbrk+0x64>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ca6:	4b07      	ldr	r3, [pc, #28]	@ (8001cc4 <_sbrk+0x64>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	4a05      	ldr	r2, [pc, #20]	@ (8001cc4 <_sbrk+0x64>)
 8001cb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20018000 	.word	0x20018000
 8001cc0:	00001200 	.word	0x00001200
 8001cc4:	200004c4 	.word	0x200004c4
 8001cc8:	20000b40 	.word	0x20000b40

08001ccc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001cd0:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <SystemInit+0x20>)
 8001cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cd6:	4a05      	ldr	r2, [pc, #20]	@ (8001cec <SystemInit+0x20>)
 8001cd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cdc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cf0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cf4:	f7ff ffea 	bl	8001ccc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cf8:	480c      	ldr	r0, [pc, #48]	@ (8001d2c <LoopForever+0x6>)
  ldr r1, =_edata
 8001cfa:	490d      	ldr	r1, [pc, #52]	@ (8001d30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8001d34 <LoopForever+0xe>)
  movs r3, #0
 8001cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d00:	e002      	b.n	8001d08 <LoopCopyDataInit>

08001d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d06:	3304      	adds	r3, #4

08001d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d0c:	d3f9      	bcc.n	8001d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d10:	4c0a      	ldr	r4, [pc, #40]	@ (8001d3c <LoopForever+0x16>)
  movs r3, #0
 8001d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d14:	e001      	b.n	8001d1a <LoopFillZerobss>

08001d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d18:	3204      	adds	r2, #4

08001d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d1c:	d3fb      	bcc.n	8001d16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d1e:	f010 fb9b 	bl	8012458 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d22:	f7ff f91f 	bl	8000f64 <main>

08001d26 <LoopForever>:

LoopForever:
    b LoopForever
 8001d26:	e7fe      	b.n	8001d26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d30:	20000284 	.word	0x20000284
  ldr r2, =_sidata
 8001d34:	080147e8 	.word	0x080147e8
  ldr r2, =_sbss
 8001d38:	20000284 	.word	0x20000284
  ldr r4, =_ebss
 8001d3c:	20000b3c 	.word	0x20000b3c

08001d40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d40:	e7fe      	b.n	8001d40 <ADC1_2_IRQHandler>
	...

08001d44 <LIS2DUXS12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_RegisterBusIO(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_IO_t *pIO)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d103      	bne.n	8001d60 <LIS2DUXS12_RegisterBusIO+0x1c>
  {
    ret = LIS2DUXS12_ERROR;
 8001d58:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	e085      	b.n	8001e6c <LIS2DUXS12_RegisterBusIO+0x128>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	7b1a      	ldrb	r2, [r3, #12]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	695a      	ldr	r2, [r3, #20]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	699a      	ldr	r2, [r3, #24]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	619a      	str	r2, [r3, #24]
    pObj->IO.Delay     = pIO->Delay;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	69da      	ldr	r2, [r3, #28]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	61da      	str	r2, [r3, #28]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a35      	ldr	r2, [pc, #212]	@ (8001e78 <LIS2DUXS12_RegisterBusIO+0x134>)
 8001da4:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a34      	ldr	r2, [pc, #208]	@ (8001e7c <LIS2DUXS12_RegisterBusIO+0x138>)
 8001daa:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	69da      	ldr	r2, [r3, #28]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d103      	bne.n	8001dca <LIS2DUXS12_RegisterBusIO+0x86>
    {
      ret = LIS2DUXS12_ERROR;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	e050      	b.n	8001e6c <LIS2DUXS12_RegisterBusIO+0x128>
    }
    else if (pObj->IO.Init() != LIS2DUXS12_OK)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4798      	blx	r3
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <LIS2DUXS12_RegisterBusIO+0x9a>
    {
      ret = LIS2DUXS12_ERROR;
 8001dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	e046      	b.n	8001e6c <LIS2DUXS12_RegisterBusIO+0x128>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DUXS12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d11b      	bne.n	8001e1e <LIS2DUXS12_RegisterBusIO+0xda>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d13d      	bne.n	8001e6c <LIS2DUXS12_RegisterBusIO+0x128>
        {
          /* Exit from deep power down only the first time in SPI mode */
          if (LIS2DUXS12_ExitDeepPowerDownSPI(pObj) != LIS2DUXS12_OK)
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f8f2 	bl	8001fda <LIS2DUXS12_ExitDeepPowerDownSPI>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <LIS2DUXS12_RegisterBusIO+0xbc>
          {
            /* Forced OK because of an expected failure during the wake-up sequence */
            ret = LIS2DUXS12_OK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
          }
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x50;
 8001e00:	2350      	movs	r3, #80	@ 0x50
 8001e02:	72fb      	strb	r3, [r7, #11]

          if (LIS2DUXS12_Write_Reg(pObj, LIS2DUXS12_CTRL1, data) != LIS2DUXS12_OK)
 8001e04:	7afb      	ldrb	r3, [r7, #11]
 8001e06:	461a      	mov	r2, r3
 8001e08:	2110      	movs	r1, #16
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 fbf5 	bl	80025fa <LIS2DUXS12_Write_Reg>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d02a      	beq.n	8001e6c <LIS2DUXS12_RegisterBusIO+0x128>
          {
            ret = LIS2DUXS12_ERROR;
 8001e16:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	e026      	b.n	8001e6c <LIS2DUXS12_RegisterBusIO+0x128>
          }
        }
      }
      else if (pObj->IO.BusType == LIS2DUXS12_SPI_4WIRES_BUS)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d10d      	bne.n	8001e42 <LIS2DUXS12_RegisterBusIO+0xfe>
      {
        /* Exit from deep power down only the first time in SPI mode */
        if (pObj->is_initialized == 0U)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d11d      	bne.n	8001e6c <LIS2DUXS12_RegisterBusIO+0x128>
        {
          if (LIS2DUXS12_ExitDeepPowerDownSPI(pObj) != LIS2DUXS12_OK)
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f8d2 	bl	8001fda <LIS2DUXS12_ExitDeepPowerDownSPI>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d017      	beq.n	8001e6c <LIS2DUXS12_RegisterBusIO+0x128>
          {
            /* Forced OK because of an expected failure during the wake-up sequence */
            ret = LIS2DUXS12_OK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	e014      	b.n	8001e6c <LIS2DUXS12_RegisterBusIO+0x128>
          }
        }
      }
      else if (pObj->IO.BusType == LIS2DUXS12_I2C_BUS)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d110      	bne.n	8001e6c <LIS2DUXS12_RegisterBusIO+0x128>
      {
        /* Exit from deep power down only the first time in I2C mode */
        if (pObj->is_initialized == 0U)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10b      	bne.n	8001e6c <LIS2DUXS12_RegisterBusIO+0x128>
        {
          if (LIS2DUXS12_ExitDeepPowerDownI2C(pObj) != LIS2DUXS12_OK)
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f8ab 	bl	8001fb0 <LIS2DUXS12_ExitDeepPowerDownI2C>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <LIS2DUXS12_RegisterBusIO+0x128>
          {
            pObj->Ctx.mdelay(100);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e64:	2064      	movs	r0, #100	@ 0x64
 8001e66:	4798      	blx	r3

            /* Forced OK because of an expected failure during the wake-up sequence */
            ret = LIS2DUXS12_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	08002ab5 	.word	0x08002ab5
 8001e7c:	08002aeb 	.word	0x08002aeb

08001e80 <LIS2DUXS12_Init>:
  * @brief  Initialize the LIS2DUXS12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Init(LIS2DUXS12_Object_t *pObj)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  lis2duxs12_i3c_cfg_t val;

  if(pObj->IO.BusType != LIS2DUXS12_I3C_BUS)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d01f      	beq.n	8001ed0 <LIS2DUXS12_Init+0x50>
  {
    /* Disable I3C */
    if (lis2duxs12_i3c_configure_get(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3320      	adds	r3, #32
 8001e94:	f107 0214 	add.w	r2, r7, #20
 8001e98:	4611      	mov	r1, r2
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f001 fb0a 	bl	80034b4 <lis2duxs12_i3c_configure_get>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <LIS2DUXS12_Init+0x2c>
    {
      return LIS2DUXS12_ERROR;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eaa:	e05c      	b.n	8001f66 <LIS2DUXS12_Init+0xe6>
    }
    val.asf_on = PROPERTY_ENABLE;
 8001eac:	7d7b      	ldrb	r3, [r7, #21]
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	757b      	strb	r3, [r7, #21]
    if (lis2duxs12_i3c_configure_set(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3320      	adds	r3, #32
 8001eb8:	f107 0214 	add.w	r2, r7, #20
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f001 fac0 	bl	8003444 <lis2duxs12_i3c_configure_set>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <LIS2DUXS12_Init+0x50>
    {
      return LIS2DUXS12_ERROR;
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ece:	e04a      	b.n	8001f66 <LIS2DUXS12_Init+0xe6>
    }
  }

  /* Set main memory bank */
  if (LIS2DUXS12_Set_Mem_Bank(pObj, (uint8_t)LIS2DUXS12_MAIN_MEM_BANK) != LIS2DUXS12_OK)
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 fbac 	bl	8002630 <LIS2DUXS12_Set_Mem_Bank>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d002      	beq.n	8001ee4 <LIS2DUXS12_Init+0x64>
  {
    return LIS2DUXS12_ERROR;
 8001ede:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee2:	e040      	b.n	8001f66 <LIS2DUXS12_Init+0xe6>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. Enable BDU. */
  if (lis2duxs12_init_set(&(pObj->Ctx), LIS2DUXS12_SENSOR_ONLY_ON) != LIS2DUXS12_OK)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3320      	adds	r3, #32
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 fec4 	bl	8002c78 <lis2duxs12_init_set>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <LIS2DUXS12_Init+0x7c>
  {
    return LIS2DUXS12_ERROR;
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8001efa:	e034      	b.n	8001f66 <LIS2DUXS12_Init+0xe6>
  }

  /* FIFO mode selection */
  lis2duxs12_fifo_mode_t fifo_mode =
 8001efc:	f107 030c 	add.w	r3, r7, #12
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	809a      	strh	r2, [r3, #4]
    .operation = LIS2DUXS12_BYPASS_MODE,
    .store     = LIS2DUXS12_FIFO_1X,
    .watermark = 0,
  };

  if (lis2duxs12_fifo_mode_set(&(pObj->Ctx), fifo_mode) != LIS2DUXS12_OK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f103 0020 	add.w	r0, r3, #32
 8001f0c:	f107 030c 	add.w	r3, r7, #12
 8001f10:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001f14:	f001 fb33 	bl	800357e <lis2duxs12_fifo_mode_set>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <LIS2DUXS12_Init+0xa4>
  {
    return LIS2DUXS12_ERROR;
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f22:	e020      	b.n	8001f66 <LIS2DUXS12_Init+0xe6>
  }

  /* Select default output data rate */
  pObj->acc_odr = 100.0f;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a12      	ldr	r2, [pc, #72]	@ (8001f70 <LIS2DUXS12_Init+0xf0>)
 8001f28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Select default high performance mode (when disabled) */
  pObj->power_mode = LIS2DUXS12_HIGH_PERFORMANCE;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Output data rate: power down, full scale: 2g */
  lis2duxs12_md_t mode =
 8001f32:	f107 0308 	add.w	r3, r7, #8
 8001f36:	2100      	movs	r1, #0
 8001f38:	460a      	mov	r2, r1
 8001f3a:	801a      	strh	r2, [r3, #0]
 8001f3c:	460a      	mov	r2, r1
 8001f3e:	709a      	strb	r2, [r3, #2]
  {
    .odr = LIS2DUXS12_OFF,
    .fs  = LIS2DUXS12_2g,
  };

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3320      	adds	r3, #32
 8001f44:	f107 0208 	add.w	r2, r7, #8
 8001f48:	4611      	mov	r1, r2
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 ffe2 	bl	8002f14 <lis2duxs12_mode_set>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d002      	beq.n	8001f5c <LIS2DUXS12_Init+0xdc>
  {
    return LIS2DUXS12_ERROR;
 8001f56:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5a:	e004      	b.n	8001f66 <LIS2DUXS12_Init+0xe6>
  }

  pObj->is_initialized = 1;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DUXS12_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	42c80000 	.word	0x42c80000

08001f74 <LIS2DUXS12_DeInit>:
  * @brief  Deinitialize the LIS2DUXS12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_DeInit(LIS2DUXS12_Object_t *pObj)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DUXS12_ACC_Disable(pObj) != LIS2DUXS12_OK)
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f8ad 	bl	80020dc <LIS2DUXS12_ACC_Disable>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d002      	beq.n	8001f8e <LIS2DUXS12_DeInit+0x1a>
  {
    return LIS2DUXS12_ERROR;
 8001f88:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8c:	e00c      	b.n	8001fa8 <LIS2DUXS12_DeInit+0x34>
  }

  /* Reset output data rate */
  pObj->acc_odr = 0.0f;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set low power mode (when disabled) */
  pObj->power_mode = LIS2DUXS12_LOW_POWER;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  pObj->is_initialized = 0;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DUXS12_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <LIS2DUXS12_ExitDeepPowerDownI2C>:
  * @brief  Exit from deep power down in I2C
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ExitDeepPowerDownI2C(LIS2DUXS12_Object_t *pObj)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint8_t val;

  /* Perform dummy read in order to exit from deep power down in I2C mode*/
  (void)lis2duxs12_device_id_get(&(pObj->Ctx), &val);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3320      	adds	r3, #32
 8001fbc:	f107 020f 	add.w	r2, r7, #15
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 fe46 	bl	8002c54 <lis2duxs12_device_id_get>

  /* Wait for 25 ms based on datasheet */
  pObj->Ctx.mdelay(25);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fcc:	2019      	movs	r0, #25
 8001fce:	4798      	blx	r3

  return LIS2DUXS12_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <LIS2DUXS12_ExitDeepPowerDownSPI>:
  * @brief  Exit from deep power down in SPI
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ExitDeepPowerDownSPI(LIS2DUXS12_Object_t *pObj)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  /* Write IF_WAKE_UP register to exit from deep power down in SPI mode*/
  (void)lis2duxs12_exit_deep_power_down(&(pObj->Ctx));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3320      	adds	r3, #32
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f001 f960 	bl	80032ac <lis2duxs12_exit_deep_power_down>

  /* Wait for 25 ms based on datasheet */
  pObj->Ctx.mdelay(25);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff0:	2019      	movs	r0, #25
 8001ff2:	4798      	blx	r3

  return LIS2DUXS12_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <LIS2DUXS12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ReadID(LIS2DUXS12_Object_t *pObj, uint8_t *Id)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b084      	sub	sp, #16
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	6039      	str	r1, [r7, #0]
  uint8_t val;

  if (lis2duxs12_device_id_get(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3320      	adds	r3, #32
 800200c:	f107 020f 	add.w	r2, r7, #15
 8002010:	4611      	mov	r1, r2
 8002012:	4618      	mov	r0, r3
 8002014:	f000 fe1e 	bl	8002c54 <lis2duxs12_device_id_get>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <LIS2DUXS12_ReadID+0x26>
  {
    return LIS2DUXS12_ERROR;
 800201e:	f04f 33ff 	mov.w	r3, #4294967295
 8002022:	e003      	b.n	800202c <LIS2DUXS12_ReadID+0x2e>
  }

  *Id = val;
 8002024:	7bfa      	ldrb	r2, [r7, #15]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	701a      	strb	r2, [r3, #0]

  return LIS2DUXS12_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <LIS2DUXS12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DUXS12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_GetCapabilities(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_Capabilities_t *Capabilities)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc        = 1;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2201      	movs	r2, #1
 8002042:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro       = 0;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	2200      	movs	r2, #0
 8002048:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto    = 0;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2200      	movs	r2, #0
 800204e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower   = 1;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	2201      	movs	r2, #1
 8002054:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS  = 0;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2200      	movs	r2, #0
 800205a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS   = 16;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	2210      	movs	r2, #16
 8002060:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS   = 0;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	2200      	movs	r2, #0
 8002066:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr = 0.0f;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr  = 800.0f;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	4a06      	ldr	r2, [pc, #24]	@ (800208c <LIS2DUXS12_GetCapabilities+0x58>)
 8002074:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr  = 0.0f;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	619a      	str	r2, [r3, #24]
  return LIS2DUXS12_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	44480000 	.word	0x44480000

08002090 <LIS2DUXS12_ACC_Enable>:
  * @brief  Enable the LIS2DUXS12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_Enable(LIS2DUXS12_Object_t *pObj)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <LIS2DUXS12_ACC_Enable+0x16>
  {
    return LIS2DUXS12_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e016      	b.n	80020d4 <LIS2DUXS12_ACC_Enable+0x44>
  }

  /* Output data rate selection. */
  if (LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->power_mode) != LIS2DUXS12_OK)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80020b2:	4619      	mov	r1, r3
 80020b4:	eeb0 0a67 	vmov.f32	s0, s15
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 fadb 	bl	8002674 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d002      	beq.n	80020ca <LIS2DUXS12_ACC_Enable+0x3a>
  {
    return LIS2DUXS12_ERROR;
 80020c4:	f04f 33ff 	mov.w	r3, #4294967295
 80020c8:	e004      	b.n	80020d4 <LIS2DUXS12_ACC_Enable+0x44>
  }

  pObj->acc_is_enabled = 1;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DUXS12_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <LIS2DUXS12_ACC_Disable>:
  * @brief  Disable the LIS2DUXS12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_Disable(LIS2DUXS12_Object_t *pObj)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  float_t Odr;
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <LIS2DUXS12_ACC_Disable+0x16>
  {
    return LIS2DUXS12_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e046      	b.n	8002180 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  if (LIS2DUXS12_ACC_GetOutputDataRate(pObj, &Odr) != LIS2DUXS12_OK)
 80020f2:	f107 030c 	add.w	r3, r7, #12
 80020f6:	4619      	mov	r1, r3
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f893 	bl	8002224 <LIS2DUXS12_ACC_GetOutputDataRate>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <LIS2DUXS12_ACC_Disable+0x2e>
  {
    return LIS2DUXS12_ERROR;
 8002104:	f04f 33ff 	mov.w	r3, #4294967295
 8002108:	e03a      	b.n	8002180 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  if (Odr == 800.0f)
 800210a:	edd7 7a03 	vldr	s15, [r7, #12]
 800210e:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002188 <LIS2DUXS12_ACC_Disable+0xac>
 8002112:	eef4 7a47 	vcmp.f32	s15, s14
 8002116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800211a:	d10e      	bne.n	800213a <LIS2DUXS12_ACC_Disable+0x5e>
  {
    if (LIS2DUXS12_ACC_SetOutputDataRate(pObj, 400.0f) != LIS2DUXS12_OK)
 800211c:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 800218c <LIS2DUXS12_ACC_Disable+0xb0>
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f94b 	bl	80023bc <LIS2DUXS12_ACC_SetOutputDataRate>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d002      	beq.n	8002132 <LIS2DUXS12_ACC_Disable+0x56>
    {
      return LIS2DUXS12_ERROR;
 800212c:	f04f 33ff 	mov.w	r3, #4294967295
 8002130:	e026      	b.n	8002180 <LIS2DUXS12_ACC_Disable+0xa4>
    }

    /* Wait for 3 ms based on datasheet */
    pObj->Ctx.mdelay(3);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002136:	2003      	movs	r0, #3
 8002138:	4798      	blx	r3
  }

  /* Output data rate selection - power down. */
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3320      	adds	r3, #32
 800213e:	f107 0208 	add.w	r2, r7, #8
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f000 ffa1 	bl	800308c <lis2duxs12_mode_get>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <LIS2DUXS12_ACC_Disable+0x7a>
  {
    return LIS2DUXS12_ERROR;
 8002150:	f04f 33ff 	mov.w	r3, #4294967295
 8002154:	e014      	b.n	8002180 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  mode.odr = LIS2DUXS12_OFF;
 8002156:	2300      	movs	r3, #0
 8002158:	723b      	strb	r3, [r7, #8]

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3320      	adds	r3, #32
 800215e:	f107 0208 	add.w	r2, r7, #8
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f000 fed5 	bl	8002f14 <lis2duxs12_mode_set>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d002      	beq.n	8002176 <LIS2DUXS12_ACC_Disable+0x9a>
  {
    return LIS2DUXS12_ERROR;
 8002170:	f04f 33ff 	mov.w	r3, #4294967295
 8002174:	e004      	b.n	8002180 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  pObj->acc_is_enabled = 0;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DUXS12_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	44480000 	.word	0x44480000
 800218c:	43c80000 	.word	0x43c80000

08002190 <LIS2DUXS12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetSensitivity(LIS2DUXS12_Object_t *pObj, float_t *Sensitivity)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3320      	adds	r3, #32
 80021a2:	f107 0208 	add.w	r2, r7, #8
 80021a6:	4611      	mov	r1, r2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 ff6f 	bl	800308c <lis2duxs12_mode_get>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <LIS2DUXS12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DUXS12_ERROR;
 80021b4:	f04f 33ff 	mov.w	r3, #4294967295
 80021b8:	e026      	b.n	8002208 <LIS2DUXS12_ACC_GetSensitivity+0x78>
  }

  switch (mode.fs)
 80021ba:	7a7b      	ldrb	r3, [r7, #9]
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d81b      	bhi.n	80021f8 <LIS2DUXS12_ACC_GetSensitivity+0x68>
 80021c0:	a201      	add	r2, pc, #4	@ (adr r2, 80021c8 <LIS2DUXS12_ACC_GetSensitivity+0x38>)
 80021c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c6:	bf00      	nop
 80021c8:	080021d9 	.word	0x080021d9
 80021cc:	080021e1 	.word	0x080021e1
 80021d0:	080021e9 	.word	0x080021e9
 80021d4:	080021f1 	.word	0x080021f1
  {
    case LIS2DUXS12_2g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_2G;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	4a0d      	ldr	r2, [pc, #52]	@ (8002210 <LIS2DUXS12_ACC_GetSensitivity+0x80>)
 80021dc:	601a      	str	r2, [r3, #0]
      break;
 80021de:	e012      	b.n	8002206 <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_4g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_4G;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002214 <LIS2DUXS12_ACC_GetSensitivity+0x84>)
 80021e4:	601a      	str	r2, [r3, #0]
      break;
 80021e6:	e00e      	b.n	8002206 <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_8g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_8G;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	4a0b      	ldr	r2, [pc, #44]	@ (8002218 <LIS2DUXS12_ACC_GetSensitivity+0x88>)
 80021ec:	601a      	str	r2, [r3, #0]
      break;
 80021ee:	e00a      	b.n	8002206 <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_16g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_16G;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	4a0a      	ldr	r2, [pc, #40]	@ (800221c <LIS2DUXS12_ACC_GetSensitivity+0x8c>)
 80021f4:	601a      	str	r2, [r3, #0]
      break;
 80021f6:	e006      	b.n	8002206 <LIS2DUXS12_ACC_GetSensitivity+0x76>

    default:
      *Sensitivity = -1.0f;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	4a09      	ldr	r2, [pc, #36]	@ (8002220 <LIS2DUXS12_ACC_GetSensitivity+0x90>)
 80021fc:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002202:	60fb      	str	r3, [r7, #12]
      break;
 8002204:	bf00      	nop
  }

  return ret;
 8002206:	68fb      	ldr	r3, [r7, #12]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	3d79db23 	.word	0x3d79db23
 8002214:	3df9db23 	.word	0x3df9db23
 8002218:	3e79db23 	.word	0x3e79db23
 800221c:	3ef9db23 	.word	0x3ef9db23
 8002220:	bf800000 	.word	0xbf800000

08002224 <LIS2DUXS12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetOutputDataRate(LIS2DUXS12_Object_t *pObj, float_t *Odr)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  /* Read actual output data rate from sensor. */
  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3320      	adds	r3, #32
 8002236:	f107 0208 	add.w	r2, r7, #8
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f000 ff25 	bl	800308c <lis2duxs12_mode_get>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <LIS2DUXS12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DUXS12_ERROR;
 8002248:	f04f 33ff 	mov.w	r3, #4294967295
 800224c:	e09b      	b.n	8002386 <LIS2DUXS12_ACC_GetOutputDataRate+0x162>
  }

  switch (mode.odr)
 800224e:	7a3b      	ldrb	r3, [r7, #8]
 8002250:	2b2f      	cmp	r3, #47	@ 0x2f
 8002252:	f200 8090 	bhi.w	8002376 <LIS2DUXS12_ACC_GetOutputDataRate+0x152>
 8002256:	a201      	add	r2, pc, #4	@ (adr r2, 800225c <LIS2DUXS12_ACC_GetOutputDataRate+0x38>)
 8002258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225c:	0800231d 	.word	0x0800231d
 8002260:	08002327 	.word	0x08002327
 8002264:	0800232f 	.word	0x0800232f
 8002268:	08002347 	.word	0x08002347
 800226c:	08002337 	.word	0x08002337
 8002270:	0800233f 	.word	0x0800233f
 8002274:	08002347 	.word	0x08002347
 8002278:	0800234f 	.word	0x0800234f
 800227c:	08002357 	.word	0x08002357
 8002280:	0800235f 	.word	0x0800235f
 8002284:	08002367 	.word	0x08002367
 8002288:	0800236f 	.word	0x0800236f
 800228c:	08002377 	.word	0x08002377
 8002290:	08002377 	.word	0x08002377
 8002294:	08002377 	.word	0x08002377
 8002298:	08002377 	.word	0x08002377
 800229c:	08002377 	.word	0x08002377
 80022a0:	08002377 	.word	0x08002377
 80022a4:	08002377 	.word	0x08002377
 80022a8:	08002377 	.word	0x08002377
 80022ac:	08002337 	.word	0x08002337
 80022b0:	0800233f 	.word	0x0800233f
 80022b4:	08002347 	.word	0x08002347
 80022b8:	0800234f 	.word	0x0800234f
 80022bc:	08002357 	.word	0x08002357
 80022c0:	0800235f 	.word	0x0800235f
 80022c4:	08002367 	.word	0x08002367
 80022c8:	0800236f 	.word	0x0800236f
 80022cc:	08002377 	.word	0x08002377
 80022d0:	08002377 	.word	0x08002377
 80022d4:	08002377 	.word	0x08002377
 80022d8:	08002377 	.word	0x08002377
 80022dc:	08002377 	.word	0x08002377
 80022e0:	08002377 	.word	0x08002377
 80022e4:	08002377 	.word	0x08002377
 80022e8:	08002377 	.word	0x08002377
 80022ec:	08002377 	.word	0x08002377
 80022f0:	08002377 	.word	0x08002377
 80022f4:	08002377 	.word	0x08002377
 80022f8:	08002377 	.word	0x08002377
 80022fc:	08002377 	.word	0x08002377
 8002300:	08002377 	.word	0x08002377
 8002304:	08002377 	.word	0x08002377
 8002308:	08002377 	.word	0x08002377
 800230c:	08002377 	.word	0x08002377
 8002310:	08002377 	.word	0x08002377
 8002314:	0800231d 	.word	0x0800231d
 8002318:	0800231d 	.word	0x0800231d
  {
    case LIS2DUXS12_OFF:
    case LIS2DUXS12_TRIG_PIN:
    case LIS2DUXS12_TRIG_SW:
      *Odr = 0.0f;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
      break;
 8002324:	e02e      	b.n	8002384 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_1Hz6_ULP:
      *Odr = 1.6f;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	4a19      	ldr	r2, [pc, #100]	@ (8002390 <LIS2DUXS12_ACC_GetOutputDataRate+0x16c>)
 800232a:	601a      	str	r2, [r3, #0]
      break;
 800232c:	e02a      	b.n	8002384 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_3Hz_ULP:
      *Odr = 3.0f;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	4a18      	ldr	r2, [pc, #96]	@ (8002394 <LIS2DUXS12_ACC_GetOutputDataRate+0x170>)
 8002332:	601a      	str	r2, [r3, #0]
      break;
 8002334:	e026      	b.n	8002384 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_6Hz_LP:
    case LIS2DUXS12_6Hz_HP:
      *Odr = 6.0f;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	4a17      	ldr	r2, [pc, #92]	@ (8002398 <LIS2DUXS12_ACC_GetOutputDataRate+0x174>)
 800233a:	601a      	str	r2, [r3, #0]
      break;
 800233c:	e022      	b.n	8002384 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_12Hz5_LP:
    case LIS2DUXS12_12Hz5_HP:
      *Odr = 12.5f;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	4a16      	ldr	r2, [pc, #88]	@ (800239c <LIS2DUXS12_ACC_GetOutputDataRate+0x178>)
 8002342:	601a      	str	r2, [r3, #0]
      break;
 8002344:	e01e      	b.n	8002384 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_25Hz_ULP:
    case LIS2DUXS12_25Hz_LP:
    case LIS2DUXS12_25Hz_HP:
      *Odr = 25.0f;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	4a15      	ldr	r2, [pc, #84]	@ (80023a0 <LIS2DUXS12_ACC_GetOutputDataRate+0x17c>)
 800234a:	601a      	str	r2, [r3, #0]
      break;
 800234c:	e01a      	b.n	8002384 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_50Hz_LP:
    case LIS2DUXS12_50Hz_HP:
      *Odr = 50.0f;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	4a14      	ldr	r2, [pc, #80]	@ (80023a4 <LIS2DUXS12_ACC_GetOutputDataRate+0x180>)
 8002352:	601a      	str	r2, [r3, #0]
      break;
 8002354:	e016      	b.n	8002384 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_100Hz_LP:
    case LIS2DUXS12_100Hz_HP:
      *Odr = 100.0f;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	4a13      	ldr	r2, [pc, #76]	@ (80023a8 <LIS2DUXS12_ACC_GetOutputDataRate+0x184>)
 800235a:	601a      	str	r2, [r3, #0]
      break;
 800235c:	e012      	b.n	8002384 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_200Hz_LP:
    case LIS2DUXS12_200Hz_HP:
      *Odr = 200.0f;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	4a12      	ldr	r2, [pc, #72]	@ (80023ac <LIS2DUXS12_ACC_GetOutputDataRate+0x188>)
 8002362:	601a      	str	r2, [r3, #0]
      break;
 8002364:	e00e      	b.n	8002384 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_400Hz_LP:
    case LIS2DUXS12_400Hz_HP:
      *Odr = 400.0f;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	4a11      	ldr	r2, [pc, #68]	@ (80023b0 <LIS2DUXS12_ACC_GetOutputDataRate+0x18c>)
 800236a:	601a      	str	r2, [r3, #0]
      break;
 800236c:	e00a      	b.n	8002384 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_800Hz_LP:
    case LIS2DUXS12_800Hz_HP:
      *Odr = 800.0f;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	4a10      	ldr	r2, [pc, #64]	@ (80023b4 <LIS2DUXS12_ACC_GetOutputDataRate+0x190>)
 8002372:	601a      	str	r2, [r3, #0]
      break;
 8002374:	e006      	b.n	8002384 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    default:
      *Odr = -1.0f;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	4a0f      	ldr	r2, [pc, #60]	@ (80023b8 <LIS2DUXS12_ACC_GetOutputDataRate+0x194>)
 800237a:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 800237c:	f04f 33ff 	mov.w	r3, #4294967295
 8002380:	60fb      	str	r3, [r7, #12]
      break;
 8002382:	bf00      	nop
  }

  return ret;
 8002384:	68fb      	ldr	r3, [r7, #12]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	3fcccccd 	.word	0x3fcccccd
 8002394:	40400000 	.word	0x40400000
 8002398:	40c00000 	.word	0x40c00000
 800239c:	41480000 	.word	0x41480000
 80023a0:	41c80000 	.word	0x41c80000
 80023a4:	42480000 	.word	0x42480000
 80023a8:	42c80000 	.word	0x42c80000
 80023ac:	43480000 	.word	0x43480000
 80023b0:	43c80000 	.word	0x43c80000
 80023b4:	44480000 	.word	0x44480000
 80023b8:	bf800000 	.word	0xbf800000

080023bc <LIS2DUXS12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetOutputDataRate(LIS2DUXS12_Object_t *pObj, float_t Odr)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use high performance mode */
  return LIS2DUXS12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DUXS12_HIGH_PERFORMANCE);
 80023c8:	2102      	movs	r1, #2
 80023ca:	ed97 0a00 	vldr	s0, [r7]
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f805 	bl	80023de <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode>
 80023d4:	4603      	mov	r3, r0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Odr the output data rate value to be set
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetOutputDataRate_With_Mode(LIS2DUXS12_Object_t *pObj, float_t Odr, LIS2DUXS12_Power_Mode_t Power)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	ed87 0a02 	vstr	s0, [r7, #8]
 80023ea:	460b      	mov	r3, r1
 80023ec:	71fb      	strb	r3, [r7, #7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d108      	bne.n	800240a <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode+0x2c>
  {
    return LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Power);
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	4619      	mov	r1, r3
 80023fc:	ed97 0a02 	vldr	s0, [r7, #8]
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 f937 	bl	8002674 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>
 8002406:	4603      	mov	r3, r0
 8002408:	e007      	b.n	800241a <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode+0x3c>
  }
  else
  {
    return LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Power);
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	4619      	mov	r1, r3
 800240e:	ed97 0a02 	vldr	s0, [r7, #8]
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 faac 	bl	8002970 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled>
 8002418:	4603      	mov	r3, r0
  }
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <LIS2DUXS12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetFullScale(LIS2DUXS12_Object_t *pObj, int32_t *FullScale)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3320      	adds	r3, #32
 8002436:	f107 0208 	add.w	r2, r7, #8
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f000 fe25 	bl	800308c <lis2duxs12_mode_get>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d002      	beq.n	800244e <LIS2DUXS12_ACC_GetFullScale+0x2a>
  {
    return LIS2DUXS12_ERROR;
 8002448:	f04f 33ff 	mov.w	r3, #4294967295
 800244c:	e027      	b.n	800249e <LIS2DUXS12_ACC_GetFullScale+0x7a>
  }

  switch (mode.fs)
 800244e:	7a7b      	ldrb	r3, [r7, #9]
 8002450:	2b03      	cmp	r3, #3
 8002452:	d81b      	bhi.n	800248c <LIS2DUXS12_ACC_GetFullScale+0x68>
 8002454:	a201      	add	r2, pc, #4	@ (adr r2, 800245c <LIS2DUXS12_ACC_GetFullScale+0x38>)
 8002456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245a:	bf00      	nop
 800245c:	0800246d 	.word	0x0800246d
 8002460:	08002475 	.word	0x08002475
 8002464:	0800247d 	.word	0x0800247d
 8002468:	08002485 	.word	0x08002485
  {
    case LIS2DUXS12_2g:
      *FullScale =  2;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	2202      	movs	r2, #2
 8002470:	601a      	str	r2, [r3, #0]
      break;
 8002472:	e013      	b.n	800249c <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_4g:
      *FullScale =  4;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	2204      	movs	r2, #4
 8002478:	601a      	str	r2, [r3, #0]
      break;
 800247a:	e00f      	b.n	800249c <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_8g:
      *FullScale =  8;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2208      	movs	r2, #8
 8002480:	601a      	str	r2, [r3, #0]
      break;
 8002482:	e00b      	b.n	800249c <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_16g:
      *FullScale = 16;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2210      	movs	r2, #16
 8002488:	601a      	str	r2, [r3, #0]
      break;
 800248a:	e007      	b.n	800249c <LIS2DUXS12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	f04f 32ff 	mov.w	r2, #4294967295
 8002492:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 8002494:	f04f 33ff 	mov.w	r3, #4294967295
 8002498:	60fb      	str	r3, [r7, #12]
      break;
 800249a:	bf00      	nop
  }

  return ret;
 800249c:	68fb      	ldr	r3, [r7, #12]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop

080024a8 <LIS2DUXS12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetFullScale(LIS2DUXS12_Object_t *pObj, int32_t FullScale)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3320      	adds	r3, #32
 80024b6:	f107 020c 	add.w	r2, r7, #12
 80024ba:	4611      	mov	r1, r2
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 fde5 	bl	800308c <lis2duxs12_mode_get>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d002      	beq.n	80024ce <LIS2DUXS12_ACC_SetFullScale+0x26>
  {
    return LIS2DUXS12_ERROR;
 80024c8:	f04f 33ff 	mov.w	r3, #4294967295
 80024cc:	e01f      	b.n	800250e <LIS2DUXS12_ACC_SetFullScale+0x66>
  }

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  mode.fs = (FullScale <= 2) ? LIS2DUXS12_2g
            : (FullScale <= 4) ? LIS2DUXS12_4g
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	dd0b      	ble.n	80024ec <LIS2DUXS12_ACC_SetFullScale+0x44>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	dd06      	ble.n	80024e8 <LIS2DUXS12_ACC_SetFullScale+0x40>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	2b08      	cmp	r3, #8
 80024de:	dc01      	bgt.n	80024e4 <LIS2DUXS12_ACC_SetFullScale+0x3c>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e004      	b.n	80024ee <LIS2DUXS12_ACC_SetFullScale+0x46>
 80024e4:	2303      	movs	r3, #3
 80024e6:	e002      	b.n	80024ee <LIS2DUXS12_ACC_SetFullScale+0x46>
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <LIS2DUXS12_ACC_SetFullScale+0x46>
 80024ec:	2300      	movs	r3, #0
  mode.fs = (FullScale <= 2) ? LIS2DUXS12_2g
 80024ee:	737b      	strb	r3, [r7, #13]
            : (FullScale <= 8) ? LIS2DUXS12_8g
            :                    LIS2DUXS12_16g;

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3320      	adds	r3, #32
 80024f4:	f107 020c 	add.w	r2, r7, #12
 80024f8:	4611      	mov	r1, r2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 fd0a 	bl	8002f14 <lis2duxs12_mode_set>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d002      	beq.n	800250c <LIS2DUXS12_ACC_SetFullScale+0x64>
  {
    return LIS2DUXS12_ERROR;
 8002506:	f04f 33ff 	mov.w	r3, #4294967295
 800250a:	e000      	b.n	800250e <LIS2DUXS12_ACC_SetFullScale+0x66>
  }

  return LIS2DUXS12_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <LIS2DUXS12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetAxesRaw(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_AxesRaw_t *Value)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b088      	sub	sp, #32
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;
  lis2duxs12_xl_data_t data;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3320      	adds	r3, #32
 8002524:	f107 021c 	add.w	r2, r7, #28
 8002528:	4611      	mov	r1, r2
 800252a:	4618      	mov	r0, r3
 800252c:	f000 fdae 	bl	800308c <lis2duxs12_mode_get>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <LIS2DUXS12_ACC_GetAxesRaw+0x26>
  {
    return LIS2DUXS12_ERROR;
 8002536:	f04f 33ff 	mov.w	r3, #4294967295
 800253a:	e01b      	b.n	8002574 <LIS2DUXS12_ACC_GetAxesRaw+0x5e>
  }

  if (lis2duxs12_xl_data_get(&(pObj->Ctx), &mode, &data) != LIS2DUXS12_OK)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3320      	adds	r3, #32
 8002540:	f107 0208 	add.w	r2, r7, #8
 8002544:	f107 011c 	add.w	r1, r7, #28
 8002548:	4618      	mov	r0, r3
 800254a:	f000 fecf 	bl	80032ec <lis2duxs12_xl_data_get>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d002      	beq.n	800255a <LIS2DUXS12_ACC_GetAxesRaw+0x44>
  {
    return LIS2DUXS12_ERROR;
 8002554:	f04f 33ff 	mov.w	r3, #4294967295
 8002558:	e00c      	b.n	8002574 <LIS2DUXS12_ACC_GetAxesRaw+0x5e>
  }

  Value->x = data.raw[0];
 800255a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	801a      	strh	r2, [r3, #0]
  Value->y = data.raw[1];
 8002562:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	805a      	strh	r2, [r3, #2]
  Value->z = data.raw[2];
 800256a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	809a      	strh	r2, [r3, #4]

  return LIS2DUXS12_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3720      	adds	r7, #32
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <LIS2DUXS12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetAxes(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_Axes_t *Acceleration)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;
  lis2duxs12_xl_data_t data;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3320      	adds	r3, #32
 800258a:	f107 021c 	add.w	r2, r7, #28
 800258e:	4611      	mov	r1, r2
 8002590:	4618      	mov	r0, r3
 8002592:	f000 fd7b 	bl	800308c <lis2duxs12_mode_get>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d002      	beq.n	80025a2 <LIS2DUXS12_ACC_GetAxes+0x26>
  {
    return LIS2DUXS12_ERROR;
 800259c:	f04f 33ff 	mov.w	r3, #4294967295
 80025a0:	e027      	b.n	80025f2 <LIS2DUXS12_ACC_GetAxes+0x76>
  }

  if (lis2duxs12_xl_data_get(&(pObj->Ctx), &mode, &data) != LIS2DUXS12_OK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3320      	adds	r3, #32
 80025a6:	f107 0208 	add.w	r2, r7, #8
 80025aa:	f107 011c 	add.w	r1, r7, #28
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 fe9c 	bl	80032ec <lis2duxs12_xl_data_get>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <LIS2DUXS12_ACC_GetAxes+0x44>
  {
    return LIS2DUXS12_ERROR;
 80025ba:	f04f 33ff 	mov.w	r3, #4294967295
 80025be:	e018      	b.n	80025f2 <LIS2DUXS12_ACC_GetAxes+0x76>
  }

  Acceleration->x = (int32_t)data.mg[0];
 80025c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80025c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025c8:	ee17 2a90 	vmov	r2, s15
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)data.mg[1];
 80025d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80025d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025d8:	ee17 2a90 	vmov	r2, s15
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)data.mg[2];
 80025e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80025e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025e8:	ee17 2a90 	vmov	r2, s15
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	609a      	str	r2, [r3, #8]

  return LIS2DUXS12_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3720      	adds	r7, #32
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <LIS2DUXS12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Write_Reg(LIS2DUXS12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	460b      	mov	r3, r1
 8002604:	70fb      	strb	r3, [r7, #3]
 8002606:	4613      	mov	r3, r2
 8002608:	70bb      	strb	r3, [r7, #2]
  if (lis2duxs12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DUXS12_OK)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f103 0020 	add.w	r0, r3, #32
 8002610:	1cba      	adds	r2, r7, #2
 8002612:	78f9      	ldrb	r1, [r7, #3]
 8002614:	2301      	movs	r3, #1
 8002616:	f000 faa0 	bl	8002b5a <lis2duxs12_write_reg>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d002      	beq.n	8002626 <LIS2DUXS12_Write_Reg+0x2c>
  {
    return LIS2DUXS12_ERROR;
 8002620:	f04f 33ff 	mov.w	r3, #4294967295
 8002624:	e000      	b.n	8002628 <LIS2DUXS12_Write_Reg+0x2e>
  }

  return LIS2DUXS12_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <LIS2DUXS12_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LIS2DUXS12_MAIN_MEM_BANK, 1 - LIS2DUXS12_EMBED_FUNC_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Set_Mem_Bank(LIS2DUXS12_Object_t *pObj, uint8_t Val)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LIS2DUXS12_OK;
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
  lis2duxs12_mem_bank_t reg;

  reg = (Val == 1U) ? LIS2DUXS12_EMBED_FUNC_MEM_BANK
        :               LIS2DUXS12_MAIN_MEM_BANK;
 8002640:	78fb      	ldrb	r3, [r7, #3]
 8002642:	2b01      	cmp	r3, #1
 8002644:	bf0c      	ite	eq
 8002646:	2301      	moveq	r3, #1
 8002648:	2300      	movne	r3, #0
 800264a:	b2db      	uxtb	r3, r3
  reg = (Val == 1U) ? LIS2DUXS12_EMBED_FUNC_MEM_BANK
 800264c:	72fb      	strb	r3, [r7, #11]

  if (lis2duxs12_mem_bank_set(&(pObj->Ctx), reg) != LIS2DUXS12_OK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3320      	adds	r3, #32
 8002652:	7afa      	ldrb	r2, [r7, #11]
 8002654:	4611      	mov	r1, r2
 8002656:	4618      	mov	r0, r3
 8002658:	f000 ff6b 	bl	8003532 <lis2duxs12_mem_bank_set>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d002      	beq.n	8002668 <LIS2DUXS12_Set_Mem_Bank+0x38>
  {
    ret = LIS2DUXS12_ERROR;
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
 8002666:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002668:	68fb      	ldr	r3, [r7, #12]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(LIS2DUXS12_Object_t *pObj, float_t Odr,
    LIS2DUXS12_Power_Mode_t Power)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002680:	460b      	mov	r3, r1
 8002682:	71fb      	strb	r3, [r7, #7]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	3320      	adds	r3, #32
 8002688:	f107 0214 	add.w	r2, r7, #20
 800268c:	4611      	mov	r1, r2
 800268e:	4618      	mov	r0, r3
 8002690:	f000 fcfc 	bl	800308c <lis2duxs12_mode_get>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c>
  {
    return LIS2DUXS12_ERROR;
 800269a:	f04f 33ff 	mov.w	r3, #4294967295
 800269e:	e142      	b.n	8002926 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  if (Power == LIS2DUXS12_ULTRA_LOW_POWER)
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d118      	bne.n	80026d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x64>
  {
    mode.odr = (Odr <= 1.6f) ? LIS2DUXS12_1Hz6_ULP
               : (Odr <= 3.0f) ? LIS2DUXS12_3Hz_ULP
 80026a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80026aa:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8002930 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2bc>
 80026ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b6:	d801      	bhi.n	80026bc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x48>
 80026b8:	2301      	movs	r3, #1
 80026ba:	e00b      	b.n	80026d4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x60>
 80026bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80026c0:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80026c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026cc:	d801      	bhi.n	80026d2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x5e>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e000      	b.n	80026d4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x60>
 80026d2:	2303      	movs	r3, #3
    mode.odr = (Odr <= 1.6f) ? LIS2DUXS12_1Hz6_ULP
 80026d4:	753b      	strb	r3, [r7, #20]
 80026d6:	e0a4      	b.n	8002822 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
               :                 LIS2DUXS12_25Hz_ULP;
  }
  else if (Power == LIS2DUXS12_LOW_POWER)
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d14f      	bne.n	800277e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x10a>
  {
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_LP
               : (Odr <=  12.5f) ? LIS2DUXS12_12Hz5_LP
 80026de:	edd7 7a02 	vldr	s15, [r7, #8]
 80026e2:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80026e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ee:	d801      	bhi.n	80026f4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x80>
 80026f0:	2304      	movs	r3, #4
 80026f2:	e042      	b.n	800277a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80026f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80026f8:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80026fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002704:	d801      	bhi.n	800270a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x96>
 8002706:	2305      	movs	r3, #5
 8002708:	e037      	b.n	800277a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 800270a:	edd7 7a02 	vldr	s15, [r7, #8]
 800270e:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8002712:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271a:	d801      	bhi.n	8002720 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xac>
 800271c:	2306      	movs	r3, #6
 800271e:	e02c      	b.n	800277a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8002720:	edd7 7a02 	vldr	s15, [r7, #8]
 8002724:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8002934 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c0>
 8002728:	eef4 7ac7 	vcmpe.f32	s15, s14
 800272c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002730:	d801      	bhi.n	8002736 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xc2>
 8002732:	2307      	movs	r3, #7
 8002734:	e021      	b.n	800277a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8002736:	edd7 7a02 	vldr	s15, [r7, #8]
 800273a:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8002938 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c4>
 800273e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002746:	d801      	bhi.n	800274c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8002748:	2308      	movs	r3, #8
 800274a:	e016      	b.n	800277a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 800274c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002750:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 800293c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c8>
 8002754:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275c:	d801      	bhi.n	8002762 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xee>
 800275e:	2309      	movs	r3, #9
 8002760:	e00b      	b.n	800277a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8002762:	edd7 7a02 	vldr	s15, [r7, #8]
 8002766:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8002940 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2cc>
 800276a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800276e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002772:	d801      	bhi.n	8002778 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x104>
 8002774:	230a      	movs	r3, #10
 8002776:	e000      	b.n	800277a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8002778:	230b      	movs	r3, #11
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_LP
 800277a:	753b      	strb	r3, [r7, #20]
 800277c:	e051      	b.n	8002822 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
               : (Odr <= 100.0f) ? LIS2DUXS12_100Hz_LP
               : (Odr <= 200.0f) ? LIS2DUXS12_200Hz_LP
               : (Odr <= 400.0f) ? LIS2DUXS12_400Hz_LP
               :                   LIS2DUXS12_800Hz_LP;
  }
  else if (Power == LIS2DUXS12_HIGH_PERFORMANCE)
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	2b02      	cmp	r3, #2
 8002782:	d14e      	bne.n	8002822 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
  {
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_HP
               : (Odr <=  12.5f) ? LIS2DUXS12_12Hz5_HP
 8002784:	edd7 7a02 	vldr	s15, [r7, #8]
 8002788:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 800278c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002794:	d801      	bhi.n	800279a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8002796:	2314      	movs	r3, #20
 8002798:	e042      	b.n	8002820 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 800279a:	edd7 7a02 	vldr	s15, [r7, #8]
 800279e:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80027a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027aa:	d801      	bhi.n	80027b0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 80027ac:	2315      	movs	r3, #21
 80027ae:	e037      	b.n	8002820 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 80027b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80027b4:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80027b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c0:	d801      	bhi.n	80027c6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x152>
 80027c2:	2316      	movs	r3, #22
 80027c4:	e02c      	b.n	8002820 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 80027c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80027ca:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002934 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c0>
 80027ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d6:	d801      	bhi.n	80027dc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x168>
 80027d8:	2317      	movs	r3, #23
 80027da:	e021      	b.n	8002820 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 80027dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80027e0:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8002938 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c4>
 80027e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ec:	d801      	bhi.n	80027f2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 80027ee:	2318      	movs	r3, #24
 80027f0:	e016      	b.n	8002820 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 80027f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80027f6:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800293c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c8>
 80027fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002802:	d801      	bhi.n	8002808 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8002804:	2319      	movs	r3, #25
 8002806:	e00b      	b.n	8002820 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8002808:	edd7 7a02 	vldr	s15, [r7, #8]
 800280c:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8002940 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2cc>
 8002810:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002818:	d801      	bhi.n	800281e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 800281a:	231a      	movs	r3, #26
 800281c:	e000      	b.n	8002820 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 800281e:	231b      	movs	r3, #27
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_HP
 8002820:	753b      	strb	r3, [r7, #20]
  else
  {
    /* Do nothing */
  }

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	3320      	adds	r3, #32
 8002826:	f107 0214 	add.w	r2, r7, #20
 800282a:	4611      	mov	r1, r2
 800282c:	4618      	mov	r0, r3
 800282e:	f000 fb71 	bl	8002f14 <lis2duxs12_mode_set>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d002      	beq.n	800283e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ca>
  {
    return LIS2DUXS12_ERROR;
 8002838:	f04f 33ff 	mov.w	r3, #4294967295
 800283c:	e073      	b.n	8002926 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  /* Store the current Odr value */
  pObj->acc_odr = (mode.odr == LIS2DUXS12_1Hz6_ULP) ?   1.6f
 800283e:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_3Hz_ULP)  ?   3.0f
 8002840:	2b01      	cmp	r3, #1
 8002842:	d05b      	beq.n	80028fc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x288>
 8002844:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_6Hz_LP)   ?   6.0f
 8002846:	2b02      	cmp	r3, #2
 8002848:	d056      	beq.n	80028f8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x284>
 800284a:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_6Hz_HP)   ?   6.0f
 800284c:	2b04      	cmp	r3, #4
 800284e:	d051      	beq.n	80028f4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x280>
 8002850:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_12Hz5_LP) ?  12.5f
 8002852:	2b14      	cmp	r3, #20
 8002854:	d04c      	beq.n	80028f0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x27c>
 8002856:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_12Hz5_HP) ?  12.5f
 8002858:	2b05      	cmp	r3, #5
 800285a:	d047      	beq.n	80028ec <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x278>
 800285c:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_ULP) ?  25.0f
 800285e:	2b15      	cmp	r3, #21
 8002860:	d042      	beq.n	80028e8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x274>
 8002862:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_LP)  ?  25.0f
 8002864:	2b03      	cmp	r3, #3
 8002866:	d03d      	beq.n	80028e4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x270>
 8002868:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_HP)  ?  25.0f
 800286a:	2b06      	cmp	r3, #6
 800286c:	d038      	beq.n	80028e0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x26c>
 800286e:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_50Hz_LP)  ?  50.0f
 8002870:	2b16      	cmp	r3, #22
 8002872:	d033      	beq.n	80028dc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x268>
 8002874:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_50Hz_HP)  ?  50.0f
 8002876:	2b07      	cmp	r3, #7
 8002878:	d02e      	beq.n	80028d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x264>
 800287a:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_100Hz_LP) ? 100.0f
 800287c:	2b17      	cmp	r3, #23
 800287e:	d029      	beq.n	80028d4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x260>
 8002880:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_100Hz_HP) ? 100.0f
 8002882:	2b08      	cmp	r3, #8
 8002884:	d024      	beq.n	80028d0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x25c>
 8002886:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_200Hz_LP) ? 200.0f
 8002888:	2b18      	cmp	r3, #24
 800288a:	d01f      	beq.n	80028cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x258>
 800288c:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_200Hz_HP) ? 200.0f
 800288e:	2b09      	cmp	r3, #9
 8002890:	d01a      	beq.n	80028c8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x254>
 8002892:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_400Hz_LP) ? 400.0f
 8002894:	2b19      	cmp	r3, #25
 8002896:	d015      	beq.n	80028c4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x250>
 8002898:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_400Hz_HP) ? 400.0f
 800289a:	2b0a      	cmp	r3, #10
 800289c:	d010      	beq.n	80028c0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x24c>
 800289e:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_800Hz_LP) ? 800.0f
 80028a0:	2b1a      	cmp	r3, #26
 80028a2:	d00b      	beq.n	80028bc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x248>
 80028a4:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_800Hz_HP) ? 800.0f
 80028a6:	2b0b      	cmp	r3, #11
 80028a8:	d006      	beq.n	80028b8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x244>
 80028aa:	7d3b      	ldrb	r3, [r7, #20]
                  :                                     -1.0f;
 80028ac:	2b1b      	cmp	r3, #27
 80028ae:	d101      	bne.n	80028b4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x240>
 80028b0:	4b24      	ldr	r3, [pc, #144]	@ (8002944 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d0>)
 80028b2:	e024      	b.n	80028fe <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 80028b4:	4b24      	ldr	r3, [pc, #144]	@ (8002948 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d4>)
 80028b6:	e022      	b.n	80028fe <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_800Hz_HP) ? 800.0f
 80028b8:	4b22      	ldr	r3, [pc, #136]	@ (8002944 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d0>)
 80028ba:	e020      	b.n	80028fe <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_800Hz_LP) ? 800.0f
 80028bc:	4b23      	ldr	r3, [pc, #140]	@ (800294c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d8>)
 80028be:	e01e      	b.n	80028fe <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_400Hz_HP) ? 400.0f
 80028c0:	4b22      	ldr	r3, [pc, #136]	@ (800294c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d8>)
 80028c2:	e01c      	b.n	80028fe <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_400Hz_LP) ? 400.0f
 80028c4:	4b22      	ldr	r3, [pc, #136]	@ (8002950 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2dc>)
 80028c6:	e01a      	b.n	80028fe <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_200Hz_HP) ? 200.0f
 80028c8:	4b21      	ldr	r3, [pc, #132]	@ (8002950 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2dc>)
 80028ca:	e018      	b.n	80028fe <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_200Hz_LP) ? 200.0f
 80028cc:	4b21      	ldr	r3, [pc, #132]	@ (8002954 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e0>)
 80028ce:	e016      	b.n	80028fe <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_100Hz_HP) ? 100.0f
 80028d0:	4b20      	ldr	r3, [pc, #128]	@ (8002954 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e0>)
 80028d2:	e014      	b.n	80028fe <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_100Hz_LP) ? 100.0f
 80028d4:	4b20      	ldr	r3, [pc, #128]	@ (8002958 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e4>)
 80028d6:	e012      	b.n	80028fe <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_50Hz_HP)  ?  50.0f
 80028d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002958 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e4>)
 80028da:	e010      	b.n	80028fe <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_50Hz_LP)  ?  50.0f
 80028dc:	4b1f      	ldr	r3, [pc, #124]	@ (800295c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 80028de:	e00e      	b.n	80028fe <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_HP)  ?  25.0f
 80028e0:	4b1e      	ldr	r3, [pc, #120]	@ (800295c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 80028e2:	e00c      	b.n	80028fe <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_LP)  ?  25.0f
 80028e4:	4b1d      	ldr	r3, [pc, #116]	@ (800295c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 80028e6:	e00a      	b.n	80028fe <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_ULP) ?  25.0f
 80028e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002960 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2ec>)
 80028ea:	e008      	b.n	80028fe <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_12Hz5_HP) ?  12.5f
 80028ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002960 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2ec>)
 80028ee:	e006      	b.n	80028fe <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_12Hz5_LP) ?  12.5f
 80028f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002964 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f0>)
 80028f2:	e004      	b.n	80028fe <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_6Hz_HP)   ?   6.0f
 80028f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002964 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f0>)
 80028f6:	e002      	b.n	80028fe <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_6Hz_LP)   ?   6.0f
 80028f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002968 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f4>)
 80028fa:	e000      	b.n	80028fe <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_3Hz_ULP)  ?   3.0f
 80028fc:	4b1b      	ldr	r3, [pc, #108]	@ (800296c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f8>)
  pObj->acc_odr = (mode.odr == LIS2DUXS12_1Hz6_ULP) ?   1.6f
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	6353      	str	r3, [r2, #52]	@ 0x34

  if (pObj->acc_odr == -1.0f)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002908:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800290c:	eef4 7a47 	vcmp.f32	s15, s14
 8002910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002914:	d102      	bne.n	800291c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2a8>
  {
    return LIS2DUXS12_ERROR;
 8002916:	f04f 33ff 	mov.w	r3, #4294967295
 800291a:	e004      	b.n	8002926 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  /* Store the current Power value */
  pObj->power_mode = Power;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	79fa      	ldrb	r2, [r7, #7]
 8002920:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return LIS2DUXS12_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	3fcccccd 	.word	0x3fcccccd
 8002934:	42480000 	.word	0x42480000
 8002938:	42c80000 	.word	0x42c80000
 800293c:	43480000 	.word	0x43480000
 8002940:	43c80000 	.word	0x43c80000
 8002944:	44480000 	.word	0x44480000
 8002948:	bf800000 	.word	0xbf800000
 800294c:	43c80000 	.word	0x43c80000
 8002950:	43480000 	.word	0x43480000
 8002954:	42c80000 	.word	0x42c80000
 8002958:	42480000 	.word	0x42480000
 800295c:	41c80000 	.word	0x41c80000
 8002960:	41480000 	.word	0x41480000
 8002964:	40c00000 	.word	0x40c00000
 8002968:	40400000 	.word	0x40400000
 800296c:	3fcccccd 	.word	0x3fcccccd

08002970 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled(LIS2DUXS12_Object_t *pObj, float_t Odr,
    LIS2DUXS12_Power_Mode_t Power)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	ed87 0a02 	vstr	s0, [r7, #8]
 800297c:	460b      	mov	r3, r1
 800297e:	71fb      	strb	r3, [r7, #7]
  /* Store the new Odr value */
  if (Power == LIS2DUXS12_ULTRA_LOW_POWER)
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d11a      	bne.n	80029bc <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x4c>
  {
    pObj->acc_odr = (Odr <= 1.5f) ? 1.5f
                    : (Odr <= 3.0f) ? 3.0f
 8002986:	edd7 7a02 	vldr	s15, [r7, #8]
 800298a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800298e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002996:	d802      	bhi.n	800299e <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x2e>
 8002998:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800299c:	e00b      	b.n	80029b6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x46>
                    :                25.0f;
 800299e:	edd7 7a02 	vldr	s15, [r7, #8]
 80029a2:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80029a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ae:	d801      	bhi.n	80029b4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x44>
 80029b0:	4b33      	ldr	r3, [pc, #204]	@ (8002a80 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x110>)
 80029b2:	e000      	b.n	80029b6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x46>
 80029b4:	4b33      	ldr	r3, [pc, #204]	@ (8002a84 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x114>)
    pObj->acc_odr = (Odr <= 1.5f) ? 1.5f
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	6353      	str	r3, [r2, #52]	@ 0x34
 80029ba:	e055      	b.n	8002a68 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf8>
  }
  else if ((Power == LIS2DUXS12_LOW_POWER) || (Power == LIS2DUXS12_HIGH_PERFORMANCE))
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d002      	beq.n	80029c8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x58>
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d14f      	bne.n	8002a68 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf8>
  {
    pObj->acc_odr = (Odr <=   6.0f) ?   6.0f
                    : (Odr <=  12.5f) ?  12.5f
 80029c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80029cc:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80029d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d8:	d801      	bhi.n	80029de <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x6e>
 80029da:	4b2b      	ldr	r3, [pc, #172]	@ (8002a88 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x118>)
 80029dc:	e042      	b.n	8002a64 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <=  25.0f) ?  25.0f
 80029de:	edd7 7a02 	vldr	s15, [r7, #8]
 80029e2:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80029e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ee:	d801      	bhi.n	80029f4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x84>
 80029f0:	4b26      	ldr	r3, [pc, #152]	@ (8002a8c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 80029f2:	e037      	b.n	8002a64 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <=  50.0f) ?  50.0f
 80029f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80029f8:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80029fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a04:	d801      	bhi.n	8002a0a <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x9a>
 8002a06:	4b1f      	ldr	r3, [pc, #124]	@ (8002a84 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8002a08:	e02c      	b.n	8002a64 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 100.0f) ? 100.0f
 8002a0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a0e:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8002a90 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x120>
 8002a12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a1a:	d801      	bhi.n	8002a20 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8002a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a94 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x124>)
 8002a1e:	e021      	b.n	8002a64 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 200.0f) ? 200.0f
 8002a20:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a24:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8002a98 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x128>
 8002a28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a30:	d801      	bhi.n	8002a36 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xc6>
 8002a32:	4b1a      	ldr	r3, [pc, #104]	@ (8002a9c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x12c>)
 8002a34:	e016      	b.n	8002a64 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 400.0f) ? 400.0f
 8002a36:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a3a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002aa0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x130>
 8002a3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a46:	d801      	bhi.n	8002a4c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xdc>
 8002a48:	4b16      	ldr	r3, [pc, #88]	@ (8002aa4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x134>)
 8002a4a:	e00b      	b.n	8002a64 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    :                   800.0f;
 8002a4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a50:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002aa8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x138>
 8002a54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5c:	d801      	bhi.n	8002a62 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf2>
 8002a5e:	4b13      	ldr	r3, [pc, #76]	@ (8002aac <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x13c>)
 8002a60:	e000      	b.n	8002a64 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8002a62:	4b13      	ldr	r3, [pc, #76]	@ (8002ab0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x140>)
    pObj->acc_odr = (Odr <=   6.0f) ?   6.0f
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	6353      	str	r3, [r2, #52]	@ 0x34
  {
    /* Do nothing */
  }

  /* Store the new Power value */
  pObj->power_mode = Power;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	79fa      	ldrb	r2, [r7, #7]
 8002a6c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return LIS2DUXS12_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40400000 	.word	0x40400000
 8002a84:	41c80000 	.word	0x41c80000
 8002a88:	40c00000 	.word	0x40c00000
 8002a8c:	41480000 	.word	0x41480000
 8002a90:	42480000 	.word	0x42480000
 8002a94:	42480000 	.word	0x42480000
 8002a98:	42c80000 	.word	0x42c80000
 8002a9c:	42c80000 	.word	0x42c80000
 8002aa0:	43480000 	.word	0x43480000
 8002aa4:	43480000 	.word	0x43480000
 8002aa8:	43c80000 	.word	0x43c80000
 8002aac:	43c80000 	.word	0x43c80000
 8002ab0:	44480000 	.word	0x44480000

08002ab4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002ab4:	b590      	push	{r4, r7, lr}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	607a      	str	r2, [r7, #4]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	72fb      	strb	r3, [r7, #11]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	813b      	strh	r3, [r7, #8]
  LIS2DUXS12_Object_t *pObj = (LIS2DUXS12_Object_t *)Handle;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	695c      	ldr	r4, [r3, #20]
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	7b1b      	ldrb	r3, [r3, #12]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	7afb      	ldrb	r3, [r7, #11]
 8002ad8:	b299      	uxth	r1, r3
 8002ada:	893b      	ldrh	r3, [r7, #8]
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	47a0      	blx	r4
 8002ae0:	4603      	mov	r3, r0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	371c      	adds	r7, #28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd90      	pop	{r4, r7, pc}

08002aea <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002aea:	b590      	push	{r4, r7, lr}
 8002aec:	b087      	sub	sp, #28
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	60f8      	str	r0, [r7, #12]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	461a      	mov	r2, r3
 8002af6:	460b      	mov	r3, r1
 8002af8:	72fb      	strb	r3, [r7, #11]
 8002afa:	4613      	mov	r3, r2
 8002afc:	813b      	strh	r3, [r7, #8]
  LIS2DUXS12_Object_t *pObj = (LIS2DUXS12_Object_t *)Handle;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	691c      	ldr	r4, [r3, #16]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	7b1b      	ldrb	r3, [r3, #12]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	7afb      	ldrb	r3, [r7, #11]
 8002b0e:	b299      	uxth	r1, r3
 8002b10:	893b      	ldrh	r3, [r7, #8]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	47a0      	blx	r4
 8002b16:	4603      	mov	r3, r0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	371c      	adds	r7, #28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd90      	pop	{r4, r7, pc}

08002b20 <lis2duxs12_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis2duxs12_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                   uint16_t len)
{
 8002b20:	b590      	push	{r4, r7, lr}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	607a      	str	r2, [r7, #4]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	72fb      	strb	r3, [r7, #11]
 8002b30:	4613      	mov	r3, r2
 8002b32:	813b      	strh	r3, [r7, #8]
  if (ctx == NULL)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d102      	bne.n	8002b40 <lis2duxs12_read_reg+0x20>
  {
    return -1;
 8002b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3e:	e008      	b.n	8002b52 <lis2duxs12_read_reg+0x32>
  }

  return ctx->read_reg(ctx->handle, reg, data, len);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	685c      	ldr	r4, [r3, #4]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	68d8      	ldr	r0, [r3, #12]
 8002b48:	893b      	ldrh	r3, [r7, #8]
 8002b4a:	7af9      	ldrb	r1, [r7, #11]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	47a0      	blx	r4
 8002b50:	4603      	mov	r3, r0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd90      	pop	{r4, r7, pc}

08002b5a <lis2duxs12_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis2duxs12_write_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                    uint16_t len)
{
 8002b5a:	b590      	push	{r4, r7, lr}
 8002b5c:	b085      	sub	sp, #20
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	60f8      	str	r0, [r7, #12]
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	461a      	mov	r2, r3
 8002b66:	460b      	mov	r3, r1
 8002b68:	72fb      	strb	r3, [r7, #11]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	813b      	strh	r3, [r7, #8]
  if (ctx == NULL)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d102      	bne.n	8002b7a <lis2duxs12_write_reg+0x20>
  {
    return -1;
 8002b74:	f04f 33ff 	mov.w	r3, #4294967295
 8002b78:	e008      	b.n	8002b8c <lis2duxs12_write_reg+0x32>
  }

  return ctx->write_reg(ctx->handle, reg, data, len);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681c      	ldr	r4, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	68d8      	ldr	r0, [r3, #12]
 8002b82:	893b      	ldrh	r3, [r7, #8]
 8002b84:	7af9      	ldrb	r1, [r7, #11]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	47a0      	blx	r4
 8002b8a:	4603      	mov	r3, r0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd90      	pop	{r4, r7, pc}

08002b94 <lis2duxs12_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lis2duxs12_from_fs2g_to_mg(int16_t lsb)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.061f;
 8002b9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ba2:	ee07 3a90 	vmov	s15, r3
 8002ba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002baa:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002bc0 <lis2duxs12_from_fs2g_to_mg+0x2c>
 8002bae:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	3d79db23 	.word	0x3d79db23

08002bc4 <lis2duxs12_from_fs4g_to_mg>:

float_t lis2duxs12_from_fs4g_to_mg(int16_t lsb)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.122f;
 8002bce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bd2:	ee07 3a90 	vmov	s15, r3
 8002bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bda:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002bf0 <lis2duxs12_from_fs4g_to_mg+0x2c>
 8002bde:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002be2:	eeb0 0a67 	vmov.f32	s0, s15
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	3df9db23 	.word	0x3df9db23

08002bf4 <lis2duxs12_from_fs8g_to_mg>:

float_t lis2duxs12_from_fs8g_to_mg(int16_t lsb)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.244f;
 8002bfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c02:	ee07 3a90 	vmov	s15, r3
 8002c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c0a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002c20 <lis2duxs12_from_fs8g_to_mg+0x2c>
 8002c0e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002c12:	eeb0 0a67 	vmov.f32	s0, s15
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	3e79db23 	.word	0x3e79db23

08002c24 <lis2duxs12_from_fs16g_to_mg>:

float_t lis2duxs12_from_fs16g_to_mg(int16_t lsb)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.488f;
 8002c2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c32:	ee07 3a90 	vmov	s15, r3
 8002c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c3a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002c50 <lis2duxs12_from_fs16g_to_mg+0x2c>
 8002c3e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002c42:	eeb0 0a67 	vmov.f32	s0, s15
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	3ef9db23 	.word	0x3ef9db23

08002c54 <lis2duxs12_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_WHO_AM_I, val, 1);
 8002c5e:	2301      	movs	r3, #1
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	210f      	movs	r1, #15
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7ff ff5b 	bl	8002b20 <lis2duxs12_read_reg>
 8002c6a:	60f8      	str	r0, [r7, #12]

  return ret;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <lis2duxs12_init_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_init_set(const stmdev_ctx_t *ctx, lis2duxs12_init_t val)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b088      	sub	sp, #32
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	70fb      	strb	r3, [r7, #3]
  lis2duxs12_ctrl1_t ctrl1;
  lis2duxs12_ctrl4_t ctrl4;
  lis2duxs12_status_t status;
  uint8_t cnt = 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	77fb      	strb	r3, [r7, #31]
  int32_t ret = 0;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	61bb      	str	r3, [r7, #24]

  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8002c8c:	f107 0214 	add.w	r2, r7, #20
 8002c90:	2301      	movs	r3, #1
 8002c92:	2110      	movs	r1, #16
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7ff ff43 	bl	8002b20 <lis2duxs12_read_reg>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8002ca2:	f107 0210 	add.w	r2, r7, #16
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	2113      	movs	r1, #19
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7ff ff38 	bl	8002b20 <lis2duxs12_read_reg>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
  switch (val)
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	2b03      	cmp	r3, #3
 8002cbc:	f200 80ca 	bhi.w	8002e54 <lis2duxs12_init_set+0x1dc>
 8002cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8002cc8 <lis2duxs12_init_set+0x50>)
 8002cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc6:	bf00      	nop
 8002cc8:	08002dc9 	.word	0x08002dc9
 8002ccc:	08002cd9 	.word	0x08002cd9
 8002cd0:	08002d53 	.word	0x08002d53
 8002cd4:	08002e0f 	.word	0x08002e0f
  {
    case LIS2DUXS12_BOOT:
      ctrl4.boot = PROPERTY_ENABLE;
 8002cd8:	7c3b      	ldrb	r3, [r7, #16]
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	743b      	strb	r3, [r7, #16]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8002ce0:	f107 0210 	add.w	r2, r7, #16
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	2113      	movs	r1, #19
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7ff ff36 	bl	8002b5a <lis2duxs12_write_reg>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
      if (ret != 0)
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f040 80bb 	bne.w	8002e74 <lis2duxs12_init_set+0x1fc>
        break;
      }

      do
      {
        ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8002cfe:	f107 0210 	add.w	r2, r7, #16
 8002d02:	2301      	movs	r3, #1
 8002d04:	2113      	movs	r1, #19
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff ff0a 	bl	8002b20 <lis2duxs12_read_reg>
 8002d0c:	61b8      	str	r0, [r7, #24]
        if (ret != 0)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d113      	bne.n	8002d3c <lis2duxs12_init_set+0xc4>
        {
          break;
        }

        /* boot procedure ended correctly */
        if (ctrl4.boot == 0U)
 8002d14:	7c3b      	ldrb	r3, [r7, #16]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00f      	beq.n	8002d40 <lis2duxs12_init_set+0xc8>
        {
          break;
        }

        if (ctx->mdelay != NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <lis2duxs12_init_set+0xb8>
        {
          ctx->mdelay(25); /* 25 ms of boot time */
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2019      	movs	r0, #25
 8002d2e:	4798      	blx	r3
        }
      } while (cnt++ < 5U);
 8002d30:	7ffb      	ldrb	r3, [r7, #31]
 8002d32:	1c5a      	adds	r2, r3, #1
 8002d34:	77fa      	strb	r2, [r7, #31]
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d9e1      	bls.n	8002cfe <lis2duxs12_init_set+0x86>
 8002d3a:	e002      	b.n	8002d42 <lis2duxs12_init_set+0xca>
          break;
 8002d3c:	bf00      	nop
 8002d3e:	e000      	b.n	8002d42 <lis2duxs12_init_set+0xca>
          break;
 8002d40:	bf00      	nop

      if (cnt >= 5U)
 8002d42:	7ffb      	ldrb	r3, [r7, #31]
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	f240 8097 	bls.w	8002e78 <lis2duxs12_init_set+0x200>
      {
        ret = -1;  /* boot procedure failed */
 8002d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4e:	61bb      	str	r3, [r7, #24]
      }
      break;
 8002d50:	e092      	b.n	8002e78 <lis2duxs12_init_set+0x200>
    case LIS2DUXS12_RESET:
      ctrl1.sw_reset = PROPERTY_ENABLE;
 8002d52:	7d3b      	ldrb	r3, [r7, #20]
 8002d54:	f043 0320 	orr.w	r3, r3, #32
 8002d58:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8002d5a:	f107 0214 	add.w	r2, r7, #20
 8002d5e:	2301      	movs	r3, #1
 8002d60:	2110      	movs	r1, #16
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff fef9 	bl	8002b5a <lis2duxs12_write_reg>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
      if (ret != 0)
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f040 8082 	bne.w	8002e7c <lis2duxs12_init_set+0x204>
        break;
      }

      do
      {
        ret = lis2duxs12_status_get(ctx, &status);
 8002d78:	f107 030c 	add.w	r3, r7, #12
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f884 	bl	8002e8c <lis2duxs12_status_get>
 8002d84:	61b8      	str	r0, [r7, #24]
        if (ret != 0)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d113      	bne.n	8002db4 <lis2duxs12_init_set+0x13c>
        {
          break;
        }

        /* sw-reset procedure ended correctly */
        if (status.sw_reset == 0U)
 8002d8c:	7b3b      	ldrb	r3, [r7, #12]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00f      	beq.n	8002db8 <lis2duxs12_init_set+0x140>
        {
          break;
        }

        if (ctx->mdelay != NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <lis2duxs12_init_set+0x130>
        {
          ctx->mdelay(1); /* should be 50 us */
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	2001      	movs	r0, #1
 8002da6:	4798      	blx	r3
        }
      } while (cnt++ < 5U);
 8002da8:	7ffb      	ldrb	r3, [r7, #31]
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	77fa      	strb	r2, [r7, #31]
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d9e2      	bls.n	8002d78 <lis2duxs12_init_set+0x100>
 8002db2:	e002      	b.n	8002dba <lis2duxs12_init_set+0x142>
          break;
 8002db4:	bf00      	nop
 8002db6:	e000      	b.n	8002dba <lis2duxs12_init_set+0x142>
          break;
 8002db8:	bf00      	nop

      if (cnt >= 5U)
 8002dba:	7ffb      	ldrb	r3, [r7, #31]
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d95f      	bls.n	8002e80 <lis2duxs12_init_set+0x208>
      {
        ret = -1;  /* sw-reset procedure failed */
 8002dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc4:	61bb      	str	r3, [r7, #24]
      }
      break;
 8002dc6:	e05b      	b.n	8002e80 <lis2duxs12_init_set+0x208>
    case LIS2DUXS12_SENSOR_ONLY_ON:
      /* no embedded funcs are used */
      ctrl4.emb_func_en = PROPERTY_DISABLE;
 8002dc8:	7c3b      	ldrb	r3, [r7, #16]
 8002dca:	f023 0310 	bic.w	r3, r3, #16
 8002dce:	743b      	strb	r3, [r7, #16]
      ctrl4.bdu = PROPERTY_ENABLE;
 8002dd0:	7c3b      	ldrb	r3, [r7, #16]
 8002dd2:	f043 0320 	orr.w	r3, r3, #32
 8002dd6:	743b      	strb	r3, [r7, #16]
      ctrl1.if_add_inc = PROPERTY_ENABLE;
 8002dd8:	7d3b      	ldrb	r3, [r7, #20]
 8002dda:	f043 0310 	orr.w	r3, r3, #16
 8002dde:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8002de0:	f107 0210 	add.w	r2, r7, #16
 8002de4:	2301      	movs	r3, #1
 8002de6:	2113      	movs	r1, #19
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7ff feb6 	bl	8002b5a <lis2duxs12_write_reg>
 8002dee:	4602      	mov	r2, r0
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	4413      	add	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8002df6:	f107 0214 	add.w	r2, r7, #20
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	2110      	movs	r1, #16
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff feab 	bl	8002b5a <lis2duxs12_write_reg>
 8002e04:	4602      	mov	r2, r0
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	4413      	add	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
      break;
 8002e0c:	e039      	b.n	8002e82 <lis2duxs12_init_set+0x20a>
    case LIS2DUXS12_SENSOR_EMB_FUNC_ON:
      /* complete configuration is used */
      ctrl4.emb_func_en = PROPERTY_ENABLE;
 8002e0e:	7c3b      	ldrb	r3, [r7, #16]
 8002e10:	f043 0310 	orr.w	r3, r3, #16
 8002e14:	743b      	strb	r3, [r7, #16]
      ctrl4.bdu = PROPERTY_ENABLE;
 8002e16:	7c3b      	ldrb	r3, [r7, #16]
 8002e18:	f043 0320 	orr.w	r3, r3, #32
 8002e1c:	743b      	strb	r3, [r7, #16]
      ctrl1.if_add_inc = PROPERTY_ENABLE;
 8002e1e:	7d3b      	ldrb	r3, [r7, #20]
 8002e20:	f043 0310 	orr.w	r3, r3, #16
 8002e24:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8002e26:	f107 0210 	add.w	r2, r7, #16
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	2113      	movs	r1, #19
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff fe93 	bl	8002b5a <lis2duxs12_write_reg>
 8002e34:	4602      	mov	r2, r0
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	4413      	add	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8002e3c:	f107 0214 	add.w	r2, r7, #20
 8002e40:	2301      	movs	r3, #1
 8002e42:	2110      	movs	r1, #16
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff fe88 	bl	8002b5a <lis2duxs12_write_reg>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	4413      	add	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
      break;
 8002e52:	e016      	b.n	8002e82 <lis2duxs12_init_set+0x20a>
    default:
      ctrl1.sw_reset = PROPERTY_ENABLE;
 8002e54:	7d3b      	ldrb	r3, [r7, #20]
 8002e56:	f043 0320 	orr.w	r3, r3, #32
 8002e5a:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8002e5c:	f107 0214 	add.w	r2, r7, #20
 8002e60:	2301      	movs	r3, #1
 8002e62:	2110      	movs	r1, #16
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff fe78 	bl	8002b5a <lis2duxs12_write_reg>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	4413      	add	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
      break;
 8002e72:	e006      	b.n	8002e82 <lis2duxs12_init_set+0x20a>
        break;
 8002e74:	bf00      	nop
 8002e76:	e004      	b.n	8002e82 <lis2duxs12_init_set+0x20a>
      break;
 8002e78:	bf00      	nop
 8002e7a:	e002      	b.n	8002e82 <lis2duxs12_init_set+0x20a>
        break;
 8002e7c:	bf00      	nop
 8002e7e:	e000      	b.n	8002e82 <lis2duxs12_init_set+0x20a>
      break;
 8002e80:	bf00      	nop
  }
  return ret;
 8002e82:	69bb      	ldr	r3, [r7, #24]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3720      	adds	r7, #32
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <lis2duxs12_status_get>:
  * @param  val   the status of the device.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_status_get(const stmdev_ctx_t *ctx, lis2duxs12_status_t *val)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  lis2duxs12_status_register_t status_register;
  lis2duxs12_ctrl1_t ctrl1;
  lis2duxs12_ctrl4_t ctrl4;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_STATUS,
 8002e96:	f107 0210 	add.w	r2, r7, #16
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	2125      	movs	r1, #37	@ 0x25
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7ff fe3e 	bl	8002b20 <lis2duxs12_read_reg>
 8002ea4:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&status_register, 1);
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8002ea6:	f107 020c 	add.w	r2, r7, #12
 8002eaa:	2301      	movs	r3, #1
 8002eac:	2110      	movs	r1, #16
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7ff fe36 	bl	8002b20 <lis2duxs12_read_reg>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	4413      	add	r3, r2
 8002eba:	617b      	str	r3, [r7, #20]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8002ebc:	f107 0208 	add.w	r2, r7, #8
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	2113      	movs	r1, #19
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff fe2b 	bl	8002b20 <lis2duxs12_read_reg>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	4413      	add	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]

  val->sw_reset = ctrl1.sw_reset;
 8002ed2:	7b3b      	ldrb	r3, [r7, #12]
 8002ed4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002ed8:	b2d9      	uxtb	r1, r3
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	7813      	ldrb	r3, [r2, #0]
 8002ede:	f361 0300 	bfi	r3, r1, #0, #1
 8002ee2:	7013      	strb	r3, [r2, #0]
  val->boot     = ctrl4.boot;
 8002ee4:	7a3b      	ldrb	r3, [r7, #8]
 8002ee6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002eea:	b2d9      	uxtb	r1, r3
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	7813      	ldrb	r3, [r2, #0]
 8002ef0:	f361 0341 	bfi	r3, r1, #1, #1
 8002ef4:	7013      	strb	r3, [r2, #0]
  val->drdy     = status_register.drdy;
 8002ef6:	7c3b      	ldrb	r3, [r7, #16]
 8002ef8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002efc:	b2d9      	uxtb	r1, r3
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	7813      	ldrb	r3, [r2, #0]
 8002f02:	f361 0382 	bfi	r3, r1, #2, #1
 8002f06:	7013      	strb	r3, [r2, #0]

  return ret;
 8002f08:	697b      	ldr	r3, [r7, #20]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <lis2duxs12_mode_set>:
  * @param  val   set the sensor FS and ODR.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mode_set(const stmdev_ctx_t *ctx, const lis2duxs12_md_t *val)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  lis2duxs12_ctrl3_t ctrl3;
  lis2duxs12_ctrl5_t ctrl5;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 8002f1e:	f107 020c 	add.w	r2, r7, #12
 8002f22:	2301      	movs	r3, #1
 8002f24:	2114      	movs	r1, #20
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7ff fdfa 	bl	8002b20 <lis2duxs12_read_reg>
 8002f2c:	6178      	str	r0, [r7, #20]

  ctrl5.odr = (uint8_t)val->odr & 0xFU;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	7b3b      	ldrb	r3, [r7, #12]
 8002f3a:	f362 1307 	bfi	r3, r2, #4, #4
 8002f3e:	733b      	strb	r3, [r7, #12]
  ctrl5.fs = (uint8_t)val->fs;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	785b      	ldrb	r3, [r3, #1]
 8002f44:	f003 0303 	and.w	r3, r3, #3
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	7b3b      	ldrb	r3, [r7, #12]
 8002f4c:	f362 0301 	bfi	r3, r2, #0, #2
 8002f50:	733b      	strb	r3, [r7, #12]

  /* set the bandwidth */
  switch (val->odr)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b06      	cmp	r3, #6
 8002f58:	d859      	bhi.n	800300e <lis2duxs12_mode_set+0xfa>
 8002f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8002f60 <lis2duxs12_mode_set+0x4c>)
 8002f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f60:	08002f7d 	.word	0x08002f7d
 8002f64:	08002f7d 	.word	0x08002f7d
 8002f68:	08002f7d 	.word	0x08002f7d
 8002f6c:	08002f7d 	.word	0x08002f7d
 8002f70:	08002f87 	.word	0x08002f87
 8002f74:	08002fa3 	.word	0x08002fa3
 8002f78:	08002fcf 	.word	0x08002fcf
    /* no anti-aliasing filter present */
    case LIS2DUXS12_OFF:
    case LIS2DUXS12_1Hz6_ULP:
    case LIS2DUXS12_3Hz_ULP:
    case LIS2DUXS12_25Hz_ULP:
      ctrl5.bw = 0x0;
 8002f7c:	7b3b      	ldrb	r3, [r7, #12]
 8002f7e:	f023 030c 	bic.w	r3, r3, #12
 8002f82:	733b      	strb	r3, [r7, #12]
      break;
 8002f84:	e04d      	b.n	8003022 <lis2duxs12_mode_set+0x10e>

    /* low-power mode with ODR < 50 Hz */
    case LIS2DUXS12_6Hz_LP:
      switch (val->bw)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	789b      	ldrb	r3, [r3, #2]
 8002f8a:	2b03      	cmp	r3, #3
 8002f8c:	d003      	beq.n	8002f96 <lis2duxs12_mode_set+0x82>
        default:
        case LIS2DUXS12_ODR_div_2:
        case LIS2DUXS12_ODR_div_4:
        case LIS2DUXS12_ODR_div_8:
          /* value not allowed */
          ret = -1;
 8002f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f92:	617b      	str	r3, [r7, #20]
          break;
 8002f94:	e004      	b.n	8002fa0 <lis2duxs12_mode_set+0x8c>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 8002f96:	7b3b      	ldrb	r3, [r7, #12]
 8002f98:	f043 030c 	orr.w	r3, r3, #12
 8002f9c:	733b      	strb	r3, [r7, #12]
          break;
 8002f9e:	bf00      	nop
      }
      break;
 8002fa0:	e03f      	b.n	8003022 <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_12Hz5_LP:
      switch (val->bw)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	789b      	ldrb	r3, [r3, #2]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d005      	beq.n	8002fb6 <lis2duxs12_mode_set+0xa2>
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d009      	beq.n	8002fc2 <lis2duxs12_mode_set+0xae>
      {
        default:
        case LIS2DUXS12_ODR_div_2:
        case LIS2DUXS12_ODR_div_4:
          /* value not allowed */
          ret = -1;
 8002fae:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb2:	617b      	str	r3, [r7, #20]
          break;
 8002fb4:	e00a      	b.n	8002fcc <lis2duxs12_mode_set+0xb8>
        case LIS2DUXS12_ODR_div_8:
          ctrl5.bw = 0x2;
 8002fb6:	7b3b      	ldrb	r3, [r7, #12]
 8002fb8:	2202      	movs	r2, #2
 8002fba:	f362 0383 	bfi	r3, r2, #2, #2
 8002fbe:	733b      	strb	r3, [r7, #12]
          break;
 8002fc0:	e004      	b.n	8002fcc <lis2duxs12_mode_set+0xb8>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 8002fc2:	7b3b      	ldrb	r3, [r7, #12]
 8002fc4:	f043 030c 	orr.w	r3, r3, #12
 8002fc8:	733b      	strb	r3, [r7, #12]
          break;
 8002fca:	bf00      	nop
      }
      break;
 8002fcc:	e029      	b.n	8003022 <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_25Hz_LP:
      switch (val->bw)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	789b      	ldrb	r3, [r3, #2]
 8002fd2:	2b03      	cmp	r3, #3
 8002fd4:	d015      	beq.n	8003002 <lis2duxs12_mode_set+0xee>
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	dc03      	bgt.n	8002fe2 <lis2duxs12_mode_set+0xce>
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d005      	beq.n	8002fea <lis2duxs12_mode_set+0xd6>
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d009      	beq.n	8002ff6 <lis2duxs12_mode_set+0xe2>
      {
        default:
        case LIS2DUXS12_ODR_div_2:
          /* value not allowed */
          ret = -1;
 8002fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe6:	617b      	str	r3, [r7, #20]
          break;
 8002fe8:	e010      	b.n	800300c <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_4:
          ctrl5.bw = 0x1;
 8002fea:	7b3b      	ldrb	r3, [r7, #12]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f362 0383 	bfi	r3, r2, #2, #2
 8002ff2:	733b      	strb	r3, [r7, #12]
          break;
 8002ff4:	e00a      	b.n	800300c <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_8:
          ctrl5.bw = 0x2;
 8002ff6:	7b3b      	ldrb	r3, [r7, #12]
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	f362 0383 	bfi	r3, r2, #2, #2
 8002ffe:	733b      	strb	r3, [r7, #12]
          break;
 8003000:	e004      	b.n	800300c <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 8003002:	7b3b      	ldrb	r3, [r7, #12]
 8003004:	f043 030c 	orr.w	r3, r3, #12
 8003008:	733b      	strb	r3, [r7, #12]
          break;
 800300a:	bf00      	nop
      }
      break;
 800300c:	e009      	b.n	8003022 <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_100Hz_HP:
    case LIS2DUXS12_200Hz_HP:
    case LIS2DUXS12_400Hz_HP:
    case LIS2DUXS12_800Hz_HP:
    default:
      ctrl5.bw = (uint8_t)val->bw;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	789b      	ldrb	r3, [r3, #2]
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	b2da      	uxtb	r2, r3
 8003018:	7b3b      	ldrb	r3, [r7, #12]
 800301a:	f362 0383 	bfi	r3, r2, #2, #2
 800301e:	733b      	strb	r3, [r7, #12]
      break;
 8003020:	bf00      	nop
  }

  if (ret != 0)
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <lis2duxs12_mode_set+0x118>
  {
    return ret;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	e02b      	b.n	8003084 <lis2duxs12_mode_set+0x170>
  }

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 800302c:	f107 0210 	add.w	r2, r7, #16
 8003030:	2301      	movs	r3, #1
 8003032:	2112      	movs	r1, #18
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff fd73 	bl	8002b20 <lis2duxs12_read_reg>
 800303a:	6178      	str	r0, [r7, #20]

  ctrl3.hp_en = (((uint8_t)val->odr & 0x30U) == 0x10U) ? 1U : 0U;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003044:	2b10      	cmp	r3, #16
 8003046:	d101      	bne.n	800304c <lis2duxs12_mode_set+0x138>
 8003048:	2201      	movs	r2, #1
 800304a:	e000      	b.n	800304e <lis2duxs12_mode_set+0x13a>
 800304c:	2200      	movs	r2, #0
 800304e:	7c3b      	ldrb	r3, [r7, #16]
 8003050:	f362 0382 	bfi	r3, r2, #2, #1
 8003054:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d112      	bne.n	8003082 <lis2duxs12_mode_set+0x16e>
  {
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 800305c:	f107 020c 	add.w	r2, r7, #12
 8003060:	2301      	movs	r3, #1
 8003062:	2114      	movs	r1, #20
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff fd78 	bl	8002b5a <lis2duxs12_write_reg>
 800306a:	6178      	str	r0, [r7, #20]
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 800306c:	f107 0210 	add.w	r2, r7, #16
 8003070:	2301      	movs	r3, #1
 8003072:	2112      	movs	r1, #18
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7ff fd70 	bl	8002b5a <lis2duxs12_write_reg>
 800307a:	4602      	mov	r2, r0
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	4413      	add	r3, r2
 8003080:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003082:	697b      	ldr	r3, [r7, #20]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <lis2duxs12_mode_get>:
  * @param  val   get the sensor FS and ODR.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mode_get(const stmdev_ctx_t *ctx, lis2duxs12_md_t *val)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  lis2duxs12_ctrl3_t ctrl3;
  lis2duxs12_ctrl5_t ctrl5;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 8003096:	f107 020c 	add.w	r2, r7, #12
 800309a:	2301      	movs	r3, #1
 800309c:	2114      	movs	r1, #20
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7ff fd3e 	bl	8002b20 <lis2duxs12_read_reg>
 80030a4:	6178      	str	r0, [r7, #20]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 80030a6:	f107 0210 	add.w	r2, r7, #16
 80030aa:	2301      	movs	r3, #1
 80030ac:	2112      	movs	r1, #18
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7ff fd36 	bl	8002b20 <lis2duxs12_read_reg>
 80030b4:	4602      	mov	r2, r0
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	4413      	add	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]

  switch (ctrl5.odr)
 80030bc:	7b3b      	ldrb	r3, [r7, #12]
 80030be:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b0f      	cmp	r3, #15
 80030c6:	f200 809b 	bhi.w	8003200 <lis2duxs12_mode_get+0x174>
 80030ca:	a201      	add	r2, pc, #4	@ (adr r2, 80030d0 <lis2duxs12_mode_get+0x44>)
 80030cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d0:	08003111 	.word	0x08003111
 80030d4:	08003119 	.word	0x08003119
 80030d8:	08003121 	.word	0x08003121
 80030dc:	08003129 	.word	0x08003129
 80030e0:	08003131 	.word	0x08003131
 80030e4:	08003149 	.word	0x08003149
 80030e8:	08003161 	.word	0x08003161
 80030ec:	08003179 	.word	0x08003179
 80030f0:	08003191 	.word	0x08003191
 80030f4:	080031a9 	.word	0x080031a9
 80030f8:	080031c1 	.word	0x080031c1
 80030fc:	080031d9 	.word	0x080031d9
 8003100:	08003201 	.word	0x08003201
 8003104:	08003201 	.word	0x08003201
 8003108:	080031f1 	.word	0x080031f1
 800310c:	080031f9 	.word	0x080031f9
  {
    case 0x00:
      val->odr = LIS2DUXS12_OFF;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]
      break;
 8003116:	e077      	b.n	8003208 <lis2duxs12_mode_get+0x17c>
    case 0x01:
      val->odr = LIS2DUXS12_1Hz6_ULP;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	2201      	movs	r2, #1
 800311c:	701a      	strb	r2, [r3, #0]
      break;
 800311e:	e073      	b.n	8003208 <lis2duxs12_mode_get+0x17c>
    case 0x02:
      val->odr = LIS2DUXS12_3Hz_ULP;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	2202      	movs	r2, #2
 8003124:	701a      	strb	r2, [r3, #0]
      break;
 8003126:	e06f      	b.n	8003208 <lis2duxs12_mode_get+0x17c>
    case 0x03:
      val->odr = LIS2DUXS12_25Hz_ULP;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	2203      	movs	r2, #3
 800312c:	701a      	strb	r2, [r3, #0]
      break;
 800312e:	e06b      	b.n	8003208 <lis2duxs12_mode_get+0x17c>
    case 0x04:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_6Hz_HP : LIS2DUXS12_6Hz_LP;
 8003130:	7c3b      	ldrb	r3, [r7, #16]
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <lis2duxs12_mode_get+0xb4>
 800313c:	2214      	movs	r2, #20
 800313e:	e000      	b.n	8003142 <lis2duxs12_mode_get+0xb6>
 8003140:	2204      	movs	r2, #4
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	701a      	strb	r2, [r3, #0]
      break;
 8003146:	e05f      	b.n	8003208 <lis2duxs12_mode_get+0x17c>
    case 0x05:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_12Hz5_HP : LIS2DUXS12_12Hz5_LP;
 8003148:	7c3b      	ldrb	r3, [r7, #16]
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <lis2duxs12_mode_get+0xcc>
 8003154:	2215      	movs	r2, #21
 8003156:	e000      	b.n	800315a <lis2duxs12_mode_get+0xce>
 8003158:	2205      	movs	r2, #5
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	701a      	strb	r2, [r3, #0]
      break;
 800315e:	e053      	b.n	8003208 <lis2duxs12_mode_get+0x17c>
    case 0x06:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_25Hz_HP : LIS2DUXS12_25Hz_LP;
 8003160:	7c3b      	ldrb	r3, [r7, #16]
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <lis2duxs12_mode_get+0xe4>
 800316c:	2216      	movs	r2, #22
 800316e:	e000      	b.n	8003172 <lis2duxs12_mode_get+0xe6>
 8003170:	2206      	movs	r2, #6
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	701a      	strb	r2, [r3, #0]
      break;
 8003176:	e047      	b.n	8003208 <lis2duxs12_mode_get+0x17c>
    case 0x07:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_50Hz_HP : LIS2DUXS12_50Hz_LP;
 8003178:	7c3b      	ldrb	r3, [r7, #16]
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <lis2duxs12_mode_get+0xfc>
 8003184:	2217      	movs	r2, #23
 8003186:	e000      	b.n	800318a <lis2duxs12_mode_get+0xfe>
 8003188:	2207      	movs	r2, #7
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	701a      	strb	r2, [r3, #0]
      break;
 800318e:	e03b      	b.n	8003208 <lis2duxs12_mode_get+0x17c>
    case 0x08:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_100Hz_HP : LIS2DUXS12_100Hz_LP;
 8003190:	7c3b      	ldrb	r3, [r7, #16]
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <lis2duxs12_mode_get+0x114>
 800319c:	2218      	movs	r2, #24
 800319e:	e000      	b.n	80031a2 <lis2duxs12_mode_get+0x116>
 80031a0:	2208      	movs	r2, #8
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	701a      	strb	r2, [r3, #0]
      break;
 80031a6:	e02f      	b.n	8003208 <lis2duxs12_mode_get+0x17c>
    case 0x09:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_200Hz_HP : LIS2DUXS12_200Hz_LP;
 80031a8:	7c3b      	ldrb	r3, [r7, #16]
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <lis2duxs12_mode_get+0x12c>
 80031b4:	2219      	movs	r2, #25
 80031b6:	e000      	b.n	80031ba <lis2duxs12_mode_get+0x12e>
 80031b8:	2209      	movs	r2, #9
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	701a      	strb	r2, [r3, #0]
      break;
 80031be:	e023      	b.n	8003208 <lis2duxs12_mode_get+0x17c>
    case 0x0A:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_400Hz_HP : LIS2DUXS12_400Hz_LP;
 80031c0:	7c3b      	ldrb	r3, [r7, #16]
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <lis2duxs12_mode_get+0x144>
 80031cc:	221a      	movs	r2, #26
 80031ce:	e000      	b.n	80031d2 <lis2duxs12_mode_get+0x146>
 80031d0:	220a      	movs	r2, #10
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	701a      	strb	r2, [r3, #0]
      break;
 80031d6:	e017      	b.n	8003208 <lis2duxs12_mode_get+0x17c>
    case 0x0B:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_800Hz_HP : LIS2DUXS12_800Hz_LP;
 80031d8:	7c3b      	ldrb	r3, [r7, #16]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <lis2duxs12_mode_get+0x15c>
 80031e4:	221b      	movs	r2, #27
 80031e6:	e000      	b.n	80031ea <lis2duxs12_mode_get+0x15e>
 80031e8:	220b      	movs	r2, #11
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	701a      	strb	r2, [r3, #0]
      break;
 80031ee:	e00b      	b.n	8003208 <lis2duxs12_mode_get+0x17c>
    case 0xe:
      val->odr = LIS2DUXS12_TRIG_PIN;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	222e      	movs	r2, #46	@ 0x2e
 80031f4:	701a      	strb	r2, [r3, #0]
      break;
 80031f6:	e007      	b.n	8003208 <lis2duxs12_mode_get+0x17c>
    case 0xf:
      val->odr = LIS2DUXS12_TRIG_SW;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	222f      	movs	r2, #47	@ 0x2f
 80031fc:	701a      	strb	r2, [r3, #0]
      break;
 80031fe:	e003      	b.n	8003208 <lis2duxs12_mode_get+0x17c>
    default:
      val->odr = LIS2DUXS12_OFF;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2200      	movs	r2, #0
 8003204:	701a      	strb	r2, [r3, #0]
      break;
 8003206:	bf00      	nop
  }

  switch (ctrl5.fs)
 8003208:	7b3b      	ldrb	r3, [r7, #12]
 800320a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b03      	cmp	r3, #3
 8003212:	d81b      	bhi.n	800324c <lis2duxs12_mode_get+0x1c0>
 8003214:	a201      	add	r2, pc, #4	@ (adr r2, 800321c <lis2duxs12_mode_get+0x190>)
 8003216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321a:	bf00      	nop
 800321c:	0800322d 	.word	0x0800322d
 8003220:	08003235 	.word	0x08003235
 8003224:	0800323d 	.word	0x0800323d
 8003228:	08003245 	.word	0x08003245
  {
    case 0:
      val->fs = LIS2DUXS12_2g;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	2200      	movs	r2, #0
 8003230:	705a      	strb	r2, [r3, #1]
      break;
 8003232:	e00f      	b.n	8003254 <lis2duxs12_mode_get+0x1c8>
    case 1:
      val->fs = LIS2DUXS12_4g;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	2201      	movs	r2, #1
 8003238:	705a      	strb	r2, [r3, #1]
      break;
 800323a:	e00b      	b.n	8003254 <lis2duxs12_mode_get+0x1c8>
    case 2:
      val->fs = LIS2DUXS12_8g;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2202      	movs	r2, #2
 8003240:	705a      	strb	r2, [r3, #1]
      break;
 8003242:	e007      	b.n	8003254 <lis2duxs12_mode_get+0x1c8>
    case 3:
      val->fs = LIS2DUXS12_16g;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	2203      	movs	r2, #3
 8003248:	705a      	strb	r2, [r3, #1]
      break;
 800324a:	e003      	b.n	8003254 <lis2duxs12_mode_get+0x1c8>
    default:
      val->fs = LIS2DUXS12_2g;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	2200      	movs	r2, #0
 8003250:	705a      	strb	r2, [r3, #1]
      break;
 8003252:	bf00      	nop
  }

  switch (ctrl5.bw)
 8003254:	7b3b      	ldrb	r3, [r7, #12]
 8003256:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b03      	cmp	r3, #3
 800325e:	d81b      	bhi.n	8003298 <lis2duxs12_mode_get+0x20c>
 8003260:	a201      	add	r2, pc, #4	@ (adr r2, 8003268 <lis2duxs12_mode_get+0x1dc>)
 8003262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003266:	bf00      	nop
 8003268:	08003279 	.word	0x08003279
 800326c:	08003281 	.word	0x08003281
 8003270:	08003289 	.word	0x08003289
 8003274:	08003291 	.word	0x08003291
  {
    case 0:
      val->bw = LIS2DUXS12_ODR_div_2;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	2200      	movs	r2, #0
 800327c:	709a      	strb	r2, [r3, #2]
      break;
 800327e:	e00f      	b.n	80032a0 <lis2duxs12_mode_get+0x214>
    case 1:
      val->bw = LIS2DUXS12_ODR_div_4;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	2201      	movs	r2, #1
 8003284:	709a      	strb	r2, [r3, #2]
      break;
 8003286:	e00b      	b.n	80032a0 <lis2duxs12_mode_get+0x214>
    case 2:
      val->bw = LIS2DUXS12_ODR_div_8;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	2202      	movs	r2, #2
 800328c:	709a      	strb	r2, [r3, #2]
      break;
 800328e:	e007      	b.n	80032a0 <lis2duxs12_mode_get+0x214>
    case 3:
      val->bw = LIS2DUXS12_ODR_div_16;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	2203      	movs	r2, #3
 8003294:	709a      	strb	r2, [r3, #2]
      break;
 8003296:	e003      	b.n	80032a0 <lis2duxs12_mode_get+0x214>
    default:
      val->bw = LIS2DUXS12_ODR_div_2;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	2200      	movs	r2, #0
 800329c:	709a      	strb	r2, [r3, #2]
      break;
 800329e:	bf00      	nop
  }

  return ret;
 80032a0:	697b      	ldr	r3, [r7, #20]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop

080032ac <lis2duxs12_exit_deep_power_down>:
  * @param  val      Enter soft power down in SPI case
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_exit_deep_power_down(const stmdev_ctx_t *ctx)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  lis2duxs12_en_device_config_t en_device_config = {0};
 80032b4:	2300      	movs	r3, #0
 80032b6:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  en_device_config.soft_pd = PROPERTY_ENABLE;
 80032b8:	7a3b      	ldrb	r3, [r7, #8]
 80032ba:	f043 0301 	orr.w	r3, r3, #1
 80032be:	723b      	strb	r3, [r7, #8]
  ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_EN_DEVICE_CONFIG, (uint8_t *)&en_device_config, 1);
 80032c0:	f107 0208 	add.w	r2, r7, #8
 80032c4:	2301      	movs	r3, #1
 80032c6:	213e      	movs	r1, #62	@ 0x3e
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7ff fc46 	bl	8002b5a <lis2duxs12_write_reg>
 80032ce:	60f8      	str	r0, [r7, #12]

  if (ctx->mdelay != NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <lis2duxs12_exit_deep_power_down+0x34>
  {
    ctx->mdelay(25); /* See AN5812 - paragraphs 3.1.1.1 and 3.1.1.2 */
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2019      	movs	r0, #25
 80032de:	4798      	blx	r3
  }

  return ret;
 80032e0:	68fb      	ldr	r3, [r7, #12]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
	...

080032ec <lis2duxs12_xl_data_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_xl_data_get(const stmdev_ctx_t *ctx, const lis2duxs12_md_t *md,
                               lis2duxs12_xl_data_t *data)
{
 80032ec:	b590      	push	{r4, r7, lr}
 80032ee:	b089      	sub	sp, #36	@ 0x24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  uint8_t buff[6];
  int32_t ret;
  uint8_t i;
  uint8_t j;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_OUT_X_L, buff, 6);
 80032f8:	f107 0210 	add.w	r2, r7, #16
 80032fc:	2306      	movs	r3, #6
 80032fe:	2128      	movs	r1, #40	@ 0x28
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f7ff fc0d 	bl	8002b20 <lis2duxs12_read_reg>
 8003306:	61b8      	str	r0, [r7, #24]

  /* acceleration conversion */
  j = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	77bb      	strb	r3, [r7, #30]
  for (i = 0U; i < 3U; i++)
 800330c:	2300      	movs	r3, #0
 800330e:	77fb      	strb	r3, [r7, #31]
 8003310:	e08f      	b.n	8003432 <lis2duxs12_xl_data_get+0x146>
  {
    data->raw[i] = (int16_t)buff[j + 1U];
 8003312:	7fbb      	ldrb	r3, [r7, #30]
 8003314:	3301      	adds	r3, #1
 8003316:	3320      	adds	r3, #32
 8003318:	443b      	add	r3, r7
 800331a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800331e:	7ffb      	ldrb	r3, [r7, #31]
 8003320:	b211      	sxth	r1, r2
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	3304      	adds	r3, #4
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	4413      	add	r3, r2
 800332a:	460a      	mov	r2, r1
 800332c:	809a      	strh	r2, [r3, #4]
    data->raw[i] = (data->raw[i] * 256) + (int16_t) buff[j];
 800332e:	7ffb      	ldrb	r3, [r7, #31]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	3304      	adds	r3, #4
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	4413      	add	r3, r2
 8003338:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800333c:	b29b      	uxth	r3, r3
 800333e:	021b      	lsls	r3, r3, #8
 8003340:	b29b      	uxth	r3, r3
 8003342:	7fba      	ldrb	r2, [r7, #30]
 8003344:	3220      	adds	r2, #32
 8003346:	443a      	add	r2, r7
 8003348:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800334c:	4413      	add	r3, r2
 800334e:	b29a      	uxth	r2, r3
 8003350:	7ffb      	ldrb	r3, [r7, #31]
 8003352:	b211      	sxth	r1, r2
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	3304      	adds	r3, #4
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	4413      	add	r3, r2
 800335c:	460a      	mov	r2, r1
 800335e:	809a      	strh	r2, [r3, #4]
    j += 2U;
 8003360:	7fbb      	ldrb	r3, [r7, #30]
 8003362:	3302      	adds	r3, #2
 8003364:	77bb      	strb	r3, [r7, #30]
    switch (md->fs)
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	785b      	ldrb	r3, [r3, #1]
 800336a:	2b03      	cmp	r3, #3
 800336c:	d856      	bhi.n	800341c <lis2duxs12_xl_data_get+0x130>
 800336e:	a201      	add	r2, pc, #4	@ (adr r2, 8003374 <lis2duxs12_xl_data_get+0x88>)
 8003370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003374:	08003385 	.word	0x08003385
 8003378:	080033ab 	.word	0x080033ab
 800337c:	080033d1 	.word	0x080033d1
 8003380:	080033f7 	.word	0x080033f7
    {
      case LIS2DUXS12_2g:
        data->mg[i] = lis2duxs12_from_fs2g_to_mg(data->raw[i]);
 8003384:	7ffb      	ldrb	r3, [r7, #31]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	3304      	adds	r3, #4
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	4413      	add	r3, r2
 800338e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003392:	7ffc      	ldrb	r4, [r7, #31]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff fbfd 	bl	8002b94 <lis2duxs12_from_fs2g_to_mg>
 800339a:	eef0 7a40 	vmov.f32	s15, s0
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	00a3      	lsls	r3, r4, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	edc3 7a00 	vstr	s15, [r3]
        break;
 80033a8:	e040      	b.n	800342c <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_4g:
        data->mg[i] = lis2duxs12_from_fs4g_to_mg(data->raw[i]);
 80033aa:	7ffb      	ldrb	r3, [r7, #31]
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	3304      	adds	r3, #4
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	4413      	add	r3, r2
 80033b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80033b8:	7ffc      	ldrb	r4, [r7, #31]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff fc02 	bl	8002bc4 <lis2duxs12_from_fs4g_to_mg>
 80033c0:	eef0 7a40 	vmov.f32	s15, s0
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	00a3      	lsls	r3, r4, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	edc3 7a00 	vstr	s15, [r3]
        break;
 80033ce:	e02d      	b.n	800342c <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_8g:
        data->mg[i] = lis2duxs12_from_fs8g_to_mg(data->raw[i]);
 80033d0:	7ffb      	ldrb	r3, [r7, #31]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	3304      	adds	r3, #4
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	4413      	add	r3, r2
 80033da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80033de:	7ffc      	ldrb	r4, [r7, #31]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff fc07 	bl	8002bf4 <lis2duxs12_from_fs8g_to_mg>
 80033e6:	eef0 7a40 	vmov.f32	s15, s0
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	00a3      	lsls	r3, r4, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	edc3 7a00 	vstr	s15, [r3]
        break;
 80033f4:	e01a      	b.n	800342c <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_16g:
        data->mg[i] = lis2duxs12_from_fs16g_to_mg(data->raw[i]);
 80033f6:	7ffb      	ldrb	r3, [r7, #31]
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	3304      	adds	r3, #4
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	4413      	add	r3, r2
 8003400:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003404:	7ffc      	ldrb	r4, [r7, #31]
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff fc0c 	bl	8002c24 <lis2duxs12_from_fs16g_to_mg>
 800340c:	eef0 7a40 	vmov.f32	s15, s0
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	00a3      	lsls	r3, r4, #2
 8003414:	4413      	add	r3, r2
 8003416:	edc3 7a00 	vstr	s15, [r3]
        break;
 800341a:	e007      	b.n	800342c <lis2duxs12_xl_data_get+0x140>
      default:
        data->mg[i] = 0.0f;
 800341c:	7ffb      	ldrb	r3, [r7, #31]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
        break;
 800342a:	bf00      	nop
  for (i = 0U; i < 3U; i++)
 800342c:	7ffb      	ldrb	r3, [r7, #31]
 800342e:	3301      	adds	r3, #1
 8003430:	77fb      	strb	r3, [r7, #31]
 8003432:	7ffb      	ldrb	r3, [r7, #31]
 8003434:	2b02      	cmp	r3, #2
 8003436:	f67f af6c 	bls.w	8003312 <lis2duxs12_xl_data_get+0x26>
    }
  }

  return ret;
 800343a:	69bb      	ldr	r3, [r7, #24]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3724      	adds	r7, #36	@ 0x24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd90      	pop	{r4, r7, pc}

08003444 <lis2duxs12_i3c_configure_set>:
  * @param  val   configuration params
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_i3c_configure_set(const stmdev_ctx_t *ctx, const lis2duxs12_i3c_cfg_t *val)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  lis2duxs12_i3c_if_ctrl_t i3c_cfg;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 800344e:	f107 0208 	add.w	r2, r7, #8
 8003452:	2301      	movs	r3, #1
 8003454:	2133      	movs	r1, #51	@ 0x33
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7ff fb62 	bl	8002b20 <lis2duxs12_read_reg>
 800345c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d122      	bne.n	80034aa <lis2duxs12_i3c_configure_set+0x66>
  {
    i3c_cfg.bus_act_sel = (uint8_t)val->bus_act_sel;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	f003 0303 	and.w	r3, r3, #3
 800346c:	b2da      	uxtb	r2, r3
 800346e:	7a3b      	ldrb	r3, [r7, #8]
 8003470:	f362 0301 	bfi	r3, r2, #0, #2
 8003474:	723b      	strb	r3, [r7, #8]
    i3c_cfg.dis_drstdaa = val->drstdaa_en;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	785b      	ldrb	r3, [r3, #1]
 800347a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800347e:	b2da      	uxtb	r2, r3
 8003480:	7a3b      	ldrb	r3, [r7, #8]
 8003482:	f362 1386 	bfi	r3, r2, #6, #1
 8003486:	723b      	strb	r3, [r7, #8]
    i3c_cfg.asf_on = val->asf_on;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	785b      	ldrb	r3, [r3, #1]
 800348c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003490:	b2da      	uxtb	r2, r3
 8003492:	7a3b      	ldrb	r3, [r7, #8]
 8003494:	f362 1345 	bfi	r3, r2, #5, #1
 8003498:	723b      	strb	r3, [r7, #8]
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 800349a:	f107 0208 	add.w	r2, r7, #8
 800349e:	2301      	movs	r3, #1
 80034a0:	2133      	movs	r1, #51	@ 0x33
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff fb59 	bl	8002b5a <lis2duxs12_write_reg>
 80034a8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80034aa:	68fb      	ldr	r3, [r7, #12]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <lis2duxs12_i3c_configure_get>:
  * @param  ctx   communication interface handler.(ptr)
  * @param  val   configuration params
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */int32_t lis2duxs12_i3c_configure_get(const stmdev_ctx_t *ctx, lis2duxs12_i3c_cfg_t *val)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  lis2duxs12_i3c_if_ctrl_t i3c_cfg;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 80034be:	f107 0208 	add.w	r2, r7, #8
 80034c2:	2301      	movs	r3, #1
 80034c4:	2133      	movs	r1, #51	@ 0x33
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7ff fb2a 	bl	8002b20 <lis2duxs12_read_reg>
 80034cc:	60f8      	str	r0, [r7, #12]

  val->drstdaa_en = i3c_cfg.dis_drstdaa;
 80034ce:	7a3b      	ldrb	r3, [r7, #8]
 80034d0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80034d4:	b2d9      	uxtb	r1, r3
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	7853      	ldrb	r3, [r2, #1]
 80034da:	f361 0341 	bfi	r3, r1, #1, #1
 80034de:	7053      	strb	r3, [r2, #1]
  val->asf_on = i3c_cfg.asf_on;
 80034e0:	7a3b      	ldrb	r3, [r7, #8]
 80034e2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80034e6:	b2d9      	uxtb	r1, r3
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	7853      	ldrb	r3, [r2, #1]
 80034ec:	f361 0300 	bfi	r3, r1, #0, #1
 80034f0:	7053      	strb	r3, [r2, #1]

  switch (val->bus_act_sel)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d00e      	beq.n	8003518 <lis2duxs12_i3c_configure_get+0x64>
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	dc10      	bgt.n	8003520 <lis2duxs12_i3c_configure_get+0x6c>
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d002      	beq.n	8003508 <lis2duxs12_i3c_configure_get+0x54>
 8003502:	2b01      	cmp	r3, #1
 8003504:	d004      	beq.n	8003510 <lis2duxs12_i3c_configure_get+0x5c>
 8003506:	e00b      	b.n	8003520 <lis2duxs12_i3c_configure_get+0x6c>
  {
    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_20US:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_20US;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2200      	movs	r2, #0
 800350c:	701a      	strb	r2, [r3, #0]
      break;
 800350e:	e00b      	b.n	8003528 <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_50US:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_50US;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	2201      	movs	r2, #1
 8003514:	701a      	strb	r2, [r3, #0]
      break;
 8003516:	e007      	b.n	8003528 <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_1MS:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_1MS;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	2202      	movs	r2, #2
 800351c:	701a      	strb	r2, [r3, #0]
      break;
 800351e:	e003      	b.n	8003528 <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_25MS:
    default:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_25MS;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	2203      	movs	r2, #3
 8003524:	701a      	strb	r2, [r3, #0]
      break;
 8003526:	bf00      	nop
  }

  return ret;
 8003528:	68fb      	ldr	r3, [r7, #12]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <lis2duxs12_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK, SENSOR_HUB_MEM_BANK, STRED_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mem_bank_set(const stmdev_ctx_t *ctx, lis2duxs12_mem_bank_t val)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b084      	sub	sp, #16
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	460b      	mov	r3, r1
 800353c:	70fb      	strb	r3, [r7, #3]
  lis2duxs12_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 800353e:	f107 0208 	add.w	r2, r7, #8
 8003542:	2301      	movs	r3, #1
 8003544:	213f      	movs	r1, #63	@ 0x3f
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff faea 	bl	8002b20 <lis2duxs12_read_reg>
 800354c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10f      	bne.n	8003574 <lis2duxs12_mem_bank_set+0x42>
  {
    func_cfg_access.emb_func_reg_access = ((uint8_t)val & 0x1U);
 8003554:	78fb      	ldrb	r3, [r7, #3]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	b2da      	uxtb	r2, r3
 800355c:	7a3b      	ldrb	r3, [r7, #8]
 800355e:	f362 13c7 	bfi	r3, r2, #7, #1
 8003562:	723b      	strb	r3, [r7, #8]
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8003564:	f107 0208 	add.w	r2, r7, #8
 8003568:	2301      	movs	r3, #1
 800356a:	213f      	movs	r1, #63	@ 0x3f
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff faf4 	bl	8002b5a <lis2duxs12_write_reg>
 8003572:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003574:	68fb      	ldr	r3, [r7, #12]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <lis2duxs12_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_fifo_mode_set(const stmdev_ctx_t *ctx, lis2duxs12_fifo_mode_t val)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b08a      	sub	sp, #40	@ 0x28
 8003582:	af00      	add	r7, sp, #0
 8003584:	60f8      	str	r0, [r7, #12]
 8003586:	1d3b      	adds	r3, r7, #4
 8003588:	e883 0006 	stmia.w	r3, {r1, r2}
  lis2duxs12_fifo_ctrl_t fifo_ctrl;
  lis2duxs12_fifo_wtm_t fifo_wtm;
  lis2duxs12_fifo_batch_dec_t fifo_batch;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 800358c:	f107 0220 	add.w	r2, r7, #32
 8003590:	2301      	movs	r3, #1
 8003592:	2113      	movs	r1, #19
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f7ff fac3 	bl	8002b20 <lis2duxs12_read_reg>
 800359a:	6278      	str	r0, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_CTRL, (uint8_t *)&fifo_ctrl, 1);
 800359c:	f107 021c 	add.w	r2, r7, #28
 80035a0:	2301      	movs	r3, #1
 80035a2:	2115      	movs	r1, #21
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f7ff fabb 	bl	8002b20 <lis2duxs12_read_reg>
 80035aa:	4602      	mov	r2, r0
 80035ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ae:	4413      	add	r3, r2
 80035b0:	627b      	str	r3, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_BATCH_DEC, (uint8_t *)&fifo_batch, 1);
 80035b2:	f107 0214 	add.w	r2, r7, #20
 80035b6:	2301      	movs	r3, #1
 80035b8:	2147      	movs	r1, #71	@ 0x47
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f7ff fab0 	bl	8002b20 <lis2duxs12_read_reg>
 80035c0:	4602      	mov	r2, r0
 80035c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c4:	4413      	add	r3, r2
 80035c6:	627b      	str	r3, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_WTM, (uint8_t *)&fifo_wtm, 1);
 80035c8:	f107 0218 	add.w	r2, r7, #24
 80035cc:	2301      	movs	r3, #1
 80035ce:	2116      	movs	r1, #22
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f7ff faa5 	bl	8002b20 <lis2duxs12_read_reg>
 80035d6:	4602      	mov	r2, r0
 80035d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035da:	4413      	add	r3, r2
 80035dc:	627b      	str	r3, [r7, #36]	@ 0x24

  if (ret == 0)
 80035de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f040 808a 	bne.w	80036fa <lis2duxs12_fifo_mode_set+0x17c>
  {
    /* set FIFO mode */
    if (val.operation != LIS2DUXS12_FIFO_OFF)
 80035e6:	793b      	ldrb	r3, [r7, #4]
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d00e      	beq.n	800360a <lis2duxs12_fifo_mode_set+0x8c>
    {
      ctrl4.fifo_en = 1;
 80035ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80035f0:	f043 0308 	orr.w	r3, r3, #8
 80035f4:	f887 3020 	strb.w	r3, [r7, #32]
      fifo_ctrl.fifo_mode = ((uint8_t)val.operation & 0x7U);
 80035f8:	793b      	ldrb	r3, [r7, #4]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	7f3b      	ldrb	r3, [r7, #28]
 8003602:	f362 0302 	bfi	r3, r2, #0, #3
 8003606:	773b      	strb	r3, [r7, #28]
 8003608:	e005      	b.n	8003616 <lis2duxs12_fifo_mode_set+0x98>
    }
    else
    {
      ctrl4.fifo_en = 0;
 800360a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800360e:	f023 0308 	bic.w	r3, r3, #8
 8003612:	f887 3020 	strb.w	r3, [r7, #32]
    }

    /* set fifo depth (1X/2X) */
    fifo_ctrl.fifo_depth = (uint8_t)val.store;
 8003616:	797b      	ldrb	r3, [r7, #5]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	b2da      	uxtb	r2, r3
 800361e:	7f3b      	ldrb	r3, [r7, #28]
 8003620:	f362 1386 	bfi	r3, r2, #6, #1
 8003624:	773b      	strb	r3, [r7, #28]

    /* Set xl_only_fifo */
    fifo_wtm.xl_only_fifo = val.xl_only;
 8003626:	79bb      	ldrb	r3, [r7, #6]
 8003628:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800362c:	b2da      	uxtb	r2, r3
 800362e:	7e3b      	ldrb	r3, [r7, #24]
 8003630:	f362 13c7 	bfi	r3, r2, #7, #1
 8003634:	763b      	strb	r3, [r7, #24]

    /* set batching info */
    if (val.batch.dec_ts != LIS2DUXS12_DEC_TS_OFF)
 8003636:	7a3b      	ldrb	r3, [r7, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00f      	beq.n	800365c <lis2duxs12_fifo_mode_set+0xde>
    {
      fifo_batch.dec_ts_batch = (uint8_t)val.batch.dec_ts;
 800363c:	7a3b      	ldrb	r3, [r7, #8]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	b2da      	uxtb	r2, r3
 8003644:	7d3b      	ldrb	r3, [r7, #20]
 8003646:	f362 03c4 	bfi	r3, r2, #3, #2
 800364a:	753b      	strb	r3, [r7, #20]
      fifo_batch.bdr_xl = (uint8_t)val.batch.bdr_xl;
 800364c:	7a7b      	ldrb	r3, [r7, #9]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	b2da      	uxtb	r2, r3
 8003654:	7d3b      	ldrb	r3, [r7, #20]
 8003656:	f362 0302 	bfi	r3, r2, #0, #3
 800365a:	753b      	strb	r3, [r7, #20]
    }

    fifo_ctrl.cfg_chg_en = val.cfg_change_in_fifo;
 800365c:	79fb      	ldrb	r3, [r7, #7]
 800365e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003662:	b2da      	uxtb	r2, r3
 8003664:	7f3b      	ldrb	r3, [r7, #28]
 8003666:	f362 13c7 	bfi	r3, r2, #7, #1
 800366a:	773b      	strb	r3, [r7, #28]

    /* set watermark */
    if (val.watermark > 0U)
 800366c:	79bb      	ldrb	r3, [r7, #6]
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d014      	beq.n	80036a2 <lis2duxs12_fifo_mode_set+0x124>
    {
      fifo_ctrl.stop_on_fth = (val.fifo_event == LIS2DUXS12_FIFO_EV_WTM) ? 1 : 0;
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	bf0c      	ite	eq
 8003684:	2301      	moveq	r3, #1
 8003686:	2300      	movne	r3, #0
 8003688:	b2da      	uxtb	r2, r3
 800368a:	7f3b      	ldrb	r3, [r7, #28]
 800368c:	f362 03c3 	bfi	r3, r2, #3, #1
 8003690:	773b      	strb	r3, [r7, #28]
      fifo_wtm.fth = val.watermark;
 8003692:	79bb      	ldrb	r3, [r7, #6]
 8003694:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8003698:	b2da      	uxtb	r2, r3
 800369a:	7e3b      	ldrb	r3, [r7, #24]
 800369c:	f362 0306 	bfi	r3, r2, #0, #7
 80036a0:	763b      	strb	r3, [r7, #24]
    }

    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_BATCH_DEC, (uint8_t *)&fifo_batch, 1);
 80036a2:	f107 0214 	add.w	r2, r7, #20
 80036a6:	2301      	movs	r3, #1
 80036a8:	2147      	movs	r1, #71	@ 0x47
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f7ff fa55 	bl	8002b5a <lis2duxs12_write_reg>
 80036b0:	4602      	mov	r2, r0
 80036b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b4:	4413      	add	r3, r2
 80036b6:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_WTM, (uint8_t *)&fifo_wtm, 1);
 80036b8:	f107 0218 	add.w	r2, r7, #24
 80036bc:	2301      	movs	r3, #1
 80036be:	2116      	movs	r1, #22
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f7ff fa4a 	bl	8002b5a <lis2duxs12_write_reg>
 80036c6:	4602      	mov	r2, r0
 80036c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ca:	4413      	add	r3, r2
 80036cc:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_CTRL, (uint8_t *)&fifo_ctrl, 1);
 80036ce:	f107 021c 	add.w	r2, r7, #28
 80036d2:	2301      	movs	r3, #1
 80036d4:	2115      	movs	r1, #21
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f7ff fa3f 	bl	8002b5a <lis2duxs12_write_reg>
 80036dc:	4602      	mov	r2, r0
 80036de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e0:	4413      	add	r3, r2
 80036e2:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 80036e4:	f107 0220 	add.w	r2, r7, #32
 80036e8:	2301      	movs	r3, #1
 80036ea:	2113      	movs	r1, #19
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f7ff fa34 	bl	8002b5a <lis2duxs12_write_reg>
 80036f2:	4602      	mov	r2, r0
 80036f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f6:	4413      	add	r3, r2
 80036f8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  return ret;
 80036fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3728      	adds	r7, #40	@ 0x28
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d103      	bne.n	8003720 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8003718:	f04f 33ff 	mov.w	r3, #4294967295
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	e067      	b.n	80037f0 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	7b1a      	ldrb	r2, [r3, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	695a      	ldr	r2, [r3, #20]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	699a      	ldr	r2, [r3, #24]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a28      	ldr	r2, [pc, #160]	@ (80037fc <LIS2MDL_RegisterBusIO+0xf8>)
 800375c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a27      	ldr	r2, [pc, #156]	@ (8003800 <LIS2MDL_RegisterBusIO+0xfc>)
 8003762:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	69da      	ldr	r2, [r3, #28]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d103      	bne.n	8003782 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 800377a:	f04f 33ff 	mov.w	r3, #4294967295
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	e036      	b.n	80037f0 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4798      	blx	r3
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 800378e:	f04f 33ff 	mov.w	r3, #4294967295
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	e02c      	b.n	80037f0 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d028      	beq.n	80037f0 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d123      	bne.n	80037f0 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d10d      	bne.n	80037cc <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 80037b0:	2334      	movs	r3, #52	@ 0x34
 80037b2:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 80037b4:	7afb      	ldrb	r3, [r7, #11]
 80037b6:	461a      	mov	r2, r3
 80037b8:	2162      	movs	r1, #98	@ 0x62
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fb1b 	bl	8003df6 <LIS2MDL_Write_Reg>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d014      	beq.n	80037f0 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80037c6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ca:	e012      	b.n	80037f2 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d101      	bne.n	80037d8 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	e00c      	b.n	80037f2 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3320      	adds	r3, #32
 80037dc:	2101      	movs	r1, #1
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 ff79 	bl	80046d6 <lis2mdl_i2c_interface_set>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80037ea:	f04f 33ff 	mov.w	r3, #4294967295
 80037ee:	e000      	b.n	80037f2 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 80037f0:	68fb      	ldr	r3, [r7, #12]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	08003e4d 	.word	0x08003e4d
 8003800:	08003ecf 	.word	0x08003ecf

08003804 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	2b03      	cmp	r3, #3
 8003812:	d144      	bne.n	800389e <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003814:	f107 0208 	add.w	r2, r7, #8
 8003818:	2301      	movs	r3, #1
 800381a:	2162      	movs	r1, #98	@ 0x62
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 fb97 	bl	8003f50 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8003828:	f04f 33ff 	mov.w	r3, #4294967295
 800382c:	e06c      	b.n	8003908 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800382e:	f107 020c 	add.w	r2, r7, #12
 8003832:	2301      	movs	r3, #1
 8003834:	2160      	movs	r1, #96	@ 0x60
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 fb8a 	bl	8003f50 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8003842:	f04f 33ff 	mov.w	r3, #4294967295
 8003846:	e05f      	b.n	8003908 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8003848:	7a3b      	ldrb	r3, [r7, #8]
 800384a:	f043 0310 	orr.w	r3, r3, #16
 800384e:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8003850:	7a3b      	ldrb	r3, [r7, #8]
 8003852:	f023 0302 	bic.w	r3, r3, #2
 8003856:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003858:	7b3b      	ldrb	r3, [r7, #12]
 800385a:	2202      	movs	r2, #2
 800385c:	f362 0301 	bfi	r3, r2, #0, #2
 8003860:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8003862:	7b3b      	ldrb	r3, [r7, #12]
 8003864:	f043 030c 	orr.w	r3, r3, #12
 8003868:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 800386a:	f107 0208 	add.w	r2, r7, #8
 800386e:	2301      	movs	r3, #1
 8003870:	2162      	movs	r1, #98	@ 0x62
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fcab 	bl	80041ce <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 800387e:	f04f 33ff 	mov.w	r3, #4294967295
 8003882:	e041      	b.n	8003908 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003884:	f107 020c 	add.w	r2, r7, #12
 8003888:	2301      	movs	r3, #1
 800388a:	2160      	movs	r1, #96	@ 0x60
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 fc9e 	bl	80041ce <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d032      	beq.n	80038fe <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8003898:	f04f 33ff 	mov.w	r3, #4294967295
 800389c:	e034      	b.n	8003908 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3320      	adds	r3, #32
 80038a2:	2101      	movs	r1, #1
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 fe71 	bl	800458c <lis2mdl_block_data_update_set>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d002      	beq.n	80038b6 <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 80038b0:	f04f 33ff 	mov.w	r3, #4294967295
 80038b4:	e028      	b.n	8003908 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3320      	adds	r3, #32
 80038ba:	2102      	movs	r1, #2
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 fde0 	bl	8004482 <lis2mdl_operating_mode_set>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 80038c8:	f04f 33ff 	mov.w	r3, #4294967295
 80038cc:	e01c      	b.n	8003908 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	3320      	adds	r3, #32
 80038d2:	2103      	movs	r1, #3
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 fdfa 	bl	80044ce <lis2mdl_data_rate_set>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 80038e0:	f04f 33ff 	mov.w	r3, #4294967295
 80038e4:	e010      	b.n	8003908 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3320      	adds	r3, #32
 80038ea:	2100      	movs	r1, #0
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 fecc 	bl	800468a <lis2mdl_self_test_set>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80038f8:	f04f 33ff 	mov.w	r3, #4294967295
 80038fc:	e004      	b.n	8003908 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f8a5 	bl	8003a68 <LIS2MDL_MAG_Disable>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8003924:	f04f 33ff 	mov.w	r3, #4294967295
 8003928:	e004      	b.n	8003934 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b03      	cmp	r3, #3
 800394c:	d10b      	bne.n	8003966 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 800394e:	2301      	movs	r3, #1
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	214f      	movs	r1, #79	@ 0x4f
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 fafb 	bl	8003f50 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00e      	beq.n	800397e <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8003960:	f04f 33ff 	mov.w	r3, #4294967295
 8003964:	e00c      	b.n	8003980 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3320      	adds	r3, #32
 800396a:	6839      	ldr	r1, [r7, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f000 fe7b 	bl	8004668 <lis2mdl_device_id_get>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8003978:	f04f 33ff 	mov.w	r3, #4294967295
 800397c:	e000      	b.n	8003980 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2200      	movs	r2, #0
 8003996:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	2200      	movs	r2, #0
 800399c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2201      	movs	r2, #1
 80039a2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	2200      	movs	r2, #0
 80039a8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2200      	movs	r2, #0
 80039ae:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	2200      	movs	r2, #0
 80039b4:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2232      	movs	r2, #50	@ 0x32
 80039ba:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	f04f 0200 	mov.w	r2, #0
 80039c2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	f04f 0200 	mov.w	r2, #0
 80039ca:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	4a04      	ldr	r2, [pc, #16]	@ (80039e0 <LIS2MDL_GetCapabilities+0x58>)
 80039d0:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	42c80000 	.word	0x42c80000

080039e4 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	e032      	b.n	8003a60 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	d11d      	bne.n	8003a3e <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003a02:	f107 020c 	add.w	r2, r7, #12
 8003a06:	2301      	movs	r3, #1
 8003a08:	2160      	movs	r1, #96	@ 0x60
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 faa0 	bl	8003f50 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 8003a16:	f04f 33ff 	mov.w	r3, #4294967295
 8003a1a:	e021      	b.n	8003a60 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8003a1c:	7b3b      	ldrb	r3, [r7, #12]
 8003a1e:	f023 0303 	bic.w	r3, r3, #3
 8003a22:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003a24:	f107 020c 	add.w	r2, r7, #12
 8003a28:	2301      	movs	r3, #1
 8003a2a:	2160      	movs	r1, #96	@ 0x60
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 fbce 	bl	80041ce <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00e      	beq.n	8003a56 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8003a38:	f04f 33ff 	mov.w	r3, #4294967295
 8003a3c:	e010      	b.n	8003a60 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	3320      	adds	r3, #32
 8003a42:	2100      	movs	r1, #0
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fd1c 	bl	8004482 <lis2mdl_operating_mode_set>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8003a50:	f04f 33ff 	mov.w	r3, #4294967295
 8003a54:	e004      	b.n	8003a60 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e033      	b.n	8003ae6 <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b03      	cmp	r3, #3
 8003a84:	d11e      	bne.n	8003ac4 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003a86:	f107 020c 	add.w	r2, r7, #12
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	2160      	movs	r1, #96	@ 0x60
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 fa5e 	bl	8003f50 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8003a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9e:	e022      	b.n	8003ae6 <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003aa0:	7b3b      	ldrb	r3, [r7, #12]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f362 0301 	bfi	r3, r2, #0, #2
 8003aa8:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003aaa:	f107 020c 	add.w	r2, r7, #12
 8003aae:	2301      	movs	r3, #1
 8003ab0:	2160      	movs	r1, #96	@ 0x60
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fb8b 	bl	80041ce <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00e      	beq.n	8003adc <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8003abe:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac2:	e010      	b.n	8003ae6 <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3320      	adds	r3, #32
 8003ac8:	2102      	movs	r1, #2
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 fcd9 	bl	8004482 <lis2mdl_operating_mode_set>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8003ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8003ada:	e004      	b.n	8003ae6 <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float_t *Sensitivity)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8003afe:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
	...

08003b10 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float_t *Odr)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3320      	adds	r3, #32
 8003b22:	f107 020b 	add.w	r2, r7, #11
 8003b26:	4611      	mov	r1, r2
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 fcf7 	bl	800451c <lis2mdl_data_rate_get>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d002      	beq.n	8003b3a <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8003b34:	f04f 33ff 	mov.w	r3, #4294967295
 8003b38:	e023      	b.n	8003b82 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8003b3a:	7afb      	ldrb	r3, [r7, #11]
 8003b3c:	2b03      	cmp	r3, #3
 8003b3e:	d81b      	bhi.n	8003b78 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8003b40:	a201      	add	r2, pc, #4	@ (adr r2, 8003b48 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8003b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b46:	bf00      	nop
 8003b48:	08003b59 	.word	0x08003b59
 8003b4c:	08003b61 	.word	0x08003b61
 8003b50:	08003b69 	.word	0x08003b69
 8003b54:	08003b71 	.word	0x08003b71
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b8c <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8003b5c:	601a      	str	r2, [r3, #0]
      break;
 8003b5e:	e00f      	b.n	8003b80 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	4a0b      	ldr	r2, [pc, #44]	@ (8003b90 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8003b64:	601a      	str	r2, [r3, #0]
      break;
 8003b66:	e00b      	b.n	8003b80 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b94 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8003b6c:	601a      	str	r2, [r3, #0]
      break;
 8003b6e:	e007      	b.n	8003b80 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	4a09      	ldr	r2, [pc, #36]	@ (8003b98 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8003b74:	601a      	str	r2, [r3, #0]
      break;
 8003b76:	e003      	b.n	8003b80 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8003b78:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7c:	60fb      	str	r3, [r7, #12]
      break;
 8003b7e:	bf00      	nop
  }

  return ret;
 8003b80:	68fb      	ldr	r3, [r7, #12]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	41200000 	.word	0x41200000
 8003b90:	41a00000 	.word	0x41a00000
 8003b94:	42480000 	.word	0x42480000
 8003b98:	42c80000 	.word	0x42c80000

08003b9c <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float_t Odr)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8003ba8:	edd7 7a00 	vldr	s15, [r7]
 8003bac:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003bb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb8:	d801      	bhi.n	8003bbe <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	e016      	b.n	8003bec <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003bbe:	edd7 7a00 	vldr	s15, [r7]
 8003bc2:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8003bc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bce:	d801      	bhi.n	8003bd4 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e00b      	b.n	8003bec <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003bd4:	edd7 7a00 	vldr	s15, [r7]
 8003bd8:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8003c60 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8003bdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be4:	d801      	bhi.n	8003bea <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e000      	b.n	8003bec <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8003bea:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8003bec:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b03      	cmp	r3, #3
 8003bf4:	d121      	bne.n	8003c3a <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003bf6:	f107 020c 	add.w	r2, r7, #12
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	2160      	movs	r1, #96	@ 0x60
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f9a6 	bl	8003f50 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 8003c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c0e:	e022      	b.n	8003c56 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	7b3b      	ldrb	r3, [r7, #12]
 8003c1a:	f362 0383 	bfi	r3, r2, #2, #2
 8003c1e:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003c20:	f107 020c 	add.w	r2, r7, #12
 8003c24:	2301      	movs	r3, #1
 8003c26:	2160      	movs	r1, #96	@ 0x60
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 fad0 	bl	80041ce <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00f      	beq.n	8003c54 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003c34:	f04f 33ff 	mov.w	r3, #4294967295
 8003c38:	e00d      	b.n	8003c56 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3320      	adds	r3, #32
 8003c3e:	7bfa      	ldrb	r2, [r7, #15]
 8003c40:	4611      	mov	r1, r2
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fc43 	bl	80044ce <lis2mdl_data_rate_set>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c52:	e000      	b.n	8003c56 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	42480000 	.word	0x42480000

08003c64 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *FullScale = 50;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2232      	movs	r2, #50	@ 0x32
 8003c72:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	6039      	str	r1, [r7, #0]
  (void)pObj;
  (void)FullScale;

  return LIS2MDL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b084      	sub	sp, #16
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3320      	adds	r3, #32
 8003ca8:	f107 0208 	add.w	r2, r7, #8
 8003cac:	4611      	mov	r1, r2
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 fc92 	bl	80045d8 <lis2mdl_magnetic_raw_get>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8003cba:	f04f 33ff 	mov.w	r3, #4294967295
 8003cbe:	e00c      	b.n	8003cda <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003cc0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003cc8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003cd0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b088      	sub	sp, #32
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8003cec:	f04f 0300 	mov.w	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d134      	bne.n	8003d64 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8003cfa:	f107 0218 	add.w	r2, r7, #24
 8003cfe:	2306      	movs	r3, #6
 8003d00:	2168      	movs	r1, #104	@ 0x68
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f924 	bl	8003f50 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <LIS2MDL_MAG_GetAxes+0x32>
    {
      return LIS2MDL_ERROR;
 8003d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d12:	e06c      	b.n	8003dee <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8003d14:	7e7b      	ldrb	r3, [r7, #25]
 8003d16:	b21b      	sxth	r3, r3
 8003d18:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8003d1a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	021b      	lsls	r3, r3, #8
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	7e3a      	ldrb	r2, [r7, #24]
 8003d26:	4413      	add	r3, r2
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	b21b      	sxth	r3, r3
 8003d2c:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8003d2e:	7efb      	ldrb	r3, [r7, #27]
 8003d30:	b21b      	sxth	r3, r3
 8003d32:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8003d34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	021b      	lsls	r3, r3, #8
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	7eba      	ldrb	r2, [r7, #26]
 8003d40:	4413      	add	r3, r2
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	b21b      	sxth	r3, r3
 8003d46:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8003d48:	7f7b      	ldrb	r3, [r7, #29]
 8003d4a:	b21b      	sxth	r3, r3
 8003d4c:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8003d4e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	021b      	lsls	r3, r3, #8
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	7f3a      	ldrb	r2, [r7, #28]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	b21b      	sxth	r3, r3
 8003d60:	82bb      	strh	r3, [r7, #20]
 8003d62:	e00d      	b.n	8003d80 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3320      	adds	r3, #32
 8003d68:	f107 0210 	add.w	r2, r7, #16
 8003d6c:	4611      	mov	r1, r2
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fc32 	bl	80045d8 <lis2mdl_magnetic_raw_get>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8003d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d7e:	e036      	b.n	8003dee <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8003d80:	f107 030c 	add.w	r3, r7, #12
 8003d84:	4619      	mov	r1, r3
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff feb1 	bl	8003aee <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8003d8c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003d90:	ee07 3a90 	vmov	s15, r3
 8003d94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d98:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003da4:	ee17 2a90 	vmov	r2, s15
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8003dac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003db0:	ee07 3a90 	vmov	s15, r3
 8003db4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003db8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dc4:	ee17 2a90 	vmov	r2, s15
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8003dcc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003dd0:	ee07 3a90 	vmov	s15, r3
 8003dd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003de4:	ee17 2a90 	vmov	r2, s15
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3720      	adds	r7, #32
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b082      	sub	sp, #8
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	460b      	mov	r3, r1
 8003e00:	70fb      	strb	r3, [r7, #3]
 8003e02:	4613      	mov	r3, r2
 8003e04:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d10b      	bne.n	8003e26 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8003e0e:	1cba      	adds	r2, r7, #2
 8003e10:	78f9      	ldrb	r1, [r7, #3]
 8003e12:	2301      	movs	r3, #1
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f9da 	bl	80041ce <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d010      	beq.n	8003e42 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003e20:	f04f 33ff 	mov.w	r3, #4294967295
 8003e24:	e00e      	b.n	8003e44 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f103 0020 	add.w	r0, r3, #32
 8003e2c:	1cba      	adds	r2, r7, #2
 8003e2e:	78f9      	ldrb	r1, [r7, #3]
 8003e30:	2301      	movs	r3, #1
 8003e32:	f000 fb08 	bl	8004446 <lis2mdl_write_reg>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d002      	beq.n	8003e42 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e40:	e000      	b.n	8003e44 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003e4c:	b590      	push	{r4, r7, lr}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	607a      	str	r2, [r7, #4]
 8003e56:	461a      	mov	r2, r3
 8003e58:	460b      	mov	r3, r1
 8003e5a:	72fb      	strb	r3, [r7, #11]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10e      	bne.n	8003e8a <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	695c      	ldr	r4, [r3, #20]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	7b1b      	ldrb	r3, [r3, #12]
 8003e74:	4618      	mov	r0, r3
 8003e76:	7afb      	ldrb	r3, [r7, #11]
 8003e78:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	4619      	mov	r1, r3
 8003e80:	893b      	ldrh	r3, [r7, #8]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	47a0      	blx	r4
 8003e86:	4603      	mov	r3, r0
 8003e88:	e01d      	b.n	8003ec6 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	2b03      	cmp	r3, #3
 8003e90:	d10b      	bne.n	8003eaa <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	695c      	ldr	r4, [r3, #20]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	7b1b      	ldrb	r3, [r3, #12]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	7afb      	ldrb	r3, [r7, #11]
 8003e9e:	b299      	uxth	r1, r3
 8003ea0:	893b      	ldrh	r3, [r7, #8]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	47a0      	blx	r4
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	e00d      	b.n	8003ec6 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	695c      	ldr	r4, [r3, #20]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	7b1b      	ldrb	r3, [r3, #12]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	7afb      	ldrb	r3, [r7, #11]
 8003eb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	893b      	ldrh	r3, [r7, #8]
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	47a0      	blx	r4
 8003ec4:	4603      	mov	r3, r0
  }
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd90      	pop	{r4, r7, pc}

08003ece <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003ece:	b590      	push	{r4, r7, lr}
 8003ed0:	b087      	sub	sp, #28
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	460b      	mov	r3, r1
 8003edc:	72fb      	strb	r3, [r7, #11]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10e      	bne.n	8003f0c <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	691c      	ldr	r4, [r3, #16]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	7b1b      	ldrb	r3, [r3, #12]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	7afb      	ldrb	r3, [r7, #11]
 8003efa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	4619      	mov	r1, r3
 8003f02:	893b      	ldrh	r3, [r7, #8]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	47a0      	blx	r4
 8003f08:	4603      	mov	r3, r0
 8003f0a:	e01d      	b.n	8003f48 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	2b03      	cmp	r3, #3
 8003f12:	d10b      	bne.n	8003f2c <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	691c      	ldr	r4, [r3, #16]
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	7b1b      	ldrb	r3, [r3, #12]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	7afb      	ldrb	r3, [r7, #11]
 8003f20:	b299      	uxth	r1, r3
 8003f22:	893b      	ldrh	r3, [r7, #8]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	47a0      	blx	r4
 8003f28:	4603      	mov	r3, r0
 8003f2a:	e00d      	b.n	8003f48 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	691c      	ldr	r4, [r3, #16]
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	7b1b      	ldrb	r3, [r3, #12]
 8003f34:	4618      	mov	r0, r3
 8003f36:	7afb      	ldrb	r3, [r7, #11]
 8003f38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	4619      	mov	r1, r3
 8003f40:	893b      	ldrh	r3, [r7, #8]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	47a0      	blx	r4
 8003f46:	4603      	mov	r3, r0
  }
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	371c      	adds	r7, #28
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd90      	pop	{r4, r7, pc}

08003f50 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08c      	sub	sp, #48	@ 0x30
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	607a      	str	r2, [r7, #4]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	72fb      	strb	r3, [r7, #11]
 8003f60:	4613      	mov	r3, r2
 8003f62:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003f64:	2301      	movs	r3, #1
 8003f66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003f6a:	2340      	movs	r3, #64	@ 0x40
 8003f6c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8003f76:	233d      	movs	r3, #61	@ 0x3d
 8003f78:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003f7a:	2315      	movs	r3, #21
 8003f7c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8003f80:	2316      	movs	r3, #22
 8003f82:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8003f86:	2317      	movs	r3, #23
 8003f88:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 8003f8c:	2314      	movs	r3, #20
 8003f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8003f92:	2344      	movs	r3, #68	@ 0x44
 8003f94:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8003f96:	2302      	movs	r3, #2
 8003f98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8003f9c:	2339      	movs	r3, #57	@ 0x39
 8003f9e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8003fa8:	2329      	movs	r3, #41	@ 0x29
 8003faa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8003fae:	231e      	movs	r3, #30
 8003fb0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 8003fba:	893b      	ldrh	r3, [r7, #8]
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8003fc0:	2310      	movs	r3, #16
 8003fc2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8003fcc:	2340      	movs	r3, #64	@ 0x40
 8003fce:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f103 0020 	add.w	r0, r3, #32
 8003fd8:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8003fdc:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	f000 fa30 	bl	8004446 <lis2mdl_write_reg>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d002      	beq.n	8003ff2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8003fec:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff0:	e0e9      	b.n	80041c6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f103 0020 	add.w	r0, r3, #32
 8003ff8:	f107 021f 	add.w	r2, r7, #31
 8003ffc:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8004000:	2301      	movs	r3, #1
 8004002:	f000 fa20 	bl	8004446 <lis2mdl_write_reg>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 800400c:	f04f 33ff 	mov.w	r3, #4294967295
 8004010:	e0d9      	b.n	80041c6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f103 0020 	add.w	r0, r3, #32
 8004018:	f107 020b 	add.w	r2, r7, #11
 800401c:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8004020:	2301      	movs	r3, #1
 8004022:	f000 fa10 	bl	8004446 <lis2mdl_write_reg>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 800402c:	f04f 33ff 	mov.w	r3, #4294967295
 8004030:	e0c9      	b.n	80041c6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f103 0020 	add.w	r0, r3, #32
 8004038:	f107 021d 	add.w	r2, r7, #29
 800403c:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8004040:	2301      	movs	r3, #1
 8004042:	f000 fa00 	bl	8004446 <lis2mdl_write_reg>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 800404c:	f04f 33ff 	mov.w	r3, #4294967295
 8004050:	e0b9      	b.n	80041c6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f103 0020 	add.w	r0, r3, #32
 8004058:	f107 021e 	add.w	r2, r7, #30
 800405c:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8004060:	2301      	movs	r3, #1
 8004062:	f000 f9f0 	bl	8004446 <lis2mdl_write_reg>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 800406c:	f04f 33ff 	mov.w	r3, #4294967295
 8004070:	e0a9      	b.n	80041c6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f103 0020 	add.w	r0, r3, #32
 8004078:	f107 0220 	add.w	r2, r7, #32
 800407c:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004080:	2301      	movs	r3, #1
 8004082:	f000 f9e0 	bl	8004446 <lis2mdl_write_reg>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 800408c:	f04f 33ff 	mov.w	r3, #4294967295
 8004090:	e099      	b.n	80041c6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f103 0020 	add.w	r0, r3, #32
 8004098:	f107 021c 	add.w	r2, r7, #28
 800409c:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 80040a0:	2301      	movs	r3, #1
 80040a2:	f000 f9b2 	bl	800440a <lis2mdl_read_reg>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 80040ac:	f04f 33ff 	mov.w	r3, #4294967295
 80040b0:	e089      	b.n	80041c6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80040b2:	7f3b      	ldrb	r3, [r7, #28]
 80040b4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d102      	bne.n	80040c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80040bc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80040c0:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f103 0020 	add.w	r0, r3, #32
 80040c8:	f107 021c 	add.w	r2, r7, #28
 80040cc:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 80040d0:	2301      	movs	r3, #1
 80040d2:	f000 f9b8 	bl	8004446 <lis2mdl_write_reg>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d002      	beq.n	80040e2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 80040dc:	f04f 33ff 	mov.w	r3, #4294967295
 80040e0:	e071      	b.n	80041c6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f103 0020 	add.w	r0, r3, #32
 80040e8:	f107 0214 	add.w	r2, r7, #20
 80040ec:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80040f0:	2306      	movs	r3, #6
 80040f2:	f000 f98a 	bl	800440a <lis2mdl_read_reg>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 80040fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004100:	e061      	b.n	80041c6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f103 0020 	add.w	r0, r3, #32
 8004108:	f107 021b 	add.w	r2, r7, #27
 800410c:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8004110:	2301      	movs	r3, #1
 8004112:	f000 f97a 	bl	800440a <lis2mdl_read_reg>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 800411c:	f04f 33ff 	mov.w	r3, #4294967295
 8004120:	e051      	b.n	80041c6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8004122:	7efa      	ldrb	r2, [r7, #27]
 8004124:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004128:	4013      	ands	r3, r2
 800412a:	b2db      	uxtb	r3, r3
 800412c:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8004130:	429a      	cmp	r2, r3
 8004132:	d1e6      	bne.n	8004102 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f103 0020 	add.w	r0, r3, #32
 800413a:	f107 021b 	add.w	r2, r7, #27
 800413e:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8004142:	2301      	movs	r3, #1
 8004144:	f000 f961 	bl	800440a <lis2mdl_read_reg>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 800414e:	f04f 33ff 	mov.w	r3, #4294967295
 8004152:	e038      	b.n	80041c6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8004154:	7efa      	ldrb	r2, [r7, #27]
 8004156:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800415a:	4013      	ands	r3, r2
 800415c:	b2db      	uxtb	r3, r3
 800415e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004162:	429a      	cmp	r2, r3
 8004164:	d1e6      	bne.n	8004134 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f103 0020 	add.w	r0, r3, #32
 800416c:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8004170:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004174:	2301      	movs	r3, #1
 8004176:	f000 f966 	bl	8004446 <lis2mdl_write_reg>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8004180:	f04f 33ff 	mov.w	r3, #4294967295
 8004184:	e01f      	b.n	80041c6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f103 0020 	add.w	r0, r3, #32
 800418c:	893b      	ldrh	r3, [r7, #8]
 800418e:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	f000 f939 	bl	800440a <lis2mdl_read_reg>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 800419e:	f04f 33ff 	mov.w	r3, #4294967295
 80041a2:	e010      	b.n	80041c6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f103 0020 	add.w	r0, r3, #32
 80041aa:	f107 0220 	add.w	r2, r7, #32
 80041ae:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80041b2:	2301      	movs	r3, #1
 80041b4:	f000 f947 	bl	8004446 <lis2mdl_write_reg>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d002      	beq.n	80041c4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 80041be:	f04f 33ff 	mov.w	r3, #4294967295
 80041c2:	e000      	b.n	80041c6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3730      	adds	r7, #48	@ 0x30
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b08c      	sub	sp, #48	@ 0x30
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	60f8      	str	r0, [r7, #12]
 80041d6:	607a      	str	r2, [r7, #4]
 80041d8:	461a      	mov	r2, r3
 80041da:	460b      	mov	r3, r1
 80041dc:	72fb      	strb	r3, [r7, #11]
 80041de:	4613      	mov	r3, r2
 80041e0:	813b      	strh	r3, [r7, #8]
  (void)Length;
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 80041e2:	2301      	movs	r3, #1
 80041e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 80041e8:	2340      	movs	r3, #64	@ 0x40
 80041ea:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 80041f4:	233c      	movs	r3, #60	@ 0x3c
 80041f6:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 80041f8:	2315      	movs	r3, #21
 80041fa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 80041fe:	2316      	movs	r3, #22
 8004200:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8004204:	2317      	movs	r3, #23
 8004206:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 800420a:	2300      	movs	r3, #0
 800420c:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 800420e:	2314      	movs	r3, #20
 8004210:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8004214:	2344      	movs	r3, #68	@ 0x44
 8004216:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8004218:	2339      	movs	r3, #57	@ 0x39
 800421a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 800421e:	2380      	movs	r3, #128	@ 0x80
 8004220:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8004224:	2329      	movs	r3, #41	@ 0x29
 8004226:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 800422a:	231e      	movs	r3, #30
 800422c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 8004230:	2301      	movs	r3, #1
 8004232:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8004236:	2310      	movs	r3, #16
 8004238:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 800423c:	2300      	movs	r3, #0
 800423e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8004242:	2340      	movs	r3, #64	@ 0x40
 8004244:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8004248:	230e      	movs	r3, #14
 800424a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f103 0020 	add.w	r0, r3, #32
 8004254:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8004258:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800425c:	2301      	movs	r3, #1
 800425e:	f000 f8f2 	bl	8004446 <lis2mdl_write_reg>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d002      	beq.n	800426e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8004268:	f04f 33ff 	mov.w	r3, #4294967295
 800426c:	e0c9      	b.n	8004402 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f103 0020 	add.w	r0, r3, #32
 8004274:	f107 021f 	add.w	r2, r7, #31
 8004278:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 800427c:	2301      	movs	r3, #1
 800427e:	f000 f8e2 	bl	8004446 <lis2mdl_write_reg>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8004288:	f04f 33ff 	mov.w	r3, #4294967295
 800428c:	e0b9      	b.n	8004402 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f103 0020 	add.w	r0, r3, #32
 8004294:	f107 020b 	add.w	r2, r7, #11
 8004298:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800429c:	2301      	movs	r3, #1
 800429e:	f000 f8d2 	bl	8004446 <lis2mdl_write_reg>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d002      	beq.n	80042ae <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 80042a8:	f04f 33ff 	mov.w	r3, #4294967295
 80042ac:	e0a9      	b.n	8004402 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f103 0020 	add.w	r0, r3, #32
 80042b4:	f107 021e 	add.w	r2, r7, #30
 80042b8:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 80042bc:	2301      	movs	r3, #1
 80042be:	f000 f8c2 	bl	8004446 <lis2mdl_write_reg>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 80042c8:	f04f 33ff 	mov.w	r3, #4294967295
 80042cc:	e099      	b.n	8004402 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f103 0020 	add.w	r0, r3, #32
 80042d4:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 80042d8:	2301      	movs	r3, #1
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	f000 f8b3 	bl	8004446 <lis2mdl_write_reg>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 80042e6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ea:	e08a      	b.n	8004402 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f103 0020 	add.w	r0, r3, #32
 80042f2:	f107 021d 	add.w	r2, r7, #29
 80042f6:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 80042fa:	2301      	movs	r3, #1
 80042fc:	f000 f8a3 	bl	8004446 <lis2mdl_write_reg>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8004306:	f04f 33ff 	mov.w	r3, #4294967295
 800430a:	e07a      	b.n	8004402 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f103 0020 	add.w	r0, r3, #32
 8004312:	f107 0220 	add.w	r2, r7, #32
 8004316:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800431a:	2301      	movs	r3, #1
 800431c:	f000 f893 	bl	8004446 <lis2mdl_write_reg>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d002      	beq.n	800432c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8004326:	f04f 33ff 	mov.w	r3, #4294967295
 800432a:	e06a      	b.n	8004402 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f103 0020 	add.w	r0, r3, #32
 8004332:	f107 021c 	add.w	r2, r7, #28
 8004336:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 800433a:	2301      	movs	r3, #1
 800433c:	f000 f865 	bl	800440a <lis2mdl_read_reg>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8004346:	f04f 33ff 	mov.w	r3, #4294967295
 800434a:	e05a      	b.n	8004402 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 800434c:	7f3b      	ldrb	r3, [r7, #28]
 800434e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004352:	429a      	cmp	r2, r3
 8004354:	d102      	bne.n	800435c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8004356:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800435a:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f103 0020 	add.w	r0, r3, #32
 8004362:	f107 021c 	add.w	r2, r7, #28
 8004366:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 800436a:	2301      	movs	r3, #1
 800436c:	f000 f86b 	bl	8004446 <lis2mdl_write_reg>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d002      	beq.n	800437c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8004376:	f04f 33ff 	mov.w	r3, #4294967295
 800437a:	e042      	b.n	8004402 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f103 0020 	add.w	r0, r3, #32
 8004382:	f107 0214 	add.w	r2, r7, #20
 8004386:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 800438a:	2306      	movs	r3, #6
 800438c:	f000 f83d 	bl	800440a <lis2mdl_read_reg>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8004396:	f04f 33ff 	mov.w	r3, #4294967295
 800439a:	e032      	b.n	8004402 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f103 0020 	add.w	r0, r3, #32
 80043a2:	f107 021b 	add.w	r2, r7, #27
 80043a6:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80043aa:	2301      	movs	r3, #1
 80043ac:	f000 f82d 	bl	800440a <lis2mdl_read_reg>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d002      	beq.n	80043bc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 80043b6:	f04f 33ff 	mov.w	r3, #4294967295
 80043ba:	e022      	b.n	8004402 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 80043bc:	7efa      	ldrb	r2, [r7, #27]
 80043be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80043c2:	4013      	ands	r3, r2
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d1e6      	bne.n	800439c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f103 0020 	add.w	r0, r3, #32
 80043d4:	f107 021b 	add.w	r2, r7, #27
 80043d8:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 80043dc:	2301      	movs	r3, #1
 80043de:	f000 f814 	bl	800440a <lis2mdl_read_reg>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 80043e8:	f04f 33ff 	mov.w	r3, #4294967295
 80043ec:	e009      	b.n	8004402 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 80043ee:	7efa      	ldrb	r2, [r7, #27]
 80043f0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80043f4:	4013      	ands	r3, r2
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d1e6      	bne.n	80043ce <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3730      	adds	r7, #48	@ 0x30
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <lis2mdl_read_reg>:
  *
  */
int32_t __weak lis2mdl_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800440a:	b590      	push	{r4, r7, lr}
 800440c:	b087      	sub	sp, #28
 800440e:	af00      	add	r7, sp, #0
 8004410:	60f8      	str	r0, [r7, #12]
 8004412:	607a      	str	r2, [r7, #4]
 8004414:	461a      	mov	r2, r3
 8004416:	460b      	mov	r3, r1
 8004418:	72fb      	strb	r3, [r7, #11]
 800441a:	4613      	mov	r3, r2
 800441c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d102      	bne.n	800442a <lis2mdl_read_reg+0x20>
  {
    return -1;
 8004424:	f04f 33ff 	mov.w	r3, #4294967295
 8004428:	e009      	b.n	800443e <lis2mdl_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	685c      	ldr	r4, [r3, #4]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	68d8      	ldr	r0, [r3, #12]
 8004432:	893b      	ldrh	r3, [r7, #8]
 8004434:	7af9      	ldrb	r1, [r7, #11]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	47a0      	blx	r4
 800443a:	6178      	str	r0, [r7, #20]

  return ret;
 800443c:	697b      	ldr	r3, [r7, #20]
}
 800443e:	4618      	mov	r0, r3
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	bd90      	pop	{r4, r7, pc}

08004446 <lis2mdl_write_reg>:
  *
  */
int32_t __weak lis2mdl_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8004446:	b590      	push	{r4, r7, lr}
 8004448:	b087      	sub	sp, #28
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	461a      	mov	r2, r3
 8004452:	460b      	mov	r3, r1
 8004454:	72fb      	strb	r3, [r7, #11]
 8004456:	4613      	mov	r3, r2
 8004458:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d102      	bne.n	8004466 <lis2mdl_write_reg+0x20>
  {
    return -1;
 8004460:	f04f 33ff 	mov.w	r3, #4294967295
 8004464:	e009      	b.n	800447a <lis2mdl_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681c      	ldr	r4, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	68d8      	ldr	r0, [r3, #12]
 800446e:	893b      	ldrh	r3, [r7, #8]
 8004470:	7af9      	ldrb	r1, [r7, #11]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	47a0      	blx	r4
 8004476:	6178      	str	r0, [r7, #20]

  return ret;
 8004478:	697b      	ldr	r3, [r7, #20]
}
 800447a:	4618      	mov	r0, r3
 800447c:	371c      	adds	r7, #28
 800447e:	46bd      	mov	sp, r7
 8004480:	bd90      	pop	{r4, r7, pc}

08004482 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(const stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
 800448a:	460b      	mov	r3, r1
 800448c:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800448e:	f107 0208 	add.w	r2, r7, #8
 8004492:	2301      	movs	r3, #1
 8004494:	2160      	movs	r1, #96	@ 0x60
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7ff ffb7 	bl	800440a <lis2mdl_read_reg>
 800449c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10f      	bne.n	80044c4 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 80044a4:	78fb      	ldrb	r3, [r7, #3]
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	7a3b      	ldrb	r3, [r7, #8]
 80044ae:	f362 0301 	bfi	r3, r2, #0, #2
 80044b2:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80044b4:	f107 0208 	add.w	r2, r7, #8
 80044b8:	2301      	movs	r3, #1
 80044ba:	2160      	movs	r1, #96	@ 0x60
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7ff ffc2 	bl	8004446 <lis2mdl_write_reg>
 80044c2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80044c4:	68fb      	ldr	r3, [r7, #12]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(const stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b084      	sub	sp, #16
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
 80044d6:	460b      	mov	r3, r1
 80044d8:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80044da:	f107 0208 	add.w	r2, r7, #8
 80044de:	2301      	movs	r3, #1
 80044e0:	2160      	movs	r1, #96	@ 0x60
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7ff ff91 	bl	800440a <lis2mdl_read_reg>
 80044e8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10f      	bne.n	8004510 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80044f0:	78fb      	ldrb	r3, [r7, #3]
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	7a3b      	ldrb	r3, [r7, #8]
 80044fa:	f362 0383 	bfi	r3, r2, #2, #2
 80044fe:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004500:	f107 0208 	add.w	r2, r7, #8
 8004504:	2301      	movs	r3, #1
 8004506:	2160      	movs	r1, #96	@ 0x60
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7ff ff9c 	bl	8004446 <lis2mdl_write_reg>
 800450e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004510:	68fb      	ldr	r3, [r7, #12]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(const stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004526:	f107 0208 	add.w	r2, r7, #8
 800452a:	2301      	movs	r3, #1
 800452c:	2160      	movs	r1, #96	@ 0x60
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7ff ff6b 	bl	800440a <lis2mdl_read_reg>
 8004534:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8004536:	7a3b      	ldrb	r3, [r7, #8]
 8004538:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b03      	cmp	r3, #3
 8004540:	d81a      	bhi.n	8004578 <lis2mdl_data_rate_get+0x5c>
 8004542:	a201      	add	r2, pc, #4	@ (adr r2, 8004548 <lis2mdl_data_rate_get+0x2c>)
 8004544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004548:	08004559 	.word	0x08004559
 800454c:	08004561 	.word	0x08004561
 8004550:	08004569 	.word	0x08004569
 8004554:	08004571 	.word	0x08004571
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	2200      	movs	r2, #0
 800455c:	701a      	strb	r2, [r3, #0]
      break;
 800455e:	e00f      	b.n	8004580 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2201      	movs	r2, #1
 8004564:	701a      	strb	r2, [r3, #0]
      break;
 8004566:	e00b      	b.n	8004580 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2202      	movs	r2, #2
 800456c:	701a      	strb	r2, [r3, #0]
      break;
 800456e:	e007      	b.n	8004580 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2203      	movs	r2, #3
 8004574:	701a      	strb	r2, [r3, #0]
      break;
 8004576:	e003      	b.n	8004580 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2200      	movs	r2, #0
 800457c:	701a      	strb	r2, [r3, #0]
      break;
 800457e:	bf00      	nop
  }

  return ret;
 8004580:	68fb      	ldr	r3, [r7, #12]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop

0800458c <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	460b      	mov	r3, r1
 8004596:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004598:	f107 0208 	add.w	r2, r7, #8
 800459c:	2301      	movs	r3, #1
 800459e:	2162      	movs	r1, #98	@ 0x62
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7ff ff32 	bl	800440a <lis2mdl_read_reg>
 80045a6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10f      	bne.n	80045ce <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80045ae:	78fb      	ldrb	r3, [r7, #3]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	7a3b      	ldrb	r3, [r7, #8]
 80045b8:	f362 1304 	bfi	r3, r2, #4, #1
 80045bc:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80045be:	f107 0208 	add.w	r2, r7, #8
 80045c2:	2301      	movs	r3, #1
 80045c4:	2162      	movs	r1, #98	@ 0x62
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7ff ff3d 	bl	8004446 <lis2mdl_write_reg>
 80045cc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80045ce:	68fb      	ldr	r3, [r7, #12]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 80045e2:	f107 020c 	add.w	r2, r7, #12
 80045e6:	2306      	movs	r3, #6
 80045e8:	2168      	movs	r1, #104	@ 0x68
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7ff ff0d 	bl	800440a <lis2mdl_read_reg>
 80045f0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80045f2:	7b7b      	ldrb	r3, [r7, #13]
 80045f4:	b21a      	sxth	r2, r3
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004600:	b29b      	uxth	r3, r3
 8004602:	021b      	lsls	r3, r3, #8
 8004604:	b29b      	uxth	r3, r3
 8004606:	7b3a      	ldrb	r2, [r7, #12]
 8004608:	4413      	add	r3, r2
 800460a:	b29b      	uxth	r3, r3
 800460c:	b21a      	sxth	r2, r3
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004612:	7bfa      	ldrb	r2, [r7, #15]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	3302      	adds	r3, #2
 8004618:	b212      	sxth	r2, r2
 800461a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	3302      	adds	r3, #2
 8004620:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004624:	b29b      	uxth	r3, r3
 8004626:	021b      	lsls	r3, r3, #8
 8004628:	b29b      	uxth	r3, r3
 800462a:	7bba      	ldrb	r2, [r7, #14]
 800462c:	4413      	add	r3, r2
 800462e:	b29a      	uxth	r2, r3
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	3302      	adds	r3, #2
 8004634:	b212      	sxth	r2, r2
 8004636:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004638:	7c7a      	ldrb	r2, [r7, #17]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	3304      	adds	r3, #4
 800463e:	b212      	sxth	r2, r2
 8004640:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	3304      	adds	r3, #4
 8004646:	f9b3 3000 	ldrsh.w	r3, [r3]
 800464a:	b29b      	uxth	r3, r3
 800464c:	021b      	lsls	r3, r3, #8
 800464e:	b29b      	uxth	r3, r3
 8004650:	7c3a      	ldrb	r2, [r7, #16]
 8004652:	4413      	add	r3, r2
 8004654:	b29a      	uxth	r2, r3
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	3304      	adds	r3, #4
 800465a:	b212      	sxth	r2, r2
 800465c:	801a      	strh	r2, [r3, #0]

  return ret;
 800465e:	697b      	ldr	r3, [r7, #20]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8004672:	2301      	movs	r3, #1
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	214f      	movs	r1, #79	@ 0x4f
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f7ff fec6 	bl	800440a <lis2mdl_read_reg>
 800467e:	60f8      	str	r0, [r7, #12]

  return ret;
 8004680:	68fb      	ldr	r3, [r7, #12]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b084      	sub	sp, #16
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	460b      	mov	r3, r1
 8004694:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004696:	f107 0208 	add.w	r2, r7, #8
 800469a:	2301      	movs	r3, #1
 800469c:	2162      	movs	r1, #98	@ 0x62
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7ff feb3 	bl	800440a <lis2mdl_read_reg>
 80046a4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10f      	bne.n	80046cc <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 80046ac:	78fb      	ldrb	r3, [r7, #3]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	7a3b      	ldrb	r3, [r7, #8]
 80046b6:	f362 0341 	bfi	r3, r2, #1, #1
 80046ba:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80046bc:	f107 0208 	add.w	r2, r7, #8
 80046c0:	2301      	movs	r3, #1
 80046c2:	2162      	movs	r1, #98	@ 0x62
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff febe 	bl	8004446 <lis2mdl_write_reg>
 80046ca:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80046cc:	68fb      	ldr	r3, [r7, #12]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(const stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b084      	sub	sp, #16
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
 80046de:	460b      	mov	r3, r1
 80046e0:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80046e2:	f107 0208 	add.w	r2, r7, #8
 80046e6:	2301      	movs	r3, #1
 80046e8:	2162      	movs	r1, #98	@ 0x62
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7ff fe8d 	bl	800440a <lis2mdl_read_reg>
 80046f0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10f      	bne.n	8004718 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 80046f8:	78fb      	ldrb	r3, [r7, #3]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	7a3b      	ldrb	r3, [r7, #8]
 8004702:	f362 1345 	bfi	r3, r2, #5, #1
 8004706:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004708:	f107 0208 	add.w	r2, r7, #8
 800470c:	2301      	movs	r3, #1
 800470e:	2162      	movs	r1, #98	@ 0x62
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff fe98 	bl	8004446 <lis2mdl_write_reg>
 8004716:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004718:	68fb      	ldr	r3, [r7, #12]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
	...

08004724 <LPS22DF_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_RegisterBusIO(LPS22DF_Object_t *pObj, LPS22DF_IO_t *pIO)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22DF_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d103      	bne.n	8004740 <LPS22DF_RegisterBusIO+0x1c>
  {
    ret = LPS22DF_ERROR;
 8004738:	f04f 33ff 	mov.w	r3, #4294967295
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	e051      	b.n	80047e4 <LPS22DF_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	7b1a      	ldrb	r2, [r3, #12]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	695a      	ldr	r2, [r3, #20]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	699a      	ldr	r2, [r3, #24]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a1d      	ldr	r2, [pc, #116]	@ (80047f0 <LPS22DF_RegisterBusIO+0xcc>)
 800477c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a1c      	ldr	r2, [pc, #112]	@ (80047f4 <LPS22DF_RegisterBusIO+0xd0>)
 8004782:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	69da      	ldr	r2, [r3, #28]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d103      	bne.n	80047a2 <LPS22DF_RegisterBusIO+0x7e>
    {
      ret = LPS22DF_ERROR;
 800479a:	f04f 33ff 	mov.w	r3, #4294967295
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	e020      	b.n	80047e4 <LPS22DF_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22DF_OK)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4798      	blx	r3
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <LPS22DF_RegisterBusIO+0x92>
    {
      ret = LPS22DF_ERROR;
 80047ae:	f04f 33ff 	mov.w	r3, #4294967295
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	e016      	b.n	80047e4 <LPS22DF_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22DF_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d112      	bne.n	80047e4 <LPS22DF_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10d      	bne.n	80047e4 <LPS22DF_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x20;
 80047c8:	2320      	movs	r3, #32
 80047ca:	72fb      	strb	r3, [r7, #11]

          if (LPS22DF_Write_Reg(pObj, LPS22DF_IF_CTRL, data) != LPS22DF_OK)
 80047cc:	7afb      	ldrb	r3, [r7, #11]
 80047ce:	461a      	mov	r2, r3
 80047d0:	210e      	movs	r1, #14
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f9f3 	bl	8004bbe <LPS22DF_Write_Reg>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <LPS22DF_RegisterBusIO+0xc0>
          {
            ret = LPS22DF_ERROR;
 80047de:	f04f 33ff 	mov.w	r3, #4294967295
 80047e2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80047e4:	68fb      	ldr	r3, [r7, #12]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	08004f61 	.word	0x08004f61
 80047f4:	08004f97 	.word	0x08004f97

080047f8 <LPS22DF_Init>:
  * @brief  Initialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_Init(LPS22DF_Object_t *pObj)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004806:	2b00      	cmp	r3, #0
 8004808:	d108      	bne.n	800481c <LPS22DF_Init+0x24>
  {
    if (LPS22DF_Initialize(pObj) != LPS22DF_OK)
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fb4c 	bl	8004ea8 <LPS22DF_Initialize>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <LPS22DF_Init+0x24>
    {
      return LPS22DF_ERROR;
 8004816:	f04f 33ff 	mov.w	r3, #4294967295
 800481a:	e004      	b.n	8004826 <LPS22DF_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22DF_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <LPS22DF_DeInit>:
  * @brief  Deinitialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_DeInit(LPS22DF_Object_t *pObj)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b082      	sub	sp, #8
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800483c:	2b01      	cmp	r3, #1
 800483e:	d111      	bne.n	8004864 <LPS22DF_DeInit+0x36>
  {
    if (LPS22DF_PRESS_Disable(pObj) != LPS22DF_OK)
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f882 	bl	800494a <LPS22DF_PRESS_Disable>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d002      	beq.n	8004852 <LPS22DF_DeInit+0x24>
    {
      return LPS22DF_ERROR;
 800484c:	f04f 33ff 	mov.w	r3, #4294967295
 8004850:	e00d      	b.n	800486e <LPS22DF_DeInit+0x40>
    }

    if (LPS22DF_TEMP_Disable(pObj) != LPS22DF_OK)
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f927 	bl	8004aa6 <LPS22DF_TEMP_Disable>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d002      	beq.n	8004864 <LPS22DF_DeInit+0x36>
    {
      return LPS22DF_ERROR;
 800485e:	f04f 33ff 	mov.w	r3, #4294967295
 8004862:	e004      	b.n	800486e <LPS22DF_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22DF_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <LPS22DF_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_ReadID(LPS22DF_Object_t *pObj, uint8_t *Id)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b084      	sub	sp, #16
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	6039      	str	r1, [r7, #0]
  lps22df_id_t val;
  if (lps22df_id_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3320      	adds	r3, #32
 8004884:	f107 020c 	add.w	r2, r7, #12
 8004888:	4611      	mov	r1, r2
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fc22 	bl	80050d4 <lps22df_id_get>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <LPS22DF_ReadID+0x26>
  {
    return LPS22DF_ERROR;
 8004896:	f04f 33ff 	mov.w	r3, #4294967295
 800489a:	e003      	b.n	80048a4 <LPS22DF_ReadID+0x2e>
  }

  *Id = val.whoami;
 800489c:	7b3a      	ldrb	r2, [r7, #12]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	701a      	strb	r2, [r3, #0]

  return LPS22DF_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <LPS22DF_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22DF sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_GetCapabilities(LPS22DF_Object_t *pObj, LPS22DF_Capabilities_t *Capabilities)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2200      	movs	r2, #0
 80048ba:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2201      	movs	r2, #1
 80048c0:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2201      	movs	r2, #1
 80048c6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2200      	movs	r2, #0
 80048cc:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2200      	movs	r2, #0
 80048d2:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	4a08      	ldr	r2, [pc, #32]	@ (8004900 <LPS22DF_GetCapabilities+0x54>)
 80048e0:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	4a06      	ldr	r2, [pc, #24]	@ (8004900 <LPS22DF_GetCapabilities+0x54>)
 80048e6:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	615a      	str	r2, [r3, #20]
  return LPS22DF_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	43480000 	.word	0x43480000

08004904 <LPS22DF_PRESS_Enable>:
  * @brief  Enable the LPS22DF pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_Enable(LPS22DF_Object_t *pObj)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004912:	2b01      	cmp	r3, #1
 8004914:	d101      	bne.n	800491a <LPS22DF_PRESS_Enable+0x16>
  {
    return LPS22DF_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	e013      	b.n	8004942 <LPS22DF_PRESS_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22df_mode_set(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f103 0220 	add.w	r2, r3, #32
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	3333      	adds	r3, #51	@ 0x33
 8004924:	4619      	mov	r1, r3
 8004926:	4610      	mov	r0, r2
 8004928:	f000 fdb2 	bl	8005490 <lps22df_mode_set>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <LPS22DF_PRESS_Enable+0x34>
  {
    return LPS22DF_ERROR;
 8004932:	f04f 33ff 	mov.w	r3, #4294967295
 8004936:	e004      	b.n	8004942 <LPS22DF_PRESS_Enable+0x3e>
  }

  pObj->press_is_enabled = 1;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22DF_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <LPS22DF_PRESS_Disable>:
  * @brief  Disable the LPS22DF pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_Disable(LPS22DF_Object_t *pObj)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b084      	sub	sp, #16
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <LPS22DF_PRESS_Disable+0x16>
  {
    return LPS22DF_OK;
 800495c:	2300      	movs	r3, #0
 800495e:	e030      	b.n	80049c2 <LPS22DF_PRESS_Disable+0x78>
  }

  /* Check if the LPS22DF temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004966:	2b00      	cmp	r3, #0
 8004968:	d126      	bne.n	80049b8 <LPS22DF_PRESS_Disable+0x6e>
  {
    lps22df_md_t val;

    /* Get current output data rate. */
    if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	3320      	adds	r3, #32
 800496e:	f107 020c 	add.w	r2, r7, #12
 8004972:	4611      	mov	r1, r2
 8004974:	4618      	mov	r0, r3
 8004976:	f000 fde9 	bl	800554c <lps22df_mode_get>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <LPS22DF_PRESS_Disable+0x3c>
    {
      return LPS22DF_ERROR;
 8004980:	f04f 33ff 	mov.w	r3, #4294967295
 8004984:	e01d      	b.n	80049c2 <LPS22DF_PRESS_Disable+0x78>
    }

    (void)memcpy(&pObj->last_odr, &val, sizeof(lps22df_md_t));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3333      	adds	r3, #51	@ 0x33
 800498a:	461a      	mov	r2, r3
 800498c:	f107 030c 	add.w	r3, r7, #12
 8004990:	8819      	ldrh	r1, [r3, #0]
 8004992:	789b      	ldrb	r3, [r3, #2]
 8004994:	8011      	strh	r1, [r2, #0]
 8004996:	7093      	strb	r3, [r2, #2]

    val.odr = LPS22DF_ONE_SHOT;
 8004998:	2300      	movs	r3, #0
 800499a:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection - power down. */
    if (lps22df_mode_set(&(pObj->Ctx), &val) != LPS22DF_OK)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3320      	adds	r3, #32
 80049a0:	f107 020c 	add.w	r2, r7, #12
 80049a4:	4611      	mov	r1, r2
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 fd72 	bl	8005490 <lps22df_mode_set>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <LPS22DF_PRESS_Disable+0x6e>
    {
      return LPS22DF_ERROR;
 80049b2:	f04f 33ff 	mov.w	r3, #4294967295
 80049b6:	e004      	b.n	80049c2 <LPS22DF_PRESS_Disable+0x78>
    }
  }

  pObj->press_is_enabled = 0;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22DF_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <LPS22DF_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_GetOutputDataRate(LPS22DF_Object_t *pObj, float_t *Odr)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b082      	sub	sp, #8
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	6039      	str	r1, [r7, #0]
  return LPS22DF_GetOutputDataRate(pObj, Odr);
 80049d4:	6839      	ldr	r1, [r7, #0]
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f90c 	bl	8004bf4 <LPS22DF_GetOutputDataRate>
 80049dc:	4603      	mov	r3, r0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <LPS22DF_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_SetOutputDataRate(LPS22DF_Object_t *pObj, float_t Odr)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b082      	sub	sp, #8
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d106      	bne.n	8004a0a <LPS22DF_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22DF_SetOutputDataRate_When_Enabled(pObj, Odr);
 80049fc:	ed97 0a00 	vldr	s0, [r7]
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f961 	bl	8004cc8 <LPS22DF_SetOutputDataRate_When_Enabled>
 8004a06:	4603      	mov	r3, r0
 8004a08:	e005      	b.n	8004a16 <LPS22DF_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22DF_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004a0a:	ed97 0a00 	vldr	s0, [r7]
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f9e6 	bl	8004de0 <LPS22DF_SetOutputDataRate_When_Disabled>
 8004a14:	4603      	mov	r3, r0
  }
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <LPS22DF_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_GetPressure(LPS22DF_Object_t *pObj, float_t *Value)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b084      	sub	sp, #16
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	6039      	str	r1, [r7, #0]
  uint32_t pressure_raw;

  if (lps22df_pressure_raw_get(&(pObj->Ctx), &pressure_raw) != LPS22DF_OK)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3320      	adds	r3, #32
 8004a2c:	f107 020c 	add.w	r2, r7, #12
 8004a30:	4611      	mov	r1, r2
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fe56 	bl	80056e4 <lps22df_pressure_raw_get>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d002      	beq.n	8004a44 <LPS22DF_PRESS_GetPressure+0x26>
  {
    return LPS22DF_ERROR;
 8004a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a42:	e009      	b.n	8004a58 <LPS22DF_PRESS_GetPressure+0x3a>
  }

  *Value = lps22df_from_lsb_to_hPa((int32_t)pressure_raw);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 fb12 	bl	8005070 <lps22df_from_lsb_to_hPa>
 8004a4c:	eef0 7a40 	vmov.f32	s15, s0
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	edc3 7a00 	vstr	s15, [r3]

  return LPS22DF_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <LPS22DF_TEMP_Enable>:
  * @brief  Enable the LPS22DF temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_Enable(LPS22DF_Object_t *pObj)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d101      	bne.n	8004a76 <LPS22DF_TEMP_Enable+0x16>
  {
    return LPS22DF_OK;
 8004a72:	2300      	movs	r3, #0
 8004a74:	e013      	b.n	8004a9e <LPS22DF_TEMP_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22df_mode_set(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f103 0220 	add.w	r2, r3, #32
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3333      	adds	r3, #51	@ 0x33
 8004a80:	4619      	mov	r1, r3
 8004a82:	4610      	mov	r0, r2
 8004a84:	f000 fd04 	bl	8005490 <lps22df_mode_set>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <LPS22DF_TEMP_Enable+0x34>
  {
    return LPS22DF_ERROR;
 8004a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a92:	e004      	b.n	8004a9e <LPS22DF_TEMP_Enable+0x3e>
  }

  pObj->temp_is_enabled = 1;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22DF_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <LPS22DF_TEMP_Disable>:
  * @brief  Disable the LPS22DF temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_Disable(LPS22DF_Object_t *pObj)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b084      	sub	sp, #16
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <LPS22DF_TEMP_Disable+0x16>
  {
    return LPS22DF_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	e030      	b.n	8004b1e <LPS22DF_TEMP_Disable+0x78>
  }

  /* Check if the LPS22DF pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d126      	bne.n	8004b14 <LPS22DF_TEMP_Disable+0x6e>
  {
    lps22df_md_t val;

    /* Get current output data rate. */
    if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3320      	adds	r3, #32
 8004aca:	f107 020c 	add.w	r2, r7, #12
 8004ace:	4611      	mov	r1, r2
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 fd3b 	bl	800554c <lps22df_mode_get>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <LPS22DF_TEMP_Disable+0x3c>
    {
      return LPS22DF_ERROR;
 8004adc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ae0:	e01d      	b.n	8004b1e <LPS22DF_TEMP_Disable+0x78>
    }

    (void)memcpy(&pObj->last_odr, &val, sizeof(lps22df_md_t));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3333      	adds	r3, #51	@ 0x33
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f107 030c 	add.w	r3, r7, #12
 8004aec:	8819      	ldrh	r1, [r3, #0]
 8004aee:	789b      	ldrb	r3, [r3, #2]
 8004af0:	8011      	strh	r1, [r2, #0]
 8004af2:	7093      	strb	r3, [r2, #2]

    val.odr = LPS22DF_ONE_SHOT;
 8004af4:	2300      	movs	r3, #0
 8004af6:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection - power down. */
    if (lps22df_mode_set(&(pObj->Ctx), &val) != LPS22DF_OK)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3320      	adds	r3, #32
 8004afc:	f107 020c 	add.w	r2, r7, #12
 8004b00:	4611      	mov	r1, r2
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fcc4 	bl	8005490 <lps22df_mode_set>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <LPS22DF_TEMP_Disable+0x6e>
    {
      return LPS22DF_ERROR;
 8004b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b12:	e004      	b.n	8004b1e <LPS22DF_TEMP_Disable+0x78>
    }
  }

  pObj->temp_is_enabled = 0;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22DF_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <LPS22DF_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_GetOutputDataRate(LPS22DF_Object_t *pObj, float_t *Odr)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b082      	sub	sp, #8
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
 8004b2e:	6039      	str	r1, [r7, #0]
  return LPS22DF_GetOutputDataRate(pObj, Odr);
 8004b30:	6839      	ldr	r1, [r7, #0]
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f85e 	bl	8004bf4 <LPS22DF_GetOutputDataRate>
 8004b38:	4603      	mov	r3, r0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <LPS22DF_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_SetOutputDataRate(LPS22DF_Object_t *pObj, float_t Odr)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b082      	sub	sp, #8
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d106      	bne.n	8004b66 <LPS22DF_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22DF_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004b58:	ed97 0a00 	vldr	s0, [r7]
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f8b3 	bl	8004cc8 <LPS22DF_SetOutputDataRate_When_Enabled>
 8004b62:	4603      	mov	r3, r0
 8004b64:	e005      	b.n	8004b72 <LPS22DF_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22DF_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004b66:	ed97 0a00 	vldr	s0, [r7]
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f938 	bl	8004de0 <LPS22DF_SetOutputDataRate_When_Disabled>
 8004b70:	4603      	mov	r3, r0
  }
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <LPS22DF_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_GetTemperature(LPS22DF_Object_t *pObj, float_t *Value)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b084      	sub	sp, #16
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
 8004b82:	6039      	str	r1, [r7, #0]
  int16_t temperature_raw;

  if (lps22df_temperature_raw_get(&(pObj->Ctx), &temperature_raw) != LPS22DF_OK)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3320      	adds	r3, #32
 8004b88:	f107 020e 	add.w	r2, r7, #14
 8004b8c:	4611      	mov	r1, r2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 fdd1 	bl	8005736 <lps22df_temperature_raw_get>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <LPS22DF_TEMP_GetTemperature+0x26>
  {
    return LPS22DF_ERROR;
 8004b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b9e:	e00a      	b.n	8004bb6 <LPS22DF_TEMP_GetTemperature+0x3c>
  }

  *Value = lps22df_from_lsb_to_celsius(temperature_raw);
 8004ba0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 fa7b 	bl	80050a0 <lps22df_from_lsb_to_celsius>
 8004baa:	eef0 7a40 	vmov.f32	s15, s0
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	edc3 7a00 	vstr	s15, [r3]

  return LPS22DF_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <LPS22DF_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_Write_Reg(LPS22DF_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b082      	sub	sp, #8
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	70fb      	strb	r3, [r7, #3]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	70bb      	strb	r3, [r7, #2]
  if (lps22df_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22DF_OK)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f103 0020 	add.w	r0, r3, #32
 8004bd4:	1cba      	adds	r2, r7, #2
 8004bd6:	78f9      	ldrb	r1, [r7, #3]
 8004bd8:	2301      	movs	r3, #1
 8004bda:	f000 fa15 	bl	8005008 <lps22df_write_reg>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <LPS22DF_Write_Reg+0x2c>
  {
    return LPS22DF_ERROR;
 8004be4:	f04f 33ff 	mov.w	r3, #4294967295
 8004be8:	e000      	b.n	8004bec <LPS22DF_Write_Reg+0x2e>
  }

  return LPS22DF_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <LPS22DF_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_GetOutputDataRate(LPS22DF_Object_t *pObj, float_t *Odr)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22DF_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60fb      	str	r3, [r7, #12]
  lps22df_md_t val;

  if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3320      	adds	r3, #32
 8004c06:	f107 0208 	add.w	r2, r7, #8
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 fc9d 	bl	800554c <lps22df_mode_get>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <LPS22DF_GetOutputDataRate+0x2a>
  {
    return LPS22DF_ERROR;
 8004c18:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1c:	e044      	b.n	8004ca8 <LPS22DF_GetOutputDataRate+0xb4>
  }

  switch (val.odr)
 8004c1e:	7a3b      	ldrb	r3, [r7, #8]
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d83c      	bhi.n	8004c9e <LPS22DF_GetOutputDataRate+0xaa>
 8004c24:	a201      	add	r2, pc, #4	@ (adr r2, 8004c2c <LPS22DF_GetOutputDataRate+0x38>)
 8004c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2a:	bf00      	nop
 8004c2c:	08004c51 	.word	0x08004c51
 8004c30:	08004c5b 	.word	0x08004c5b
 8004c34:	08004c65 	.word	0x08004c65
 8004c38:	08004c6f 	.word	0x08004c6f
 8004c3c:	08004c77 	.word	0x08004c77
 8004c40:	08004c7f 	.word	0x08004c7f
 8004c44:	08004c87 	.word	0x08004c87
 8004c48:	08004c8f 	.word	0x08004c8f
 8004c4c:	08004c97 	.word	0x08004c97
  {
    case LPS22DF_ONE_SHOT:
      *Odr = 0.0f;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]
      break;
 8004c58:	e025      	b.n	8004ca6 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_1Hz:
      *Odr = 1.0f;
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004c60:	601a      	str	r2, [r3, #0]
      break;
 8004c62:	e020      	b.n	8004ca6 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_4Hz:
      *Odr = 4.0f;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8004c6a:	601a      	str	r2, [r3, #0]
      break;
 8004c6c:	e01b      	b.n	8004ca6 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_10Hz:
      *Odr = 10.0f;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	4a0f      	ldr	r2, [pc, #60]	@ (8004cb0 <LPS22DF_GetOutputDataRate+0xbc>)
 8004c72:	601a      	str	r2, [r3, #0]
      break;
 8004c74:	e017      	b.n	8004ca6 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_25Hz:
      *Odr = 25.0f;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	4a0e      	ldr	r2, [pc, #56]	@ (8004cb4 <LPS22DF_GetOutputDataRate+0xc0>)
 8004c7a:	601a      	str	r2, [r3, #0]
      break;
 8004c7c:	e013      	b.n	8004ca6 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_50Hz:
      *Odr = 50.0f;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	4a0d      	ldr	r2, [pc, #52]	@ (8004cb8 <LPS22DF_GetOutputDataRate+0xc4>)
 8004c82:	601a      	str	r2, [r3, #0]
      break;
 8004c84:	e00f      	b.n	8004ca6 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_75Hz:
      *Odr = 75.0f;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	4a0c      	ldr	r2, [pc, #48]	@ (8004cbc <LPS22DF_GetOutputDataRate+0xc8>)
 8004c8a:	601a      	str	r2, [r3, #0]
      break;
 8004c8c:	e00b      	b.n	8004ca6 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_100Hz:
      *Odr = 100.0f;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	4a0b      	ldr	r2, [pc, #44]	@ (8004cc0 <LPS22DF_GetOutputDataRate+0xcc>)
 8004c92:	601a      	str	r2, [r3, #0]
      break;
 8004c94:	e007      	b.n	8004ca6 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_200Hz:
      *Odr = 200.0f;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc4 <LPS22DF_GetOutputDataRate+0xd0>)
 8004c9a:	601a      	str	r2, [r3, #0]
      break;
 8004c9c:	e003      	b.n	8004ca6 <LPS22DF_GetOutputDataRate+0xb2>

    default:
      ret = LPS22DF_ERROR;
 8004c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004ca2:	60fb      	str	r3, [r7, #12]
      break;
 8004ca4:	bf00      	nop
  }

  return ret;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	41200000 	.word	0x41200000
 8004cb4:	41c80000 	.word	0x41c80000
 8004cb8:	42480000 	.word	0x42480000
 8004cbc:	42960000 	.word	0x42960000
 8004cc0:	42c80000 	.word	0x42c80000
 8004cc4:	43480000 	.word	0x43480000

08004cc8 <LPS22DF_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_SetOutputDataRate_When_Enabled(LPS22DF_Object_t *pObj, float_t Odr)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	ed87 0a00 	vstr	s0, [r7]
  lps22df_md_t new_val;

  if (lps22df_mode_get(&(pObj->Ctx), &new_val) != LPS22DF_OK)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3320      	adds	r3, #32
 8004cd8:	f107 020c 	add.w	r2, r7, #12
 8004cdc:	4611      	mov	r1, r2
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fc34 	bl	800554c <lps22df_mode_get>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d002      	beq.n	8004cf0 <LPS22DF_SetOutputDataRate_When_Enabled+0x28>
  {
    return LPS22DF_ERROR;
 8004cea:	f04f 33ff 	mov.w	r3, #4294967295
 8004cee:	e06c      	b.n	8004dca <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  new_val.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
                : (Odr <=   4.0f) ? LPS22DF_4Hz
 8004cf0:	edd7 7a00 	vldr	s15, [r7]
 8004cf4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d00:	d801      	bhi.n	8004d06 <LPS22DF_SetOutputDataRate_When_Enabled+0x3e>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e042      	b.n	8004d8c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8004d06:	edd7 7a00 	vldr	s15, [r7]
 8004d0a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8004d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d16:	d801      	bhi.n	8004d1c <LPS22DF_SetOutputDataRate_When_Enabled+0x54>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	e037      	b.n	8004d8c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8004d1c:	edd7 7a00 	vldr	s15, [r7]
 8004d20:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d2c:	d801      	bhi.n	8004d32 <LPS22DF_SetOutputDataRate_When_Enabled+0x6a>
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e02c      	b.n	8004d8c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8004d32:	edd7 7a00 	vldr	s15, [r7]
 8004d36:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8004d3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d42:	d801      	bhi.n	8004d48 <LPS22DF_SetOutputDataRate_When_Enabled+0x80>
 8004d44:	2304      	movs	r3, #4
 8004d46:	e021      	b.n	8004d8c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8004d48:	edd7 7a00 	vldr	s15, [r7]
 8004d4c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8004dd4 <LPS22DF_SetOutputDataRate_When_Enabled+0x10c>
 8004d50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d58:	d801      	bhi.n	8004d5e <LPS22DF_SetOutputDataRate_When_Enabled+0x96>
 8004d5a:	2305      	movs	r3, #5
 8004d5c:	e016      	b.n	8004d8c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8004d5e:	edd7 7a00 	vldr	s15, [r7]
 8004d62:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004dd8 <LPS22DF_SetOutputDataRate_When_Enabled+0x110>
 8004d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d6e:	d801      	bhi.n	8004d74 <LPS22DF_SetOutputDataRate_When_Enabled+0xac>
 8004d70:	2306      	movs	r3, #6
 8004d72:	e00b      	b.n	8004d8c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8004d74:	edd7 7a00 	vldr	s15, [r7]
 8004d78:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8004ddc <LPS22DF_SetOutputDataRate_When_Enabled+0x114>
 8004d7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d84:	d801      	bhi.n	8004d8a <LPS22DF_SetOutputDataRate_When_Enabled+0xc2>
 8004d86:	2307      	movs	r3, #7
 8004d88:	e000      	b.n	8004d8c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8004d8a:	2308      	movs	r3, #8
  new_val.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
 8004d8c:	733b      	strb	r3, [r7, #12]
                : (Odr <=  50.0f) ? LPS22DF_50Hz
                : (Odr <=  75.0f) ? LPS22DF_75Hz
                : (Odr <= 100.0f) ? LPS22DF_100Hz
                :                   LPS22DF_200Hz;

  if (lps22df_mode_set(&(pObj->Ctx), &new_val) != LPS22DF_OK)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3320      	adds	r3, #32
 8004d92:	f107 020c 	add.w	r2, r7, #12
 8004d96:	4611      	mov	r1, r2
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 fb79 	bl	8005490 <lps22df_mode_set>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d002      	beq.n	8004daa <LPS22DF_SetOutputDataRate_When_Enabled+0xe2>
  {
    return LPS22DF_ERROR;
 8004da4:	f04f 33ff 	mov.w	r3, #4294967295
 8004da8:	e00f      	b.n	8004dca <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  if (lps22df_mode_get(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f103 0220 	add.w	r2, r3, #32
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	3333      	adds	r3, #51	@ 0x33
 8004db4:	4619      	mov	r1, r3
 8004db6:	4610      	mov	r0, r2
 8004db8:	f000 fbc8 	bl	800554c <lps22df_mode_get>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <LPS22DF_SetOutputDataRate_When_Enabled+0x100>
  {
    return LPS22DF_ERROR;
 8004dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc6:	e000      	b.n	8004dca <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  return LPS22DF_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	42480000 	.word	0x42480000
 8004dd8:	42960000 	.word	0x42960000
 8004ddc:	42c80000 	.word	0x42c80000

08004de0 <LPS22DF_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_SetOutputDataRate_When_Disabled(LPS22DF_Object_t *pObj, float_t Odr)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
                       : (Odr <=   4.0f) ? LPS22DF_4Hz
 8004dec:	edd7 7a00 	vldr	s15, [r7]
 8004df0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004df4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dfc:	d801      	bhi.n	8004e02 <LPS22DF_SetOutputDataRate_When_Disabled+0x22>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e042      	b.n	8004e88 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8004e02:	edd7 7a00 	vldr	s15, [r7]
 8004e06:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8004e0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e12:	d801      	bhi.n	8004e18 <LPS22DF_SetOutputDataRate_When_Disabled+0x38>
 8004e14:	2302      	movs	r3, #2
 8004e16:	e037      	b.n	8004e88 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8004e18:	edd7 7a00 	vldr	s15, [r7]
 8004e1c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004e20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e28:	d801      	bhi.n	8004e2e <LPS22DF_SetOutputDataRate_When_Disabled+0x4e>
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e02c      	b.n	8004e88 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8004e2e:	edd7 7a00 	vldr	s15, [r7]
 8004e32:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8004e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e3e:	d801      	bhi.n	8004e44 <LPS22DF_SetOutputDataRate_When_Disabled+0x64>
 8004e40:	2304      	movs	r3, #4
 8004e42:	e021      	b.n	8004e88 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8004e44:	edd7 7a00 	vldr	s15, [r7]
 8004e48:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8004e9c <LPS22DF_SetOutputDataRate_When_Disabled+0xbc>
 8004e4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e54:	d801      	bhi.n	8004e5a <LPS22DF_SetOutputDataRate_When_Disabled+0x7a>
 8004e56:	2305      	movs	r3, #5
 8004e58:	e016      	b.n	8004e88 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8004e5a:	edd7 7a00 	vldr	s15, [r7]
 8004e5e:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8004ea0 <LPS22DF_SetOutputDataRate_When_Disabled+0xc0>
 8004e62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e6a:	d801      	bhi.n	8004e70 <LPS22DF_SetOutputDataRate_When_Disabled+0x90>
 8004e6c:	2306      	movs	r3, #6
 8004e6e:	e00b      	b.n	8004e88 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8004e70:	edd7 7a00 	vldr	s15, [r7]
 8004e74:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8004ea4 <LPS22DF_SetOutputDataRate_When_Disabled+0xc4>
 8004e78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e80:	d801      	bhi.n	8004e86 <LPS22DF_SetOutputDataRate_When_Disabled+0xa6>
 8004e82:	2307      	movs	r3, #7
 8004e84:	e000      	b.n	8004e88 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8004e86:	2308      	movs	r3, #8
  pObj->last_odr.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                       : (Odr <=  50.0f) ? LPS22DF_50Hz
                       : (Odr <=  75.0f) ? LPS22DF_75Hz
                       : (Odr <= 100.0f) ? LPS22DF_100Hz
                       :                   LPS22DF_200Hz;

  return LPS22DF_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	42480000 	.word	0x42480000
 8004ea0:	42960000 	.word	0x42960000
 8004ea4:	42c80000 	.word	0x42c80000

08004ea8 <LPS22DF_Initialize>:
  * @brief  Initialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_Initialize(LPS22DF_Object_t *pObj)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  lps22df_md_t md;
  lps22df_bus_mode_t bus_mode;

  /* Set bdu and if_inc recommended for driver usage */
  if (lps22df_init_set(&(pObj->Ctx), LPS22DF_DRV_RDY) != LPS22DF_OK)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3320      	adds	r3, #32
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 f983 	bl	80051c2 <lps22df_init_set>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <LPS22DF_Initialize+0x20>
  {
    return LPS22DF_ERROR;
 8004ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ec6:	e047      	b.n	8004f58 <LPS22DF_Initialize+0xb0>
  }

  /* Select bus interface */
  if (pObj->IO.BusType == LPS22DF_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d102      	bne.n	8004ed6 <LPS22DF_Initialize+0x2e>
  {
    bus_mode.interface = LPS22DF_SPI_3W;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	723b      	strb	r3, [r7, #8]
 8004ed4:	e008      	b.n	8004ee8 <LPS22DF_Initialize+0x40>
  }
  else if (pObj->IO.BusType == LPS22DF_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d102      	bne.n	8004ee4 <LPS22DF_Initialize+0x3c>
  {
    bus_mode.interface = LPS22DF_SPI_4W;
 8004ede:	2302      	movs	r3, #2
 8004ee0:	723b      	strb	r3, [r7, #8]
 8004ee2:	e001      	b.n	8004ee8 <LPS22DF_Initialize+0x40>
  }
  else
  {
    bus_mode.interface = LPS22DF_SEL_BY_HW;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	723b      	strb	r3, [r7, #8]
  }

  bus_mode.filter = LPS22DF_FILTER_AUTO;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	727b      	strb	r3, [r7, #9]
  if (lps22df_bus_mode_set(&(pObj->Ctx), &bus_mode) != LPS22DF_OK)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3320      	adds	r3, #32
 8004ef0:	f107 0208 	add.w	r2, r7, #8
 8004ef4:	4611      	mov	r1, r2
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 f901 	bl	80050fe <lps22df_bus_mode_set>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d002      	beq.n	8004f08 <LPS22DF_Initialize+0x60>
  {
    return LPS22DF_ERROR;
 8004f02:	f04f 33ff 	mov.w	r3, #4294967295
 8004f06:	e027      	b.n	8004f58 <LPS22DF_Initialize+0xb0>
  }

  /* Set Output Data Rate in Power Down */
  md.odr = LPS22DF_ONE_SHOT;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	733b      	strb	r3, [r7, #12]
  md.avg = LPS22DF_4_AVG;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	737b      	strb	r3, [r7, #13]
  md.lpf = LPS22DF_LPF_ODR_DIV_4;
 8004f10:	2301      	movs	r3, #1
 8004f12:	73bb      	strb	r3, [r7, #14]

  /* Power down the device */
  if (lps22df_mode_set(&(pObj->Ctx), &md) != LPS22DF_OK)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3320      	adds	r3, #32
 8004f18:	f107 020c 	add.w	r2, r7, #12
 8004f1c:	4611      	mov	r1, r2
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fab6 	bl	8005490 <lps22df_mode_set>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d002      	beq.n	8004f30 <LPS22DF_Initialize+0x88>
  {
    return LPS22DF_ERROR;
 8004f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f2e:	e013      	b.n	8004f58 <LPS22DF_Initialize+0xb0>
  }

  if (lps22df_mode_get(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f103 0220 	add.w	r2, r3, #32
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	3333      	adds	r3, #51	@ 0x33
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	f000 fb05 	bl	800554c <lps22df_mode_get>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <LPS22DF_Initialize+0xa6>
  {
    return LPS22DF_ERROR;
 8004f48:	f04f 33ff 	mov.w	r3, #4294967295
 8004f4c:	e004      	b.n	8004f58 <LPS22DF_Initialize+0xb0>
  }

  pObj->last_odr.odr = LPS22DF_25Hz;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2204      	movs	r2, #4
 8004f52:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  return LPS22DF_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004f60:	b590      	push	{r4, r7, lr}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	607a      	str	r2, [r7, #4]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	72fb      	strb	r3, [r7, #11]
 8004f70:	4613      	mov	r3, r2
 8004f72:	813b      	strh	r3, [r7, #8]
  LPS22DF_Object_t *pObj = (LPS22DF_Object_t *)Handle;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	695c      	ldr	r4, [r3, #20]
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	7b1b      	ldrb	r3, [r3, #12]
 8004f80:	4618      	mov	r0, r3
 8004f82:	7afb      	ldrb	r3, [r7, #11]
 8004f84:	b299      	uxth	r1, r3
 8004f86:	893b      	ldrh	r3, [r7, #8]
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	47a0      	blx	r4
 8004f8c:	4603      	mov	r3, r0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	371c      	adds	r7, #28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd90      	pop	{r4, r7, pc}

08004f96 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004f96:	b590      	push	{r4, r7, lr}
 8004f98:	b087      	sub	sp, #28
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	72fb      	strb	r3, [r7, #11]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	813b      	strh	r3, [r7, #8]
  LPS22DF_Object_t *pObj = (LPS22DF_Object_t *)Handle;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	691c      	ldr	r4, [r3, #16]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	7b1b      	ldrb	r3, [r3, #12]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	7afb      	ldrb	r3, [r7, #11]
 8004fba:	b299      	uxth	r1, r3
 8004fbc:	893b      	ldrh	r3, [r7, #8]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	47a0      	blx	r4
 8004fc2:	4603      	mov	r3, r0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	371c      	adds	r7, #28
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd90      	pop	{r4, r7, pc}

08004fcc <lps22df_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lps22df_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                uint16_t len)
{
 8004fcc:	b590      	push	{r4, r7, lr}
 8004fce:	b087      	sub	sp, #28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	607a      	str	r2, [r7, #4]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	460b      	mov	r3, r1
 8004fda:	72fb      	strb	r3, [r7, #11]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d102      	bne.n	8004fec <lps22df_read_reg+0x20>
  {
    return -1;
 8004fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fea:	e009      	b.n	8005000 <lps22df_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	685c      	ldr	r4, [r3, #4]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	68d8      	ldr	r0, [r3, #12]
 8004ff4:	893b      	ldrh	r3, [r7, #8]
 8004ff6:	7af9      	ldrb	r1, [r7, #11]
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	47a0      	blx	r4
 8004ffc:	6178      	str	r0, [r7, #20]

  return ret;
 8004ffe:	697b      	ldr	r3, [r7, #20]
}
 8005000:	4618      	mov	r0, r3
 8005002:	371c      	adds	r7, #28
 8005004:	46bd      	mov	sp, r7
 8005006:	bd90      	pop	{r4, r7, pc}

08005008 <lps22df_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lps22df_write_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                 uint16_t len)
{
 8005008:	b590      	push	{r4, r7, lr}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	607a      	str	r2, [r7, #4]
 8005012:	461a      	mov	r2, r3
 8005014:	460b      	mov	r3, r1
 8005016:	72fb      	strb	r3, [r7, #11]
 8005018:	4613      	mov	r3, r2
 800501a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d102      	bne.n	8005028 <lps22df_write_reg+0x20>
  {
    return -1;
 8005022:	f04f 33ff 	mov.w	r3, #4294967295
 8005026:	e009      	b.n	800503c <lps22df_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681c      	ldr	r4, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	68d8      	ldr	r0, [r3, #12]
 8005030:	893b      	ldrh	r3, [r7, #8]
 8005032:	7af9      	ldrb	r1, [r7, #11]
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	47a0      	blx	r4
 8005038:	6178      	str	r0, [r7, #20]

  return ret;
 800503a:	697b      	ldr	r3, [r7, #20]
}
 800503c:	4618      	mov	r0, r3
 800503e:	371c      	adds	r7, #28
 8005040:	46bd      	mov	sp, r7
 8005042:	bd90      	pop	{r4, r7, pc}

08005044 <bytecpy>:
  * @{
  *
  */

static void bytecpy(uint8_t *target, uint8_t *source)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  if ((target != NULL) && (source != NULL))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d006      	beq.n	8005062 <bytecpy+0x1e>
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <bytecpy+0x1e>
  {
    *target = *source;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	781a      	ldrb	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	701a      	strb	r2, [r3, #0]
  }
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
	...

08005070 <lps22df_from_lsb_to_hPa>:
  * @{
  *
  */

float_t lps22df_from_lsb_to_hPa(int32_t lsb)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);   /* 4096.0f * 256 */
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	ee07 3a90 	vmov	s15, r3
 800507e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005082:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800509c <lps22df_from_lsb_to_hPa+0x2c>
 8005086:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800508a:	eef0 7a66 	vmov.f32	s15, s13
}
 800508e:	eeb0 0a67 	vmov.f32	s0, s15
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	49800000 	.word	0x49800000

080050a0 <lps22df_from_lsb_to_celsius>:

float_t lps22df_from_lsb_to_celsius(int16_t lsb)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 80050aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050ae:	ee07 3a90 	vmov	s15, r3
 80050b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050b6:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80050d0 <lps22df_from_lsb_to_celsius+0x30>
 80050ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80050be:	eef0 7a66 	vmov.f32	s15, s13
}
 80050c2:	eeb0 0a67 	vmov.f32	s0, s15
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	42c80000 	.word	0x42c80000

080050d4 <lps22df_id_get>:
  * @param  val   ID values.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_id_get(const stmdev_ctx_t *ctx, lps22df_id_t *val)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint8_t reg;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_WHO_AM_I, &reg, 1);
 80050de:	f107 020b 	add.w	r2, r7, #11
 80050e2:	2301      	movs	r3, #1
 80050e4:	210f      	movs	r1, #15
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7ff ff70 	bl	8004fcc <lps22df_read_reg>
 80050ec:	60f8      	str	r0, [r7, #12]
  val->whoami = reg;
 80050ee:	7afa      	ldrb	r2, [r7, #11]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	701a      	strb	r2, [r3, #0]

  return ret;
 80050f4:	68fb      	ldr	r3, [r7, #12]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <lps22df_bus_mode_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_bus_mode_set(const stmdev_ctx_t *ctx, lps22df_bus_mode_t *val)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b086      	sub	sp, #24
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	6039      	str	r1, [r7, #0]
  lps22df_i3c_if_ctrl_t i3c_if_ctrl;
  lps22df_if_ctrl_t if_ctrl;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 8005108:	f107 020c 	add.w	r2, r7, #12
 800510c:	2301      	movs	r3, #1
 800510e:	210e      	movs	r1, #14
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7ff ff5b 	bl	8004fcc <lps22df_read_reg>
 8005116:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d124      	bne.n	8005168 <lps22df_bus_mode_set+0x6a>
  {
    if_ctrl.i2c_i3c_dis = ((uint8_t)val->interface & 0x02U) >> 1;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	085b      	lsrs	r3, r3, #1
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	b2da      	uxtb	r2, r3
 800512a:	7b3b      	ldrb	r3, [r7, #12]
 800512c:	f362 1386 	bfi	r3, r2, #6, #1
 8005130:	733b      	strb	r3, [r7, #12]
    if_ctrl.int_en_i3c = ((uint8_t)val->interface & 0x04U) >> 2;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	089b      	lsrs	r3, r3, #2
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	b2da      	uxtb	r2, r3
 800513e:	7b3b      	ldrb	r3, [r7, #12]
 8005140:	f362 13c7 	bfi	r3, r2, #7, #1
 8005144:	733b      	strb	r3, [r7, #12]
    if_ctrl.sim = ((uint8_t)val->interface & 0x01U);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	b2da      	uxtb	r2, r3
 8005150:	7b3b      	ldrb	r3, [r7, #12]
 8005152:	f362 1345 	bfi	r3, r2, #5, #1
 8005156:	733b      	strb	r3, [r7, #12]
    ret = lps22df_write_reg(ctx, LPS22DF_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 8005158:	f107 020c 	add.w	r2, r7, #12
 800515c:	2301      	movs	r3, #1
 800515e:	210e      	movs	r1, #14
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f7ff ff51 	bl	8005008 <lps22df_write_reg>
 8005166:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0)
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d107      	bne.n	800517e <lps22df_bus_mode_set+0x80>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_I3C_IF_CTRL,
 800516e:	f107 0210 	add.w	r2, r7, #16
 8005172:	2301      	movs	r3, #1
 8005174:	2119      	movs	r1, #25
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7ff ff28 	bl	8004fcc <lps22df_read_reg>
 800517c:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_if_ctrl, 1);
  }
  if (ret == 0)
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d119      	bne.n	80051b8 <lps22df_bus_mode_set+0xba>
  {
    i3c_if_ctrl.asf_on = (uint8_t)val->filter & 0x01U;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	785b      	ldrb	r3, [r3, #1]
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	b2da      	uxtb	r2, r3
 800518e:	7c3b      	ldrb	r3, [r7, #16]
 8005190:	f362 1345 	bfi	r3, r2, #5, #1
 8005194:	743b      	strb	r3, [r7, #16]
    i3c_if_ctrl.i3c_bus_avb_sel = (uint8_t)val->i3c_ibi_time & 0x03U;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	789b      	ldrb	r3, [r3, #2]
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	b2da      	uxtb	r2, r3
 80051a0:	7c3b      	ldrb	r3, [r7, #16]
 80051a2:	f362 0301 	bfi	r3, r2, #0, #2
 80051a6:	743b      	strb	r3, [r7, #16]
    ret = lps22df_write_reg(ctx, LPS22DF_I3C_IF_CTRL,
 80051a8:	f107 0210 	add.w	r2, r7, #16
 80051ac:	2301      	movs	r3, #1
 80051ae:	2119      	movs	r1, #25
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7ff ff29 	bl	8005008 <lps22df_write_reg>
 80051b6:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_if_ctrl, 1);
  }
  return ret;
 80051b8:	697b      	ldr	r3, [r7, #20]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <lps22df_init_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_init_set(const stmdev_ctx_t *ctx, lps22df_init_t val)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b08a      	sub	sp, #40	@ 0x28
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	460b      	mov	r3, r1
 80051cc:	70fb      	strb	r3, [r7, #3]
  lps22df_ctrl_reg2_t ctrl_reg2;
  lps22df_ctrl_reg3_t ctrl_reg3;
  lps22df_int_source_t int_src;
  lps22df_stat_t status;
  uint8_t reg[2], cnt = 0;
 80051ce:	2300      	movs	r3, #0
 80051d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG2, reg, 2);
 80051d4:	f107 020c 	add.w	r2, r7, #12
 80051d8:	2302      	movs	r3, #2
 80051da:	2111      	movs	r1, #17
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff fef5 	bl	8004fcc <lps22df_read_reg>
 80051e2:	6238      	str	r0, [r7, #32]
  if (ret == 0)
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f040 80c8 	bne.w	800537c <lps22df_init_set+0x1ba>
  {
    bytecpy((uint8_t *)&ctrl_reg2, &reg[0]);
 80051ec:	f107 020c 	add.w	r2, r7, #12
 80051f0:	f107 031c 	add.w	r3, r7, #28
 80051f4:	4611      	mov	r1, r2
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff ff24 	bl	8005044 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg3, &reg[1]);
 80051fc:	f107 030c 	add.w	r3, r7, #12
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	f107 0318 	add.w	r3, r7, #24
 8005206:	4611      	mov	r1, r2
 8005208:	4618      	mov	r0, r3
 800520a:	f7ff ff1b 	bl	8005044 <bytecpy>

    switch (val)
 800520e:	78fb      	ldrb	r3, [r7, #3]
 8005210:	2b02      	cmp	r3, #2
 8005212:	d043      	beq.n	800529c <lps22df_init_set+0xda>
 8005214:	2b02      	cmp	r3, #2
 8005216:	f300 809d 	bgt.w	8005354 <lps22df_init_set+0x192>
 800521a:	2b00      	cmp	r3, #0
 800521c:	d078      	beq.n	8005310 <lps22df_init_set+0x14e>
 800521e:	2b01      	cmp	r3, #1
 8005220:	f040 8098 	bne.w	8005354 <lps22df_init_set+0x192>
    {
      case LPS22DF_BOOT:
        ctrl_reg2.boot = PROPERTY_ENABLE;
 8005224:	7f3b      	ldrb	r3, [r7, #28]
 8005226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800522a:	773b      	strb	r3, [r7, #28]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 800522c:	f107 021c 	add.w	r2, r7, #28
 8005230:	2301      	movs	r3, #1
 8005232:	2111      	movs	r1, #17
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7ff fee7 	bl	8005008 <lps22df_write_reg>
 800523a:	6238      	str	r0, [r7, #32]
                                (uint8_t *)&ctrl_reg2, 1);
        if (ret != 0)
 800523c:	6a3b      	ldr	r3, [r7, #32]
 800523e:	2b00      	cmp	r3, #0
 8005240:	f040 8095 	bne.w	800536e <lps22df_init_set+0x1ac>
          break;
        }

        do
        {
          ret = lps22df_read_reg(ctx, LPS22DF_INT_SOURCE, (uint8_t *)&int_src, 1);
 8005244:	f107 0214 	add.w	r2, r7, #20
 8005248:	2301      	movs	r3, #1
 800524a:	2124      	movs	r1, #36	@ 0x24
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff febd 	bl	8004fcc <lps22df_read_reg>
 8005252:	6238      	str	r0, [r7, #32]
          if (ret != 0)
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d115      	bne.n	8005286 <lps22df_init_set+0xc4>
          {
            break;
          }

          /* boot procedue ended correctly */
          if (int_src.boot_on == 0U)
 800525a:	7d3b      	ldrb	r3, [r7, #20]
 800525c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d011      	beq.n	800528a <lps22df_init_set+0xc8>
          {
            break;
          }

          if (ctx->mdelay != NULL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <lps22df_init_set+0xb4>
          {
            ctx->mdelay(10); /* 10ms of boot time */
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	200a      	movs	r0, #10
 8005274:	4798      	blx	r3
          }
        } while (cnt++ < 5U);
 8005276:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800527a:	1c5a      	adds	r2, r3, #1
 800527c:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8005280:	2b04      	cmp	r3, #4
 8005282:	d9df      	bls.n	8005244 <lps22df_init_set+0x82>
 8005284:	e002      	b.n	800528c <lps22df_init_set+0xca>
            break;
 8005286:	bf00      	nop
 8005288:	e000      	b.n	800528c <lps22df_init_set+0xca>
            break;
 800528a:	bf00      	nop

        if (cnt >= 5U)
 800528c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005290:	2b04      	cmp	r3, #4
 8005292:	d96e      	bls.n	8005372 <lps22df_init_set+0x1b0>
        {
          ret = -1;  /* boot procedure failed */
 8005294:	f04f 33ff 	mov.w	r3, #4294967295
 8005298:	623b      	str	r3, [r7, #32]
        }

        break;
 800529a:	e06a      	b.n	8005372 <lps22df_init_set+0x1b0>
      case LPS22DF_RESET:
        ctrl_reg2.swreset = PROPERTY_ENABLE;
 800529c:	7f3b      	ldrb	r3, [r7, #28]
 800529e:	f043 0304 	orr.w	r3, r3, #4
 80052a2:	773b      	strb	r3, [r7, #28]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 80052a4:	f107 021c 	add.w	r2, r7, #28
 80052a8:	2301      	movs	r3, #1
 80052aa:	2111      	movs	r1, #17
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7ff feab 	bl	8005008 <lps22df_write_reg>
 80052b2:	6238      	str	r0, [r7, #32]
                                (uint8_t *)&ctrl_reg2, 1);
        if (ret != 0)
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d15d      	bne.n	8005376 <lps22df_init_set+0x1b4>
          break;
        }

        do
        {
          ret = lps22df_status_get(ctx, &status);
 80052ba:	f107 0310 	add.w	r3, r7, #16
 80052be:	4619      	mov	r1, r3
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f860 	bl	8005386 <lps22df_status_get>
 80052c6:	6238      	str	r0, [r7, #32]
          if (ret != 0)
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d115      	bne.n	80052fa <lps22df_init_set+0x138>
          {
            break;
          }

          /* sw-reset procedue ended correctly */
          if (status.sw_reset == 0U)
 80052ce:	7c3b      	ldrb	r3, [r7, #16]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d011      	beq.n	80052fe <lps22df_init_set+0x13c>
          {
            break;
          }

          if (ctx->mdelay != NULL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <lps22df_init_set+0x128>
          {
            ctx->mdelay(1); /* should be 50 us */
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	2001      	movs	r0, #1
 80052e8:	4798      	blx	r3
          }
        } while (cnt++ < 5U);
 80052ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052ee:	1c5a      	adds	r2, r3, #1
 80052f0:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	d9e0      	bls.n	80052ba <lps22df_init_set+0xf8>
 80052f8:	e002      	b.n	8005300 <lps22df_init_set+0x13e>
            break;
 80052fa:	bf00      	nop
 80052fc:	e000      	b.n	8005300 <lps22df_init_set+0x13e>
            break;
 80052fe:	bf00      	nop

        if (cnt >= 5U)
 8005300:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005304:	2b04      	cmp	r3, #4
 8005306:	d938      	bls.n	800537a <lps22df_init_set+0x1b8>
        {
          ret = -1;  /* sw-reset procedure failed */
 8005308:	f04f 33ff 	mov.w	r3, #4294967295
 800530c:	623b      	str	r3, [r7, #32]
        }

        break;
 800530e:	e034      	b.n	800537a <lps22df_init_set+0x1b8>
      case LPS22DF_DRV_RDY:
        ctrl_reg2.bdu = PROPERTY_ENABLE;
 8005310:	7f3b      	ldrb	r3, [r7, #28]
 8005312:	f043 0308 	orr.w	r3, r3, #8
 8005316:	773b      	strb	r3, [r7, #28]
        ctrl_reg3.if_add_inc = PROPERTY_ENABLE;
 8005318:	7e3b      	ldrb	r3, [r7, #24]
 800531a:	f043 0301 	orr.w	r3, r3, #1
 800531e:	763b      	strb	r3, [r7, #24]
        bytecpy(&reg[0], (uint8_t *)&ctrl_reg2);
 8005320:	f107 021c 	add.w	r2, r7, #28
 8005324:	f107 030c 	add.w	r3, r7, #12
 8005328:	4611      	mov	r1, r2
 800532a:	4618      	mov	r0, r3
 800532c:	f7ff fe8a 	bl	8005044 <bytecpy>
        bytecpy(&reg[1], (uint8_t *)&ctrl_reg3);
 8005330:	f107 0218 	add.w	r2, r7, #24
 8005334:	f107 030c 	add.w	r3, r7, #12
 8005338:	3301      	adds	r3, #1
 800533a:	4611      	mov	r1, r2
 800533c:	4618      	mov	r0, r3
 800533e:	f7ff fe81 	bl	8005044 <bytecpy>
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2, reg, 2);
 8005342:	f107 020c 	add.w	r2, r7, #12
 8005346:	2302      	movs	r3, #2
 8005348:	2111      	movs	r1, #17
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff fe5c 	bl	8005008 <lps22df_write_reg>
 8005350:	6238      	str	r0, [r7, #32]
        break;
 8005352:	e013      	b.n	800537c <lps22df_init_set+0x1ba>
      default:
        ctrl_reg2.swreset = PROPERTY_ENABLE;
 8005354:	7f3b      	ldrb	r3, [r7, #28]
 8005356:	f043 0304 	orr.w	r3, r3, #4
 800535a:	773b      	strb	r3, [r7, #28]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 800535c:	f107 021c 	add.w	r2, r7, #28
 8005360:	2301      	movs	r3, #1
 8005362:	2111      	movs	r1, #17
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff fe4f 	bl	8005008 <lps22df_write_reg>
 800536a:	6238      	str	r0, [r7, #32]
                                (uint8_t *)&ctrl_reg2, 1);
        break;
 800536c:	e006      	b.n	800537c <lps22df_init_set+0x1ba>
          break;
 800536e:	bf00      	nop
 8005370:	e004      	b.n	800537c <lps22df_init_set+0x1ba>
        break;
 8005372:	bf00      	nop
 8005374:	e002      	b.n	800537c <lps22df_init_set+0x1ba>
          break;
 8005376:	bf00      	nop
 8005378:	e000      	b.n	800537c <lps22df_init_set+0x1ba>
        break;
 800537a:	bf00      	nop
    }
  }

  return ret;
 800537c:	6a3b      	ldr	r3, [r7, #32]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3728      	adds	r7, #40	@ 0x28
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <lps22df_status_get>:
  * @param  val   the status of the device.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_status_get(const stmdev_ctx_t *ctx, lps22df_stat_t *val)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b088      	sub	sp, #32
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	6039      	str	r1, [r7, #0]
  lps22df_int_source_t int_source;
  lps22df_ctrl_reg2_t ctrl_reg2;
  lps22df_status_t status;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG2,
 8005390:	f107 0210 	add.w	r2, r7, #16
 8005394:	2301      	movs	r3, #1
 8005396:	2111      	movs	r1, #17
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7ff fe17 	bl	8004fcc <lps22df_read_reg>
 800539e:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg2, 1);
  if (ret == 0)
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d107      	bne.n	80053b6 <lps22df_status_get+0x30>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_INT_SOURCE, (uint8_t *)&int_source, 1);
 80053a6:	f107 0214 	add.w	r2, r7, #20
 80053aa:	2301      	movs	r3, #1
 80053ac:	2124      	movs	r1, #36	@ 0x24
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7ff fe0c 	bl	8004fcc <lps22df_read_reg>
 80053b4:	61f8      	str	r0, [r7, #28]
  }
  if (ret == 0)
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d107      	bne.n	80053cc <lps22df_status_get+0x46>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_STATUS, (uint8_t *)&status, 1);
 80053bc:	f107 020c 	add.w	r2, r7, #12
 80053c0:	2301      	movs	r3, #1
 80053c2:	2127      	movs	r1, #39	@ 0x27
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7ff fe01 	bl	8004fcc <lps22df_read_reg>
 80053ca:	61f8      	str	r0, [r7, #28]
  }
  if (ret == 0)
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d107      	bne.n	80053e2 <lps22df_status_get+0x5c>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_INTERRUPT_CFG,
 80053d2:	f107 0218 	add.w	r2, r7, #24
 80053d6:	2301      	movs	r3, #1
 80053d8:	210b      	movs	r1, #11
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7ff fdf6 	bl	8004fcc <lps22df_read_reg>
 80053e0:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&interrupt_cfg, 1);
  }
  val->sw_reset  = ctrl_reg2.swreset;
 80053e2:	7c3b      	ldrb	r3, [r7, #16]
 80053e4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80053e8:	b2d9      	uxtb	r1, r3
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	7813      	ldrb	r3, [r2, #0]
 80053ee:	f361 0300 	bfi	r3, r1, #0, #1
 80053f2:	7013      	strb	r3, [r2, #0]
  val->boot      = int_source.boot_on;
 80053f4:	7d3b      	ldrb	r3, [r7, #20]
 80053f6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80053fa:	b2d9      	uxtb	r1, r3
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	7813      	ldrb	r3, [r2, #0]
 8005400:	f361 0341 	bfi	r3, r1, #1, #1
 8005404:	7013      	strb	r3, [r2, #0]
  val->drdy_pres = status.p_da;
 8005406:	7b3b      	ldrb	r3, [r7, #12]
 8005408:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800540c:	b2d9      	uxtb	r1, r3
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	7813      	ldrb	r3, [r2, #0]
 8005412:	f361 0382 	bfi	r3, r1, #2, #1
 8005416:	7013      	strb	r3, [r2, #0]
  val->drdy_temp = status.t_da;
 8005418:	7b3b      	ldrb	r3, [r7, #12]
 800541a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800541e:	b2d9      	uxtb	r1, r3
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	7813      	ldrb	r3, [r2, #0]
 8005424:	f361 03c3 	bfi	r3, r1, #3, #1
 8005428:	7013      	strb	r3, [r2, #0]
  val->ovr_pres  = status.p_or;
 800542a:	7b3b      	ldrb	r3, [r7, #12]
 800542c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005430:	b2d9      	uxtb	r1, r3
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	7813      	ldrb	r3, [r2, #0]
 8005436:	f361 1304 	bfi	r3, r1, #4, #1
 800543a:	7013      	strb	r3, [r2, #0]
  val->ovr_temp  = status.t_or;
 800543c:	7b3b      	ldrb	r3, [r7, #12]
 800543e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005442:	b2d9      	uxtb	r1, r3
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	7813      	ldrb	r3, [r2, #0]
 8005448:	f361 1345 	bfi	r3, r1, #5, #1
 800544c:	7013      	strb	r3, [r2, #0]
  val->end_meas  = ~ctrl_reg2.oneshot;
 800544e:	7c3b      	ldrb	r3, [r7, #16]
 8005450:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005454:	b2db      	uxtb	r3, r3
 8005456:	43db      	mvns	r3, r3
 8005458:	b2db      	uxtb	r3, r3
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	b2d9      	uxtb	r1, r3
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	7813      	ldrb	r3, [r2, #0]
 8005464:	f361 1386 	bfi	r3, r1, #6, #1
 8005468:	7013      	strb	r3, [r2, #0]
  val->ref_done = ~interrupt_cfg.autozero;
 800546a:	7e3b      	ldrb	r3, [r7, #24]
 800546c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005470:	b2db      	uxtb	r3, r3
 8005472:	43db      	mvns	r3, r3
 8005474:	b2db      	uxtb	r3, r3
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	b2d9      	uxtb	r1, r3
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	7813      	ldrb	r3, [r2, #0]
 8005480:	f361 13c7 	bfi	r3, r1, #7, #1
 8005484:	7013      	strb	r3, [r2, #0]

  return ret;
 8005486:	69fb      	ldr	r3, [r7, #28]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3720      	adds	r7, #32
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <lps22df_mode_set>:
  * @param  val   set the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_mode_set(const stmdev_ctx_t *ctx, lps22df_md_t *val)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  lps22df_ctrl_reg1_t ctrl_reg1;
  lps22df_ctrl_reg2_t ctrl_reg2;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 800549a:	f107 0208 	add.w	r2, r7, #8
 800549e:	2302      	movs	r3, #2
 80054a0:	2110      	movs	r1, #16
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7ff fd92 	bl	8004fcc <lps22df_read_reg>
 80054a8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d148      	bne.n	8005542 <lps22df_mode_set+0xb2>
  {
    bytecpy((uint8_t *)&ctrl_reg1, &reg[0]);
 80054b0:	f107 0208 	add.w	r2, r7, #8
 80054b4:	f107 0310 	add.w	r3, r7, #16
 80054b8:	4611      	mov	r1, r2
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7ff fdc2 	bl	8005044 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg2, &reg[1]);
 80054c0:	f107 0308 	add.w	r3, r7, #8
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	f107 030c 	add.w	r3, r7, #12
 80054ca:	4611      	mov	r1, r2
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff fdb9 	bl	8005044 <bytecpy>

    ctrl_reg1.odr = (uint8_t)val->odr;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	f003 030f 	and.w	r3, r3, #15
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	7c3b      	ldrb	r3, [r7, #16]
 80054de:	f362 03c6 	bfi	r3, r2, #3, #4
 80054e2:	743b      	strb	r3, [r7, #16]
    ctrl_reg1.avg = (uint8_t)val->avg;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	785b      	ldrb	r3, [r3, #1]
 80054e8:	f003 0307 	and.w	r3, r3, #7
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	7c3b      	ldrb	r3, [r7, #16]
 80054f0:	f362 0302 	bfi	r3, r2, #0, #3
 80054f4:	743b      	strb	r3, [r7, #16]
    ctrl_reg2.en_lpfp = (uint8_t)val->lpf & 0x01U;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	789b      	ldrb	r3, [r3, #2]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	7b3b      	ldrb	r3, [r7, #12]
 8005502:	f362 1304 	bfi	r3, r2, #4, #1
 8005506:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.lfpf_cfg = ((uint8_t)val->lpf & 0x02U) >> 2;
 8005508:	7b3b      	ldrb	r3, [r7, #12]
 800550a:	f023 0320 	bic.w	r3, r3, #32
 800550e:	733b      	strb	r3, [r7, #12]

    bytecpy(&reg[0], (uint8_t *)&ctrl_reg1);
 8005510:	f107 0210 	add.w	r2, r7, #16
 8005514:	f107 0308 	add.w	r3, r7, #8
 8005518:	4611      	mov	r1, r2
 800551a:	4618      	mov	r0, r3
 800551c:	f7ff fd92 	bl	8005044 <bytecpy>
    bytecpy(&reg[1], (uint8_t *)&ctrl_reg2);
 8005520:	f107 020c 	add.w	r2, r7, #12
 8005524:	f107 0308 	add.w	r3, r7, #8
 8005528:	3301      	adds	r3, #1
 800552a:	4611      	mov	r1, r2
 800552c:	4618      	mov	r0, r3
 800552e:	f7ff fd89 	bl	8005044 <bytecpy>
    ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 8005532:	f107 0208 	add.w	r2, r7, #8
 8005536:	2302      	movs	r3, #2
 8005538:	2110      	movs	r1, #16
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7ff fd64 	bl	8005008 <lps22df_write_reg>
 8005540:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8005542:	697b      	ldr	r3, [r7, #20]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3718      	adds	r7, #24
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <lps22df_mode_get>:
  * @param  val   get the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_mode_get(const stmdev_ctx_t *ctx, lps22df_md_t *val)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  lps22df_ctrl_reg1_t ctrl_reg1;
  lps22df_ctrl_reg2_t ctrl_reg2;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 8005556:	f107 0208 	add.w	r2, r7, #8
 800555a:	2302      	movs	r3, #2
 800555c:	2110      	movs	r1, #16
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7ff fd34 	bl	8004fcc <lps22df_read_reg>
 8005564:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	2b00      	cmp	r3, #0
 800556a:	f040 80b6 	bne.w	80056da <lps22df_mode_get+0x18e>
  {
    bytecpy((uint8_t *)&ctrl_reg1, &reg[0]);
 800556e:	f107 0208 	add.w	r2, r7, #8
 8005572:	f107 0310 	add.w	r3, r7, #16
 8005576:	4611      	mov	r1, r2
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff fd63 	bl	8005044 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg2, &reg[1]);
 800557e:	f107 0308 	add.w	r3, r7, #8
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	f107 030c 	add.w	r3, r7, #12
 8005588:	4611      	mov	r1, r2
 800558a:	4618      	mov	r0, r3
 800558c:	f7ff fd5a 	bl	8005044 <bytecpy>

    switch (ctrl_reg1.odr)
 8005590:	7c3b      	ldrb	r3, [r7, #16]
 8005592:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b08      	cmp	r3, #8
 800559a:	d839      	bhi.n	8005610 <lps22df_mode_get+0xc4>
 800559c:	a201      	add	r2, pc, #4	@ (adr r2, 80055a4 <lps22df_mode_get+0x58>)
 800559e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a2:	bf00      	nop
 80055a4:	080055c9 	.word	0x080055c9
 80055a8:	080055d1 	.word	0x080055d1
 80055ac:	080055d9 	.word	0x080055d9
 80055b0:	080055e1 	.word	0x080055e1
 80055b4:	080055e9 	.word	0x080055e9
 80055b8:	080055f1 	.word	0x080055f1
 80055bc:	080055f9 	.word	0x080055f9
 80055c0:	08005601 	.word	0x08005601
 80055c4:	08005609 	.word	0x08005609
    {
      case LPS22DF_ONE_SHOT:
        val->odr = LPS22DF_ONE_SHOT;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	2200      	movs	r2, #0
 80055cc:	701a      	strb	r2, [r3, #0]
        break;
 80055ce:	e023      	b.n	8005618 <lps22df_mode_get+0xcc>
      case LPS22DF_1Hz:
        val->odr = LPS22DF_1Hz;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	2201      	movs	r2, #1
 80055d4:	701a      	strb	r2, [r3, #0]
        break;
 80055d6:	e01f      	b.n	8005618 <lps22df_mode_get+0xcc>
      case LPS22DF_4Hz:
        val->odr = LPS22DF_4Hz;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	2202      	movs	r2, #2
 80055dc:	701a      	strb	r2, [r3, #0]
        break;
 80055de:	e01b      	b.n	8005618 <lps22df_mode_get+0xcc>
      case LPS22DF_10Hz:
        val->odr = LPS22DF_10Hz;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	2203      	movs	r2, #3
 80055e4:	701a      	strb	r2, [r3, #0]
        break;
 80055e6:	e017      	b.n	8005618 <lps22df_mode_get+0xcc>
      case LPS22DF_25Hz:
        val->odr = LPS22DF_25Hz;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	2204      	movs	r2, #4
 80055ec:	701a      	strb	r2, [r3, #0]
        break;
 80055ee:	e013      	b.n	8005618 <lps22df_mode_get+0xcc>
      case LPS22DF_50Hz:
        val->odr = LPS22DF_50Hz;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	2205      	movs	r2, #5
 80055f4:	701a      	strb	r2, [r3, #0]
        break;
 80055f6:	e00f      	b.n	8005618 <lps22df_mode_get+0xcc>
      case LPS22DF_75Hz:
        val->odr = LPS22DF_75Hz;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	2206      	movs	r2, #6
 80055fc:	701a      	strb	r2, [r3, #0]
        break;
 80055fe:	e00b      	b.n	8005618 <lps22df_mode_get+0xcc>
      case LPS22DF_100Hz:
        val->odr = LPS22DF_100Hz;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	2207      	movs	r2, #7
 8005604:	701a      	strb	r2, [r3, #0]
        break;
 8005606:	e007      	b.n	8005618 <lps22df_mode_get+0xcc>
      case LPS22DF_200Hz:
        val->odr = LPS22DF_200Hz;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	2208      	movs	r2, #8
 800560c:	701a      	strb	r2, [r3, #0]
        break;
 800560e:	e003      	b.n	8005618 <lps22df_mode_get+0xcc>
      default:
        val->odr = LPS22DF_ONE_SHOT;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	2200      	movs	r2, #0
 8005614:	701a      	strb	r2, [r3, #0]
        break;
 8005616:	bf00      	nop
    }

    switch (ctrl_reg1.avg)
 8005618:	7c3b      	ldrb	r3, [r7, #16]
 800561a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b07      	cmp	r3, #7
 8005622:	d833      	bhi.n	800568c <lps22df_mode_get+0x140>
 8005624:	a201      	add	r2, pc, #4	@ (adr r2, 800562c <lps22df_mode_get+0xe0>)
 8005626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562a:	bf00      	nop
 800562c:	0800564d 	.word	0x0800564d
 8005630:	08005655 	.word	0x08005655
 8005634:	0800565d 	.word	0x0800565d
 8005638:	08005665 	.word	0x08005665
 800563c:	0800566d 	.word	0x0800566d
 8005640:	08005675 	.word	0x08005675
 8005644:	0800567d 	.word	0x0800567d
 8005648:	08005685 	.word	0x08005685
    {
      case LPS22DF_4_AVG:
        val->avg = LPS22DF_4_AVG;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2200      	movs	r2, #0
 8005650:	705a      	strb	r2, [r3, #1]
        break;
 8005652:	e01f      	b.n	8005694 <lps22df_mode_get+0x148>
      case LPS22DF_8_AVG:
        val->avg = LPS22DF_8_AVG;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2201      	movs	r2, #1
 8005658:	705a      	strb	r2, [r3, #1]
        break;
 800565a:	e01b      	b.n	8005694 <lps22df_mode_get+0x148>
      case LPS22DF_16_AVG:
        val->avg = LPS22DF_16_AVG;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	2202      	movs	r2, #2
 8005660:	705a      	strb	r2, [r3, #1]
        break;
 8005662:	e017      	b.n	8005694 <lps22df_mode_get+0x148>
      case LPS22DF_32_AVG:
        val->avg = LPS22DF_32_AVG;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2203      	movs	r2, #3
 8005668:	705a      	strb	r2, [r3, #1]
        break;
 800566a:	e013      	b.n	8005694 <lps22df_mode_get+0x148>
      case LPS22DF_64_AVG:
        val->avg = LPS22DF_64_AVG;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2204      	movs	r2, #4
 8005670:	705a      	strb	r2, [r3, #1]
        break;
 8005672:	e00f      	b.n	8005694 <lps22df_mode_get+0x148>
      case LPS22DF_128_AVG:
        val->avg = LPS22DF_128_AVG;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	2205      	movs	r2, #5
 8005678:	705a      	strb	r2, [r3, #1]
        break;
 800567a:	e00b      	b.n	8005694 <lps22df_mode_get+0x148>
      case LPS22DF_256_AVG:
        val->avg = LPS22DF_256_AVG;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	2206      	movs	r2, #6
 8005680:	705a      	strb	r2, [r3, #1]
        break;
 8005682:	e007      	b.n	8005694 <lps22df_mode_get+0x148>
      case LPS22DF_512_AVG:
        val->avg = LPS22DF_512_AVG;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	2207      	movs	r2, #7
 8005688:	705a      	strb	r2, [r3, #1]
        break;
 800568a:	e003      	b.n	8005694 <lps22df_mode_get+0x148>
      default:
        val->avg = LPS22DF_4_AVG;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	2200      	movs	r2, #0
 8005690:	705a      	strb	r2, [r3, #1]
        break;
 8005692:	bf00      	nop
    }

    switch ((ctrl_reg2.lfpf_cfg << 2) | ctrl_reg2.en_lpfp)
 8005694:	7b3b      	ldrb	r3, [r7, #12]
 8005696:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800569a:	b2db      	uxtb	r3, r3
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	7b3a      	ldrb	r2, [r7, #12]
 80056a0:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80056a4:	b2d2      	uxtb	r2, r2
 80056a6:	4313      	orrs	r3, r2
 80056a8:	2b03      	cmp	r3, #3
 80056aa:	d00e      	beq.n	80056ca <lps22df_mode_get+0x17e>
 80056ac:	2b03      	cmp	r3, #3
 80056ae:	dc10      	bgt.n	80056d2 <lps22df_mode_get+0x186>
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <lps22df_mode_get+0x16e>
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d004      	beq.n	80056c2 <lps22df_mode_get+0x176>
 80056b8:	e00b      	b.n	80056d2 <lps22df_mode_get+0x186>
    {
      case LPS22DF_LPF_DISABLE:
        val->lpf = LPS22DF_LPF_DISABLE;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2200      	movs	r2, #0
 80056be:	709a      	strb	r2, [r3, #2]
        break;
 80056c0:	e00b      	b.n	80056da <lps22df_mode_get+0x18e>
      case LPS22DF_LPF_ODR_DIV_4:
        val->lpf = LPS22DF_LPF_ODR_DIV_4;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2201      	movs	r2, #1
 80056c6:	709a      	strb	r2, [r3, #2]
        break;
 80056c8:	e007      	b.n	80056da <lps22df_mode_get+0x18e>
      case LPS22DF_LPF_ODR_DIV_9:
        val->lpf = LPS22DF_LPF_ODR_DIV_9;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2203      	movs	r2, #3
 80056ce:	709a      	strb	r2, [r3, #2]
        break;
 80056d0:	e003      	b.n	80056da <lps22df_mode_get+0x18e>
      default:
        val->lpf = LPS22DF_LPF_DISABLE;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2200      	movs	r2, #0
 80056d6:	709a      	strb	r2, [r3, #2]
        break;
 80056d8:	bf00      	nop
    }
  }
  return ret;
 80056da:	697b      	ldr	r3, [r7, #20]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <lps22df_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_pressure_raw_get(const stmdev_ctx_t *ctx, uint32_t *buff)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[3];

  ret =  lps22df_read_reg(ctx, LPS22DF_PRESS_OUT_XL, reg, 3);
 80056ee:	f107 0208 	add.w	r2, r7, #8
 80056f2:	2303      	movs	r3, #3
 80056f4:	2128      	movs	r1, #40	@ 0x28
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7ff fc68 	bl	8004fcc <lps22df_read_reg>
 80056fc:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80056fe:	7abb      	ldrb	r3, [r7, #10]
 8005700:	461a      	mov	r2, r3
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[1];
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	021b      	lsls	r3, r3, #8
 800570c:	7a7a      	ldrb	r2, [r7, #9]
 800570e:	441a      	add	r2, r3
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[0];
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	021b      	lsls	r3, r3, #8
 800571a:	7a3a      	ldrb	r2, [r7, #8]
 800571c:	441a      	add	r2, r3
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	601a      	str	r2, [r3, #0]
  *buff *= 256U;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	021a      	lsls	r2, r3, #8
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	601a      	str	r2, [r3, #0]

  return ret;
 800572c:	68fb      	ldr	r3, [r7, #12]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <lps22df_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *buff)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b084      	sub	sp, #16
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
 800573e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[2];

  ret =  lps22df_read_reg(ctx, LPS22DF_TEMP_OUT_L, reg, 2);
 8005740:	f107 0208 	add.w	r2, r7, #8
 8005744:	2302      	movs	r3, #2
 8005746:	212b      	movs	r1, #43	@ 0x2b
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7ff fc3f 	bl	8004fcc <lps22df_read_reg>
 800574e:	60f8      	str	r0, [r7, #12]
  *buff = (int16_t)reg[1];
 8005750:	7a7b      	ldrb	r3, [r7, #9]
 8005752:	b21a      	sxth	r2, r3
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + (int16_t)reg[0];
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800575e:	b29b      	uxth	r3, r3
 8005760:	021b      	lsls	r3, r3, #8
 8005762:	b29b      	uxth	r3, r3
 8005764:	7a3a      	ldrb	r2, [r7, #8]
 8005766:	4413      	add	r3, r2
 8005768:	b29b      	uxth	r3, r3
 800576a:	b21a      	sxth	r2, r3
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	801a      	strh	r2, [r3, #0]

  return ret;
 8005770:	68fb      	ldr	r3, [r7, #12]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
	...

0800577c <LSM6DSO16IS_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_RegisterBusIO(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_IO_t *pIO)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8005786:	2300      	movs	r3, #0
 8005788:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d103      	bne.n	8005798 <LSM6DSO16IS_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO16IS_ERROR;
 8005790:	f04f 33ff 	mov.w	r3, #4294967295
 8005794:	60fb      	str	r3, [r7, #12]
 8005796:	e04d      	b.n	8005834 <LSM6DSO16IS_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	7b1a      	ldrb	r2, [r3, #12]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	691a      	ldr	r2, [r3, #16]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	695a      	ldr	r2, [r3, #20]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	699a      	ldr	r2, [r3, #24]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005840 <LSM6DSO16IS_RegisterBusIO+0xc4>)
 80057d4:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005844 <LSM6DSO16IS_RegisterBusIO+0xc8>)
 80057da:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d103      	bne.n	80057f2 <LSM6DSO16IS_RegisterBusIO+0x76>
    {
      ret = LSM6DSO16IS_ERROR;
 80057ea:	f04f 33ff 	mov.w	r3, #4294967295
 80057ee:	60fb      	str	r3, [r7, #12]
 80057f0:	e020      	b.n	8005834 <LSM6DSO16IS_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO16IS_OK)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4798      	blx	r3
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <LSM6DSO16IS_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO16IS_ERROR;
 80057fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	e016      	b.n	8005834 <LSM6DSO16IS_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO16IS_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	2b02      	cmp	r3, #2
 800580c:	d112      	bne.n	8005834 <LSM6DSO16IS_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10d      	bne.n	8005834 <LSM6DSO16IS_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8005818:	230c      	movs	r3, #12
 800581a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO16IS_Write_Reg(pObj, LSM6DSO16IS_CTRL3_C, data) != LSM6DSO16IS_OK)
 800581c:	7afb      	ldrb	r3, [r7, #11]
 800581e:	461a      	mov	r2, r3
 8005820:	2112      	movs	r1, #18
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fdbe 	bl	80063a4 <LSM6DSO16IS_Write_Reg>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d002      	beq.n	8005834 <LSM6DSO16IS_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO16IS_ERROR;
 800582e:	f04f 33ff 	mov.w	r3, #4294967295
 8005832:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005834:	68fb      	ldr	r3, [r7, #12]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	0800686d 	.word	0x0800686d
 8005844:	080068a3 	.word	0x080068a3

08005848 <LSM6DSO16IS_Init>:
  * @brief  Initialize the LSM6DSO16IS sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Init(LSM6DSO16IS_Object_t *pObj)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8005850:	2300      	movs	r3, #0
 8005852:	60fb      	str	r3, [r7, #12]

  /* Set main memory bank */
  if (LSM6DSO16IS_Set_Mem_Bank(pObj, (uint8_t)LSM6DSO16IS_MAIN_MEM_BANK) != LSM6DSO16IS_OK)
 8005854:	2100      	movs	r1, #0
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 fdc1 	bl	80063de <LSM6DSO16IS_Set_Mem_Bank>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d002      	beq.n	8005868 <LSM6DSO16IS_Init+0x20>
  {
    ret = LSM6DSO16IS_ERROR;
 8005862:	f04f 33ff 	mov.w	r3, #4294967295
 8005866:	60fb      	str	r3, [r7, #12]
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso16is_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO16IS_OK)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	3320      	adds	r3, #32
 800586c:	2101      	movs	r1, #1
 800586e:	4618      	mov	r0, r3
 8005870:	f001 fbdc 	bl	800702c <lsm6dso16is_auto_increment_set>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <LSM6DSO16IS_Init+0x38>
  {
    ret = LSM6DSO16IS_ERROR;
 800587a:	f04f 33ff 	mov.w	r3, #4294967295
 800587e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable BDU */
  if (lsm6dso16is_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO16IS_OK)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	3320      	adds	r3, #32
 8005884:	2101      	movs	r1, #1
 8005886:	4618      	mov	r0, r3
 8005888:	f001 fbf6 	bl	8007078 <lsm6dso16is_block_data_update_set>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <LSM6DSO16IS_Init+0x50>
  {
    ret = LSM6DSO16IS_ERROR;
 8005892:	f04f 33ff 	mov.w	r3, #4294967295
 8005896:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO16IS_XL_ODR_AT_104Hz_HP;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2204      	movs	r2, #4
 800589c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_XL_ODR_OFF) != LSM6DSO16IS_OK)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	3320      	adds	r3, #32
 80058a4:	2100      	movs	r1, #0
 80058a6:	4618      	mov	r0, r3
 80058a8:	f001 f910 	bl	8006acc <lsm6dso16is_xl_data_rate_set>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <LSM6DSO16IS_Init+0x70>
  {
    ret = LSM6DSO16IS_ERROR;
 80058b2:	f04f 33ff 	mov.w	r3, #4294967295
 80058b6:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (lsm6dso16is_xl_full_scale_set(&(pObj->Ctx), LSM6DSO16IS_2g) != LSM6DSO16IS_OK)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3320      	adds	r3, #32
 80058bc:	2100      	movs	r1, #0
 80058be:	4618      	mov	r0, r3
 80058c0:	f001 f8a6 	bl	8006a10 <lsm6dso16is_xl_full_scale_set>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d002      	beq.n	80058d0 <LSM6DSO16IS_Init+0x88>
  {
    ret = LSM6DSO16IS_ERROR;
 80058ca:	f04f 33ff 	mov.w	r3, #4294967295
 80058ce:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO16IS_GY_ODR_AT_104Hz_HP;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2204      	movs	r2, #4
 80058d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_GY_ODR_OFF) != LSM6DSO16IS_OK)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	3320      	adds	r3, #32
 80058dc:	2100      	movs	r1, #0
 80058de:	4618      	mov	r0, r3
 80058e0:	f001 faa8 	bl	8006e34 <lsm6dso16is_gy_data_rate_set>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d002      	beq.n	80058f0 <LSM6DSO16IS_Init+0xa8>
  {
    ret = LSM6DSO16IS_ERROR;
 80058ea:	f04f 33ff 	mov.w	r3, #4294967295
 80058ee:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (lsm6dso16is_gy_full_scale_set(&(pObj->Ctx), LSM6DSO16IS_2000dps) != LSM6DSO16IS_OK)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	3320      	adds	r3, #32
 80058f4:	2103      	movs	r1, #3
 80058f6:	4618      	mov	r0, r3
 80058f8:	f001 fa10 	bl	8006d1c <lsm6dso16is_gy_full_scale_set>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d002      	beq.n	8005908 <LSM6DSO16IS_Init+0xc0>
  {
    ret = LSM6DSO16IS_ERROR;
 8005902:	f04f 33ff 	mov.w	r3, #4294967295
 8005906:	60fb      	str	r3, [r7, #12]
  }

  if (ret == LSM6DSO16IS_OK)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d103      	bne.n	8005916 <LSM6DSO16IS_Init+0xce>
  {
    pObj->is_initialized = 1;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return ret;
 8005916:	68fb      	ldr	r3, [r7, #12]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <LSM6DSO16IS_DeInit>:
  * @brief  Deinitialize the LSM6DSO16IS sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_DeInit(LSM6DSO16IS_Object_t *pObj)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8005928:	2300      	movs	r3, #0
 800592a:	60fb      	str	r3, [r7, #12]

  /* Disable the component */
  if (LSM6DSO16IS_ACC_Disable(pObj) != LSM6DSO16IS_OK)
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f890 	bl	8005a52 <LSM6DSO16IS_ACC_Disable>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <LSM6DSO16IS_DeInit+0x1e>
  {
    ret = LSM6DSO16IS_ERROR;
 8005938:	f04f 33ff 	mov.w	r3, #4294967295
 800593c:	60fb      	str	r3, [r7, #12]
  }

  if (LSM6DSO16IS_GYRO_Disable(pObj) != LSM6DSO16IS_OK)
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fad0 	bl	8005ee4 <LSM6DSO16IS_GYRO_Disable>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d002      	beq.n	8005950 <LSM6DSO16IS_DeInit+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 800594a:	f04f 33ff 	mov.w	r3, #4294967295
 800594e:	60fb      	str	r3, [r7, #12]
  }

  if (ret == LSM6DSO16IS_OK)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10b      	bne.n	800596e <LSM6DSO16IS_DeInit+0x4e>
  {
    /* Reset output data rate. */
    pObj->acc_odr = LSM6DSO16IS_XL_ODR_OFF;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    pObj->gyro_odr = LSM6DSO16IS_GY_ODR_OFF;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    pObj->is_initialized = 0;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return ret;
 800596e:	68fb      	ldr	r3, [r7, #12]
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <LSM6DSO16IS_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ReadID(LSM6DSO16IS_Object_t *pObj, uint8_t *Id)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	60fb      	str	r3, [r7, #12]

  if (lsm6dso16is_device_id_get(&(pObj->Ctx), Id) != LSM6DSO16IS_OK)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	3320      	adds	r3, #32
 800598a:	6839      	ldr	r1, [r7, #0]
 800598c:	4618      	mov	r0, r3
 800598e:	f001 f808 	bl	80069a2 <lsm6dso16is_device_id_get>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <LSM6DSO16IS_ReadID+0x26>
  {
    ret = LSM6DSO16IS_ERROR;
 8005998:	f04f 33ff 	mov.w	r3, #4294967295
 800599c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800599e:	68fb      	ldr	r3, [r7, #12]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <LSM6DSO16IS_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO16IS sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GetCapabilities(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Capabilities_t *Capabilities)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2201      	movs	r2, #1
 80059b6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	2201      	movs	r2, #1
 80059bc:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2200      	movs	r2, #0
 80059c2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	2200      	movs	r2, #0
 80059c8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80059d0:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2210      	movs	r2, #16
 80059d6:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	2200      	movs	r2, #0
 80059dc:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 3333.0f;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	4a07      	ldr	r2, [pc, #28]	@ (8005a00 <LSM6DSO16IS_GetCapabilities+0x58>)
 80059e2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 3333.0f;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	4a06      	ldr	r2, [pc, #24]	@ (8005a00 <LSM6DSO16IS_GetCapabilities+0x58>)
 80059e8:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	f04f 0200 	mov.w	r2, #0
 80059f0:	619a      	str	r2, [r3, #24]

  return LSM6DSO16IS_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	45505000 	.word	0x45505000

08005a04 <LSM6DSO16IS_ACC_Enable>:
  * @brief  Enable the LSM6DSO16IS accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_Enable(LSM6DSO16IS_Object_t *pObj)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d102      	bne.n	8005a20 <LSM6DSO16IS_ACC_Enable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60fb      	str	r3, [r7, #12]
 8005a1e:	e013      	b.n	8005a48 <LSM6DSO16IS_ACC_Enable+0x44>
  }
  else
  {
    /* Output data rate selection. */
    if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO16IS_OK)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f103 0220 	add.w	r2, r3, #32
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4610      	mov	r0, r2
 8005a30:	f001 f84c 	bl	8006acc <lsm6dso16is_xl_data_rate_set>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <LSM6DSO16IS_ACC_Enable+0x3c>
    {
      ret = LSM6DSO16IS_ERROR;
 8005a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a3e:	60fb      	str	r3, [r7, #12]
    }

    pObj->acc_is_enabled = 1;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }

  return ret;
 8005a48:	68fb      	ldr	r3, [r7, #12]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <LSM6DSO16IS_ACC_Disable>:
  * @brief  Disable the LSM6DSO16IS accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_Disable(LSM6DSO16IS_Object_t *pObj)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b084      	sub	sp, #16
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d102      	bne.n	8005a6e <LSM6DSO16IS_ACC_Disable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	e01e      	b.n	8005aac <LSM6DSO16IS_ACC_Disable+0x5a>
  }
  else
  {
    /* Get current output data rate. */
    if (lsm6dso16is_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO16IS_OK)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f103 0220 	add.w	r2, r3, #32
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	3333      	adds	r3, #51	@ 0x33
 8005a78:	4619      	mov	r1, r3
 8005a7a:	4610      	mov	r0, r2
 8005a7c:	f001 f866 	bl	8006b4c <lsm6dso16is_xl_data_rate_get>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <LSM6DSO16IS_ACC_Disable+0x3a>
    {
      ret = LSM6DSO16IS_ERROR;
 8005a86:	f04f 33ff 	mov.w	r3, #4294967295
 8005a8a:	60fb      	str	r3, [r7, #12]
    }

    /* Output data rate selection - power down. */
    if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_XL_ODR_OFF) != LSM6DSO16IS_OK)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	3320      	adds	r3, #32
 8005a90:	2100      	movs	r1, #0
 8005a92:	4618      	mov	r0, r3
 8005a94:	f001 f81a 	bl	8006acc <lsm6dso16is_xl_data_rate_set>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d002      	beq.n	8005aa4 <LSM6DSO16IS_ACC_Disable+0x52>
    {
      ret = LSM6DSO16IS_ERROR;
 8005a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa2:	60fb      	str	r3, [r7, #12]
    }

    pObj->acc_is_enabled = 0;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }

  return ret;
 8005aac:	68fb      	ldr	r3, [r7, #12]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <LSM6DSO16IS_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetSensitivity(LSM6DSO16IS_Object_t *pObj, float_t *Sensitivity)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO16IS_OK)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	3320      	adds	r3, #32
 8005aca:	f107 020b 	add.w	r2, r7, #11
 8005ace:	4611      	mov	r1, r2
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 ffc3 	bl	8006a5c <lsm6dso16is_xl_full_scale_get>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d002      	beq.n	8005ae2 <LSM6DSO16IS_ACC_GetSensitivity+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8005adc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae0:	60fb      	str	r3, [r7, #12]
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8005ae2:	7afb      	ldrb	r3, [r7, #11]
 8005ae4:	2b03      	cmp	r3, #3
 8005ae6:	d81b      	bhi.n	8005b20 <LSM6DSO16IS_ACC_GetSensitivity+0x68>
 8005ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8005af0 <LSM6DSO16IS_ACC_GetSensitivity+0x38>)
 8005aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aee:	bf00      	nop
 8005af0:	08005b01 	.word	0x08005b01
 8005af4:	08005b19 	.word	0x08005b19
 8005af8:	08005b09 	.word	0x08005b09
 8005afc:	08005b11 	.word	0x08005b11
  {
    case LSM6DSO16IS_2g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_2G;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	4a0c      	ldr	r2, [pc, #48]	@ (8005b34 <LSM6DSO16IS_ACC_GetSensitivity+0x7c>)
 8005b04:	601a      	str	r2, [r3, #0]
      break;
 8005b06:	e00f      	b.n	8005b28 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_4g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_4G;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	4a0b      	ldr	r2, [pc, #44]	@ (8005b38 <LSM6DSO16IS_ACC_GetSensitivity+0x80>)
 8005b0c:	601a      	str	r2, [r3, #0]
      break;
 8005b0e:	e00b      	b.n	8005b28 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_8g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_8G;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	4a0a      	ldr	r2, [pc, #40]	@ (8005b3c <LSM6DSO16IS_ACC_GetSensitivity+0x84>)
 8005b14:	601a      	str	r2, [r3, #0]
      break;
 8005b16:	e007      	b.n	8005b28 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_16g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_16G;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	4a09      	ldr	r2, [pc, #36]	@ (8005b40 <LSM6DSO16IS_ACC_GetSensitivity+0x88>)
 8005b1c:	601a      	str	r2, [r3, #0]
      break;
 8005b1e:	e003      	b.n	8005b28 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO16IS_ERROR;
 8005b20:	f04f 33ff 	mov.w	r3, #4294967295
 8005b24:	60fb      	str	r3, [r7, #12]
      break;
 8005b26:	bf00      	nop
  }

  return ret;
 8005b28:	68fb      	ldr	r3, [r7, #12]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	3d79db23 	.word	0x3d79db23
 8005b38:	3df9db23 	.word	0x3df9db23
 8005b3c:	3e79db23 	.word	0x3e79db23
 8005b40:	3ef9db23 	.word	0x3ef9db23

08005b44 <LSM6DSO16IS_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t *Odr)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_data_rate_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso16is_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO16IS_OK)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	3320      	adds	r3, #32
 8005b56:	f107 020b 	add.w	r2, r7, #11
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f000 fff5 	bl	8006b4c <lsm6dso16is_xl_data_rate_get>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d002      	beq.n	8005b6e <LSM6DSO16IS_ACC_GetOutputDataRate+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8005b68:	f04f 33ff 	mov.w	r3, #4294967295
 8005b6c:	60fb      	str	r3, [r7, #12]
  }

  switch (odr_low_level)
 8005b6e:	7afb      	ldrb	r3, [r7, #11]
 8005b70:	2b1b      	cmp	r3, #27
 8005b72:	d86c      	bhi.n	8005c4e <LSM6DSO16IS_ACC_GetOutputDataRate+0x10a>
 8005b74:	a201      	add	r2, pc, #4	@ (adr r2, 8005b7c <LSM6DSO16IS_ACC_GetOutputDataRate+0x38>)
 8005b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7a:	bf00      	nop
 8005b7c:	08005bed 	.word	0x08005bed
 8005b80:	08005bff 	.word	0x08005bff
 8005b84:	08005c07 	.word	0x08005c07
 8005b88:	08005c0f 	.word	0x08005c0f
 8005b8c:	08005c17 	.word	0x08005c17
 8005b90:	08005c1f 	.word	0x08005c1f
 8005b94:	08005c27 	.word	0x08005c27
 8005b98:	08005c2f 	.word	0x08005c2f
 8005b9c:	08005c37 	.word	0x08005c37
 8005ba0:	08005c3f 	.word	0x08005c3f
 8005ba4:	08005c47 	.word	0x08005c47
 8005ba8:	08005c4f 	.word	0x08005c4f
 8005bac:	08005c4f 	.word	0x08005c4f
 8005bb0:	08005c4f 	.word	0x08005c4f
 8005bb4:	08005c4f 	.word	0x08005c4f
 8005bb8:	08005c4f 	.word	0x08005c4f
 8005bbc:	08005c4f 	.word	0x08005c4f
 8005bc0:	08005bff 	.word	0x08005bff
 8005bc4:	08005c07 	.word	0x08005c07
 8005bc8:	08005c0f 	.word	0x08005c0f
 8005bcc:	08005c17 	.word	0x08005c17
 8005bd0:	08005c1f 	.word	0x08005c1f
 8005bd4:	08005c27 	.word	0x08005c27
 8005bd8:	08005c2f 	.word	0x08005c2f
 8005bdc:	08005c37 	.word	0x08005c37
 8005be0:	08005c3f 	.word	0x08005c3f
 8005be4:	08005c47 	.word	0x08005c47
 8005be8:	08005bf7 	.word	0x08005bf7
  {
    case LSM6DSO16IS_XL_ODR_OFF:
      *Odr = 0.0f;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	f04f 0200 	mov.w	r2, #0
 8005bf2:	601a      	str	r2, [r3, #0]
      break;
 8005bf4:	e02f      	b.n	8005c56 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_1Hz6_LP:
      *Odr = 1.6f;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	4a19      	ldr	r2, [pc, #100]	@ (8005c60 <LSM6DSO16IS_ACC_GetOutputDataRate+0x11c>)
 8005bfa:	601a      	str	r2, [r3, #0]
      break;
 8005bfc:	e02b      	b.n	8005c56 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_LP:
    case LSM6DSO16IS_XL_ODR_AT_12Hz5_HP:
      *Odr = 12.5f;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	4a18      	ldr	r2, [pc, #96]	@ (8005c64 <LSM6DSO16IS_ACC_GetOutputDataRate+0x120>)
 8005c02:	601a      	str	r2, [r3, #0]
      break;
 8005c04:	e027      	b.n	8005c56 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_26H_LP:
    case LSM6DSO16IS_XL_ODR_AT_26H_HP:
      *Odr = 26.0f;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	4a17      	ldr	r2, [pc, #92]	@ (8005c68 <LSM6DSO16IS_ACC_GetOutputDataRate+0x124>)
 8005c0a:	601a      	str	r2, [r3, #0]
      break;
 8005c0c:	e023      	b.n	8005c56 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_52Hz_HP:
      *Odr = 52.0f;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	4a16      	ldr	r2, [pc, #88]	@ (8005c6c <LSM6DSO16IS_ACC_GetOutputDataRate+0x128>)
 8005c12:	601a      	str	r2, [r3, #0]
      break;
 8005c14:	e01f      	b.n	8005c56 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_104Hz_HP:
      *Odr = 104.0f;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	4a15      	ldr	r2, [pc, #84]	@ (8005c70 <LSM6DSO16IS_ACC_GetOutputDataRate+0x12c>)
 8005c1a:	601a      	str	r2, [r3, #0]
      break;
 8005c1c:	e01b      	b.n	8005c56 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_208Hz_HP:
      *Odr = 208.0f;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	4a14      	ldr	r2, [pc, #80]	@ (8005c74 <LSM6DSO16IS_ACC_GetOutputDataRate+0x130>)
 8005c22:	601a      	str	r2, [r3, #0]
      break;
 8005c24:	e017      	b.n	8005c56 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_416Hz_HP:
      *Odr = 416.0f;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	4a13      	ldr	r2, [pc, #76]	@ (8005c78 <LSM6DSO16IS_ACC_GetOutputDataRate+0x134>)
 8005c2a:	601a      	str	r2, [r3, #0]
      break;
 8005c2c:	e013      	b.n	8005c56 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_833Hz_HP:
      *Odr = 833.0f;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	4a12      	ldr	r2, [pc, #72]	@ (8005c7c <LSM6DSO16IS_ACC_GetOutputDataRate+0x138>)
 8005c32:	601a      	str	r2, [r3, #0]
      break;
 8005c34:	e00f      	b.n	8005c56 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_1667Hz_HP:
      *Odr = 1667.0f;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	4a11      	ldr	r2, [pc, #68]	@ (8005c80 <LSM6DSO16IS_ACC_GetOutputDataRate+0x13c>)
 8005c3a:	601a      	str	r2, [r3, #0]
      break;
 8005c3c:	e00b      	b.n	8005c56 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_3333Hz_HP:
      *Odr = 3333.0f;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	4a10      	ldr	r2, [pc, #64]	@ (8005c84 <LSM6DSO16IS_ACC_GetOutputDataRate+0x140>)
 8005c42:	601a      	str	r2, [r3, #0]
      break;
 8005c44:	e007      	b.n	8005c56 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_6667Hz_HP:
      *Odr = 6667.0f;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	4a0f      	ldr	r2, [pc, #60]	@ (8005c88 <LSM6DSO16IS_ACC_GetOutputDataRate+0x144>)
 8005c4a:	601a      	str	r2, [r3, #0]
      break;
 8005c4c:	e003      	b.n	8005c56 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    default:
      ret = LSM6DSO16IS_ERROR;
 8005c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c52:	60fb      	str	r3, [r7, #12]
      break;
 8005c54:	bf00      	nop
  }

  return ret;
 8005c56:	68fb      	ldr	r3, [r7, #12]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	3fcccccd 	.word	0x3fcccccd
 8005c64:	41480000 	.word	0x41480000
 8005c68:	41d00000 	.word	0x41d00000
 8005c6c:	42500000 	.word	0x42500000
 8005c70:	42d00000 	.word	0x42d00000
 8005c74:	43500000 	.word	0x43500000
 8005c78:	43d00000 	.word	0x43d00000
 8005c7c:	44504000 	.word	0x44504000
 8005c80:	44d06000 	.word	0x44d06000
 8005c84:	45505000 	.word	0x45505000
 8005c88:	45d05800 	.word	0x45d05800

08005c8c <LSM6DSO16IS_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_SetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret;

  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d106      	bne.n	8005cb0 <LSM6DSO16IS_ACC_SetOutputDataRate+0x24>
  {
    ret = LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005ca2:	ed97 0a00 	vldr	s0, [r7]
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 fbc0 	bl	800642c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled>
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	e005      	b.n	8005cbc <LSM6DSO16IS_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    ret = LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005cb0:	ed97 0a00 	vldr	s0, [r7]
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 fc47 	bl	8006548 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled>
 8005cba:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
	...

08005cc8 <LSM6DSO16IS_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t *FullScale)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO16IS_OK)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	3320      	adds	r3, #32
 8005cda:	f107 020b 	add.w	r2, r7, #11
 8005cde:	4611      	mov	r1, r2
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 febb 	bl	8006a5c <lsm6dso16is_xl_full_scale_get>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <LSM6DSO16IS_ACC_GetFullScale+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8005cec:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf0:	60fb      	str	r3, [r7, #12]
  }

  switch (fs_low_level)
 8005cf2:	7afb      	ldrb	r3, [r7, #11]
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d81b      	bhi.n	8005d30 <LSM6DSO16IS_ACC_GetFullScale+0x68>
 8005cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8005d00 <LSM6DSO16IS_ACC_GetFullScale+0x38>)
 8005cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfe:	bf00      	nop
 8005d00:	08005d11 	.word	0x08005d11
 8005d04:	08005d29 	.word	0x08005d29
 8005d08:	08005d19 	.word	0x08005d19
 8005d0c:	08005d21 	.word	0x08005d21
  {
    case LSM6DSO16IS_2g:
      *FullScale =  2;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2202      	movs	r2, #2
 8005d14:	601a      	str	r2, [r3, #0]
      break;
 8005d16:	e00f      	b.n	8005d38 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_4g:
      *FullScale =  4;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	2204      	movs	r2, #4
 8005d1c:	601a      	str	r2, [r3, #0]
      break;
 8005d1e:	e00b      	b.n	8005d38 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_8g:
      *FullScale =  8;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	2208      	movs	r2, #8
 8005d24:	601a      	str	r2, [r3, #0]
      break;
 8005d26:	e007      	b.n	8005d38 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_16g:
      *FullScale = 16;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	2210      	movs	r2, #16
 8005d2c:	601a      	str	r2, [r3, #0]
      break;
 8005d2e:	e003      	b.n	8005d38 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO16IS_ERROR;
 8005d30:	f04f 33ff 	mov.w	r3, #4294967295
 8005d34:	60fb      	str	r3, [r7, #12]
      break;
 8005d36:	bf00      	nop
  }

  return ret;
 8005d38:	68fb      	ldr	r3, [r7, #12]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop

08005d44 <LSM6DSO16IS_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_SetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t FullScale)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t new_fs;

  new_fs = (FullScale <= 2) ? LSM6DSO16IS_2g
           : (FullScale <= 4) ? LSM6DSO16IS_4g
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	dd0b      	ble.n	8005d70 <LSM6DSO16IS_ACC_SetFullScale+0x2c>
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	dd06      	ble.n	8005d6c <LSM6DSO16IS_ACC_SetFullScale+0x28>
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b08      	cmp	r3, #8
 8005d62:	dc01      	bgt.n	8005d68 <LSM6DSO16IS_ACC_SetFullScale+0x24>
 8005d64:	2303      	movs	r3, #3
 8005d66:	e004      	b.n	8005d72 <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e002      	b.n	8005d72 <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	e000      	b.n	8005d72 <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 8005d70:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO16IS_2g
 8005d72:	72fb      	strb	r3, [r7, #11]
           : (FullScale <= 8) ? LSM6DSO16IS_8g
           :                    LSM6DSO16IS_16g;

  if (lsm6dso16is_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO16IS_OK)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	3320      	adds	r3, #32
 8005d78:	7afa      	ldrb	r2, [r7, #11]
 8005d7a:	4611      	mov	r1, r2
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 fe47 	bl	8006a10 <lsm6dso16is_xl_full_scale_set>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <LSM6DSO16IS_ACC_SetFullScale+0x4a>
  {
    ret = LSM6DSO16IS_ERROR;
 8005d88:	f04f 33ff 	mov.w	r3, #4294967295
 8005d8c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <LSM6DSO16IS_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetAxesRaw(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_AxesRaw_t *Value)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];

  /* Read raw data values. */
  if (lsm6dso16is_acceleration_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3320      	adds	r3, #32
 8005daa:	f107 020c 	add.w	r2, r7, #12
 8005dae:	4611      	mov	r1, r2
 8005db0:	4618      	mov	r0, r3
 8005db2:	f001 f9cf 	bl	8007154 <lsm6dso16is_acceleration_raw_get>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d002      	beq.n	8005dc2 <LSM6DSO16IS_ACC_GetAxesRaw+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8005dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc0:	617b      	str	r3, [r7, #20]
  }

  /* Format the data. */
  Value->x = data_raw[0];
 8005dc2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw[1];
 8005dca:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw[2];
 8005dd2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	809a      	strh	r2, [r3, #4]

  return ret;
 8005dda:	697b      	ldr	r3, [r7, #20]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <LSM6DSO16IS_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetAxes(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Axes_t *Acceleration)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];
  float_t sensitivity = 0.0f;
 8005df2:	f04f 0300 	mov.w	r3, #0
 8005df6:	60bb      	str	r3, [r7, #8]

  /* Read raw data values. */
  if (lsm6dso16is_acceleration_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	3320      	adds	r3, #32
 8005dfc:	f107 020c 	add.w	r2, r7, #12
 8005e00:	4611      	mov	r1, r2
 8005e02:	4618      	mov	r0, r3
 8005e04:	f001 f9a6 	bl	8007154 <lsm6dso16is_acceleration_raw_get>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d002      	beq.n	8005e14 <LSM6DSO16IS_ACC_GetAxes+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8005e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e12:	617b      	str	r3, [r7, #20]
  }

  /* Get LSM6DSO16IS actual sensitivity. */
  if (LSM6DSO16IS_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO16IS_OK)
 8005e14:	f107 0308 	add.w	r3, r7, #8
 8005e18:	4619      	mov	r1, r3
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7ff fe4c 	bl	8005ab8 <LSM6DSO16IS_ACC_GetSensitivity>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <LSM6DSO16IS_ACC_GetAxes+0x48>
  {
    ret = LSM6DSO16IS_ERROR;
 8005e26:	f04f 33ff 	mov.w	r3, #4294967295
 8005e2a:	617b      	str	r3, [r7, #20]
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw[0] * sensitivity));
 8005e2c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005e30:	ee07 3a90 	vmov	s15, r3
 8005e34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e38:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e44:	ee17 2a90 	vmov	r2, s15
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw[1] * sensitivity));
 8005e4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e50:	ee07 3a90 	vmov	s15, r3
 8005e54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e58:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e64:	ee17 2a90 	vmov	r2, s15
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw[2] * sensitivity));
 8005e6c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005e70:	ee07 3a90 	vmov	s15, r3
 8005e74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e78:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e84:	ee17 2a90 	vmov	r2, s15
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	609a      	str	r2, [r3, #8]

  return ret;
 8005e8c:	697b      	ldr	r3, [r7, #20]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <LSM6DSO16IS_GYRO_Enable>:
  * @brief  Enable the LSM6DSO16IS gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_Enable(LSM6DSO16IS_Object_t *pObj)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b084      	sub	sp, #16
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d102      	bne.n	8005eb2 <LSM6DSO16IS_GYRO_Enable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	60fb      	str	r3, [r7, #12]
 8005eb0:	e013      	b.n	8005eda <LSM6DSO16IS_GYRO_Enable+0x44>
  }
  else
  {
    /* Output data rate selection. */
    if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO16IS_OK)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f103 0220 	add.w	r2, r3, #32
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	4610      	mov	r0, r2
 8005ec2:	f000 ffb7 	bl	8006e34 <lsm6dso16is_gy_data_rate_set>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <LSM6DSO16IS_GYRO_Enable+0x3c>
    {
      ret = LSM6DSO16IS_ERROR;
 8005ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed0:	60fb      	str	r3, [r7, #12]
    }

    pObj->gyro_is_enabled = 1;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  }

  return ret;
 8005eda:	68fb      	ldr	r3, [r7, #12]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <LSM6DSO16IS_GYRO_Disable>:
  * @brief  Disable the LSM6DSO16IS gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_Disable(LSM6DSO16IS_Object_t *pObj)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8005eec:	2300      	movs	r3, #0
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d102      	bne.n	8005f00 <LSM6DSO16IS_GYRO_Disable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8005efa:	2300      	movs	r3, #0
 8005efc:	60fb      	str	r3, [r7, #12]
 8005efe:	e01e      	b.n	8005f3e <LSM6DSO16IS_GYRO_Disable+0x5a>
  }
  else
  {
    /* Get current output data rate. */
    if (lsm6dso16is_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO16IS_OK)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f103 0220 	add.w	r2, r3, #32
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	3334      	adds	r3, #52	@ 0x34
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	f000 ffd1 	bl	8006eb4 <lsm6dso16is_gy_data_rate_get>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d002      	beq.n	8005f1e <LSM6DSO16IS_GYRO_Disable+0x3a>
    {
      ret = LSM6DSO16IS_ERROR;
 8005f18:	f04f 33ff 	mov.w	r3, #4294967295
 8005f1c:	60fb      	str	r3, [r7, #12]
    }

    /* Output data rate selection - power down. */
    if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_GY_ODR_OFF) != LSM6DSO16IS_OK)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	3320      	adds	r3, #32
 8005f22:	2100      	movs	r1, #0
 8005f24:	4618      	mov	r0, r3
 8005f26:	f000 ff85 	bl	8006e34 <lsm6dso16is_gy_data_rate_set>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d002      	beq.n	8005f36 <LSM6DSO16IS_GYRO_Disable+0x52>
    {
      ret = LSM6DSO16IS_ERROR;
 8005f30:	f04f 33ff 	mov.w	r3, #4294967295
 8005f34:	60fb      	str	r3, [r7, #12]
    }

    pObj->gyro_is_enabled = 0;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  }

  return ret;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <LSM6DSO16IS_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetSensitivity(LSM6DSO16IS_Object_t *pObj, float_t *Sensitivity)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8005f52:	2300      	movs	r3, #0
 8005f54:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO16IS_OK)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	3320      	adds	r3, #32
 8005f5a:	f107 020b 	add.w	r2, r7, #11
 8005f5e:	4611      	mov	r1, r2
 8005f60:	4618      	mov	r0, r3
 8005f62:	f000 ff0b 	bl	8006d7c <lsm6dso16is_gy_full_scale_get>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d002      	beq.n	8005f72 <LSM6DSO16IS_GYRO_GetSensitivity+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8005f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f70:	60fb      	str	r3, [r7, #12]
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8005f72:	7afb      	ldrb	r3, [r7, #11]
 8005f74:	2b10      	cmp	r3, #16
 8005f76:	d839      	bhi.n	8005fec <LSM6DSO16IS_GYRO_GetSensitivity+0xa4>
 8005f78:	a201      	add	r2, pc, #4	@ (adr r2, 8005f80 <LSM6DSO16IS_GYRO_GetSensitivity+0x38>)
 8005f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7e:	bf00      	nop
 8005f80:	08005fcd 	.word	0x08005fcd
 8005f84:	08005fd5 	.word	0x08005fd5
 8005f88:	08005fdd 	.word	0x08005fdd
 8005f8c:	08005fe5 	.word	0x08005fe5
 8005f90:	08005fed 	.word	0x08005fed
 8005f94:	08005fed 	.word	0x08005fed
 8005f98:	08005fed 	.word	0x08005fed
 8005f9c:	08005fed 	.word	0x08005fed
 8005fa0:	08005fed 	.word	0x08005fed
 8005fa4:	08005fed 	.word	0x08005fed
 8005fa8:	08005fed 	.word	0x08005fed
 8005fac:	08005fed 	.word	0x08005fed
 8005fb0:	08005fed 	.word	0x08005fed
 8005fb4:	08005fed 	.word	0x08005fed
 8005fb8:	08005fed 	.word	0x08005fed
 8005fbc:	08005fed 	.word	0x08005fed
 8005fc0:	08005fc5 	.word	0x08005fc5
  {
    case LSM6DSO16IS_125dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_125DPS;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	4a0e      	ldr	r2, [pc, #56]	@ (8006000 <LSM6DSO16IS_GYRO_GetSensitivity+0xb8>)
 8005fc8:	601a      	str	r2, [r3, #0]
      break;
 8005fca:	e013      	b.n	8005ff4 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_250dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_250DPS;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	4a0d      	ldr	r2, [pc, #52]	@ (8006004 <LSM6DSO16IS_GYRO_GetSensitivity+0xbc>)
 8005fd0:	601a      	str	r2, [r3, #0]
      break;
 8005fd2:	e00f      	b.n	8005ff4 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_500dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_500DPS;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8006008 <LSM6DSO16IS_GYRO_GetSensitivity+0xc0>)
 8005fd8:	601a      	str	r2, [r3, #0]
      break;
 8005fda:	e00b      	b.n	8005ff4 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_1000dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_1000DPS;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	4a0b      	ldr	r2, [pc, #44]	@ (800600c <LSM6DSO16IS_GYRO_GetSensitivity+0xc4>)
 8005fe0:	601a      	str	r2, [r3, #0]
      break;
 8005fe2:	e007      	b.n	8005ff4 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_2000dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_2000DPS;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8006010 <LSM6DSO16IS_GYRO_GetSensitivity+0xc8>)
 8005fe8:	601a      	str	r2, [r3, #0]
      break;
 8005fea:	e003      	b.n	8005ff4 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    default:
      ret = LSM6DSO16IS_ERROR;
 8005fec:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff0:	60fb      	str	r3, [r7, #12]
      break;
 8005ff2:	bf00      	nop
  }

  return ret;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	408c0000 	.word	0x408c0000
 8006004:	410c0000 	.word	0x410c0000
 8006008:	418c0000 	.word	0x418c0000
 800600c:	420c0000 	.word	0x420c0000
 8006010:	428c0000 	.word	0x428c0000

08006014 <LSM6DSO16IS_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t *Odr)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 800601e:	2300      	movs	r3, #0
 8006020:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_data_rate_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso16is_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO16IS_OK)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	3320      	adds	r3, #32
 8006026:	f107 020b 	add.w	r2, r7, #11
 800602a:	4611      	mov	r1, r2
 800602c:	4618      	mov	r0, r3
 800602e:	f000 ff41 	bl	8006eb4 <lsm6dso16is_gy_data_rate_get>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d002      	beq.n	800603e <LSM6DSO16IS_GYRO_GetOutputDataRate+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006038:	f04f 33ff 	mov.w	r3, #4294967295
 800603c:	60fb      	str	r3, [r7, #12]
  }

  switch (odr_low_level)
 800603e:	7afb      	ldrb	r3, [r7, #11]
 8006040:	2b1a      	cmp	r3, #26
 8006042:	d866      	bhi.n	8006112 <LSM6DSO16IS_GYRO_GetOutputDataRate+0xfe>
 8006044:	a201      	add	r2, pc, #4	@ (adr r2, 800604c <LSM6DSO16IS_GYRO_GetOutputDataRate+0x38>)
 8006046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604a:	bf00      	nop
 800604c:	080060b9 	.word	0x080060b9
 8006050:	080060c3 	.word	0x080060c3
 8006054:	080060cb 	.word	0x080060cb
 8006058:	080060d3 	.word	0x080060d3
 800605c:	080060db 	.word	0x080060db
 8006060:	080060e3 	.word	0x080060e3
 8006064:	080060eb 	.word	0x080060eb
 8006068:	080060f3 	.word	0x080060f3
 800606c:	080060fb 	.word	0x080060fb
 8006070:	08006103 	.word	0x08006103
 8006074:	0800610b 	.word	0x0800610b
 8006078:	08006113 	.word	0x08006113
 800607c:	08006113 	.word	0x08006113
 8006080:	08006113 	.word	0x08006113
 8006084:	08006113 	.word	0x08006113
 8006088:	08006113 	.word	0x08006113
 800608c:	08006113 	.word	0x08006113
 8006090:	080060c3 	.word	0x080060c3
 8006094:	080060cb 	.word	0x080060cb
 8006098:	080060d3 	.word	0x080060d3
 800609c:	080060db 	.word	0x080060db
 80060a0:	080060e3 	.word	0x080060e3
 80060a4:	080060eb 	.word	0x080060eb
 80060a8:	080060f3 	.word	0x080060f3
 80060ac:	080060fb 	.word	0x080060fb
 80060b0:	08006103 	.word	0x08006103
 80060b4:	0800610b 	.word	0x0800610b
  {
    case LSM6DSO16IS_GY_ODR_OFF:
      *Odr = 0.0f;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	f04f 0200 	mov.w	r2, #0
 80060be:	601a      	str	r2, [r3, #0]
      break;
 80060c0:	e02b      	b.n	800611a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_LP:
    case LSM6DSO16IS_GY_ODR_AT_12Hz5_HP:
      *Odr = 12.5f;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	4a17      	ldr	r2, [pc, #92]	@ (8006124 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x110>)
 80060c6:	601a      	str	r2, [r3, #0]
      break;
 80060c8:	e027      	b.n	800611a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_26H_LP:
    case LSM6DSO16IS_GY_ODR_AT_26H_HP:
      *Odr = 26.0f;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	4a16      	ldr	r2, [pc, #88]	@ (8006128 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x114>)
 80060ce:	601a      	str	r2, [r3, #0]
      break;
 80060d0:	e023      	b.n	800611a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_52Hz_HP:
      *Odr = 52.0f;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	4a15      	ldr	r2, [pc, #84]	@ (800612c <LSM6DSO16IS_GYRO_GetOutputDataRate+0x118>)
 80060d6:	601a      	str	r2, [r3, #0]
      break;
 80060d8:	e01f      	b.n	800611a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_104Hz_HP:
      *Odr = 104.0f;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	4a14      	ldr	r2, [pc, #80]	@ (8006130 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x11c>)
 80060de:	601a      	str	r2, [r3, #0]
      break;
 80060e0:	e01b      	b.n	800611a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_208Hz_HP:
      *Odr = 208.0f;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	4a13      	ldr	r2, [pc, #76]	@ (8006134 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x120>)
 80060e6:	601a      	str	r2, [r3, #0]
      break;
 80060e8:	e017      	b.n	800611a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_416Hz_HP:
      *Odr = 416.0f;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	4a12      	ldr	r2, [pc, #72]	@ (8006138 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x124>)
 80060ee:	601a      	str	r2, [r3, #0]
      break;
 80060f0:	e013      	b.n	800611a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_833Hz_HP:
      *Odr = 833.0f;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	4a11      	ldr	r2, [pc, #68]	@ (800613c <LSM6DSO16IS_GYRO_GetOutputDataRate+0x128>)
 80060f6:	601a      	str	r2, [r3, #0]
      break;
 80060f8:	e00f      	b.n	800611a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_1667Hz_HP:
      *Odr =  1667.0f;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	4a10      	ldr	r2, [pc, #64]	@ (8006140 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x12c>)
 80060fe:	601a      	str	r2, [r3, #0]
      break;
 8006100:	e00b      	b.n	800611a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_3333Hz_HP:
      *Odr =  3333.0f;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	4a0f      	ldr	r2, [pc, #60]	@ (8006144 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x130>)
 8006106:	601a      	str	r2, [r3, #0]
      break;
 8006108:	e007      	b.n	800611a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_6667Hz_HP:
      *Odr =  6667.0f;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	4a0e      	ldr	r2, [pc, #56]	@ (8006148 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x134>)
 800610e:	601a      	str	r2, [r3, #0]
      break;
 8006110:	e003      	b.n	800611a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    default:
      ret = LSM6DSO16IS_ERROR;
 8006112:	f04f 33ff 	mov.w	r3, #4294967295
 8006116:	60fb      	str	r3, [r7, #12]
      break;
 8006118:	bf00      	nop
  }

  return ret;
 800611a:	68fb      	ldr	r3, [r7, #12]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	41480000 	.word	0x41480000
 8006128:	41d00000 	.word	0x41d00000
 800612c:	42500000 	.word	0x42500000
 8006130:	42d00000 	.word	0x42d00000
 8006134:	43500000 	.word	0x43500000
 8006138:	43d00000 	.word	0x43d00000
 800613c:	44504000 	.word	0x44504000
 8006140:	44d06000 	.word	0x44d06000
 8006144:	45505000 	.word	0x45505000
 8006148:	45d05800 	.word	0x45d05800

0800614c <LSM6DSO16IS_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_SetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret;

  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800615e:	2b01      	cmp	r3, #1
 8006160:	d106      	bne.n	8006170 <LSM6DSO16IS_GYRO_SetOutputDataRate+0x24>
  {
    ret = LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006162:	ed97 0a00 	vldr	s0, [r7]
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fa70 	bl	800664c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled>
 800616c:	60f8      	str	r0, [r7, #12]
 800616e:	e005      	b.n	800617c <LSM6DSO16IS_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    ret = LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006170:	ed97 0a00 	vldr	s0, [r7]
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 faf7 	bl	8006768 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled>
 800617a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800617c:	68fb      	ldr	r3, [r7, #12]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
	...

08006188 <LSM6DSO16IS_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t  *FullScale)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO16IS_OK)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	3320      	adds	r3, #32
 800619a:	f107 020b 	add.w	r2, r7, #11
 800619e:	4611      	mov	r1, r2
 80061a0:	4618      	mov	r0, r3
 80061a2:	f000 fdeb 	bl	8006d7c <lsm6dso16is_gy_full_scale_get>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <LSM6DSO16IS_GYRO_GetFullScale+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 80061ac:	f04f 33ff 	mov.w	r3, #4294967295
 80061b0:	60fb      	str	r3, [r7, #12]
  }

  switch (fs_low_level)
 80061b2:	7afb      	ldrb	r3, [r7, #11]
 80061b4:	2b10      	cmp	r3, #16
 80061b6:	d83c      	bhi.n	8006232 <LSM6DSO16IS_GYRO_GetFullScale+0xaa>
 80061b8:	a201      	add	r2, pc, #4	@ (adr r2, 80061c0 <LSM6DSO16IS_GYRO_GetFullScale+0x38>)
 80061ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061be:	bf00      	nop
 80061c0:	0800620d 	.word	0x0800620d
 80061c4:	08006215 	.word	0x08006215
 80061c8:	0800621f 	.word	0x0800621f
 80061cc:	08006229 	.word	0x08006229
 80061d0:	08006233 	.word	0x08006233
 80061d4:	08006233 	.word	0x08006233
 80061d8:	08006233 	.word	0x08006233
 80061dc:	08006233 	.word	0x08006233
 80061e0:	08006233 	.word	0x08006233
 80061e4:	08006233 	.word	0x08006233
 80061e8:	08006233 	.word	0x08006233
 80061ec:	08006233 	.word	0x08006233
 80061f0:	08006233 	.word	0x08006233
 80061f4:	08006233 	.word	0x08006233
 80061f8:	08006233 	.word	0x08006233
 80061fc:	08006233 	.word	0x08006233
 8006200:	08006205 	.word	0x08006205
  {
    case LSM6DSO16IS_125dps:
      *FullScale =  125;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	227d      	movs	r2, #125	@ 0x7d
 8006208:	601a      	str	r2, [r3, #0]
      break;
 800620a:	e016      	b.n	800623a <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_250dps:
      *FullScale =  250;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	22fa      	movs	r2, #250	@ 0xfa
 8006210:	601a      	str	r2, [r3, #0]
      break;
 8006212:	e012      	b.n	800623a <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_500dps:
      *FullScale =  500;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800621a:	601a      	str	r2, [r3, #0]
      break;
 800621c:	e00d      	b.n	800623a <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_1000dps:
      *FullScale = 1000;
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006224:	601a      	str	r2, [r3, #0]
      break;
 8006226:	e008      	b.n	800623a <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_2000dps:
      *FullScale = 2000;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800622e:	601a      	str	r2, [r3, #0]
      break;
 8006230:	e003      	b.n	800623a <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    default:
      ret = LSM6DSO16IS_ERROR;
 8006232:	f04f 33ff 	mov.w	r3, #4294967295
 8006236:	60fb      	str	r3, [r7, #12]
      break;
 8006238:	bf00      	nop
  }

  return ret;
 800623a:	68fb      	ldr	r3, [r7, #12]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <LSM6DSO16IS_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_SetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t FullScale)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 800624e:	2300      	movs	r3, #0
 8006250:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO16IS_125dps
           : (FullScale <= 250)  ? LSM6DSO16IS_250dps
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b7d      	cmp	r3, #125	@ 0x7d
 8006256:	dd12      	ble.n	800627e <LSM6DSO16IS_GYRO_SetFullScale+0x3a>
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2bfa      	cmp	r3, #250	@ 0xfa
 800625c:	dd0d      	ble.n	800627a <LSM6DSO16IS_GYRO_SetFullScale+0x36>
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006264:	dd07      	ble.n	8006276 <LSM6DSO16IS_GYRO_SetFullScale+0x32>
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800626c:	dc01      	bgt.n	8006272 <LSM6DSO16IS_GYRO_SetFullScale+0x2e>
 800626e:	2302      	movs	r3, #2
 8006270:	e006      	b.n	8006280 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8006272:	2303      	movs	r3, #3
 8006274:	e004      	b.n	8006280 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8006276:	2301      	movs	r3, #1
 8006278:	e002      	b.n	8006280 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 800627a:	2300      	movs	r3, #0
 800627c:	e000      	b.n	8006280 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 800627e:	2310      	movs	r3, #16
  new_fs = (FullScale <= 125)  ? LSM6DSO16IS_125dps
 8006280:	72fb      	strb	r3, [r7, #11]
           : (FullScale <= 500)  ? LSM6DSO16IS_500dps
           : (FullScale <= 1000) ? LSM6DSO16IS_1000dps
           :                       LSM6DSO16IS_2000dps;

  if (lsm6dso16is_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO16IS_OK)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	3320      	adds	r3, #32
 8006286:	7afa      	ldrb	r2, [r7, #11]
 8006288:	4611      	mov	r1, r2
 800628a:	4618      	mov	r0, r3
 800628c:	f000 fd46 	bl	8006d1c <lsm6dso16is_gy_full_scale_set>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d002      	beq.n	800629c <LSM6DSO16IS_GYRO_SetFullScale+0x58>
  {
    ret = LSM6DSO16IS_ERROR;
 8006296:	f04f 33ff 	mov.w	r3, #4294967295
 800629a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800629c:	68fb      	ldr	r3, [r7, #12]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <LSM6DSO16IS_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetAxesRaw(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_AxesRaw_t *Value)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b086      	sub	sp, #24
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];

  /* Read raw data values. */
  if (lsm6dso16is_angular_rate_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3320      	adds	r3, #32
 80062b8:	f107 020c 	add.w	r2, r7, #12
 80062bc:	4611      	mov	r1, r2
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 ff00 	bl	80070c4 <lsm6dso16is_angular_rate_raw_get>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d002      	beq.n	80062d0 <LSM6DSO16IS_GYRO_GetAxesRaw+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 80062ca:	f04f 33ff 	mov.w	r3, #4294967295
 80062ce:	617b      	str	r3, [r7, #20]
  }

  /* Format the data. */
  Value->x = data_raw[0];
 80062d0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw[1];
 80062d8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw[2];
 80062e0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	809a      	strh	r2, [r3, #4]

  return ret;
 80062e8:	697b      	ldr	r3, [r7, #20]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3718      	adds	r7, #24
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <LSM6DSO16IS_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetAxes(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Axes_t *AngularRate)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b086      	sub	sp, #24
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80062fc:	2300      	movs	r3, #0
 80062fe:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];
  float_t sensitivity = 0.0f;
 8006300:	f04f 0300 	mov.w	r3, #0
 8006304:	60bb      	str	r3, [r7, #8]

  /* Read raw data values. */
  if (lsm6dso16is_angular_rate_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	3320      	adds	r3, #32
 800630a:	f107 020c 	add.w	r2, r7, #12
 800630e:	4611      	mov	r1, r2
 8006310:	4618      	mov	r0, r3
 8006312:	f000 fed7 	bl	80070c4 <lsm6dso16is_angular_rate_raw_get>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <LSM6DSO16IS_GYRO_GetAxes+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 800631c:	f04f 33ff 	mov.w	r3, #4294967295
 8006320:	617b      	str	r3, [r7, #20]
  }

  /* Get LSM6DSO16IS actual sensitivity. */
  if (LSM6DSO16IS_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO16IS_OK)
 8006322:	f107 0308 	add.w	r3, r7, #8
 8006326:	4619      	mov	r1, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f7ff fe0d 	bl	8005f48 <LSM6DSO16IS_GYRO_GetSensitivity>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d002      	beq.n	800633a <LSM6DSO16IS_GYRO_GetAxes+0x48>
  {
    ret = LSM6DSO16IS_ERROR;
 8006334:	f04f 33ff 	mov.w	r3, #4294967295
 8006338:	617b      	str	r3, [r7, #20]
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw[0] * sensitivity));
 800633a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800633e:	ee07 3a90 	vmov	s15, r3
 8006342:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006346:	edd7 7a02 	vldr	s15, [r7, #8]
 800634a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800634e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006352:	ee17 2a90 	vmov	r2, s15
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw[1] * sensitivity));
 800635a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800635e:	ee07 3a90 	vmov	s15, r3
 8006362:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006366:	edd7 7a02 	vldr	s15, [r7, #8]
 800636a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800636e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006372:	ee17 2a90 	vmov	r2, s15
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw[2] * sensitivity));
 800637a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800637e:	ee07 3a90 	vmov	s15, r3
 8006382:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006386:	edd7 7a02 	vldr	s15, [r7, #8]
 800638a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800638e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006392:	ee17 2a90 	vmov	r2, s15
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	609a      	str	r2, [r3, #8]

  return ret;
 800639a:	697b      	ldr	r3, [r7, #20]
}
 800639c:	4618      	mov	r0, r3
 800639e:	3718      	adds	r7, #24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <LSM6DSO16IS_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Write_Reg(LSM6DSO16IS_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	460b      	mov	r3, r1
 80063ae:	70fb      	strb	r3, [r7, #3]
 80063b0:	4613      	mov	r3, r2
 80063b2:	70bb      	strb	r3, [r7, #2]
  int32_t ret = LSM6DSO16IS_OK;
 80063b4:	2300      	movs	r3, #0
 80063b6:	60fb      	str	r3, [r7, #12]

  if (lsm6dso16is_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO16IS_OK)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f103 0020 	add.w	r0, r3, #32
 80063be:	1cba      	adds	r2, r7, #2
 80063c0:	78f9      	ldrb	r1, [r7, #3]
 80063c2:	2301      	movs	r3, #1
 80063c4:	f000 faa6 	bl	8006914 <lsm6dso16is_write_reg>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d002      	beq.n	80063d4 <LSM6DSO16IS_Write_Reg+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 80063ce:	f04f 33ff 	mov.w	r3, #4294967295
 80063d2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80063d4:	68fb      	ldr	r3, [r7, #12]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <LSM6DSO16IS_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LSM6DSO16IS_MAIN_MEM_BANK, 2 - LSM6DSO16IS_SENSOR_HUB_MEM_BANK, 3 - LSM6DSO16IS_ISPU_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Set_Mem_Bank(LSM6DSO16IS_Object_t *pObj, uint8_t Val)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b084      	sub	sp, #16
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	460b      	mov	r3, r1
 80063e8:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSO16IS_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_mem_bank_t reg;

  reg = (Val == 2U) ? LSM6DSO16IS_SENSOR_HUB_MEM_BANK
        : (Val == 3U) ? LSM6DSO16IS_ISPU_MEM_BANK
 80063ee:	78fb      	ldrb	r3, [r7, #3]
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d006      	beq.n	8006402 <LSM6DSO16IS_Set_Mem_Bank+0x24>
 80063f4:	78fb      	ldrb	r3, [r7, #3]
 80063f6:	2b03      	cmp	r3, #3
 80063f8:	d101      	bne.n	80063fe <LSM6DSO16IS_Set_Mem_Bank+0x20>
 80063fa:	2303      	movs	r3, #3
 80063fc:	e002      	b.n	8006404 <LSM6DSO16IS_Set_Mem_Bank+0x26>
 80063fe:	2300      	movs	r3, #0
 8006400:	e000      	b.n	8006404 <LSM6DSO16IS_Set_Mem_Bank+0x26>
 8006402:	2302      	movs	r3, #2
  reg = (Val == 2U) ? LSM6DSO16IS_SENSOR_HUB_MEM_BANK
 8006404:	72fb      	strb	r3, [r7, #11]
        :               LSM6DSO16IS_MAIN_MEM_BANK;

  if (lsm6dso16is_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSO16IS_OK)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	3320      	adds	r3, #32
 800640a:	7afa      	ldrb	r2, [r7, #11]
 800640c:	4611      	mov	r1, r2
 800640e:	4618      	mov	r0, r3
 8006410:	f000 fa9e 	bl	8006950 <lsm6dso16is_mem_bank_set>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d002      	beq.n	8006420 <LSM6DSO16IS_Set_Mem_Bank+0x42>
  {
    ret = LSM6DSO16IS_ERROR;
 800641a:	f04f 33ff 	mov.w	r3, #4294967295
 800641e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006420:	68fb      	ldr	r3, [r7, #12]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
	...

0800642c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret = LSM6DSO16IS_OK;
 8006438:	2300      	movs	r3, #0
 800643a:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_data_rate_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
            : (Odr <=   26.0f) ? LSM6DSO16IS_XL_ODR_AT_26H_HP
 800643c:	edd7 7a00 	vldr	s15, [r7]
 8006440:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006444:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800644c:	d801      	bhi.n	8006452 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x26>
 800644e:	2301      	movs	r3, #1
 8006450:	e058      	b.n	8006504 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8006452:	edd7 7a00 	vldr	s15, [r7]
 8006456:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800645a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800645e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006462:	d801      	bhi.n	8006468 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x3c>
 8006464:	2302      	movs	r3, #2
 8006466:	e04d      	b.n	8006504 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8006468:	edd7 7a00 	vldr	s15, [r7]
 800646c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800652c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x100>
 8006470:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006478:	d801      	bhi.n	800647e <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x52>
 800647a:	2303      	movs	r3, #3
 800647c:	e042      	b.n	8006504 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 800647e:	edd7 7a00 	vldr	s15, [r7]
 8006482:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8006530 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x104>
 8006486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800648a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800648e:	d801      	bhi.n	8006494 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x68>
 8006490:	2304      	movs	r3, #4
 8006492:	e037      	b.n	8006504 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8006494:	edd7 7a00 	vldr	s15, [r7]
 8006498:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006534 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x108>
 800649c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064a4:	d801      	bhi.n	80064aa <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x7e>
 80064a6:	2305      	movs	r3, #5
 80064a8:	e02c      	b.n	8006504 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80064aa:	edd7 7a00 	vldr	s15, [r7]
 80064ae:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8006538 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80064b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ba:	d801      	bhi.n	80064c0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x94>
 80064bc:	2306      	movs	r3, #6
 80064be:	e021      	b.n	8006504 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80064c0:	edd7 7a00 	vldr	s15, [r7]
 80064c4:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800653c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x110>
 80064c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064d0:	d801      	bhi.n	80064d6 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xaa>
 80064d2:	2307      	movs	r3, #7
 80064d4:	e016      	b.n	8006504 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80064d6:	edd7 7a00 	vldr	s15, [r7]
 80064da:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8006540 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x114>
 80064de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064e6:	d801      	bhi.n	80064ec <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xc0>
 80064e8:	2308      	movs	r3, #8
 80064ea:	e00b      	b.n	8006504 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80064ec:	edd7 7a00 	vldr	s15, [r7]
 80064f0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8006544 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x118>
 80064f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064fc:	d801      	bhi.n	8006502 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd6>
 80064fe:	2309      	movs	r3, #9
 8006500:	e000      	b.n	8006504 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8006502:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
 8006504:	72fb      	strb	r3, [r7, #11]
            : (Odr <= 1667.0f) ? LSM6DSO16IS_XL_ODR_AT_1667Hz_HP
            : (Odr <= 3333.0f) ? LSM6DSO16IS_XL_ODR_AT_3333Hz_HP
            :                    LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;

  /* Output data rate selection. */
  if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO16IS_OK)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	3320      	adds	r3, #32
 800650a:	7afa      	ldrb	r2, [r7, #11]
 800650c:	4611      	mov	r1, r2
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fadc 	bl	8006acc <lsm6dso16is_xl_data_rate_set>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xf4>
  {
    ret = LSM6DSO16IS_ERROR;
 800651a:	f04f 33ff 	mov.w	r3, #4294967295
 800651e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006520:	68fb      	ldr	r3, [r7, #12]
}
 8006522:	4618      	mov	r0, r3
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	42500000 	.word	0x42500000
 8006530:	42d00000 	.word	0x42d00000
 8006534:	43500000 	.word	0x43500000
 8006538:	43d00000 	.word	0x43d00000
 800653c:	44504000 	.word	0x44504000
 8006540:	44d06000 	.word	0x44d06000
 8006544:	45505000 	.word	0x45505000

08006548 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
                  : (Odr <=   26.0f) ? LSM6DSO16IS_XL_ODR_AT_26H_HP
 8006554:	edd7 7a00 	vldr	s15, [r7]
 8006558:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800655c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006564:	d801      	bhi.n	800656a <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x22>
 8006566:	2301      	movs	r3, #1
 8006568:	e058      	b.n	800661c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800656a:	edd7 7a00 	vldr	s15, [r7]
 800656e:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8006572:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800657a:	d801      	bhi.n	8006580 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x38>
 800657c:	2302      	movs	r3, #2
 800657e:	e04d      	b.n	800661c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8006580:	edd7 7a00 	vldr	s15, [r7]
 8006584:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8006630 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8006588:	eef4 7ac7 	vcmpe.f32	s15, s14
 800658c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006590:	d801      	bhi.n	8006596 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8006592:	2303      	movs	r3, #3
 8006594:	e042      	b.n	800661c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8006596:	edd7 7a00 	vldr	s15, [r7]
 800659a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006634 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xec>
 800659e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065a6:	d801      	bhi.n	80065ac <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x64>
 80065a8:	2304      	movs	r3, #4
 80065aa:	e037      	b.n	800661c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80065ac:	edd7 7a00 	vldr	s15, [r7]
 80065b0:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8006638 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf0>
 80065b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065bc:	d801      	bhi.n	80065c2 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80065be:	2305      	movs	r3, #5
 80065c0:	e02c      	b.n	800661c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80065c2:	edd7 7a00 	vldr	s15, [r7]
 80065c6:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800663c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80065ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065d2:	d801      	bhi.n	80065d8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x90>
 80065d4:	2306      	movs	r3, #6
 80065d6:	e021      	b.n	800661c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80065d8:	edd7 7a00 	vldr	s15, [r7]
 80065dc:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8006640 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80065e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065e8:	d801      	bhi.n	80065ee <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80065ea:	2307      	movs	r3, #7
 80065ec:	e016      	b.n	800661c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80065ee:	edd7 7a00 	vldr	s15, [r7]
 80065f2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8006644 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80065f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065fe:	d801      	bhi.n	8006604 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8006600:	2308      	movs	r3, #8
 8006602:	e00b      	b.n	800661c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8006604:	edd7 7a00 	vldr	s15, [r7]
 8006608:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8006648 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x100>
 800660c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006614:	d801      	bhi.n	800661a <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8006616:	2309      	movs	r3, #9
 8006618:	e000      	b.n	800661c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800661a:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO16IS_XL_ODR_AT_833Hz_HP
                  : (Odr <= 1667.0f) ? LSM6DSO16IS_XL_ODR_AT_1667Hz_HP
                  : (Odr <= 3333.0f) ? LSM6DSO16IS_XL_ODR_AT_3333Hz_HP
                  :                    LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;

  return LSM6DSO16IS_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	42500000 	.word	0x42500000
 8006634:	42d00000 	.word	0x42d00000
 8006638:	43500000 	.word	0x43500000
 800663c:	43d00000 	.word	0x43d00000
 8006640:	44504000 	.word	0x44504000
 8006644:	44d06000 	.word	0x44d06000
 8006648:	45505000 	.word	0x45505000

0800664c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret = LSM6DSO16IS_OK;
 8006658:	2300      	movs	r3, #0
 800665a:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_data_rate_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
            : (Odr <=   26.0f) ? LSM6DSO16IS_GY_ODR_AT_26H_HP
 800665c:	edd7 7a00 	vldr	s15, [r7]
 8006660:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006664:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800666c:	d801      	bhi.n	8006672 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x26>
 800666e:	2301      	movs	r3, #1
 8006670:	e058      	b.n	8006724 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8006672:	edd7 7a00 	vldr	s15, [r7]
 8006676:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800667a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800667e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006682:	d801      	bhi.n	8006688 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x3c>
 8006684:	2302      	movs	r3, #2
 8006686:	e04d      	b.n	8006724 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8006688:	edd7 7a00 	vldr	s15, [r7]
 800668c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800674c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8006690:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006698:	d801      	bhi.n	800669e <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x52>
 800669a:	2303      	movs	r3, #3
 800669c:	e042      	b.n	8006724 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800669e:	edd7 7a00 	vldr	s15, [r7]
 80066a2:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8006750 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80066a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ae:	d801      	bhi.n	80066b4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x68>
 80066b0:	2304      	movs	r3, #4
 80066b2:	e037      	b.n	8006724 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80066b4:	edd7 7a00 	vldr	s15, [r7]
 80066b8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006754 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80066bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066c4:	d801      	bhi.n	80066ca <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x7e>
 80066c6:	2305      	movs	r3, #5
 80066c8:	e02c      	b.n	8006724 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80066ca:	edd7 7a00 	vldr	s15, [r7]
 80066ce:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8006758 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80066d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066da:	d801      	bhi.n	80066e0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x94>
 80066dc:	2306      	movs	r3, #6
 80066de:	e021      	b.n	8006724 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80066e0:	edd7 7a00 	vldr	s15, [r7]
 80066e4:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800675c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80066e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066f0:	d801      	bhi.n	80066f6 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xaa>
 80066f2:	2307      	movs	r3, #7
 80066f4:	e016      	b.n	8006724 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80066f6:	edd7 7a00 	vldr	s15, [r7]
 80066fa:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8006760 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80066fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006706:	d801      	bhi.n	800670c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xc0>
 8006708:	2308      	movs	r3, #8
 800670a:	e00b      	b.n	8006724 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800670c:	edd7 7a00 	vldr	s15, [r7]
 8006710:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8006764 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x118>
 8006714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800671c:	d801      	bhi.n	8006722 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd6>
 800671e:	2309      	movs	r3, #9
 8006720:	e000      	b.n	8006724 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8006722:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
 8006724:	72fb      	strb	r3, [r7, #11]
            : (Odr <= 1667.0f) ? LSM6DSO16IS_GY_ODR_AT_1667Hz_HP
            : (Odr <= 3333.0f) ? LSM6DSO16IS_GY_ODR_AT_3333Hz_HP
            :                    LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;

  /* Output data rate selection. */
  if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO16IS_OK)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	3320      	adds	r3, #32
 800672a:	7afa      	ldrb	r2, [r7, #11]
 800672c:	4611      	mov	r1, r2
 800672e:	4618      	mov	r0, r3
 8006730:	f000 fb80 	bl	8006e34 <lsm6dso16is_gy_data_rate_set>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d002      	beq.n	8006740 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xf4>
  {
    ret = LSM6DSO16IS_ERROR;
 800673a:	f04f 33ff 	mov.w	r3, #4294967295
 800673e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006740:	68fb      	ldr	r3, [r7, #12]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	42500000 	.word	0x42500000
 8006750:	42d00000 	.word	0x42d00000
 8006754:	43500000 	.word	0x43500000
 8006758:	43d00000 	.word	0x43d00000
 800675c:	44504000 	.word	0x44504000
 8006760:	44d06000 	.word	0x44d06000
 8006764:	45505000 	.word	0x45505000

08006768 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
                   : (Odr <=   26.0f) ? LSM6DSO16IS_GY_ODR_AT_26H_HP
 8006774:	edd7 7a00 	vldr	s15, [r7]
 8006778:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800677c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006784:	d801      	bhi.n	800678a <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8006786:	2301      	movs	r3, #1
 8006788:	e058      	b.n	800683c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800678a:	edd7 7a00 	vldr	s15, [r7]
 800678e:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8006792:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800679a:	d801      	bhi.n	80067a0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x38>
 800679c:	2302      	movs	r3, #2
 800679e:	e04d      	b.n	800683c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80067a0:	edd7 7a00 	vldr	s15, [r7]
 80067a4:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8006850 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80067a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067b0:	d801      	bhi.n	80067b6 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80067b2:	2303      	movs	r3, #3
 80067b4:	e042      	b.n	800683c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80067b6:	edd7 7a00 	vldr	s15, [r7]
 80067ba:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006854 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80067be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067c6:	d801      	bhi.n	80067cc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80067c8:	2304      	movs	r3, #4
 80067ca:	e037      	b.n	800683c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80067cc:	edd7 7a00 	vldr	s15, [r7]
 80067d0:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8006858 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80067d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067dc:	d801      	bhi.n	80067e2 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80067de:	2305      	movs	r3, #5
 80067e0:	e02c      	b.n	800683c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80067e2:	edd7 7a00 	vldr	s15, [r7]
 80067e6:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800685c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80067ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067f2:	d801      	bhi.n	80067f8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80067f4:	2306      	movs	r3, #6
 80067f6:	e021      	b.n	800683c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80067f8:	edd7 7a00 	vldr	s15, [r7]
 80067fc:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8006860 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8006800:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006808:	d801      	bhi.n	800680e <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800680a:	2307      	movs	r3, #7
 800680c:	e016      	b.n	800683c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800680e:	edd7 7a00 	vldr	s15, [r7]
 8006812:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8006864 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8006816:	eef4 7ac7 	vcmpe.f32	s15, s14
 800681a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800681e:	d801      	bhi.n	8006824 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8006820:	2308      	movs	r3, #8
 8006822:	e00b      	b.n	800683c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006824:	edd7 7a00 	vldr	s15, [r7]
 8006828:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8006868 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800682c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006834:	d801      	bhi.n	800683a <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8006836:	2309      	movs	r3, #9
 8006838:	e000      	b.n	800683c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800683a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSO16IS_GY_ODR_AT_833Hz_HP
                   : (Odr <= 1667.0f) ? LSM6DSO16IS_GY_ODR_AT_1667Hz_HP
                   : (Odr <= 3333.0f) ? LSM6DSO16IS_GY_ODR_AT_3333Hz_HP
                   :                    LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;

  return LSM6DSO16IS_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	42500000 	.word	0x42500000
 8006854:	42d00000 	.word	0x42d00000
 8006858:	43500000 	.word	0x43500000
 800685c:	43d00000 	.word	0x43d00000
 8006860:	44504000 	.word	0x44504000
 8006864:	44d06000 	.word	0x44d06000
 8006868:	45505000 	.word	0x45505000

0800686c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800686c:	b590      	push	{r4, r7, lr}
 800686e:	b087      	sub	sp, #28
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	607a      	str	r2, [r7, #4]
 8006876:	461a      	mov	r2, r3
 8006878:	460b      	mov	r3, r1
 800687a:	72fb      	strb	r3, [r7, #11]
 800687c:	4613      	mov	r3, r2
 800687e:	813b      	strh	r3, [r7, #8]
  LSM6DSO16IS_Object_t *pObj = (LSM6DSO16IS_Object_t *)Handle;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	695c      	ldr	r4, [r3, #20]
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	7b1b      	ldrb	r3, [r3, #12]
 800688c:	4618      	mov	r0, r3
 800688e:	7afb      	ldrb	r3, [r7, #11]
 8006890:	b299      	uxth	r1, r3
 8006892:	893b      	ldrh	r3, [r7, #8]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	47a0      	blx	r4
 8006898:	4603      	mov	r3, r0
}
 800689a:	4618      	mov	r0, r3
 800689c:	371c      	adds	r7, #28
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd90      	pop	{r4, r7, pc}

080068a2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80068a2:	b590      	push	{r4, r7, lr}
 80068a4:	b087      	sub	sp, #28
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	60f8      	str	r0, [r7, #12]
 80068aa:	607a      	str	r2, [r7, #4]
 80068ac:	461a      	mov	r2, r3
 80068ae:	460b      	mov	r3, r1
 80068b0:	72fb      	strb	r3, [r7, #11]
 80068b2:	4613      	mov	r3, r2
 80068b4:	813b      	strh	r3, [r7, #8]
  LSM6DSO16IS_Object_t *pObj = (LSM6DSO16IS_Object_t *)Handle;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	691c      	ldr	r4, [r3, #16]
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	7b1b      	ldrb	r3, [r3, #12]
 80068c2:	4618      	mov	r0, r3
 80068c4:	7afb      	ldrb	r3, [r7, #11]
 80068c6:	b299      	uxth	r1, r3
 80068c8:	893b      	ldrh	r3, [r7, #8]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	47a0      	blx	r4
 80068ce:	4603      	mov	r3, r0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	371c      	adds	r7, #28
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd90      	pop	{r4, r7, pc}

080068d8 <lsm6dso16is_read_reg>:
  *
  */
int32_t __weak lsm6dso16is_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 80068d8:	b590      	push	{r4, r7, lr}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	607a      	str	r2, [r7, #4]
 80068e2:	461a      	mov	r2, r3
 80068e4:	460b      	mov	r3, r1
 80068e6:	72fb      	strb	r3, [r7, #11]
 80068e8:	4613      	mov	r3, r2
 80068ea:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d102      	bne.n	80068f8 <lsm6dso16is_read_reg+0x20>
  {
    return -1;
 80068f2:	f04f 33ff 	mov.w	r3, #4294967295
 80068f6:	e009      	b.n	800690c <lsm6dso16is_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	685c      	ldr	r4, [r3, #4]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	68d8      	ldr	r0, [r3, #12]
 8006900:	893b      	ldrh	r3, [r7, #8]
 8006902:	7af9      	ldrb	r1, [r7, #11]
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	47a0      	blx	r4
 8006908:	6178      	str	r0, [r7, #20]

  return ret;
 800690a:	697b      	ldr	r3, [r7, #20]
}
 800690c:	4618      	mov	r0, r3
 800690e:	371c      	adds	r7, #28
 8006910:	46bd      	mov	sp, r7
 8006912:	bd90      	pop	{r4, r7, pc}

08006914 <lsm6dso16is_write_reg>:
  *
  */
int32_t __weak lsm6dso16is_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                     uint8_t *data,
                                     uint16_t len)
{
 8006914:	b590      	push	{r4, r7, lr}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	607a      	str	r2, [r7, #4]
 800691e:	461a      	mov	r2, r3
 8006920:	460b      	mov	r3, r1
 8006922:	72fb      	strb	r3, [r7, #11]
 8006924:	4613      	mov	r3, r2
 8006926:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d102      	bne.n	8006934 <lsm6dso16is_write_reg+0x20>
  {
    return -1;
 800692e:	f04f 33ff 	mov.w	r3, #4294967295
 8006932:	e009      	b.n	8006948 <lsm6dso16is_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681c      	ldr	r4, [r3, #0]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	68d8      	ldr	r0, [r3, #12]
 800693c:	893b      	ldrh	r3, [r7, #8]
 800693e:	7af9      	ldrb	r1, [r7, #11]
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	47a0      	blx	r4
 8006944:	6178      	str	r0, [r7, #20]

  return ret;
 8006946:	697b      	ldr	r3, [r7, #20]
}
 8006948:	4618      	mov	r0, r3
 800694a:	371c      	adds	r7, #28
 800694c:	46bd      	mov	sp, r7
 800694e:	bd90      	pop	{r4, r7, pc}

08006950 <lsm6dso16is_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK, SENSOR_HUB_MEM_BANK, ISPU_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_mem_bank_set(const stmdev_ctx_t *ctx, lsm6dso16is_mem_bank_t val)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	460b      	mov	r3, r1
 800695a:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_func_cfg_access_t func_cfg_access = {0x0};
 800695c:	2300      	movs	r3, #0
 800695e:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /* no need to read it first as the only other field is a ispu reset bit */
  func_cfg_access.shub_reg_access = (val == LSM6DSO16IS_SENSOR_HUB_MEM_BANK) ? 0x1U : 0x0U;
 8006960:	78fb      	ldrb	r3, [r7, #3]
 8006962:	2b02      	cmp	r3, #2
 8006964:	d101      	bne.n	800696a <lsm6dso16is_mem_bank_set+0x1a>
 8006966:	2201      	movs	r2, #1
 8006968:	e000      	b.n	800696c <lsm6dso16is_mem_bank_set+0x1c>
 800696a:	2200      	movs	r2, #0
 800696c:	7a3b      	ldrb	r3, [r7, #8]
 800696e:	f362 1386 	bfi	r3, r2, #6, #1
 8006972:	723b      	strb	r3, [r7, #8]
  func_cfg_access.ispu_reg_access = (val == LSM6DSO16IS_ISPU_MEM_BANK) ? 0x1U : 0x0U;
 8006974:	78fb      	ldrb	r3, [r7, #3]
 8006976:	2b03      	cmp	r3, #3
 8006978:	d101      	bne.n	800697e <lsm6dso16is_mem_bank_set+0x2e>
 800697a:	2201      	movs	r2, #1
 800697c:	e000      	b.n	8006980 <lsm6dso16is_mem_bank_set+0x30>
 800697e:	2200      	movs	r2, #0
 8006980:	7a3b      	ldrb	r3, [r7, #8]
 8006982:	f362 13c7 	bfi	r3, r2, #7, #1
 8006986:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8006988:	f107 0208 	add.w	r2, r7, #8
 800698c:	2301      	movs	r3, #1
 800698e:	2101      	movs	r1, #1
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7ff ffbf 	bl	8006914 <lsm6dso16is_write_reg>
 8006996:	60f8      	str	r0, [r7, #12]

  return ret;
 8006998:	68fb      	ldr	r3, [r7, #12]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <lsm6dso16is_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b084      	sub	sp, #16
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_WHO_AM_I, (uint8_t *)val, 1);
 80069ac:	2301      	movs	r3, #1
 80069ae:	683a      	ldr	r2, [r7, #0]
 80069b0:	210f      	movs	r1, #15
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f7ff ff90 	bl	80068d8 <lsm6dso16is_read_reg>
 80069b8:	60f8      	str	r0, [r7, #12]

  return ret;
 80069ba:	68fb      	ldr	r3, [r7, #12]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <lsm6dso16is_xl_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_hm_mode_set(const stmdev_ctx_t *ctx, lsm6dso16is_hm_mode_t val)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	460b      	mov	r3, r1
 80069ce:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80069d0:	f107 0208 	add.w	r2, r7, #8
 80069d4:	2301      	movs	r3, #1
 80069d6:	2115      	movs	r1, #21
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7ff ff7d 	bl	80068d8 <lsm6dso16is_read_reg>
 80069de:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10f      	bne.n	8006a06 <lsm6dso16is_xl_hm_mode_set+0x42>
  {
    ctrl6_c.xl_hm_mode = ((uint8_t)val & 0x1U);
 80069e6:	78fb      	ldrb	r3, [r7, #3]
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	7a3b      	ldrb	r3, [r7, #8]
 80069f0:	f362 1304 	bfi	r3, r2, #4, #1
 80069f4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80069f6:	f107 0208 	add.w	r2, r7, #8
 80069fa:	2301      	movs	r3, #1
 80069fc:	2115      	movs	r1, #21
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7ff ff88 	bl	8006914 <lsm6dso16is_write_reg>
 8006a04:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006a06:	68fb      	ldr	r3, [r7, #12]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <lsm6dso16is_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_xl_full_scale_t val)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	460b      	mov	r3, r1
 8006a1a:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006a1c:	f107 0208 	add.w	r2, r7, #8
 8006a20:	2301      	movs	r3, #1
 8006a22:	2110      	movs	r1, #16
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7ff ff57 	bl	80068d8 <lsm6dso16is_read_reg>
 8006a2a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10f      	bne.n	8006a52 <lsm6dso16is_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = ((uint8_t)val & 0x3U);
 8006a32:	78fb      	ldrb	r3, [r7, #3]
 8006a34:	f003 0303 	and.w	r3, r3, #3
 8006a38:	b2da      	uxtb	r2, r3
 8006a3a:	7a3b      	ldrb	r3, [r7, #8]
 8006a3c:	f362 0383 	bfi	r3, r2, #2, #2
 8006a40:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006a42:	f107 0208 	add.w	r2, r7, #8
 8006a46:	2301      	movs	r3, #1
 8006a48:	2110      	movs	r1, #16
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7ff ff62 	bl	8006914 <lsm6dso16is_write_reg>
 8006a50:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006a52:	68fb      	ldr	r3, [r7, #12]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <lsm6dso16is_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_full_scale_get(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_xl_full_scale_t *val)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006a66:	f107 0208 	add.w	r2, r7, #8
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	2110      	movs	r1, #16
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7ff ff32 	bl	80068d8 <lsm6dso16is_read_reg>
 8006a74:	60f8      	str	r0, [r7, #12]

  switch ((ctrl1_xl.fs_xl))
 8006a76:	7a3b      	ldrb	r3, [r7, #8]
 8006a78:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b03      	cmp	r3, #3
 8006a80:	d81a      	bhi.n	8006ab8 <lsm6dso16is_xl_full_scale_get+0x5c>
 8006a82:	a201      	add	r2, pc, #4	@ (adr r2, 8006a88 <lsm6dso16is_xl_full_scale_get+0x2c>)
 8006a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a88:	08006a99 	.word	0x08006a99
 8006a8c:	08006ab1 	.word	0x08006ab1
 8006a90:	08006aa1 	.word	0x08006aa1
 8006a94:	08006aa9 	.word	0x08006aa9
  {
    case LSM6DSO16IS_2g:
      *val = LSM6DSO16IS_2g;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	701a      	strb	r2, [r3, #0]
      break;
 8006a9e:	e00f      	b.n	8006ac0 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_4g:
      *val = LSM6DSO16IS_4g;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	701a      	strb	r2, [r3, #0]
      break;
 8006aa6:	e00b      	b.n	8006ac0 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_8g:
      *val = LSM6DSO16IS_8g;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2203      	movs	r2, #3
 8006aac:	701a      	strb	r2, [r3, #0]
      break;
 8006aae:	e007      	b.n	8006ac0 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_16g:
      *val = LSM6DSO16IS_16g;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	701a      	strb	r2, [r3, #0]
      break;
 8006ab6:	e003      	b.n	8006ac0 <lsm6dso16is_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO16IS_2g;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	2200      	movs	r2, #0
 8006abc:	701a      	strb	r2, [r3, #0]
      break;
 8006abe:	bf00      	nop
  }
  return ret;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop

08006acc <lsm6dso16is_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_xl_data_rate_t val)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006ad8:	f107 0208 	add.w	r2, r7, #8
 8006adc:	2301      	movs	r3, #1
 8006ade:	2110      	movs	r1, #16
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7ff fef9 	bl	80068d8 <lsm6dso16is_read_reg>
 8006ae6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d128      	bne.n	8006b40 <lsm6dso16is_xl_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 8006aee:	78fb      	ldrb	r3, [r7, #3]
 8006af0:	f003 0310 	and.w	r3, r3, #16
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d008      	beq.n	8006b0a <lsm6dso16is_xl_data_rate_set+0x3e>
    {
      ret += lsm6dso16is_xl_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_DISABLED);
 8006af8:	2101      	movs	r1, #1
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7ff ff62 	bl	80069c4 <lsm6dso16is_xl_hm_mode_set>
 8006b00:	4602      	mov	r2, r0
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	4413      	add	r3, r2
 8006b06:	60fb      	str	r3, [r7, #12]
 8006b08:	e007      	b.n	8006b1a <lsm6dso16is_xl_data_rate_set+0x4e>
    }
    else
    {
      ret += lsm6dso16is_xl_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_ENABLED);
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7ff ff59 	bl	80069c4 <lsm6dso16is_xl_hm_mode_set>
 8006b12:	4602      	mov	r2, r0
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	4413      	add	r3, r2
 8006b18:	60fb      	str	r3, [r7, #12]
    }

    ctrl1_xl.odr_xl = ((uint8_t)val & 0xfU);
 8006b1a:	78fb      	ldrb	r3, [r7, #3]
 8006b1c:	f003 030f 	and.w	r3, r3, #15
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	7a3b      	ldrb	r3, [r7, #8]
 8006b24:	f362 1307 	bfi	r3, r2, #4, #4
 8006b28:	723b      	strb	r3, [r7, #8]
    ret += lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006b2a:	f107 0208 	add.w	r2, r7, #8
 8006b2e:	2301      	movs	r3, #1
 8006b30:	2110      	movs	r1, #16
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f7ff feee 	bl	8006914 <lsm6dso16is_write_reg>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006b40:	68fb      	ldr	r3, [r7, #12]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
	...

08006b4c <lsm6dso16is_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_data_rate_get(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_xl_data_rate_t *val)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  lsm6dso16is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006b56:	f107 0210 	add.w	r2, r7, #16
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	2110      	movs	r1, #16
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7ff feba 	bl	80068d8 <lsm6dso16is_read_reg>
 8006b64:	6178      	str	r0, [r7, #20]
  ret += lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8006b66:	f107 020c 	add.w	r2, r7, #12
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	2115      	movs	r1, #21
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f7ff feb2 	bl	80068d8 <lsm6dso16is_read_reg>
 8006b74:	4602      	mov	r2, r0
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	4413      	add	r3, r2
 8006b7a:	617b      	str	r3, [r7, #20]

  switch ((ctrl6_c.xl_hm_mode << 4) | (ctrl1_xl.odr_xl))
 8006b7c:	7b3b      	ldrb	r3, [r7, #12]
 8006b7e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	011b      	lsls	r3, r3, #4
 8006b86:	7c3a      	ldrb	r2, [r7, #16]
 8006b88:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8006b8c:	b2d2      	uxtb	r2, r2
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	2b1b      	cmp	r3, #27
 8006b92:	f200 8093 	bhi.w	8006cbc <lsm6dso16is_xl_data_rate_get+0x170>
 8006b96:	a201      	add	r2, pc, #4	@ (adr r2, 8006b9c <lsm6dso16is_xl_data_rate_get+0x50>)
 8006b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9c:	08006c0d 	.word	0x08006c0d
 8006ba0:	08006c15 	.word	0x08006c15
 8006ba4:	08006c1d 	.word	0x08006c1d
 8006ba8:	08006c25 	.word	0x08006c25
 8006bac:	08006c2d 	.word	0x08006c2d
 8006bb0:	08006c35 	.word	0x08006c35
 8006bb4:	08006c3d 	.word	0x08006c3d
 8006bb8:	08006c45 	.word	0x08006c45
 8006bbc:	08006c4d 	.word	0x08006c4d
 8006bc0:	08006c55 	.word	0x08006c55
 8006bc4:	08006c5d 	.word	0x08006c5d
 8006bc8:	08006cbd 	.word	0x08006cbd
 8006bcc:	08006cbd 	.word	0x08006cbd
 8006bd0:	08006cbd 	.word	0x08006cbd
 8006bd4:	08006cbd 	.word	0x08006cbd
 8006bd8:	08006cbd 	.word	0x08006cbd
 8006bdc:	08006cbd 	.word	0x08006cbd
 8006be0:	08006c65 	.word	0x08006c65
 8006be4:	08006c6d 	.word	0x08006c6d
 8006be8:	08006c75 	.word	0x08006c75
 8006bec:	08006c7d 	.word	0x08006c7d
 8006bf0:	08006c85 	.word	0x08006c85
 8006bf4:	08006c8d 	.word	0x08006c8d
 8006bf8:	08006c95 	.word	0x08006c95
 8006bfc:	08006c9d 	.word	0x08006c9d
 8006c00:	08006ca5 	.word	0x08006ca5
 8006c04:	08006cad 	.word	0x08006cad
 8006c08:	08006cb5 	.word	0x08006cb5
  {
    case LSM6DSO16IS_XL_ODR_OFF:
      *val = LSM6DSO16IS_XL_ODR_OFF;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	701a      	strb	r2, [r3, #0]
      break;
 8006c12:	e057      	b.n	8006cc4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_12Hz5_HP;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	2201      	movs	r2, #1
 8006c18:	701a      	strb	r2, [r3, #0]
      break;
 8006c1a:	e053      	b.n	8006cc4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_26H_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_26H_HP;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	701a      	strb	r2, [r3, #0]
      break;
 8006c22:	e04f      	b.n	8006cc4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_52Hz_HP;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	2203      	movs	r2, #3
 8006c28:	701a      	strb	r2, [r3, #0]
      break;
 8006c2a:	e04b      	b.n	8006cc4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_104Hz_HP;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	2204      	movs	r2, #4
 8006c30:	701a      	strb	r2, [r3, #0]
      break;
 8006c32:	e047      	b.n	8006cc4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_208Hz_HP;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	2205      	movs	r2, #5
 8006c38:	701a      	strb	r2, [r3, #0]
      break;
 8006c3a:	e043      	b.n	8006cc4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_416Hz_HP;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	2206      	movs	r2, #6
 8006c40:	701a      	strb	r2, [r3, #0]
      break;
 8006c42:	e03f      	b.n	8006cc4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_833Hz_HP;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	2207      	movs	r2, #7
 8006c48:	701a      	strb	r2, [r3, #0]
      break;
 8006c4a:	e03b      	b.n	8006cc4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_1667Hz_HP;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	2208      	movs	r2, #8
 8006c50:	701a      	strb	r2, [r3, #0]
      break;
 8006c52:	e037      	b.n	8006cc4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_3333Hz_HP;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	2209      	movs	r2, #9
 8006c58:	701a      	strb	r2, [r3, #0]
      break;
 8006c5a:	e033      	b.n	8006cc4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	220a      	movs	r2, #10
 8006c60:	701a      	strb	r2, [r3, #0]
      break;
 8006c62:	e02f      	b.n	8006cc4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_12Hz5_LP;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	2211      	movs	r2, #17
 8006c68:	701a      	strb	r2, [r3, #0]
      break;
 8006c6a:	e02b      	b.n	8006cc4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_26H_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_26H_LP;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	2212      	movs	r2, #18
 8006c70:	701a      	strb	r2, [r3, #0]
      break;
 8006c72:	e027      	b.n	8006cc4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_52Hz_LP;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	2213      	movs	r2, #19
 8006c78:	701a      	strb	r2, [r3, #0]
      break;
 8006c7a:	e023      	b.n	8006cc4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_104Hz_LP;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2214      	movs	r2, #20
 8006c80:	701a      	strb	r2, [r3, #0]
      break;
 8006c82:	e01f      	b.n	8006cc4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_208Hz_LP;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	2215      	movs	r2, #21
 8006c88:	701a      	strb	r2, [r3, #0]
      break;
 8006c8a:	e01b      	b.n	8006cc4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_416Hz_LP;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	2216      	movs	r2, #22
 8006c90:	701a      	strb	r2, [r3, #0]
      break;
 8006c92:	e017      	b.n	8006cc4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_833Hz_LP;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	2217      	movs	r2, #23
 8006c98:	701a      	strb	r2, [r3, #0]
      break;
 8006c9a:	e013      	b.n	8006cc4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_1667Hz_LP;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2218      	movs	r2, #24
 8006ca0:	701a      	strb	r2, [r3, #0]
      break;
 8006ca2:	e00f      	b.n	8006cc4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_3333Hz_LP;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	2219      	movs	r2, #25
 8006ca8:	701a      	strb	r2, [r3, #0]
      break;
 8006caa:	e00b      	b.n	8006cc4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_6667Hz_LP;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	221a      	movs	r2, #26
 8006cb0:	701a      	strb	r2, [r3, #0]
      break;
 8006cb2:	e007      	b.n	8006cc4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1Hz6_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_1Hz6_LP;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	221b      	movs	r2, #27
 8006cb8:	701a      	strb	r2, [r3, #0]
      break;
 8006cba:	e003      	b.n	8006cc4 <lsm6dso16is_xl_data_rate_get+0x178>

    default:
      *val = LSM6DSO16IS_XL_ODR_OFF;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	701a      	strb	r2, [r3, #0]
      break;
 8006cc2:	bf00      	nop
  }

  return ret;
 8006cc4:	697b      	ldr	r3, [r7, #20]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3718      	adds	r7, #24
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop

08006cd0 <lsm6dso16is_gy_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_hm_mode_set(const stmdev_ctx_t *ctx, lsm6dso16is_hm_mode_t val)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8006cdc:	f107 0208 	add.w	r2, r7, #8
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	2116      	movs	r1, #22
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f7ff fdf7 	bl	80068d8 <lsm6dso16is_read_reg>
 8006cea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10f      	bne.n	8006d12 <lsm6dso16is_gy_hm_mode_set+0x42>
  {
    ctrl7_g.g_hm_mode = ((uint8_t)val & 0x1U);
 8006cf2:	78fb      	ldrb	r3, [r7, #3]
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	7a3b      	ldrb	r3, [r7, #8]
 8006cfc:	f362 13c7 	bfi	r3, r2, #7, #1
 8006d00:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8006d02:	f107 0208 	add.w	r2, r7, #8
 8006d06:	2301      	movs	r3, #1
 8006d08:	2116      	movs	r1, #22
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7ff fe02 	bl	8006914 <lsm6dso16is_write_reg>
 8006d10:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006d12:	68fb      	ldr	r3, [r7, #12]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <lsm6dso16is_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_gy_full_scale_t val)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	460b      	mov	r3, r1
 8006d26:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006d28:	f107 0208 	add.w	r2, r7, #8
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	2111      	movs	r1, #17
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7ff fdd1 	bl	80068d8 <lsm6dso16is_read_reg>
 8006d36:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d119      	bne.n	8006d72 <lsm6dso16is_gy_full_scale_set+0x56>
  {
    ctrl2_g.fs_g = ((uint8_t)val & 0x3U);
 8006d3e:	78fb      	ldrb	r3, [r7, #3]
 8006d40:	f003 0303 	and.w	r3, r3, #3
 8006d44:	b2da      	uxtb	r2, r3
 8006d46:	7a3b      	ldrb	r3, [r7, #8]
 8006d48:	f362 0383 	bfi	r3, r2, #2, #2
 8006d4c:	723b      	strb	r3, [r7, #8]
    ctrl2_g.fs_125 = ((uint8_t)val >> 4);
 8006d4e:	78fb      	ldrb	r3, [r7, #3]
 8006d50:	091b      	lsrs	r3, r3, #4
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	7a3b      	ldrb	r3, [r7, #8]
 8006d5c:	f362 0341 	bfi	r3, r2, #1, #1
 8006d60:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006d62:	f107 0208 	add.w	r2, r7, #8
 8006d66:	2301      	movs	r3, #1
 8006d68:	2111      	movs	r1, #17
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7ff fdd2 	bl	8006914 <lsm6dso16is_write_reg>
 8006d70:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006d72:	68fb      	ldr	r3, [r7, #12]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <lsm6dso16is_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_full_scale_get(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_gy_full_scale_t *val)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006d86:	f107 0208 	add.w	r2, r7, #8
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	2111      	movs	r1, #17
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7ff fda2 	bl	80068d8 <lsm6dso16is_read_reg>
 8006d94:	60f8      	str	r0, [r7, #12]

  switch ((ctrl2_g.fs_125 << 4) | (ctrl2_g.fs_g))
 8006d96:	7a3b      	ldrb	r3, [r7, #8]
 8006d98:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	011b      	lsls	r3, r3, #4
 8006da0:	7a3a      	ldrb	r2, [r7, #8]
 8006da2:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8006da6:	b2d2      	uxtb	r2, r2
 8006da8:	4313      	orrs	r3, r2
 8006daa:	2b10      	cmp	r3, #16
 8006dac:	d838      	bhi.n	8006e20 <lsm6dso16is_gy_full_scale_get+0xa4>
 8006dae:	a201      	add	r2, pc, #4	@ (adr r2, 8006db4 <lsm6dso16is_gy_full_scale_get+0x38>)
 8006db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db4:	08006e01 	.word	0x08006e01
 8006db8:	08006e09 	.word	0x08006e09
 8006dbc:	08006e11 	.word	0x08006e11
 8006dc0:	08006e19 	.word	0x08006e19
 8006dc4:	08006e21 	.word	0x08006e21
 8006dc8:	08006e21 	.word	0x08006e21
 8006dcc:	08006e21 	.word	0x08006e21
 8006dd0:	08006e21 	.word	0x08006e21
 8006dd4:	08006e21 	.word	0x08006e21
 8006dd8:	08006e21 	.word	0x08006e21
 8006ddc:	08006e21 	.word	0x08006e21
 8006de0:	08006e21 	.word	0x08006e21
 8006de4:	08006e21 	.word	0x08006e21
 8006de8:	08006e21 	.word	0x08006e21
 8006dec:	08006e21 	.word	0x08006e21
 8006df0:	08006e21 	.word	0x08006e21
 8006df4:	08006df9 	.word	0x08006df9
  {
    case LSM6DSO16IS_125dps:
      *val = LSM6DSO16IS_125dps;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	2210      	movs	r2, #16
 8006dfc:	701a      	strb	r2, [r3, #0]
      break;
 8006dfe:	e013      	b.n	8006e28 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_250dps:
      *val = LSM6DSO16IS_250dps;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	2200      	movs	r2, #0
 8006e04:	701a      	strb	r2, [r3, #0]
      break;
 8006e06:	e00f      	b.n	8006e28 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_500dps:
      *val = LSM6DSO16IS_500dps;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	701a      	strb	r2, [r3, #0]
      break;
 8006e0e:	e00b      	b.n	8006e28 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_1000dps:
      *val = LSM6DSO16IS_1000dps;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	2202      	movs	r2, #2
 8006e14:	701a      	strb	r2, [r3, #0]
      break;
 8006e16:	e007      	b.n	8006e28 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_2000dps:
      *val = LSM6DSO16IS_2000dps;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	2203      	movs	r2, #3
 8006e1c:	701a      	strb	r2, [r3, #0]
      break;
 8006e1e:	e003      	b.n	8006e28 <lsm6dso16is_gy_full_scale_get+0xac>

    default:
      *val = LSM6DSO16IS_125dps;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	2210      	movs	r2, #16
 8006e24:	701a      	strb	r2, [r3, #0]
      break;
 8006e26:	bf00      	nop
  }
  return ret;
 8006e28:	68fb      	ldr	r3, [r7, #12]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop

08006e34 <lsm6dso16is_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_gy_data_rate_t val)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006e40:	f107 0208 	add.w	r2, r7, #8
 8006e44:	2301      	movs	r3, #1
 8006e46:	2111      	movs	r1, #17
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f7ff fd45 	bl	80068d8 <lsm6dso16is_read_reg>
 8006e4e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d128      	bne.n	8006ea8 <lsm6dso16is_gy_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 8006e56:	78fb      	ldrb	r3, [r7, #3]
 8006e58:	f003 0310 	and.w	r3, r3, #16
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d008      	beq.n	8006e72 <lsm6dso16is_gy_data_rate_set+0x3e>
    {
      ret += lsm6dso16is_gy_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_DISABLED);
 8006e60:	2101      	movs	r1, #1
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7ff ff34 	bl	8006cd0 <lsm6dso16is_gy_hm_mode_set>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	60fb      	str	r3, [r7, #12]
 8006e70:	e007      	b.n	8006e82 <lsm6dso16is_gy_data_rate_set+0x4e>
    }
    else
    {
      ret += lsm6dso16is_gy_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_ENABLED);
 8006e72:	2100      	movs	r1, #0
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f7ff ff2b 	bl	8006cd0 <lsm6dso16is_gy_hm_mode_set>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4413      	add	r3, r2
 8006e80:	60fb      	str	r3, [r7, #12]
    }

    ctrl2_g.odr_g = ((uint8_t)val & 0xfU);
 8006e82:	78fb      	ldrb	r3, [r7, #3]
 8006e84:	f003 030f 	and.w	r3, r3, #15
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	7a3b      	ldrb	r3, [r7, #8]
 8006e8c:	f362 1307 	bfi	r3, r2, #4, #4
 8006e90:	723b      	strb	r3, [r7, #8]
    ret += lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006e92:	f107 0208 	add.w	r2, r7, #8
 8006e96:	2301      	movs	r3, #1
 8006e98:	2111      	movs	r1, #17
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7ff fd3a 	bl	8006914 <lsm6dso16is_write_reg>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
	...

08006eb4 <lsm6dso16is_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_data_rate_get(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_gy_data_rate_t *val)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  lsm6dso16is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006ebe:	f107 0210 	add.w	r2, r7, #16
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	2111      	movs	r1, #17
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7ff fd06 	bl	80068d8 <lsm6dso16is_read_reg>
 8006ecc:	6178      	str	r0, [r7, #20]
  ret += lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8006ece:	f107 020c 	add.w	r2, r7, #12
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	2116      	movs	r1, #22
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7ff fcfe 	bl	80068d8 <lsm6dso16is_read_reg>
 8006edc:	4602      	mov	r2, r0
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	617b      	str	r3, [r7, #20]

  switch ((ctrl7_g.g_hm_mode << 4) | (ctrl2_g.odr_g))
 8006ee4:	7b3b      	ldrb	r3, [r7, #12]
 8006ee6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	011b      	lsls	r3, r3, #4
 8006eee:	7c3a      	ldrb	r2, [r7, #16]
 8006ef0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8006ef4:	b2d2      	uxtb	r2, r2
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	2b1a      	cmp	r3, #26
 8006efa:	f200 808d 	bhi.w	8007018 <lsm6dso16is_gy_data_rate_get+0x164>
 8006efe:	a201      	add	r2, pc, #4	@ (adr r2, 8006f04 <lsm6dso16is_gy_data_rate_get+0x50>)
 8006f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f04:	08006f71 	.word	0x08006f71
 8006f08:	08006f79 	.word	0x08006f79
 8006f0c:	08006f81 	.word	0x08006f81
 8006f10:	08006f89 	.word	0x08006f89
 8006f14:	08006f91 	.word	0x08006f91
 8006f18:	08006f99 	.word	0x08006f99
 8006f1c:	08006fa1 	.word	0x08006fa1
 8006f20:	08006fa9 	.word	0x08006fa9
 8006f24:	08006fb1 	.word	0x08006fb1
 8006f28:	08006fb9 	.word	0x08006fb9
 8006f2c:	08006fc1 	.word	0x08006fc1
 8006f30:	08007019 	.word	0x08007019
 8006f34:	08007019 	.word	0x08007019
 8006f38:	08007019 	.word	0x08007019
 8006f3c:	08007019 	.word	0x08007019
 8006f40:	08007019 	.word	0x08007019
 8006f44:	08007019 	.word	0x08007019
 8006f48:	08006fc9 	.word	0x08006fc9
 8006f4c:	08006fd1 	.word	0x08006fd1
 8006f50:	08006fd9 	.word	0x08006fd9
 8006f54:	08006fe1 	.word	0x08006fe1
 8006f58:	08006fe9 	.word	0x08006fe9
 8006f5c:	08006ff1 	.word	0x08006ff1
 8006f60:	08006ff9 	.word	0x08006ff9
 8006f64:	08007001 	.word	0x08007001
 8006f68:	08007009 	.word	0x08007009
 8006f6c:	08007011 	.word	0x08007011
  {
    case LSM6DSO16IS_GY_ODR_OFF:
      *val = LSM6DSO16IS_GY_ODR_OFF;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	2200      	movs	r2, #0
 8006f74:	701a      	strb	r2, [r3, #0]
      break;
 8006f76:	e053      	b.n	8007020 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_12Hz5_HP;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	701a      	strb	r2, [r3, #0]
      break;
 8006f7e:	e04f      	b.n	8007020 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_26H_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_26H_HP;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	2202      	movs	r2, #2
 8006f84:	701a      	strb	r2, [r3, #0]
      break;
 8006f86:	e04b      	b.n	8007020 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_52Hz_HP;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	2203      	movs	r2, #3
 8006f8c:	701a      	strb	r2, [r3, #0]
      break;
 8006f8e:	e047      	b.n	8007020 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_104Hz_HP;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	2204      	movs	r2, #4
 8006f94:	701a      	strb	r2, [r3, #0]
      break;
 8006f96:	e043      	b.n	8007020 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_208Hz_HP;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	2205      	movs	r2, #5
 8006f9c:	701a      	strb	r2, [r3, #0]
      break;
 8006f9e:	e03f      	b.n	8007020 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_416Hz_HP;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	2206      	movs	r2, #6
 8006fa4:	701a      	strb	r2, [r3, #0]
      break;
 8006fa6:	e03b      	b.n	8007020 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_833Hz_HP;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	2207      	movs	r2, #7
 8006fac:	701a      	strb	r2, [r3, #0]
      break;
 8006fae:	e037      	b.n	8007020 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_1667Hz_HP;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	2208      	movs	r2, #8
 8006fb4:	701a      	strb	r2, [r3, #0]
      break;
 8006fb6:	e033      	b.n	8007020 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_3333Hz_HP;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	2209      	movs	r2, #9
 8006fbc:	701a      	strb	r2, [r3, #0]
      break;
 8006fbe:	e02f      	b.n	8007020 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	220a      	movs	r2, #10
 8006fc4:	701a      	strb	r2, [r3, #0]
      break;
 8006fc6:	e02b      	b.n	8007020 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_12Hz5_LP;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	2211      	movs	r2, #17
 8006fcc:	701a      	strb	r2, [r3, #0]
      break;
 8006fce:	e027      	b.n	8007020 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_26H_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_26H_LP;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2212      	movs	r2, #18
 8006fd4:	701a      	strb	r2, [r3, #0]
      break;
 8006fd6:	e023      	b.n	8007020 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_52Hz_LP;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	2213      	movs	r2, #19
 8006fdc:	701a      	strb	r2, [r3, #0]
      break;
 8006fde:	e01f      	b.n	8007020 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_104Hz_LP;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	2214      	movs	r2, #20
 8006fe4:	701a      	strb	r2, [r3, #0]
      break;
 8006fe6:	e01b      	b.n	8007020 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_208Hz_LP;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	2215      	movs	r2, #21
 8006fec:	701a      	strb	r2, [r3, #0]
      break;
 8006fee:	e017      	b.n	8007020 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_416Hz_LP;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	2216      	movs	r2, #22
 8006ff4:	701a      	strb	r2, [r3, #0]
      break;
 8006ff6:	e013      	b.n	8007020 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_833Hz_LP;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	2217      	movs	r2, #23
 8006ffc:	701a      	strb	r2, [r3, #0]
      break;
 8006ffe:	e00f      	b.n	8007020 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_1667Hz_LP;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	2218      	movs	r2, #24
 8007004:	701a      	strb	r2, [r3, #0]
      break;
 8007006:	e00b      	b.n	8007020 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_3333Hz_LP;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	2219      	movs	r2, #25
 800700c:	701a      	strb	r2, [r3, #0]
      break;
 800700e:	e007      	b.n	8007020 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_6667Hz_LP;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	221a      	movs	r2, #26
 8007014:	701a      	strb	r2, [r3, #0]
      break;
 8007016:	e003      	b.n	8007020 <lsm6dso16is_gy_data_rate_get+0x16c>

    default:
      *val = LSM6DSO16IS_GY_ODR_OFF;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	2200      	movs	r2, #0
 800701c:	701a      	strb	r2, [r3, #0]
      break;
 800701e:	bf00      	nop
  }

  return ret;
 8007020:	697b      	ldr	r3, [r7, #20]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3718      	adds	r7, #24
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop

0800702c <lsm6dso16is_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	460b      	mov	r3, r1
 8007036:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007038:	f107 0208 	add.w	r2, r7, #8
 800703c:	2301      	movs	r3, #1
 800703e:	2112      	movs	r1, #18
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f7ff fc49 	bl	80068d8 <lsm6dso16is_read_reg>
 8007046:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10f      	bne.n	800706e <lsm6dso16is_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 800704e:	78fb      	ldrb	r3, [r7, #3]
 8007050:	f003 0301 	and.w	r3, r3, #1
 8007054:	b2da      	uxtb	r2, r3
 8007056:	7a3b      	ldrb	r3, [r7, #8]
 8007058:	f362 0382 	bfi	r3, r2, #2, #1
 800705c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800705e:	f107 0208 	add.w	r2, r7, #8
 8007062:	2301      	movs	r3, #1
 8007064:	2112      	movs	r1, #18
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7ff fc54 	bl	8006914 <lsm6dso16is_write_reg>
 800706c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800706e:	68fb      	ldr	r3, [r7, #12]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <lsm6dso16is_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	460b      	mov	r3, r1
 8007082:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007084:	f107 0208 	add.w	r2, r7, #8
 8007088:	2301      	movs	r3, #1
 800708a:	2112      	movs	r1, #18
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f7ff fc23 	bl	80068d8 <lsm6dso16is_read_reg>
 8007092:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10f      	bne.n	80070ba <lsm6dso16is_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 800709a:	78fb      	ldrb	r3, [r7, #3]
 800709c:	f003 0301 	and.w	r3, r3, #1
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	7a3b      	ldrb	r3, [r7, #8]
 80070a4:	f362 1386 	bfi	r3, r2, #6, #1
 80070a8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80070aa:	f107 0208 	add.w	r2, r7, #8
 80070ae:	2301      	movs	r3, #1
 80070b0:	2112      	movs	r1, #18
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7ff fc2e 	bl	8006914 <lsm6dso16is_write_reg>
 80070b8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80070ba:	68fb      	ldr	r3, [r7, #12]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <lsm6dso16is_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_OUTX_L_G, buff, 6);
 80070ce:	f107 020c 	add.w	r2, r7, #12
 80070d2:	2306      	movs	r3, #6
 80070d4:	2122      	movs	r1, #34	@ 0x22
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7ff fbfe 	bl	80068d8 <lsm6dso16is_read_reg>
 80070dc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80070de:	7b7b      	ldrb	r3, [r7, #13]
 80070e0:	b21a      	sxth	r2, r3
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	021b      	lsls	r3, r3, #8
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	7b3a      	ldrb	r2, [r7, #12]
 80070f4:	4413      	add	r3, r2
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	b21a      	sxth	r2, r3
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80070fe:	7bfa      	ldrb	r2, [r7, #15]
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	3302      	adds	r3, #2
 8007104:	b212      	sxth	r2, r2
 8007106:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	3302      	adds	r3, #2
 800710c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007110:	b29b      	uxth	r3, r3
 8007112:	021b      	lsls	r3, r3, #8
 8007114:	b29b      	uxth	r3, r3
 8007116:	7bba      	ldrb	r2, [r7, #14]
 8007118:	4413      	add	r3, r2
 800711a:	b29a      	uxth	r2, r3
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	3302      	adds	r3, #2
 8007120:	b212      	sxth	r2, r2
 8007122:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007124:	7c7a      	ldrb	r2, [r7, #17]
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	3304      	adds	r3, #4
 800712a:	b212      	sxth	r2, r2
 800712c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	3304      	adds	r3, #4
 8007132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007136:	b29b      	uxth	r3, r3
 8007138:	021b      	lsls	r3, r3, #8
 800713a:	b29b      	uxth	r3, r3
 800713c:	7c3a      	ldrb	r2, [r7, #16]
 800713e:	4413      	add	r3, r2
 8007140:	b29a      	uxth	r2, r3
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	3304      	adds	r3, #4
 8007146:	b212      	sxth	r2, r2
 8007148:	801a      	strh	r2, [r3, #0]

  return ret;
 800714a:	697b      	ldr	r3, [r7, #20]
}
 800714c:	4618      	mov	r0, r3
 800714e:	3718      	adds	r7, #24
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <lsm6dso16is_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_OUTX_L_A, buff, 6);
 800715e:	f107 020c 	add.w	r2, r7, #12
 8007162:	2306      	movs	r3, #6
 8007164:	2128      	movs	r1, #40	@ 0x28
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7ff fbb6 	bl	80068d8 <lsm6dso16is_read_reg>
 800716c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800716e:	7b7b      	ldrb	r3, [r7, #13]
 8007170:	b21a      	sxth	r2, r3
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	f9b3 3000 	ldrsh.w	r3, [r3]
 800717c:	b29b      	uxth	r3, r3
 800717e:	021b      	lsls	r3, r3, #8
 8007180:	b29b      	uxth	r3, r3
 8007182:	7b3a      	ldrb	r2, [r7, #12]
 8007184:	4413      	add	r3, r2
 8007186:	b29b      	uxth	r3, r3
 8007188:	b21a      	sxth	r2, r3
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800718e:	7bfa      	ldrb	r2, [r7, #15]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	3302      	adds	r3, #2
 8007194:	b212      	sxth	r2, r2
 8007196:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	3302      	adds	r3, #2
 800719c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	021b      	lsls	r3, r3, #8
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	7bba      	ldrb	r2, [r7, #14]
 80071a8:	4413      	add	r3, r2
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	3302      	adds	r3, #2
 80071b0:	b212      	sxth	r2, r2
 80071b2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80071b4:	7c7a      	ldrb	r2, [r7, #17]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	3304      	adds	r3, #4
 80071ba:	b212      	sxth	r2, r2
 80071bc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	3304      	adds	r3, #4
 80071c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	021b      	lsls	r3, r3, #8
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	7c3a      	ldrb	r2, [r7, #16]
 80071ce:	4413      	add	r3, r2
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	3304      	adds	r3, #4
 80071d6:	b212      	sxth	r2, r2
 80071d8:	801a      	strh	r2, [r3, #0]

  return ret;
 80071da:	697b      	ldr	r3, [r7, #20]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3718      	adds	r7, #24
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <LSM6DSV16X_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_RegisterBusIO(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_IO_t *pIO)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d103      	bne.n	8007200 <LSM6DSV16X_RegisterBusIO+0x1c>
  {
    ret = LSM6DSV16X_ERROR;
 80071f8:	f04f 33ff 	mov.w	r3, #4294967295
 80071fc:	60fb      	str	r3, [r7, #12]
 80071fe:	e05d      	b.n	80072bc <LSM6DSV16X_RegisterBusIO+0xd8>
  }
  else
  {
    pObj->IO.Init       = pIO->Init;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit     = pIO->DeInit;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType    = pIO->BusType;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	689a      	ldr	r2, [r3, #8]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	609a      	str	r2, [r3, #8]
    pObj->IO.Address    = pIO->Address;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	7b1a      	ldrb	r2, [r3, #12]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg   = pIO->WriteReg;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	691a      	ldr	r2, [r3, #16]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg    = pIO->ReadReg;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	695a      	ldr	r2, [r3, #20]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick    = pIO->GetTick;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	699a      	ldr	r2, [r3, #24]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a23      	ldr	r2, [pc, #140]	@ (80072c8 <LSM6DSV16X_RegisterBusIO+0xe4>)
 800723c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a22      	ldr	r2, [pc, #136]	@ (80072cc <LSM6DSV16X_RegisterBusIO+0xe8>)
 8007242:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	69da      	ldr	r2, [r3, #28]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d103      	bne.n	8007262 <LSM6DSV16X_RegisterBusIO+0x7e>
    {
      ret = LSM6DSV16X_ERROR;
 800725a:	f04f 33ff 	mov.w	r3, #4294967295
 800725e:	60fb      	str	r3, [r7, #12]
 8007260:	e02c      	b.n	80072bc <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else if (pObj->IO.Init() != LSM6DSV16X_OK)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4798      	blx	r3
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <LSM6DSV16X_RegisterBusIO+0x92>
    {
      ret = LSM6DSV16X_ERROR;
 800726e:	f04f 33ff 	mov.w	r3, #4294967295
 8007272:	60fb      	str	r3, [r7, #12]
 8007274:	e022      	b.n	80072bc <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSV16X_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	2b02      	cmp	r3, #2
 800727c:	d11e      	bne.n	80072bc <LSM6DSV16X_RegisterBusIO+0xd8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007284:	2b00      	cmp	r3, #0
 8007286:	d119      	bne.n	80072bc <LSM6DSV16X_RegisterBusIO+0xd8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x04;
 8007288:	2304      	movs	r3, #4
 800728a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_CTRL3, data) != LSM6DSV16X_OK)
 800728c:	7afb      	ldrb	r3, [r7, #11]
 800728e:	461a      	mov	r2, r3
 8007290:	2112      	movs	r1, #18
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 ff18 	bl	80080c8 <LSM6DSV16X_Write_Reg>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d002      	beq.n	80072a4 <LSM6DSV16X_RegisterBusIO+0xc0>
          {
            ret = LSM6DSV16X_ERROR;
 800729e:	f04f 33ff 	mov.w	r3, #4294967295
 80072a2:	60fb      	str	r3, [r7, #12]
          }

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_IF_CFG, data) != LSM6DSV16X_OK)
 80072a4:	7afb      	ldrb	r3, [r7, #11]
 80072a6:	461a      	mov	r2, r3
 80072a8:	2103      	movs	r1, #3
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 ff0c 	bl	80080c8 <LSM6DSV16X_Write_Reg>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d002      	beq.n	80072bc <LSM6DSV16X_RegisterBusIO+0xd8>
          {
            ret = LSM6DSV16X_ERROR;
 80072b6:	f04f 33ff 	mov.w	r3, #4294967295
 80072ba:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80072bc:	68fb      	ldr	r3, [r7, #12]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	08008609 	.word	0x08008609
 80072cc:	0800863f 	.word	0x0800863f

080072d0 <LSM6DSV16X_Init>:
  * @brief  Initialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Init(LSM6DSV16X_Object_t *pObj)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  /* Set main memory bank */
  if (LSM6DSV16X_Set_Mem_Bank(pObj, (uint8_t)LSM6DSV16X_MAIN_MEM_BANK) != LSM6DSV16X_OK)
 80072d8:	2100      	movs	r1, #0
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 ff0f 	bl	80080fe <LSM6DSV16X_Set_Mem_Bank>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d002      	beq.n	80072ec <LSM6DSV16X_Init+0x1c>
  {
    return LSM6DSV16X_ERROR;
 80072e6:	f04f 33ff 	mov.w	r3, #4294967295
 80072ea:	e070      	b.n	80073ce <LSM6DSV16X_Init+0xfe>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface */
  if (lsm6dsv16x_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3320      	adds	r3, #32
 80072f0:	2101      	movs	r1, #1
 80072f2:	4618      	mov	r0, r3
 80072f4:	f001 fcfe 	bl	8008cf4 <lsm6dsv16x_auto_increment_set>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d002      	beq.n	8007304 <LSM6DSV16X_Init+0x34>
  {
    return LSM6DSV16X_ERROR;
 80072fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007302:	e064      	b.n	80073ce <LSM6DSV16X_Init+0xfe>
  }

  /* Enable BDU */
  if (lsm6dsv16x_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	3320      	adds	r3, #32
 8007308:	2101      	movs	r1, #1
 800730a:	4618      	mov	r0, r3
 800730c:	f001 fd18 	bl	8008d40 <lsm6dsv16x_block_data_update_set>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d002      	beq.n	800731c <LSM6DSV16X_Init+0x4c>
  {
    return LSM6DSV16X_ERROR;
 8007316:	f04f 33ff 	mov.w	r3, #4294967295
 800731a:	e058      	b.n	80073ce <LSM6DSV16X_Init+0xfe>
  }

  /* WAKE_UP mode selection */
  if (lsm6dsv16x_fifo_mode_set(&(pObj->Ctx), LSM6DSV16X_BYPASS_MODE) != LSM6DSV16X_OK)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	3320      	adds	r3, #32
 8007320:	2100      	movs	r1, #0
 8007322:	4618      	mov	r0, r3
 8007324:	f001 feae 	bl	8009084 <lsm6dsv16x_fifo_mode_set>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d002      	beq.n	8007334 <LSM6DSV16X_Init+0x64>
  {
    return LSM6DSV16X_ERROR;
 800732e:	f04f 33ff 	mov.w	r3, #4294967295
 8007332:	e04c      	b.n	80073ce <LSM6DSV16X_Init+0xfe>
  }

  /* Select default output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_AT_120Hz;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2206      	movs	r2, #6
 8007338:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	3320      	adds	r3, #32
 8007340:	2100      	movs	r1, #0
 8007342:	4618      	mov	r0, r3
 8007344:	f001 fa14 	bl	8008770 <lsm6dsv16x_xl_data_rate_set>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d002      	beq.n	8007354 <LSM6DSV16X_Init+0x84>
  {
    return LSM6DSV16X_ERROR;
 800734e:	f04f 33ff 	mov.w	r3, #4294967295
 8007352:	e03c      	b.n	80073ce <LSM6DSV16X_Init+0xfe>
  }

  /* Full scale selection */
  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2g) != LSM6DSV16X_OK)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	3320      	adds	r3, #32
 8007358:	2100      	movs	r1, #0
 800735a:	4618      	mov	r0, r3
 800735c:	f001 fd94 	bl	8008e88 <lsm6dsv16x_xl_full_scale_set>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d002      	beq.n	800736c <LSM6DSV16X_Init+0x9c>
  {
    return LSM6DSV16X_ERROR;
 8007366:	f04f 33ff 	mov.w	r3, #4294967295
 800736a:	e030      	b.n	80073ce <LSM6DSV16X_Init+0xfe>
  }

  /* Select default output data rate */
  pObj->gyro_odr = LSM6DSV16X_ODR_AT_120Hz;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2206      	movs	r2, #6
 8007370:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	3320      	adds	r3, #32
 8007378:	2100      	movs	r1, #0
 800737a:	4618      	mov	r0, r3
 800737c:	f001 fb5a 	bl	8008a34 <lsm6dsv16x_gy_data_rate_set>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d002      	beq.n	800738c <LSM6DSV16X_Init+0xbc>
  {
    return LSM6DSV16X_ERROR;
 8007386:	f04f 33ff 	mov.w	r3, #4294967295
 800738a:	e020      	b.n	80073ce <LSM6DSV16X_Init+0xfe>
  }

  /* Full scale selection */
  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2000dps) != LSM6DSV16X_OK)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	3320      	adds	r3, #32
 8007390:	2104      	movs	r1, #4
 8007392:	4618      	mov	r0, r3
 8007394:	f001 fcfa 	bl	8008d8c <lsm6dsv16x_gy_full_scale_set>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d002      	beq.n	80073a4 <LSM6DSV16X_Init+0xd4>
  {
    return LSM6DSV16X_ERROR;
 800739e:	f04f 33ff 	mov.w	r3, #4294967295
 80073a2:	e014      	b.n	80073ce <LSM6DSV16X_Init+0xfe>
  }

  /* Enable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 1;
 80073a4:	7b3b      	ldrb	r3, [r7, #12]
 80073a6:	f043 0301 	orr.w	r3, r3, #1
 80073aa:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	3320      	adds	r3, #32
 80073b0:	7b39      	ldrb	r1, [r7, #12]
 80073b2:	4618      	mov	r0, r3
 80073b4:	f001 fe8c 	bl	80090d0 <lsm6dsv16x_ah_qvar_mode_set>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d002      	beq.n	80073c4 <LSM6DSV16X_Init+0xf4>
  {
    return LSM6DSV16X_ERROR;
 80073be:	f04f 33ff 	mov.w	r3, #4294967295
 80073c2:	e004      	b.n	80073ce <LSM6DSV16X_Init+0xfe>
  }

  pObj->is_initialized = 1;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <LSM6DSV16X_DeInit>:
  * @brief  Deinitialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_DeInit(LSM6DSV16X_Object_t *pObj)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b084      	sub	sp, #16
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSV16X_ACC_Disable(pObj) != LSM6DSV16X_OK)
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f898 	bl	8007514 <LSM6DSV16X_ACC_Disable>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d002      	beq.n	80073f0 <LSM6DSV16X_DeInit+0x1a>
  {
    return LSM6DSV16X_ERROR;
 80073ea:	f04f 33ff 	mov.w	r3, #4294967295
 80073ee:	e025      	b.n	800743c <LSM6DSV16X_DeInit+0x66>
  }

  if (LSM6DSV16X_GYRO_Disable(pObj) != LSM6DSV16X_OK)
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fb6a 	bl	8007aca <LSM6DSV16X_GYRO_Disable>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d002      	beq.n	8007402 <LSM6DSV16X_DeInit+0x2c>
  {
    return LSM6DSV16X_ERROR;
 80073fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007400:	e01c      	b.n	800743c <LSM6DSV16X_DeInit+0x66>
  }

  /* Reset output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_OFF;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSV16X_ODR_OFF;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 0;
 8007412:	7b3b      	ldrb	r3, [r7, #12]
 8007414:	f023 0301 	bic.w	r3, r3, #1
 8007418:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	3320      	adds	r3, #32
 800741e:	7b39      	ldrb	r1, [r7, #12]
 8007420:	4618      	mov	r0, r3
 8007422:	f001 fe55 	bl	80090d0 <lsm6dsv16x_ah_qvar_mode_set>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d002      	beq.n	8007432 <LSM6DSV16X_DeInit+0x5c>
  {
    return LSM6DSV16X_ERROR;
 800742c:	f04f 33ff 	mov.w	r3, #4294967295
 8007430:	e004      	b.n	800743c <LSM6DSV16X_DeInit+0x66>
  }

  pObj->is_initialized = 0;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <LSM6DSV16X_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ReadID(LSM6DSV16X_Object_t *pObj, uint8_t *Id)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  if (lsm6dsv16x_device_id_get(&(pObj->Ctx), Id) != LSM6DSV16X_OK)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	3320      	adds	r3, #32
 8007452:	6839      	ldr	r1, [r7, #0]
 8007454:	4618      	mov	r0, r3
 8007456:	f001 f97a 	bl	800874e <lsm6dsv16x_device_id_get>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d002      	beq.n	8007466 <LSM6DSV16X_ReadID+0x22>
  {
    return LSM6DSV16X_ERROR;
 8007460:	f04f 33ff 	mov.w	r3, #4294967295
 8007464:	e000      	b.n	8007468 <LSM6DSV16X_ReadID+0x24>
  }

  return LSM6DSV16X_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	3708      	adds	r7, #8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <LSM6DSV16X_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSV16X sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GetCapabilities(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Capabilities_t *Capabilities)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	2201      	movs	r2, #1
 800747e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	2201      	movs	r2, #1
 8007484:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2200      	movs	r2, #0
 800748a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 1;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	2201      	movs	r2, #1
 8007490:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 4000;
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8007498:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2210      	movs	r2, #16
 800749e:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2200      	movs	r2, #0
 80074a4:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 7680.0f;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	4a07      	ldr	r2, [pc, #28]	@ (80074c8 <LSM6DSV16X_GetCapabilities+0x58>)
 80074aa:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 7680.0f;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	4a06      	ldr	r2, [pc, #24]	@ (80074c8 <LSM6DSV16X_GetCapabilities+0x58>)
 80074b0:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	f04f 0200 	mov.w	r2, #0
 80074b8:	619a      	str	r2, [r3, #24]
  return LSM6DSV16X_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	45f00000 	.word	0x45f00000

080074cc <LSM6DSV16X_ACC_Enable>:
  * @brief  Enable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Enable(LSM6DSV16X_Object_t *pObj)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d101      	bne.n	80074e2 <LSM6DSV16X_ACC_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 80074de:	2300      	movs	r3, #0
 80074e0:	e014      	b.n	800750c <LSM6DSV16X_ACC_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSV16X_OK)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f103 0220 	add.w	r2, r3, #32
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80074ee:	4619      	mov	r1, r3
 80074f0:	4610      	mov	r0, r2
 80074f2:	f001 f93d 	bl	8008770 <lsm6dsv16x_xl_data_rate_set>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d002      	beq.n	8007502 <LSM6DSV16X_ACC_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 80074fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007500:	e004      	b.n	800750c <LSM6DSV16X_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <LSM6DSV16X_ACC_Disable>:
  * @brief  Disable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Disable(LSM6DSV16X_Object_t *pObj)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <LSM6DSV16X_ACC_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 8007526:	2300      	movs	r3, #0
 8007528:	e01f      	b.n	800756a <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSV16X_OK)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f103 0220 	add.w	r2, r3, #32
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	3333      	adds	r3, #51	@ 0x33
 8007534:	4619      	mov	r1, r3
 8007536:	4610      	mov	r0, r2
 8007538:	f001 f96c 	bl	8008814 <lsm6dsv16x_xl_data_rate_get>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d002      	beq.n	8007548 <LSM6DSV16X_ACC_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 8007542:	f04f 33ff 	mov.w	r3, #4294967295
 8007546:	e010      	b.n	800756a <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	3320      	adds	r3, #32
 800754c:	2100      	movs	r1, #0
 800754e:	4618      	mov	r0, r3
 8007550:	f001 f90e 	bl	8008770 <lsm6dsv16x_xl_data_rate_set>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d002      	beq.n	8007560 <LSM6DSV16X_ACC_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 800755a:	f04f 33ff 	mov.w	r3, #4294967295
 800755e:	e004      	b.n	800756a <LSM6DSV16X_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3708      	adds	r7, #8
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
	...

08007574 <LSM6DSV16X_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	3320      	adds	r3, #32
 8007586:	f107 020b 	add.w	r2, r7, #11
 800758a:	4611      	mov	r1, r2
 800758c:	4618      	mov	r0, r3
 800758e:	f001 fca1 	bl	8008ed4 <lsm6dsv16x_xl_full_scale_get>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d002      	beq.n	800759e <LSM6DSV16X_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8007598:	f04f 33ff 	mov.w	r3, #4294967295
 800759c:	e023      	b.n	80075e6 <LSM6DSV16X_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale */
  switch (full_scale)
 800759e:	7afb      	ldrb	r3, [r7, #11]
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d81b      	bhi.n	80075dc <LSM6DSV16X_ACC_GetSensitivity+0x68>
 80075a4:	a201      	add	r2, pc, #4	@ (adr r2, 80075ac <LSM6DSV16X_ACC_GetSensitivity+0x38>)
 80075a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075aa:	bf00      	nop
 80075ac:	080075bd 	.word	0x080075bd
 80075b0:	080075c5 	.word	0x080075c5
 80075b4:	080075cd 	.word	0x080075cd
 80075b8:	080075d5 	.word	0x080075d5
  {
    case LSM6DSV16X_2g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_2G;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	4a0c      	ldr	r2, [pc, #48]	@ (80075f0 <LSM6DSV16X_ACC_GetSensitivity+0x7c>)
 80075c0:	601a      	str	r2, [r3, #0]
      break;
 80075c2:	e00f      	b.n	80075e4 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_4g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_4G;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	4a0b      	ldr	r2, [pc, #44]	@ (80075f4 <LSM6DSV16X_ACC_GetSensitivity+0x80>)
 80075c8:	601a      	str	r2, [r3, #0]
      break;
 80075ca:	e00b      	b.n	80075e4 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_8g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_8G;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	4a0a      	ldr	r2, [pc, #40]	@ (80075f8 <LSM6DSV16X_ACC_GetSensitivity+0x84>)
 80075d0:	601a      	str	r2, [r3, #0]
      break;
 80075d2:	e007      	b.n	80075e4 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_16g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_16G;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	4a09      	ldr	r2, [pc, #36]	@ (80075fc <LSM6DSV16X_ACC_GetSensitivity+0x88>)
 80075d8:	601a      	str	r2, [r3, #0]
      break;
 80075da:	e003      	b.n	80075e4 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 80075dc:	f04f 33ff 	mov.w	r3, #4294967295
 80075e0:	60fb      	str	r3, [r7, #12]
      break;
 80075e2:	bf00      	nop
  }

  return ret;
 80075e4:	68fb      	ldr	r3, [r7, #12]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	3d79db23 	.word	0x3d79db23
 80075f4:	3df9db23 	.word	0x3df9db23
 80075f8:	3e79db23 	.word	0x3e79db23
 80075fc:	3ef9db23 	.word	0x3ef9db23

08007600 <LSM6DSV16X_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800760a:	2300      	movs	r3, #0
 800760c:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	3320      	adds	r3, #32
 8007612:	f107 020b 	add.w	r2, r7, #11
 8007616:	4611      	mov	r1, r2
 8007618:	4618      	mov	r0, r3
 800761a:	f001 f8fb 	bl	8008814 <lsm6dsv16x_xl_data_rate_get>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d002      	beq.n	800762a <LSM6DSV16X_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8007624:	f04f 33ff 	mov.w	r3, #4294967295
 8007628:	e0ea      	b.n	8007800 <LSM6DSV16X_ACC_GetOutputDataRate+0x200>
  }

  switch (odr_low_level)
 800762a:	7afb      	ldrb	r3, [r7, #11]
 800762c:	2b2c      	cmp	r3, #44	@ 0x2c
 800762e:	f200 80e2 	bhi.w	80077f6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1f6>
 8007632:	a201      	add	r2, pc, #4	@ (adr r2, 8007638 <LSM6DSV16X_ACC_GetOutputDataRate+0x38>)
 8007634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007638:	080076ed 	.word	0x080076ed
 800763c:	080076f7 	.word	0x080076f7
 8007640:	080076ff 	.word	0x080076ff
 8007644:	0800770f 	.word	0x0800770f
 8007648:	08007727 	.word	0x08007727
 800764c:	0800773f 	.word	0x0800773f
 8007650:	08007757 	.word	0x08007757
 8007654:	0800776f 	.word	0x0800776f
 8007658:	08007787 	.word	0x08007787
 800765c:	0800779f 	.word	0x0800779f
 8007660:	080077b7 	.word	0x080077b7
 8007664:	080077cf 	.word	0x080077cf
 8007668:	080077e7 	.word	0x080077e7
 800766c:	080077f7 	.word	0x080077f7
 8007670:	080077f7 	.word	0x080077f7
 8007674:	080077f7 	.word	0x080077f7
 8007678:	080077f7 	.word	0x080077f7
 800767c:	080077f7 	.word	0x080077f7
 8007680:	080077f7 	.word	0x080077f7
 8007684:	08007717 	.word	0x08007717
 8007688:	0800772f 	.word	0x0800772f
 800768c:	08007747 	.word	0x08007747
 8007690:	0800775f 	.word	0x0800775f
 8007694:	08007777 	.word	0x08007777
 8007698:	0800778f 	.word	0x0800778f
 800769c:	080077a7 	.word	0x080077a7
 80076a0:	080077bf 	.word	0x080077bf
 80076a4:	080077d7 	.word	0x080077d7
 80076a8:	080077ef 	.word	0x080077ef
 80076ac:	080077f7 	.word	0x080077f7
 80076b0:	080077f7 	.word	0x080077f7
 80076b4:	080077f7 	.word	0x080077f7
 80076b8:	080077f7 	.word	0x080077f7
 80076bc:	080077f7 	.word	0x080077f7
 80076c0:	080077f7 	.word	0x080077f7
 80076c4:	08007707 	.word	0x08007707
 80076c8:	0800771f 	.word	0x0800771f
 80076cc:	08007737 	.word	0x08007737
 80076d0:	0800774f 	.word	0x0800774f
 80076d4:	08007767 	.word	0x08007767
 80076d8:	0800777f 	.word	0x0800777f
 80076dc:	08007797 	.word	0x08007797
 80076e0:	080077af 	.word	0x080077af
 80076e4:	080077c7 	.word	0x080077c7
 80076e8:	080077df 	.word	0x080077df
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	f04f 0200 	mov.w	r2, #0
 80076f2:	601a      	str	r2, [r3, #0]
      break;
 80076f4:	e083      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *Odr = 1.875f;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	4a43      	ldr	r2, [pc, #268]	@ (8007808 <LSM6DSV16X_ACC_GetOutputDataRate+0x208>)
 80076fa:	601a      	str	r2, [r3, #0]
      break;
 80076fc:	e07f      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	4a42      	ldr	r2, [pc, #264]	@ (800780c <LSM6DSV16X_ACC_GetOutputDataRate+0x20c>)
 8007702:	601a      	str	r2, [r3, #0]
      break;
 8007704:	e07b      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_12Hz5:
      *Odr = 12.5f;
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	4a41      	ldr	r2, [pc, #260]	@ (8007810 <LSM6DSV16X_ACC_GetOutputDataRate+0x210>)
 800770a:	601a      	str	r2, [r3, #0]
      break;
 800770c:	e077      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	4a40      	ldr	r2, [pc, #256]	@ (8007814 <LSM6DSV16X_ACC_GetOutputDataRate+0x214>)
 8007712:	601a      	str	r2, [r3, #0]
      break;
 8007714:	e073      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_15Hz625:
      *Odr = 15.625f;
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	4a3f      	ldr	r2, [pc, #252]	@ (8007818 <LSM6DSV16X_ACC_GetOutputDataRate+0x218>)
 800771a:	601a      	str	r2, [r3, #0]
      break;
 800771c:	e06f      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_25Hz:
      *Odr = 25.0f;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	4a3e      	ldr	r2, [pc, #248]	@ (800781c <LSM6DSV16X_ACC_GetOutputDataRate+0x21c>)
 8007722:	601a      	str	r2, [r3, #0]
      break;
 8007724:	e06b      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	4a3d      	ldr	r2, [pc, #244]	@ (8007820 <LSM6DSV16X_ACC_GetOutputDataRate+0x220>)
 800772a:	601a      	str	r2, [r3, #0]
      break;
 800772c:	e067      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_31Hz25:
      *Odr = 31.25f;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	4a3c      	ldr	r2, [pc, #240]	@ (8007824 <LSM6DSV16X_ACC_GetOutputDataRate+0x224>)
 8007732:	601a      	str	r2, [r3, #0]
      break;
 8007734:	e063      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_50Hz:
      *Odr = 50.0f;
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	4a3b      	ldr	r2, [pc, #236]	@ (8007828 <LSM6DSV16X_ACC_GetOutputDataRate+0x228>)
 800773a:	601a      	str	r2, [r3, #0]
      break;
 800773c:	e05f      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	4a3a      	ldr	r2, [pc, #232]	@ (800782c <LSM6DSV16X_ACC_GetOutputDataRate+0x22c>)
 8007742:	601a      	str	r2, [r3, #0]
      break;
 8007744:	e05b      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_62Hz5:
      *Odr = 62.5f;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	4a39      	ldr	r2, [pc, #228]	@ (8007830 <LSM6DSV16X_ACC_GetOutputDataRate+0x230>)
 800774a:	601a      	str	r2, [r3, #0]
      break;
 800774c:	e057      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_100Hz:
      *Odr = 100.0f;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	4a38      	ldr	r2, [pc, #224]	@ (8007834 <LSM6DSV16X_ACC_GetOutputDataRate+0x234>)
 8007752:	601a      	str	r2, [r3, #0]
      break;
 8007754:	e053      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	4a37      	ldr	r2, [pc, #220]	@ (8007838 <LSM6DSV16X_ACC_GetOutputDataRate+0x238>)
 800775a:	601a      	str	r2, [r3, #0]
      break;
 800775c:	e04f      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_125Hz:
      *Odr = 125.0f;
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	4a36      	ldr	r2, [pc, #216]	@ (800783c <LSM6DSV16X_ACC_GetOutputDataRate+0x23c>)
 8007762:	601a      	str	r2, [r3, #0]
      break;
 8007764:	e04b      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_200Hz:
      *Odr = 200.0f;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	4a35      	ldr	r2, [pc, #212]	@ (8007840 <LSM6DSV16X_ACC_GetOutputDataRate+0x240>)
 800776a:	601a      	str	r2, [r3, #0]
      break;
 800776c:	e047      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	4a34      	ldr	r2, [pc, #208]	@ (8007844 <LSM6DSV16X_ACC_GetOutputDataRate+0x244>)
 8007772:	601a      	str	r2, [r3, #0]
      break;
 8007774:	e043      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_250Hz:
      *Odr = 250.0f;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	4a33      	ldr	r2, [pc, #204]	@ (8007848 <LSM6DSV16X_ACC_GetOutputDataRate+0x248>)
 800777a:	601a      	str	r2, [r3, #0]
      break;
 800777c:	e03f      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_400Hz:
      *Odr = 400.0f;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	4a32      	ldr	r2, [pc, #200]	@ (800784c <LSM6DSV16X_ACC_GetOutputDataRate+0x24c>)
 8007782:	601a      	str	r2, [r3, #0]
      break;
 8007784:	e03b      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	4a31      	ldr	r2, [pc, #196]	@ (8007850 <LSM6DSV16X_ACC_GetOutputDataRate+0x250>)
 800778a:	601a      	str	r2, [r3, #0]
      break;
 800778c:	e037      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_500Hz:
      *Odr = 500.0f;
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	4a30      	ldr	r2, [pc, #192]	@ (8007854 <LSM6DSV16X_ACC_GetOutputDataRate+0x254>)
 8007792:	601a      	str	r2, [r3, #0]
      break;
 8007794:	e033      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_800Hz:
      *Odr = 800.0f;
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	4a2f      	ldr	r2, [pc, #188]	@ (8007858 <LSM6DSV16X_ACC_GetOutputDataRate+0x258>)
 800779a:	601a      	str	r2, [r3, #0]
      break;
 800779c:	e02f      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	4a2e      	ldr	r2, [pc, #184]	@ (800785c <LSM6DSV16X_ACC_GetOutputDataRate+0x25c>)
 80077a2:	601a      	str	r2, [r3, #0]
      break;
 80077a4:	e02b      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_1000Hz:
      *Odr = 1000.0f;
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	4a2d      	ldr	r2, [pc, #180]	@ (8007860 <LSM6DSV16X_ACC_GetOutputDataRate+0x260>)
 80077aa:	601a      	str	r2, [r3, #0]
      break;
 80077ac:	e027      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_1600Hz:
      *Odr = 1600.0f;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	4a2c      	ldr	r2, [pc, #176]	@ (8007864 <LSM6DSV16X_ACC_GetOutputDataRate+0x264>)
 80077b2:	601a      	str	r2, [r3, #0]
      break;
 80077b4:	e023      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	4a2b      	ldr	r2, [pc, #172]	@ (8007868 <LSM6DSV16X_ACC_GetOutputDataRate+0x268>)
 80077ba:	601a      	str	r2, [r3, #0]
      break;
 80077bc:	e01f      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_2000Hz:
      *Odr = 2000.0f;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	4a2a      	ldr	r2, [pc, #168]	@ (800786c <LSM6DSV16X_ACC_GetOutputDataRate+0x26c>)
 80077c2:	601a      	str	r2, [r3, #0]
      break;
 80077c4:	e01b      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_3200Hz:
      *Odr = 3200.0f;
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	4a29      	ldr	r2, [pc, #164]	@ (8007870 <LSM6DSV16X_ACC_GetOutputDataRate+0x270>)
 80077ca:	601a      	str	r2, [r3, #0]
      break;
 80077cc:	e017      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	4a28      	ldr	r2, [pc, #160]	@ (8007874 <LSM6DSV16X_ACC_GetOutputDataRate+0x274>)
 80077d2:	601a      	str	r2, [r3, #0]
      break;
 80077d4:	e013      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_4000Hz:
      *Odr = 4000.0f;
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	4a27      	ldr	r2, [pc, #156]	@ (8007878 <LSM6DSV16X_ACC_GetOutputDataRate+0x278>)
 80077da:	601a      	str	r2, [r3, #0]
      break;
 80077dc:	e00f      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_6400Hz:
      *Odr = 6400.0f;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	4a26      	ldr	r2, [pc, #152]	@ (800787c <LSM6DSV16X_ACC_GetOutputDataRate+0x27c>)
 80077e2:	601a      	str	r2, [r3, #0]
      break;
 80077e4:	e00b      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	4a25      	ldr	r2, [pc, #148]	@ (8007880 <LSM6DSV16X_ACC_GetOutputDataRate+0x280>)
 80077ea:	601a      	str	r2, [r3, #0]
      break;
 80077ec:	e007      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_8000Hz:
      *Odr = 8000.0f;
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	4a24      	ldr	r2, [pc, #144]	@ (8007884 <LSM6DSV16X_ACC_GetOutputDataRate+0x284>)
 80077f2:	601a      	str	r2, [r3, #0]
      break;
 80077f4:	e003      	b.n	80077fe <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    default:
      ret = LSM6DSV16X_ERROR;
 80077f6:	f04f 33ff 	mov.w	r3, #4294967295
 80077fa:	60fb      	str	r3, [r7, #12]
      break;
 80077fc:	bf00      	nop
  }

  return ret;
 80077fe:	68fb      	ldr	r3, [r7, #12]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	3ff00000 	.word	0x3ff00000
 800780c:	40f00000 	.word	0x40f00000
 8007810:	41480000 	.word	0x41480000
 8007814:	41700000 	.word	0x41700000
 8007818:	417a0000 	.word	0x417a0000
 800781c:	41c80000 	.word	0x41c80000
 8007820:	41f00000 	.word	0x41f00000
 8007824:	41fa0000 	.word	0x41fa0000
 8007828:	42480000 	.word	0x42480000
 800782c:	42700000 	.word	0x42700000
 8007830:	427a0000 	.word	0x427a0000
 8007834:	42c80000 	.word	0x42c80000
 8007838:	42f00000 	.word	0x42f00000
 800783c:	42fa0000 	.word	0x42fa0000
 8007840:	43480000 	.word	0x43480000
 8007844:	43700000 	.word	0x43700000
 8007848:	437a0000 	.word	0x437a0000
 800784c:	43c80000 	.word	0x43c80000
 8007850:	43f00000 	.word	0x43f00000
 8007854:	43fa0000 	.word	0x43fa0000
 8007858:	44480000 	.word	0x44480000
 800785c:	44700000 	.word	0x44700000
 8007860:	447a0000 	.word	0x447a0000
 8007864:	44c80000 	.word	0x44c80000
 8007868:	44f00000 	.word	0x44f00000
 800786c:	44fa0000 	.word	0x44fa0000
 8007870:	45480000 	.word	0x45480000
 8007874:	45700000 	.word	0x45700000
 8007878:	457a0000 	.word	0x457a0000
 800787c:	45c80000 	.word	0x45c80000
 8007880:	45f00000 	.word	0x45f00000
 8007884:	45fa0000 	.word	0x45fa0000

08007888 <LSM6DSV16X_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->acc_is_enabled == 1U)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800789a:	2b01      	cmp	r3, #1
 800789c:	d106      	bne.n	80078ac <LSM6DSV16X_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800789e:	ed97 0a00 	vldr	s0, [r7]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fc52 	bl	800814c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>
 80078a8:	4603      	mov	r3, r0
 80078aa:	e005      	b.n	80078b8 <LSM6DSV16X_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80078ac:	ed97 0a00 	vldr	s0, [r7]
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fced 	bl	8008290 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>
 80078b6:	4603      	mov	r3, r0
  }
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <LSM6DSV16X_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t *FullScale)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 80078ca:	2300      	movs	r3, #0
 80078cc:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	3320      	adds	r3, #32
 80078d2:	f107 020b 	add.w	r2, r7, #11
 80078d6:	4611      	mov	r1, r2
 80078d8:	4618      	mov	r0, r3
 80078da:	f001 fafb 	bl	8008ed4 <lsm6dsv16x_xl_full_scale_get>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d002      	beq.n	80078ea <LSM6DSV16X_ACC_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 80078e4:	f04f 33ff 	mov.w	r3, #4294967295
 80078e8:	e023      	b.n	8007932 <LSM6DSV16X_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80078ea:	7afb      	ldrb	r3, [r7, #11]
 80078ec:	2b03      	cmp	r3, #3
 80078ee:	d81b      	bhi.n	8007928 <LSM6DSV16X_ACC_GetFullScale+0x68>
 80078f0:	a201      	add	r2, pc, #4	@ (adr r2, 80078f8 <LSM6DSV16X_ACC_GetFullScale+0x38>)
 80078f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f6:	bf00      	nop
 80078f8:	08007909 	.word	0x08007909
 80078fc:	08007911 	.word	0x08007911
 8007900:	08007919 	.word	0x08007919
 8007904:	08007921 	.word	0x08007921
  {
    case LSM6DSV16X_2g:
      *FullScale =  2;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	2202      	movs	r2, #2
 800790c:	601a      	str	r2, [r3, #0]
      break;
 800790e:	e00f      	b.n	8007930 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_4g:
      *FullScale =  4;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	2204      	movs	r2, #4
 8007914:	601a      	str	r2, [r3, #0]
      break;
 8007916:	e00b      	b.n	8007930 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_8g:
      *FullScale =  8;
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	2208      	movs	r2, #8
 800791c:	601a      	str	r2, [r3, #0]
      break;
 800791e:	e007      	b.n	8007930 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_16g:
      *FullScale = 16;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	2210      	movs	r2, #16
 8007924:	601a      	str	r2, [r3, #0]
      break;
 8007926:	e003      	b.n	8007930 <LSM6DSV16X_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 8007928:	f04f 33ff 	mov.w	r3, #4294967295
 800792c:	60fb      	str	r3, [r7, #12]
      break;
 800792e:	bf00      	nop
  }

  return ret;
 8007930:	68fb      	ldr	r3, [r7, #12]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop

0800793c <LSM6DSV16X_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_xl_full_scale_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
           : (FullScale <= 4) ? LSM6DSV16X_4g
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	2b02      	cmp	r3, #2
 800794a:	dd0b      	ble.n	8007964 <LSM6DSV16X_ACC_SetFullScale+0x28>
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2b04      	cmp	r3, #4
 8007950:	dd06      	ble.n	8007960 <LSM6DSV16X_ACC_SetFullScale+0x24>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2b08      	cmp	r3, #8
 8007956:	dc01      	bgt.n	800795c <LSM6DSV16X_ACC_SetFullScale+0x20>
 8007958:	2302      	movs	r3, #2
 800795a:	e004      	b.n	8007966 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 800795c:	2303      	movs	r3, #3
 800795e:	e002      	b.n	8007966 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 8007960:	2301      	movs	r3, #1
 8007962:	e000      	b.n	8007966 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 8007964:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
 8007966:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSV16X_8g
           :                    LSM6DSV16X_16g;

  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	3320      	adds	r3, #32
 800796c:	7bfa      	ldrb	r2, [r7, #15]
 800796e:	4611      	mov	r1, r2
 8007970:	4618      	mov	r0, r3
 8007972:	f001 fa89 	bl	8008e88 <lsm6dsv16x_xl_full_scale_set>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <LSM6DSV16X_ACC_SetFullScale+0x46>
  {
    return LSM6DSV16X_ERROR;
 800797c:	f04f 33ff 	mov.w	r3, #4294967295
 8007980:	e000      	b.n	8007984 <LSM6DSV16X_ACC_SetFullScale+0x48>
  }

  return LSM6DSV16X_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <LSM6DSV16X_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	3320      	adds	r3, #32
 800799a:	f107 0208 	add.w	r2, r7, #8
 800799e:	4611      	mov	r1, r2
 80079a0:	4618      	mov	r0, r3
 80079a2:	f001 fb22 	bl	8008fea <lsm6dsv16x_acceleration_raw_get>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d002      	beq.n	80079b2 <LSM6DSV16X_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 80079ac:	f04f 33ff 	mov.w	r3, #4294967295
 80079b0:	e00c      	b.n	80079cc <LSM6DSV16X_ACC_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 80079b2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80079ba:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80079c2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <LSM6DSV16X_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *Acceleration)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80079de:	f04f 0300 	mov.w	r3, #0
 80079e2:	60fb      	str	r3, [r7, #12]

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	3320      	adds	r3, #32
 80079e8:	f107 0210 	add.w	r2, r7, #16
 80079ec:	4611      	mov	r1, r2
 80079ee:	4618      	mov	r0, r3
 80079f0:	f001 fafb 	bl	8008fea <lsm6dsv16x_acceleration_raw_get>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d002      	beq.n	8007a00 <LSM6DSV16X_ACC_GetAxes+0x2c>
  {
    return LSM6DSV16X_ERROR;
 80079fa:	f04f 33ff 	mov.w	r3, #4294967295
 80079fe:	e03c      	b.n	8007a7a <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 8007a00:	f107 030c 	add.w	r3, r7, #12
 8007a04:	4619      	mov	r1, r3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7ff fdb4 	bl	8007574 <LSM6DSV16X_ACC_GetSensitivity>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d002      	beq.n	8007a18 <LSM6DSV16X_ACC_GetAxes+0x44>
  {
    return LSM6DSV16X_ERROR;
 8007a12:	f04f 33ff 	mov.w	r3, #4294967295
 8007a16:	e030      	b.n	8007a7a <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Calculate the data */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8007a18:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007a1c:	ee07 3a90 	vmov	s15, r3
 8007a20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a24:	edd7 7a03 	vldr	s15, [r7, #12]
 8007a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a30:	ee17 2a90 	vmov	r2, s15
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8007a38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007a3c:	ee07 3a90 	vmov	s15, r3
 8007a40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a44:	edd7 7a03 	vldr	s15, [r7, #12]
 8007a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a50:	ee17 2a90 	vmov	r2, s15
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8007a58:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007a5c:	ee07 3a90 	vmov	s15, r3
 8007a60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a64:	edd7 7a03 	vldr	s15, [r7, #12]
 8007a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a70:	ee17 2a90 	vmov	r2, s15
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3718      	adds	r7, #24
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <LSM6DSV16X_GYRO_Enable>:
  * @brief  Enable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Enable(LSM6DSV16X_Object_t *pObj)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b082      	sub	sp, #8
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d101      	bne.n	8007a98 <LSM6DSV16X_GYRO_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	e014      	b.n	8007ac2 <LSM6DSV16X_GYRO_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSV16X_OK)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f103 0220 	add.w	r2, r3, #32
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	4610      	mov	r0, r2
 8007aa8:	f000 ffc4 	bl	8008a34 <lsm6dsv16x_gy_data_rate_set>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d002      	beq.n	8007ab8 <LSM6DSV16X_GYRO_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 8007ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ab6:	e004      	b.n	8007ac2 <LSM6DSV16X_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <LSM6DSV16X_GYRO_Disable>:
  * @brief  Disable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Disable(LSM6DSV16X_Object_t *pObj)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b082      	sub	sp, #8
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <LSM6DSV16X_GYRO_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 8007adc:	2300      	movs	r3, #0
 8007ade:	e01f      	b.n	8007b20 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSV16X_OK)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f103 0220 	add.w	r2, r3, #32
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	3334      	adds	r3, #52	@ 0x34
 8007aea:	4619      	mov	r1, r3
 8007aec:	4610      	mov	r0, r2
 8007aee:	f000 fff1 	bl	8008ad4 <lsm6dsv16x_gy_data_rate_get>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d002      	beq.n	8007afe <LSM6DSV16X_GYRO_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 8007af8:	f04f 33ff 	mov.w	r3, #4294967295
 8007afc:	e010      	b.n	8007b20 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	3320      	adds	r3, #32
 8007b02:	2100      	movs	r1, #0
 8007b04:	4618      	mov	r0, r3
 8007b06:	f000 ff95 	bl	8008a34 <lsm6dsv16x_gy_data_rate_set>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d002      	beq.n	8007b16 <LSM6DSV16X_GYRO_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 8007b10:	f04f 33ff 	mov.w	r3, #4294967295
 8007b14:	e004      	b.n	8007b20 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3708      	adds	r7, #8
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <LSM6DSV16X_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8007b32:	2300      	movs	r3, #0
 8007b34:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	3320      	adds	r3, #32
 8007b3a:	f107 020b 	add.w	r2, r7, #11
 8007b3e:	4611      	mov	r1, r2
 8007b40:	4618      	mov	r0, r3
 8007b42:	f001 f949 	bl	8008dd8 <lsm6dsv16x_gy_full_scale_get>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d002      	beq.n	8007b52 <LSM6DSV16X_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8007b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b50:	e03d      	b.n	8007bce <LSM6DSV16X_GYRO_GetSensitivity+0xa6>
  }

  /* Store the sensitivity based on actual full scale */
  switch (full_scale)
 8007b52:	7afb      	ldrb	r3, [r7, #11]
 8007b54:	2b0c      	cmp	r3, #12
 8007b56:	d835      	bhi.n	8007bc4 <LSM6DSV16X_GYRO_GetSensitivity+0x9c>
 8007b58:	a201      	add	r2, pc, #4	@ (adr r2, 8007b60 <LSM6DSV16X_GYRO_GetSensitivity+0x38>)
 8007b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5e:	bf00      	nop
 8007b60:	08007b95 	.word	0x08007b95
 8007b64:	08007b9d 	.word	0x08007b9d
 8007b68:	08007ba5 	.word	0x08007ba5
 8007b6c:	08007bad 	.word	0x08007bad
 8007b70:	08007bb5 	.word	0x08007bb5
 8007b74:	08007bc5 	.word	0x08007bc5
 8007b78:	08007bc5 	.word	0x08007bc5
 8007b7c:	08007bc5 	.word	0x08007bc5
 8007b80:	08007bc5 	.word	0x08007bc5
 8007b84:	08007bc5 	.word	0x08007bc5
 8007b88:	08007bc5 	.word	0x08007bc5
 8007b8c:	08007bc5 	.word	0x08007bc5
 8007b90:	08007bbd 	.word	0x08007bbd
  {
    case LSM6DSV16X_125dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_125DPS;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	4a10      	ldr	r2, [pc, #64]	@ (8007bd8 <LSM6DSV16X_GYRO_GetSensitivity+0xb0>)
 8007b98:	601a      	str	r2, [r3, #0]
      break;
 8007b9a:	e017      	b.n	8007bcc <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_250dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_250DPS;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	4a0f      	ldr	r2, [pc, #60]	@ (8007bdc <LSM6DSV16X_GYRO_GetSensitivity+0xb4>)
 8007ba0:	601a      	str	r2, [r3, #0]
      break;
 8007ba2:	e013      	b.n	8007bcc <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_500dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_500DPS;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	4a0e      	ldr	r2, [pc, #56]	@ (8007be0 <LSM6DSV16X_GYRO_GetSensitivity+0xb8>)
 8007ba8:	601a      	str	r2, [r3, #0]
      break;
 8007baa:	e00f      	b.n	8007bcc <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_1000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_1000DPS;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	4a0d      	ldr	r2, [pc, #52]	@ (8007be4 <LSM6DSV16X_GYRO_GetSensitivity+0xbc>)
 8007bb0:	601a      	str	r2, [r3, #0]
      break;
 8007bb2:	e00b      	b.n	8007bcc <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_2000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_2000DPS;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	4a0c      	ldr	r2, [pc, #48]	@ (8007be8 <LSM6DSV16X_GYRO_GetSensitivity+0xc0>)
 8007bb8:	601a      	str	r2, [r3, #0]
      break;
 8007bba:	e007      	b.n	8007bcc <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_4000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_4000DPS;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	4a0b      	ldr	r2, [pc, #44]	@ (8007bec <LSM6DSV16X_GYRO_GetSensitivity+0xc4>)
 8007bc0:	601a      	str	r2, [r3, #0]
      break;
 8007bc2:	e003      	b.n	8007bcc <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    default:
      ret = LSM6DSV16X_ERROR;
 8007bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8007bc8:	60fb      	str	r3, [r7, #12]
      break;
 8007bca:	bf00      	nop
  }

  return ret;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	408c0000 	.word	0x408c0000
 8007bdc:	410c0000 	.word	0x410c0000
 8007be0:	418c0000 	.word	0x418c0000
 8007be4:	420c0000 	.word	0x420c0000
 8007be8:	428c0000 	.word	0x428c0000
 8007bec:	430c0000 	.word	0x430c0000

08007bf0 <LSM6DSV16X_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	3320      	adds	r3, #32
 8007c02:	f107 020b 	add.w	r2, r7, #11
 8007c06:	4611      	mov	r1, r2
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f000 ff63 	bl	8008ad4 <lsm6dsv16x_gy_data_rate_get>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d002      	beq.n	8007c1a <LSM6DSV16X_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8007c14:	f04f 33ff 	mov.w	r3, #4294967295
 8007c18:	e0ea      	b.n	8007df0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x200>
  }

  switch (odr_low_level)
 8007c1a:	7afb      	ldrb	r3, [r7, #11]
 8007c1c:	2b2c      	cmp	r3, #44	@ 0x2c
 8007c1e:	f200 80e2 	bhi.w	8007de6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1f6>
 8007c22:	a201      	add	r2, pc, #4	@ (adr r2, 8007c28 <LSM6DSV16X_GYRO_GetOutputDataRate+0x38>)
 8007c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c28:	08007cdd 	.word	0x08007cdd
 8007c2c:	08007ce7 	.word	0x08007ce7
 8007c30:	08007cef 	.word	0x08007cef
 8007c34:	08007cff 	.word	0x08007cff
 8007c38:	08007d17 	.word	0x08007d17
 8007c3c:	08007d2f 	.word	0x08007d2f
 8007c40:	08007d47 	.word	0x08007d47
 8007c44:	08007d5f 	.word	0x08007d5f
 8007c48:	08007d77 	.word	0x08007d77
 8007c4c:	08007d8f 	.word	0x08007d8f
 8007c50:	08007da7 	.word	0x08007da7
 8007c54:	08007dbf 	.word	0x08007dbf
 8007c58:	08007dd7 	.word	0x08007dd7
 8007c5c:	08007de7 	.word	0x08007de7
 8007c60:	08007de7 	.word	0x08007de7
 8007c64:	08007de7 	.word	0x08007de7
 8007c68:	08007de7 	.word	0x08007de7
 8007c6c:	08007de7 	.word	0x08007de7
 8007c70:	08007de7 	.word	0x08007de7
 8007c74:	08007d07 	.word	0x08007d07
 8007c78:	08007d1f 	.word	0x08007d1f
 8007c7c:	08007d37 	.word	0x08007d37
 8007c80:	08007d4f 	.word	0x08007d4f
 8007c84:	08007d67 	.word	0x08007d67
 8007c88:	08007d7f 	.word	0x08007d7f
 8007c8c:	08007d97 	.word	0x08007d97
 8007c90:	08007daf 	.word	0x08007daf
 8007c94:	08007dc7 	.word	0x08007dc7
 8007c98:	08007ddf 	.word	0x08007ddf
 8007c9c:	08007de7 	.word	0x08007de7
 8007ca0:	08007de7 	.word	0x08007de7
 8007ca4:	08007de7 	.word	0x08007de7
 8007ca8:	08007de7 	.word	0x08007de7
 8007cac:	08007de7 	.word	0x08007de7
 8007cb0:	08007de7 	.word	0x08007de7
 8007cb4:	08007cf7 	.word	0x08007cf7
 8007cb8:	08007d0f 	.word	0x08007d0f
 8007cbc:	08007d27 	.word	0x08007d27
 8007cc0:	08007d3f 	.word	0x08007d3f
 8007cc4:	08007d57 	.word	0x08007d57
 8007cc8:	08007d6f 	.word	0x08007d6f
 8007ccc:	08007d87 	.word	0x08007d87
 8007cd0:	08007d9f 	.word	0x08007d9f
 8007cd4:	08007db7 	.word	0x08007db7
 8007cd8:	08007dcf 	.word	0x08007dcf
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	f04f 0200 	mov.w	r2, #0
 8007ce2:	601a      	str	r2, [r3, #0]
      break;
 8007ce4:	e083      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *Odr = 1.875f;
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	4a43      	ldr	r2, [pc, #268]	@ (8007df8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x208>)
 8007cea:	601a      	str	r2, [r3, #0]
      break;
 8007cec:	e07f      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	4a42      	ldr	r2, [pc, #264]	@ (8007dfc <LSM6DSV16X_GYRO_GetOutputDataRate+0x20c>)
 8007cf2:	601a      	str	r2, [r3, #0]
      break;
 8007cf4:	e07b      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_12Hz5:
      *Odr = 12.5f;
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	4a41      	ldr	r2, [pc, #260]	@ (8007e00 <LSM6DSV16X_GYRO_GetOutputDataRate+0x210>)
 8007cfa:	601a      	str	r2, [r3, #0]
      break;
 8007cfc:	e077      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	4a40      	ldr	r2, [pc, #256]	@ (8007e04 <LSM6DSV16X_GYRO_GetOutputDataRate+0x214>)
 8007d02:	601a      	str	r2, [r3, #0]
      break;
 8007d04:	e073      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_15Hz625:
      *Odr = 15.625f;
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	4a3f      	ldr	r2, [pc, #252]	@ (8007e08 <LSM6DSV16X_GYRO_GetOutputDataRate+0x218>)
 8007d0a:	601a      	str	r2, [r3, #0]
      break;
 8007d0c:	e06f      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_25Hz:
      *Odr = 25.0f;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	4a3e      	ldr	r2, [pc, #248]	@ (8007e0c <LSM6DSV16X_GYRO_GetOutputDataRate+0x21c>)
 8007d12:	601a      	str	r2, [r3, #0]
      break;
 8007d14:	e06b      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	4a3d      	ldr	r2, [pc, #244]	@ (8007e10 <LSM6DSV16X_GYRO_GetOutputDataRate+0x220>)
 8007d1a:	601a      	str	r2, [r3, #0]
      break;
 8007d1c:	e067      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_31Hz25:
      *Odr = 31.25f;
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	4a3c      	ldr	r2, [pc, #240]	@ (8007e14 <LSM6DSV16X_GYRO_GetOutputDataRate+0x224>)
 8007d22:	601a      	str	r2, [r3, #0]
      break;
 8007d24:	e063      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_50Hz:
      *Odr = 50.0f;
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	4a3b      	ldr	r2, [pc, #236]	@ (8007e18 <LSM6DSV16X_GYRO_GetOutputDataRate+0x228>)
 8007d2a:	601a      	str	r2, [r3, #0]
      break;
 8007d2c:	e05f      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	4a3a      	ldr	r2, [pc, #232]	@ (8007e1c <LSM6DSV16X_GYRO_GetOutputDataRate+0x22c>)
 8007d32:	601a      	str	r2, [r3, #0]
      break;
 8007d34:	e05b      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_62Hz5:
      *Odr = 62.5f;
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	4a39      	ldr	r2, [pc, #228]	@ (8007e20 <LSM6DSV16X_GYRO_GetOutputDataRate+0x230>)
 8007d3a:	601a      	str	r2, [r3, #0]
      break;
 8007d3c:	e057      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_100Hz:
      *Odr = 100.0f;
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	4a38      	ldr	r2, [pc, #224]	@ (8007e24 <LSM6DSV16X_GYRO_GetOutputDataRate+0x234>)
 8007d42:	601a      	str	r2, [r3, #0]
      break;
 8007d44:	e053      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	4a37      	ldr	r2, [pc, #220]	@ (8007e28 <LSM6DSV16X_GYRO_GetOutputDataRate+0x238>)
 8007d4a:	601a      	str	r2, [r3, #0]
      break;
 8007d4c:	e04f      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_125Hz:
      *Odr = 125.0f;
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	4a36      	ldr	r2, [pc, #216]	@ (8007e2c <LSM6DSV16X_GYRO_GetOutputDataRate+0x23c>)
 8007d52:	601a      	str	r2, [r3, #0]
      break;
 8007d54:	e04b      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_200Hz:
      *Odr = 200.0f;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	4a35      	ldr	r2, [pc, #212]	@ (8007e30 <LSM6DSV16X_GYRO_GetOutputDataRate+0x240>)
 8007d5a:	601a      	str	r2, [r3, #0]
      break;
 8007d5c:	e047      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	4a34      	ldr	r2, [pc, #208]	@ (8007e34 <LSM6DSV16X_GYRO_GetOutputDataRate+0x244>)
 8007d62:	601a      	str	r2, [r3, #0]
      break;
 8007d64:	e043      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_250Hz:
      *Odr = 250.0f;
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	4a33      	ldr	r2, [pc, #204]	@ (8007e38 <LSM6DSV16X_GYRO_GetOutputDataRate+0x248>)
 8007d6a:	601a      	str	r2, [r3, #0]
      break;
 8007d6c:	e03f      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_400Hz:
      *Odr = 400.0f;
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	4a32      	ldr	r2, [pc, #200]	@ (8007e3c <LSM6DSV16X_GYRO_GetOutputDataRate+0x24c>)
 8007d72:	601a      	str	r2, [r3, #0]
      break;
 8007d74:	e03b      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	4a31      	ldr	r2, [pc, #196]	@ (8007e40 <LSM6DSV16X_GYRO_GetOutputDataRate+0x250>)
 8007d7a:	601a      	str	r2, [r3, #0]
      break;
 8007d7c:	e037      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_500Hz:
      *Odr = 500.0f;
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	4a30      	ldr	r2, [pc, #192]	@ (8007e44 <LSM6DSV16X_GYRO_GetOutputDataRate+0x254>)
 8007d82:	601a      	str	r2, [r3, #0]
      break;
 8007d84:	e033      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_800Hz:
      *Odr = 800.0f;
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	4a2f      	ldr	r2, [pc, #188]	@ (8007e48 <LSM6DSV16X_GYRO_GetOutputDataRate+0x258>)
 8007d8a:	601a      	str	r2, [r3, #0]
      break;
 8007d8c:	e02f      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	4a2e      	ldr	r2, [pc, #184]	@ (8007e4c <LSM6DSV16X_GYRO_GetOutputDataRate+0x25c>)
 8007d92:	601a      	str	r2, [r3, #0]
      break;
 8007d94:	e02b      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_1000Hz:
      *Odr = 1000.0f;
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	4a2d      	ldr	r2, [pc, #180]	@ (8007e50 <LSM6DSV16X_GYRO_GetOutputDataRate+0x260>)
 8007d9a:	601a      	str	r2, [r3, #0]
      break;
 8007d9c:	e027      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_1600Hz:
      *Odr = 1600.0f;
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	4a2c      	ldr	r2, [pc, #176]	@ (8007e54 <LSM6DSV16X_GYRO_GetOutputDataRate+0x264>)
 8007da2:	601a      	str	r2, [r3, #0]
      break;
 8007da4:	e023      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	4a2b      	ldr	r2, [pc, #172]	@ (8007e58 <LSM6DSV16X_GYRO_GetOutputDataRate+0x268>)
 8007daa:	601a      	str	r2, [r3, #0]
      break;
 8007dac:	e01f      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_2000Hz:
      *Odr = 2000.0f;
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	4a2a      	ldr	r2, [pc, #168]	@ (8007e5c <LSM6DSV16X_GYRO_GetOutputDataRate+0x26c>)
 8007db2:	601a      	str	r2, [r3, #0]
      break;
 8007db4:	e01b      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_3200Hz:
      *Odr = 3200.0f;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	4a29      	ldr	r2, [pc, #164]	@ (8007e60 <LSM6DSV16X_GYRO_GetOutputDataRate+0x270>)
 8007dba:	601a      	str	r2, [r3, #0]
      break;
 8007dbc:	e017      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	4a28      	ldr	r2, [pc, #160]	@ (8007e64 <LSM6DSV16X_GYRO_GetOutputDataRate+0x274>)
 8007dc2:	601a      	str	r2, [r3, #0]
      break;
 8007dc4:	e013      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_4000Hz:
      *Odr = 4000.0f;
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	4a27      	ldr	r2, [pc, #156]	@ (8007e68 <LSM6DSV16X_GYRO_GetOutputDataRate+0x278>)
 8007dca:	601a      	str	r2, [r3, #0]
      break;
 8007dcc:	e00f      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_6400Hz:
      *Odr = 6400.0f;
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	4a26      	ldr	r2, [pc, #152]	@ (8007e6c <LSM6DSV16X_GYRO_GetOutputDataRate+0x27c>)
 8007dd2:	601a      	str	r2, [r3, #0]
      break;
 8007dd4:	e00b      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	4a25      	ldr	r2, [pc, #148]	@ (8007e70 <LSM6DSV16X_GYRO_GetOutputDataRate+0x280>)
 8007dda:	601a      	str	r2, [r3, #0]
      break;
 8007ddc:	e007      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_8000Hz:
      *Odr = 8000.0f;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	4a24      	ldr	r2, [pc, #144]	@ (8007e74 <LSM6DSV16X_GYRO_GetOutputDataRate+0x284>)
 8007de2:	601a      	str	r2, [r3, #0]
      break;
 8007de4:	e003      	b.n	8007dee <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    default:
      ret = LSM6DSV16X_ERROR;
 8007de6:	f04f 33ff 	mov.w	r3, #4294967295
 8007dea:	60fb      	str	r3, [r7, #12]
      break;
 8007dec:	bf00      	nop
  }

  return ret;
 8007dee:	68fb      	ldr	r3, [r7, #12]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	3ff00000 	.word	0x3ff00000
 8007dfc:	40f00000 	.word	0x40f00000
 8007e00:	41480000 	.word	0x41480000
 8007e04:	41700000 	.word	0x41700000
 8007e08:	417a0000 	.word	0x417a0000
 8007e0c:	41c80000 	.word	0x41c80000
 8007e10:	41f00000 	.word	0x41f00000
 8007e14:	41fa0000 	.word	0x41fa0000
 8007e18:	42480000 	.word	0x42480000
 8007e1c:	42700000 	.word	0x42700000
 8007e20:	427a0000 	.word	0x427a0000
 8007e24:	42c80000 	.word	0x42c80000
 8007e28:	42f00000 	.word	0x42f00000
 8007e2c:	42fa0000 	.word	0x42fa0000
 8007e30:	43480000 	.word	0x43480000
 8007e34:	43700000 	.word	0x43700000
 8007e38:	437a0000 	.word	0x437a0000
 8007e3c:	43c80000 	.word	0x43c80000
 8007e40:	43f00000 	.word	0x43f00000
 8007e44:	43fa0000 	.word	0x43fa0000
 8007e48:	44480000 	.word	0x44480000
 8007e4c:	44700000 	.word	0x44700000
 8007e50:	447a0000 	.word	0x447a0000
 8007e54:	44c80000 	.word	0x44c80000
 8007e58:	44f00000 	.word	0x44f00000
 8007e5c:	44fa0000 	.word	0x44fa0000
 8007e60:	45480000 	.word	0x45480000
 8007e64:	45700000 	.word	0x45700000
 8007e68:	457a0000 	.word	0x457a0000
 8007e6c:	45c80000 	.word	0x45c80000
 8007e70:	45f00000 	.word	0x45f00000
 8007e74:	45fa0000 	.word	0x45fa0000

08007e78 <LSM6DSV16X_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->gyro_is_enabled == 1U)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d106      	bne.n	8007e9c <LSM6DSV16X_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8007e8e:	ed97 0a00 	vldr	s0, [r7]
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fa94 	bl	80083c0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	e005      	b.n	8007ea8 <LSM6DSV16X_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8007e9c:	ed97 0a00 	vldr	s0, [r7]
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 fb23 	bl	80084ec <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>
 8007ea6:	4603      	mov	r3, r0
  }
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <LSM6DSV16X_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t  *FullScale)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	3320      	adds	r3, #32
 8007ec2:	f107 020b 	add.w	r2, r7, #11
 8007ec6:	4611      	mov	r1, r2
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f000 ff85 	bl	8008dd8 <lsm6dsv16x_gy_full_scale_get>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d002      	beq.n	8007eda <LSM6DSV16X_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8007ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed8:	e041      	b.n	8007f5e <LSM6DSV16X_GYRO_GetFullScale+0xae>
  }

  switch (fs_low_level)
 8007eda:	7afb      	ldrb	r3, [r7, #11]
 8007edc:	2b0c      	cmp	r3, #12
 8007ede:	d839      	bhi.n	8007f54 <LSM6DSV16X_GYRO_GetFullScale+0xa4>
 8007ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8007ee8 <LSM6DSV16X_GYRO_GetFullScale+0x38>)
 8007ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee6:	bf00      	nop
 8007ee8:	08007f1d 	.word	0x08007f1d
 8007eec:	08007f25 	.word	0x08007f25
 8007ef0:	08007f2d 	.word	0x08007f2d
 8007ef4:	08007f37 	.word	0x08007f37
 8007ef8:	08007f41 	.word	0x08007f41
 8007efc:	08007f55 	.word	0x08007f55
 8007f00:	08007f55 	.word	0x08007f55
 8007f04:	08007f55 	.word	0x08007f55
 8007f08:	08007f55 	.word	0x08007f55
 8007f0c:	08007f55 	.word	0x08007f55
 8007f10:	08007f55 	.word	0x08007f55
 8007f14:	08007f55 	.word	0x08007f55
 8007f18:	08007f4b 	.word	0x08007f4b
  {
    case LSM6DSV16X_125dps:
      *FullScale =  125;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	227d      	movs	r2, #125	@ 0x7d
 8007f20:	601a      	str	r2, [r3, #0]
      break;
 8007f22:	e01b      	b.n	8007f5c <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_250dps:
      *FullScale =  250;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	22fa      	movs	r2, #250	@ 0xfa
 8007f28:	601a      	str	r2, [r3, #0]
      break;
 8007f2a:	e017      	b.n	8007f5c <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_500dps:
      *FullScale =  500;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8007f32:	601a      	str	r2, [r3, #0]
      break;
 8007f34:	e012      	b.n	8007f5c <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_1000dps:
      *FullScale = 1000;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007f3c:	601a      	str	r2, [r3, #0]
      break;
 8007f3e:	e00d      	b.n	8007f5c <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_2000dps:
      *FullScale = 2000;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8007f46:	601a      	str	r2, [r3, #0]
      break;
 8007f48:	e008      	b.n	8007f5c <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_4000dps:
      *FullScale = 4000;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8007f50:	601a      	str	r2, [r3, #0]
      break;
 8007f52:	e003      	b.n	8007f5c <LSM6DSV16X_GYRO_GetFullScale+0xac>

    default:
      ret = LSM6DSV16X_ERROR;
 8007f54:	f04f 33ff 	mov.w	r3, #4294967295
 8007f58:	60fb      	str	r3, [r7, #12]
      break;
 8007f5a:	bf00      	nop
  }

  return ret;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop

08007f68 <LSM6DSV16X_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_gy_full_scale_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
           : (FullScale <= 250)  ? LSM6DSV16X_250dps
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	2b7d      	cmp	r3, #125	@ 0x7d
 8007f76:	dd18      	ble.n	8007faa <LSM6DSV16X_GYRO_SetFullScale+0x42>
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	2bfa      	cmp	r3, #250	@ 0xfa
 8007f7c:	dd13      	ble.n	8007fa6 <LSM6DSV16X_GYRO_SetFullScale+0x3e>
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007f84:	dd0d      	ble.n	8007fa2 <LSM6DSV16X_GYRO_SetFullScale+0x3a>
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f8c:	dd07      	ble.n	8007f9e <LSM6DSV16X_GYRO_SetFullScale+0x36>
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8007f94:	dc01      	bgt.n	8007f9a <LSM6DSV16X_GYRO_SetFullScale+0x32>
 8007f96:	2304      	movs	r3, #4
 8007f98:	e008      	b.n	8007fac <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8007f9a:	230c      	movs	r3, #12
 8007f9c:	e006      	b.n	8007fac <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e004      	b.n	8007fac <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	e002      	b.n	8007fac <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e000      	b.n	8007fac <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8007faa:	2300      	movs	r3, #0
  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
 8007fac:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSV16X_500dps
           : (FullScale <= 1000) ? LSM6DSV16X_1000dps
           : (FullScale <= 2000) ? LSM6DSV16X_2000dps
           :                       LSM6DSV16X_4000dps;

  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	3320      	adds	r3, #32
 8007fb2:	7bfa      	ldrb	r2, [r7, #15]
 8007fb4:	4611      	mov	r1, r2
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f000 fee8 	bl	8008d8c <lsm6dsv16x_gy_full_scale_set>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d002      	beq.n	8007fc8 <LSM6DSV16X_GYRO_SetFullScale+0x60>
  {
    return LSM6DSV16X_ERROR;
 8007fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fc6:	e000      	b.n	8007fca <LSM6DSV16X_GYRO_SetFullScale+0x62>
  }

  return LSM6DSV16X_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <LSM6DSV16X_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b084      	sub	sp, #16
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
 8007fda:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	3320      	adds	r3, #32
 8007fe0:	f107 0208 	add.w	r2, r7, #8
 8007fe4:	4611      	mov	r1, r2
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 ffb2 	bl	8008f50 <lsm6dsv16x_angular_rate_raw_get>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d002      	beq.n	8007ff8 <LSM6DSV16X_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 8007ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ff6:	e00c      	b.n	8008012 <LSM6DSV16X_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 8007ff8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8008000:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8008008:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <LSM6DSV16X_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *AngularRate)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b086      	sub	sp, #24
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8008024:	f04f 0300 	mov.w	r3, #0
 8008028:	60fb      	str	r3, [r7, #12]

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	3320      	adds	r3, #32
 800802e:	f107 0210 	add.w	r2, r7, #16
 8008032:	4611      	mov	r1, r2
 8008034:	4618      	mov	r0, r3
 8008036:	f000 ff8b 	bl	8008f50 <lsm6dsv16x_angular_rate_raw_get>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d002      	beq.n	8008046 <LSM6DSV16X_GYRO_GetAxes+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8008040:	f04f 33ff 	mov.w	r3, #4294967295
 8008044:	e03c      	b.n	80080c0 <LSM6DSV16X_GYRO_GetAxes+0xa6>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 8008046:	f107 030c 	add.w	r3, r7, #12
 800804a:	4619      	mov	r1, r3
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f7ff fd6b 	bl	8007b28 <LSM6DSV16X_GYRO_GetSensitivity>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d002      	beq.n	800805e <LSM6DSV16X_GYRO_GetAxes+0x44>
  {
    return LSM6DSV16X_ERROR;
 8008058:	f04f 33ff 	mov.w	r3, #4294967295
 800805c:	e030      	b.n	80080c0 <LSM6DSV16X_GYRO_GetAxes+0xa6>
  }

  /* Calculate the data */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800805e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008062:	ee07 3a90 	vmov	s15, r3
 8008066:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800806a:	edd7 7a03 	vldr	s15, [r7, #12]
 800806e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008072:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008076:	ee17 2a90 	vmov	r2, s15
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800807e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008082:	ee07 3a90 	vmov	s15, r3
 8008086:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800808a:	edd7 7a03 	vldr	s15, [r7, #12]
 800808e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008092:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008096:	ee17 2a90 	vmov	r2, s15
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800809e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80080a2:	ee07 3a90 	vmov	s15, r3
 80080a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80080aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80080ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080b6:	ee17 2a90 	vmov	r2, s15
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3718      	adds	r7, #24
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <LSM6DSV16X_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Write_Reg(LSM6DSV16X_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	460b      	mov	r3, r1
 80080d2:	70fb      	strb	r3, [r7, #3]
 80080d4:	4613      	mov	r3, r2
 80080d6:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsv16x_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSV16X_OK)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f103 0020 	add.w	r0, r3, #32
 80080de:	1cba      	adds	r2, r7, #2
 80080e0:	78f9      	ldrb	r1, [r7, #3]
 80080e2:	2301      	movs	r3, #1
 80080e4:	f000 fae4 	bl	80086b0 <lsm6dsv16x_write_reg>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d002      	beq.n	80080f4 <LSM6DSV16X_Write_Reg+0x2c>
  {
    return LSM6DSV16X_ERROR;
 80080ee:	f04f 33ff 	mov.w	r3, #4294967295
 80080f2:	e000      	b.n	80080f6 <LSM6DSV16X_Write_Reg+0x2e>
  }

  return LSM6DSV16X_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3708      	adds	r7, #8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <LSM6DSV16X_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LSM6DSV16X_MAIN_MEM_BANK, 1 - LSM6DSV16X_EMBED_FUNC_MEM_BANK, 2 - LSM6DSV16X_SENSOR_HUB_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Set_Mem_Bank(LSM6DSV16X_Object_t *pObj, uint8_t Val)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b084      	sub	sp, #16
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	460b      	mov	r3, r1
 8008108:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSV16X_OK;
 800810a:	2300      	movs	r3, #0
 800810c:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_mem_bank_t reg;

  reg = (Val == 1U) ? LSM6DSV16X_EMBED_FUNC_MEM_BANK
        : (Val == 2U) ? LSM6DSV16X_SENSOR_HUB_MEM_BANK
 800810e:	78fb      	ldrb	r3, [r7, #3]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d006      	beq.n	8008122 <LSM6DSV16X_Set_Mem_Bank+0x24>
 8008114:	78fb      	ldrb	r3, [r7, #3]
 8008116:	2b02      	cmp	r3, #2
 8008118:	d101      	bne.n	800811e <LSM6DSV16X_Set_Mem_Bank+0x20>
 800811a:	2302      	movs	r3, #2
 800811c:	e002      	b.n	8008124 <LSM6DSV16X_Set_Mem_Bank+0x26>
 800811e:	2300      	movs	r3, #0
 8008120:	e000      	b.n	8008124 <LSM6DSV16X_Set_Mem_Bank+0x26>
 8008122:	2301      	movs	r3, #1
  reg = (Val == 1U) ? LSM6DSV16X_EMBED_FUNC_MEM_BANK
 8008124:	72fb      	strb	r3, [r7, #11]
        :               LSM6DSV16X_MAIN_MEM_BANK;

  if (lsm6dsv16x_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSV16X_OK)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	3320      	adds	r3, #32
 800812a:	7afa      	ldrb	r2, [r7, #11]
 800812c:	4611      	mov	r1, r2
 800812e:	4618      	mov	r0, r3
 8008130:	f000 fadc 	bl	80086ec <lsm6dsv16x_mem_bank_set>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d002      	beq.n	8008140 <LSM6DSV16X_Set_Mem_Bank+0x42>
  {
    ret = LSM6DSV16X_ERROR;
 800813a:	f04f 33ff 	mov.w	r3, #4294967295
 800813e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008140:	68fb      	ldr	r3, [r7, #12]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
	...

0800814c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
            : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8008158:	edd7 7a00 	vldr	s15, [r7]
 800815c:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 8008160:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008168:	d801      	bhi.n	800816e <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x22>
 800816a:	2301      	movs	r3, #1
 800816c:	e06e      	b.n	800824c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800816e:	edd7 7a00 	vldr	s15, [r7]
 8008172:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8008176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800817a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800817e:	d801      	bhi.n	8008184 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x38>
 8008180:	2302      	movs	r3, #2
 8008182:	e063      	b.n	800824c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008184:	edd7 7a00 	vldr	s15, [r7]
 8008188:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800818c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008194:	d801      	bhi.n	800819a <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8008196:	2303      	movs	r3, #3
 8008198:	e058      	b.n	800824c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800819a:	edd7 7a00 	vldr	s15, [r7]
 800819e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80081a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081aa:	d801      	bhi.n	80081b0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x64>
 80081ac:	2304      	movs	r3, #4
 80081ae:	e04d      	b.n	800824c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 80081b0:	edd7 7a00 	vldr	s15, [r7]
 80081b4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8008274 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x128>
 80081b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081c0:	d801      	bhi.n	80081c6 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80081c2:	2305      	movs	r3, #5
 80081c4:	e042      	b.n	800824c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 80081c6:	edd7 7a00 	vldr	s15, [r7]
 80081ca:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8008278 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x12c>
 80081ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081d6:	d801      	bhi.n	80081dc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x90>
 80081d8:	2306      	movs	r3, #6
 80081da:	e037      	b.n	800824c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 80081dc:	edd7 7a00 	vldr	s15, [r7]
 80081e0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800827c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x130>
 80081e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081ec:	d801      	bhi.n	80081f2 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80081ee:	2307      	movs	r3, #7
 80081f0:	e02c      	b.n	800824c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 80081f2:	edd7 7a00 	vldr	s15, [r7]
 80081f6:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8008280 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x134>
 80081fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008202:	d801      	bhi.n	8008208 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8008204:	2308      	movs	r3, #8
 8008206:	e021      	b.n	800824c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008208:	edd7 7a00 	vldr	s15, [r7]
 800820c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8008284 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x138>
 8008210:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008218:	d801      	bhi.n	800821e <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800821a:	2309      	movs	r3, #9
 800821c:	e016      	b.n	800824c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800821e:	edd7 7a00 	vldr	s15, [r7]
 8008222:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8008288 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8008226:	eef4 7ac7 	vcmpe.f32	s15, s14
 800822a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800822e:	d801      	bhi.n	8008234 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8008230:	230a      	movs	r3, #10
 8008232:	e00b      	b.n	800824c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008234:	edd7 7a00 	vldr	s15, [r7]
 8008238:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800828c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x140>
 800823c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008244:	d801      	bhi.n	800824a <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xfe>
 8008246:	230b      	movs	r3, #11
 8008248:	e000      	b.n	800824c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800824a:	230c      	movs	r3, #12
  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 800824c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	3320      	adds	r3, #32
 8008252:	7bfa      	ldrb	r2, [r7, #15]
 8008254:	4611      	mov	r1, r2
 8008256:	4618      	mov	r0, r3
 8008258:	f000 fa8a 	bl	8008770 <lsm6dsv16x_xl_data_rate_set>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d002      	beq.n	8008268 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11c>
  {
    return LSM6DSV16X_ERROR;
 8008262:	f04f 33ff 	mov.w	r3, #4294967295
 8008266:	e000      	b.n	800826a <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11e>
  }

  return LSM6DSV16X_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	42700000 	.word	0x42700000
 8008278:	42f00000 	.word	0x42f00000
 800827c:	43700000 	.word	0x43700000
 8008280:	43f00000 	.word	0x43f00000
 8008284:	44700000 	.word	0x44700000
 8008288:	44f00000 	.word	0x44f00000
 800828c:	45700000 	.word	0x45700000

08008290 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
                  : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 800829c:	edd7 7a00 	vldr	s15, [r7]
 80082a0:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 80082a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80082a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ac:	d801      	bhi.n	80082b2 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x22>
 80082ae:	2301      	movs	r3, #1
 80082b0:	e06e      	b.n	8008390 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 80082b2:	edd7 7a00 	vldr	s15, [r7]
 80082b6:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 80082ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80082be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082c2:	d801      	bhi.n	80082c8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x38>
 80082c4:	2302      	movs	r3, #2
 80082c6:	e063      	b.n	8008390 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 80082c8:	edd7 7a00 	vldr	s15, [r7]
 80082cc:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80082d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80082d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082d8:	d801      	bhi.n	80082de <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80082da:	2303      	movs	r3, #3
 80082dc:	e058      	b.n	8008390 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 80082de:	edd7 7a00 	vldr	s15, [r7]
 80082e2:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80082e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80082ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ee:	d801      	bhi.n	80082f4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x64>
 80082f0:	2304      	movs	r3, #4
 80082f2:	e04d      	b.n	8008390 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 80082f4:	edd7 7a00 	vldr	s15, [r7]
 80082f8:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80083a4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x114>
 80082fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008304:	d801      	bhi.n	800830a <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8008306:	2305      	movs	r3, #5
 8008308:	e042      	b.n	8008390 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800830a:	edd7 7a00 	vldr	s15, [r7]
 800830e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80083a8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x118>
 8008312:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800831a:	d801      	bhi.n	8008320 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x90>
 800831c:	2306      	movs	r3, #6
 800831e:	e037      	b.n	8008390 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008320:	edd7 7a00 	vldr	s15, [r7]
 8008324:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80083ac <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8008328:	eef4 7ac7 	vcmpe.f32	s15, s14
 800832c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008330:	d801      	bhi.n	8008336 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8008332:	2307      	movs	r3, #7
 8008334:	e02c      	b.n	8008390 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008336:	edd7 7a00 	vldr	s15, [r7]
 800833a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80083b0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x120>
 800833e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008346:	d801      	bhi.n	800834c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8008348:	2308      	movs	r3, #8
 800834a:	e021      	b.n	8008390 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800834c:	edd7 7a00 	vldr	s15, [r7]
 8008350:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80083b4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x124>
 8008354:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800835c:	d801      	bhi.n	8008362 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800835e:	2309      	movs	r3, #9
 8008360:	e016      	b.n	8008390 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008362:	edd7 7a00 	vldr	s15, [r7]
 8008366:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80083b8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x128>
 800836a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800836e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008372:	d801      	bhi.n	8008378 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8008374:	230a      	movs	r3, #10
 8008376:	e00b      	b.n	8008390 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008378:	edd7 7a00 	vldr	s15, [r7]
 800837c:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80083bc <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x12c>
 8008380:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008388:	d801      	bhi.n	800838e <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xfe>
 800838a:	230b      	movs	r3, #11
 800838c:	e000      	b.n	8008390 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800838e:	230c      	movs	r3, #12
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                  : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                  : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                  :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	42700000 	.word	0x42700000
 80083a8:	42f00000 	.word	0x42f00000
 80083ac:	43700000 	.word	0x43700000
 80083b0:	43f00000 	.word	0x43f00000
 80083b4:	44700000 	.word	0x44700000
 80083b8:	44f00000 	.word	0x44f00000
 80083bc:	45700000 	.word	0x45700000

080083c0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
            : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 80083cc:	edd7 7a00 	vldr	s15, [r7]
 80083d0:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 80083d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80083d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083dc:	d801      	bhi.n	80083e2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80083de:	2302      	movs	r3, #2
 80083e0:	e063      	b.n	80084aa <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80083e2:	edd7 7a00 	vldr	s15, [r7]
 80083e6:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80083ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80083ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083f2:	d801      	bhi.n	80083f8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80083f4:	2303      	movs	r3, #3
 80083f6:	e058      	b.n	80084aa <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80083f8:	edd7 7a00 	vldr	s15, [r7]
 80083fc:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8008400:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008408:	d801      	bhi.n	800840e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800840a:	2304      	movs	r3, #4
 800840c:	e04d      	b.n	80084aa <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800840e:	edd7 7a00 	vldr	s15, [r7]
 8008412:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80084d0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8008416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800841a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800841e:	d801      	bhi.n	8008424 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8008420:	2305      	movs	r3, #5
 8008422:	e042      	b.n	80084aa <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008424:	edd7 7a00 	vldr	s15, [r7]
 8008428:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80084d4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x114>
 800842c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008434:	d801      	bhi.n	800843a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8008436:	2306      	movs	r3, #6
 8008438:	e037      	b.n	80084aa <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800843a:	edd7 7a00 	vldr	s15, [r7]
 800843e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80084d8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x118>
 8008442:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800844a:	d801      	bhi.n	8008450 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800844c:	2307      	movs	r3, #7
 800844e:	e02c      	b.n	80084aa <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008450:	edd7 7a00 	vldr	s15, [r7]
 8008454:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80084dc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x11c>
 8008458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800845c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008460:	d801      	bhi.n	8008466 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8008462:	2308      	movs	r3, #8
 8008464:	e021      	b.n	80084aa <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008466:	edd7 7a00 	vldr	s15, [r7]
 800846a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80084e0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x120>
 800846e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008476:	d801      	bhi.n	800847c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8008478:	2309      	movs	r3, #9
 800847a:	e016      	b.n	80084aa <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800847c:	edd7 7a00 	vldr	s15, [r7]
 8008480:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80084e4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x124>
 8008484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800848c:	d801      	bhi.n	8008492 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800848e:	230a      	movs	r3, #10
 8008490:	e00b      	b.n	80084aa <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008492:	edd7 7a00 	vldr	s15, [r7]
 8008496:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80084e8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x128>
 800849a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800849e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084a2:	d801      	bhi.n	80084a8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xe8>
 80084a4:	230b      	movs	r3, #11
 80084a6:	e000      	b.n	80084aa <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80084a8:	230c      	movs	r3, #12
  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 80084aa:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	3320      	adds	r3, #32
 80084b0:	7bfa      	ldrb	r2, [r7, #15]
 80084b2:	4611      	mov	r1, r2
 80084b4:	4618      	mov	r0, r3
 80084b6:	f000 fabd 	bl	8008a34 <lsm6dsv16x_gy_data_rate_set>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d002      	beq.n	80084c6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSV16X_ERROR;
 80084c0:	f04f 33ff 	mov.w	r3, #4294967295
 80084c4:	e000      	b.n	80084c8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSV16X_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3710      	adds	r7, #16
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	42700000 	.word	0x42700000
 80084d4:	42f00000 	.word	0x42f00000
 80084d8:	43700000 	.word	0x43700000
 80084dc:	43f00000 	.word	0x43f00000
 80084e0:	44700000 	.word	0x44700000
 80084e4:	44f00000 	.word	0x44f00000
 80084e8:	45700000 	.word	0x45700000

080084ec <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
                   : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 80084f8:	edd7 7a00 	vldr	s15, [r7]
 80084fc:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8008500:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008508:	d801      	bhi.n	800850e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800850a:	2302      	movs	r3, #2
 800850c:	e063      	b.n	80085d6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800850e:	edd7 7a00 	vldr	s15, [r7]
 8008512:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8008516:	eef4 7ac7 	vcmpe.f32	s15, s14
 800851a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800851e:	d801      	bhi.n	8008524 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8008520:	2303      	movs	r3, #3
 8008522:	e058      	b.n	80085d6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8008524:	edd7 7a00 	vldr	s15, [r7]
 8008528:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800852c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008534:	d801      	bhi.n	800853a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8008536:	2304      	movs	r3, #4
 8008538:	e04d      	b.n	80085d6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800853a:	edd7 7a00 	vldr	s15, [r7]
 800853e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80085ec <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8008542:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800854a:	d801      	bhi.n	8008550 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x64>
 800854c:	2305      	movs	r3, #5
 800854e:	e042      	b.n	80085d6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8008550:	edd7 7a00 	vldr	s15, [r7]
 8008554:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80085f0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x104>
 8008558:	eef4 7ac7 	vcmpe.f32	s15, s14
 800855c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008560:	d801      	bhi.n	8008566 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8008562:	2306      	movs	r3, #6
 8008564:	e037      	b.n	80085d6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8008566:	edd7 7a00 	vldr	s15, [r7]
 800856a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80085f4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x108>
 800856e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008576:	d801      	bhi.n	800857c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8008578:	2307      	movs	r3, #7
 800857a:	e02c      	b.n	80085d6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800857c:	edd7 7a00 	vldr	s15, [r7]
 8008580:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80085f8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x10c>
 8008584:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800858c:	d801      	bhi.n	8008592 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800858e:	2308      	movs	r3, #8
 8008590:	e021      	b.n	80085d6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8008592:	edd7 7a00 	vldr	s15, [r7]
 8008596:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80085fc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x110>
 800859a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800859e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085a2:	d801      	bhi.n	80085a8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80085a4:	2309      	movs	r3, #9
 80085a6:	e016      	b.n	80085d6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80085a8:	edd7 7a00 	vldr	s15, [r7]
 80085ac:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8008600 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x114>
 80085b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085b8:	d801      	bhi.n	80085be <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80085ba:	230a      	movs	r3, #10
 80085bc:	e00b      	b.n	80085d6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80085be:	edd7 7a00 	vldr	s15, [r7]
 80085c2:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8008604 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x118>
 80085c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80085ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ce:	d801      	bhi.n	80085d4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80085d0:	230b      	movs	r3, #11
 80085d2:	e000      	b.n	80085d6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80085d4:	230c      	movs	r3, #12
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                   : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                   : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                   :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	370c      	adds	r7, #12
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	42700000 	.word	0x42700000
 80085f0:	42f00000 	.word	0x42f00000
 80085f4:	43700000 	.word	0x43700000
 80085f8:	43f00000 	.word	0x43f00000
 80085fc:	44700000 	.word	0x44700000
 8008600:	44f00000 	.word	0x44f00000
 8008604:	45700000 	.word	0x45700000

08008608 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008608:	b590      	push	{r4, r7, lr}
 800860a:	b087      	sub	sp, #28
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	607a      	str	r2, [r7, #4]
 8008612:	461a      	mov	r2, r3
 8008614:	460b      	mov	r3, r1
 8008616:	72fb      	strb	r3, [r7, #11]
 8008618:	4613      	mov	r3, r2
 800861a:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	695c      	ldr	r4, [r3, #20]
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	7b1b      	ldrb	r3, [r3, #12]
 8008628:	4618      	mov	r0, r3
 800862a:	7afb      	ldrb	r3, [r7, #11]
 800862c:	b299      	uxth	r1, r3
 800862e:	893b      	ldrh	r3, [r7, #8]
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	47a0      	blx	r4
 8008634:	4603      	mov	r3, r0
}
 8008636:	4618      	mov	r0, r3
 8008638:	371c      	adds	r7, #28
 800863a:	46bd      	mov	sp, r7
 800863c:	bd90      	pop	{r4, r7, pc}

0800863e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800863e:	b590      	push	{r4, r7, lr}
 8008640:	b087      	sub	sp, #28
 8008642:	af00      	add	r7, sp, #0
 8008644:	60f8      	str	r0, [r7, #12]
 8008646:	607a      	str	r2, [r7, #4]
 8008648:	461a      	mov	r2, r3
 800864a:	460b      	mov	r3, r1
 800864c:	72fb      	strb	r3, [r7, #11]
 800864e:	4613      	mov	r3, r2
 8008650:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	691c      	ldr	r4, [r3, #16]
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	7b1b      	ldrb	r3, [r3, #12]
 800865e:	4618      	mov	r0, r3
 8008660:	7afb      	ldrb	r3, [r7, #11]
 8008662:	b299      	uxth	r1, r3
 8008664:	893b      	ldrh	r3, [r7, #8]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	47a0      	blx	r4
 800866a:	4603      	mov	r3, r0
}
 800866c:	4618      	mov	r0, r3
 800866e:	371c      	adds	r7, #28
 8008670:	46bd      	mov	sp, r7
 8008672:	bd90      	pop	{r4, r7, pc}

08008674 <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8008674:	b590      	push	{r4, r7, lr}
 8008676:	b087      	sub	sp, #28
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	607a      	str	r2, [r7, #4]
 800867e:	461a      	mov	r2, r3
 8008680:	460b      	mov	r3, r1
 8008682:	72fb      	strb	r3, [r7, #11]
 8008684:	4613      	mov	r3, r2
 8008686:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d102      	bne.n	8008694 <lsm6dsv16x_read_reg+0x20>
  {
    return -1;
 800868e:	f04f 33ff 	mov.w	r3, #4294967295
 8008692:	e009      	b.n	80086a8 <lsm6dsv16x_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	685c      	ldr	r4, [r3, #4]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	68d8      	ldr	r0, [r3, #12]
 800869c:	893b      	ldrh	r3, [r7, #8]
 800869e:	7af9      	ldrb	r1, [r7, #11]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	47a0      	blx	r4
 80086a4:	6178      	str	r0, [r7, #20]

  return ret;
 80086a6:	697b      	ldr	r3, [r7, #20]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	371c      	adds	r7, #28
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd90      	pop	{r4, r7, pc}

080086b0 <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 80086b0:	b590      	push	{r4, r7, lr}
 80086b2:	b087      	sub	sp, #28
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	607a      	str	r2, [r7, #4]
 80086ba:	461a      	mov	r2, r3
 80086bc:	460b      	mov	r3, r1
 80086be:	72fb      	strb	r3, [r7, #11]
 80086c0:	4613      	mov	r3, r2
 80086c2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d102      	bne.n	80086d0 <lsm6dsv16x_write_reg+0x20>
  {
    return -1;
 80086ca:	f04f 33ff 	mov.w	r3, #4294967295
 80086ce:	e009      	b.n	80086e4 <lsm6dsv16x_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681c      	ldr	r4, [r3, #0]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	68d8      	ldr	r0, [r3, #12]
 80086d8:	893b      	ldrh	r3, [r7, #8]
 80086da:	7af9      	ldrb	r1, [r7, #11]
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	47a0      	blx	r4
 80086e0:	6178      	str	r0, [r7, #20]

  return ret;
 80086e2:	697b      	ldr	r3, [r7, #20]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	371c      	adds	r7, #28
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd90      	pop	{r4, r7, pc}

080086ec <lsm6dsv16x_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_mem_bank_set(const stmdev_ctx_t *ctx, lsm6dsv16x_mem_bank_t val)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	460b      	mov	r3, r1
 80086f6:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80086f8:	f107 0208 	add.w	r2, r7, #8
 80086fc:	2301      	movs	r3, #1
 80086fe:	2101      	movs	r1, #1
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f7ff ffb7 	bl	8008674 <lsm6dsv16x_read_reg>
 8008706:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <lsm6dsv16x_mem_bank_set+0x26>
  {
    return ret;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	e019      	b.n	8008746 <lsm6dsv16x_mem_bank_set+0x5a>
  }

  func_cfg_access.shub_reg_access = ((uint8_t)val & 0x02U) >> 1;
 8008712:	78fb      	ldrb	r3, [r7, #3]
 8008714:	085b      	lsrs	r3, r3, #1
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	b2da      	uxtb	r2, r3
 800871c:	7a3b      	ldrb	r3, [r7, #8]
 800871e:	f362 1386 	bfi	r3, r2, #6, #1
 8008722:	723b      	strb	r3, [r7, #8]
  func_cfg_access.emb_func_reg_access = (uint8_t)val & 0x01U;
 8008724:	78fb      	ldrb	r3, [r7, #3]
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	b2da      	uxtb	r2, r3
 800872c:	7a3b      	ldrb	r3, [r7, #8]
 800872e:	f362 13c7 	bfi	r3, r2, #7, #1
 8008732:	723b      	strb	r3, [r7, #8]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8008734:	f107 0208 	add.w	r2, r7, #8
 8008738:	2301      	movs	r3, #1
 800873a:	2101      	movs	r1, #1
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f7ff ffb7 	bl	80086b0 <lsm6dsv16x_write_reg>
 8008742:	60f8      	str	r0, [r7, #12]

  return ret;
 8008744:	68fb      	ldr	r3, [r7, #12]
}
 8008746:	4618      	mov	r0, r3
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b084      	sub	sp, #16
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
 8008756:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 8008758:	2301      	movs	r3, #1
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	210f      	movs	r1, #15
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7ff ff88 	bl	8008674 <lsm6dsv16x_read_reg>
 8008764:	60f8      	str	r0, [r7, #12]

  return ret;
 8008766:	68fb      	ldr	r3, [r7, #12]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b086      	sub	sp, #24
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	460b      	mov	r3, r1
 800877a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 800877c:	f107 0210 	add.w	r2, r7, #16
 8008780:	2301      	movs	r3, #1
 8008782:	2110      	movs	r1, #16
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f7ff ff75 	bl	8008674 <lsm6dsv16x_read_reg>
 800878a:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d001      	beq.n	8008796 <lsm6dsv16x_xl_data_rate_set+0x26>
  {
    return ret;
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	e039      	b.n	800880a <lsm6dsv16x_xl_data_rate_set+0x9a>
  }

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 8008796:	78fb      	ldrb	r3, [r7, #3]
 8008798:	f003 030f 	and.w	r3, r3, #15
 800879c:	b2da      	uxtb	r2, r3
 800879e:	7c3b      	ldrb	r3, [r7, #16]
 80087a0:	f362 0303 	bfi	r3, r2, #0, #4
 80087a4:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80087a6:	f107 0210 	add.w	r2, r7, #16
 80087aa:	2301      	movs	r3, #1
 80087ac:	2110      	movs	r1, #16
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f7ff ff7e 	bl	80086b0 <lsm6dsv16x_write_reg>
 80087b4:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <lsm6dsv16x_xl_data_rate_set+0x50>
  {
    return ret;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	e024      	b.n	800880a <lsm6dsv16x_xl_data_rate_set+0x9a>
  }

  sel = ((uint8_t)val >> 4) & 0xFU;
 80087c0:	78fb      	ldrb	r3, [r7, #3]
 80087c2:	091b      	lsrs	r3, r3, #4
 80087c4:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 80087c6:	7cfb      	ldrb	r3, [r7, #19]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d01d      	beq.n	8008808 <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80087cc:	f107 020c 	add.w	r2, r7, #12
 80087d0:	2301      	movs	r3, #1
 80087d2:	2162      	movs	r1, #98	@ 0x62
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f7ff ff4d 	bl	8008674 <lsm6dsv16x_read_reg>
 80087da:	4602      	mov	r2, r0
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	4413      	add	r3, r2
 80087e0:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 80087e2:	7cfb      	ldrb	r3, [r7, #19]
 80087e4:	f003 0303 	and.w	r3, r3, #3
 80087e8:	b2da      	uxtb	r2, r3
 80087ea:	7b3b      	ldrb	r3, [r7, #12]
 80087ec:	f362 0301 	bfi	r3, r2, #0, #2
 80087f0:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80087f2:	f107 020c 	add.w	r2, r7, #12
 80087f6:	2301      	movs	r3, #1
 80087f8:	2162      	movs	r1, #98	@ 0x62
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f7ff ff58 	bl	80086b0 <lsm6dsv16x_write_reg>
 8008800:	4602      	mov	r2, r0
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	4413      	add	r3, r2
 8008806:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8008808:	697b      	ldr	r3, [r7, #20]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3718      	adds	r7, #24
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
	...

08008814 <lsm6dsv16x_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_get(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b086      	sub	sp, #24
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 800881e:	f107 0210 	add.w	r2, r7, #16
 8008822:	2301      	movs	r3, #1
 8008824:	2110      	movs	r1, #16
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f7ff ff24 	bl	8008674 <lsm6dsv16x_read_reg>
 800882c:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800882e:	f107 020c 	add.w	r2, r7, #12
 8008832:	2301      	movs	r3, #1
 8008834:	2162      	movs	r1, #98	@ 0x62
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f7ff ff1c 	bl	8008674 <lsm6dsv16x_read_reg>
 800883c:	4602      	mov	r2, r0
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	4413      	add	r3, r2
 8008842:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d001      	beq.n	800884e <lsm6dsv16x_xl_data_rate_get+0x3a>
  {
    return ret;
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	e0ed      	b.n	8008a2a <lsm6dsv16x_xl_data_rate_get+0x216>
  }

  sel = haodr.haodr_sel;
 800884e:	7b3b      	ldrb	r3, [r7, #12]
 8008850:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008854:	b2db      	uxtb	r3, r3
 8008856:	74fb      	strb	r3, [r7, #19]

  switch (ctrl1.odr_xl)
 8008858:	7c3b      	ldrb	r3, [r7, #16]
 800885a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800885e:	b2db      	uxtb	r3, r3
 8008860:	2b0c      	cmp	r3, #12
 8008862:	f200 80dd 	bhi.w	8008a20 <lsm6dsv16x_xl_data_rate_get+0x20c>
 8008866:	a201      	add	r2, pc, #4	@ (adr r2, 800886c <lsm6dsv16x_xl_data_rate_get+0x58>)
 8008868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886c:	080088a1 	.word	0x080088a1
 8008870:	080088a9 	.word	0x080088a9
 8008874:	080088b1 	.word	0x080088b1
 8008878:	080088b9 	.word	0x080088b9
 800887c:	080088dd 	.word	0x080088dd
 8008880:	08008901 	.word	0x08008901
 8008884:	08008925 	.word	0x08008925
 8008888:	08008949 	.word	0x08008949
 800888c:	0800896d 	.word	0x0800896d
 8008890:	08008991 	.word	0x08008991
 8008894:	080089b5 	.word	0x080089b5
 8008898:	080089d9 	.word	0x080089d9
 800889c:	080089fd 	.word	0x080089fd
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	2200      	movs	r2, #0
 80088a4:	701a      	strb	r2, [r3, #0]
      break;
 80088a6:	e0bf      	b.n	8008a28 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	2201      	movs	r2, #1
 80088ac:	701a      	strb	r2, [r3, #0]
      break;
 80088ae:	e0bb      	b.n	8008a28 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	2202      	movs	r2, #2
 80088b4:	701a      	strb	r2, [r3, #0]
      break;
 80088b6:	e0b7      	b.n	8008a28 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel)
 80088b8:	7cfb      	ldrb	r3, [r7, #19]
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d005      	beq.n	80088ca <lsm6dsv16x_xl_data_rate_get+0xb6>
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d007      	beq.n	80088d2 <lsm6dsv16x_xl_data_rate_get+0xbe>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_15Hz;
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	2203      	movs	r2, #3
 80088c6:	701a      	strb	r2, [r3, #0]
          break;
 80088c8:	e007      	b.n	80088da <lsm6dsv16x_xl_data_rate_get+0xc6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	2213      	movs	r2, #19
 80088ce:	701a      	strb	r2, [r3, #0]
          break;
 80088d0:	e003      	b.n	80088da <lsm6dsv16x_xl_data_rate_get+0xc6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	2223      	movs	r2, #35	@ 0x23
 80088d6:	701a      	strb	r2, [r3, #0]
          break;
 80088d8:	bf00      	nop
      }
      break;
 80088da:	e0a5      	b.n	8008a28 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel)
 80088dc:	7cfb      	ldrb	r3, [r7, #19]
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d005      	beq.n	80088ee <lsm6dsv16x_xl_data_rate_get+0xda>
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	d007      	beq.n	80088f6 <lsm6dsv16x_xl_data_rate_get+0xe2>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_30Hz;
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	2204      	movs	r2, #4
 80088ea:	701a      	strb	r2, [r3, #0]
          break;
 80088ec:	e007      	b.n	80088fe <lsm6dsv16x_xl_data_rate_get+0xea>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	2214      	movs	r2, #20
 80088f2:	701a      	strb	r2, [r3, #0]
          break;
 80088f4:	e003      	b.n	80088fe <lsm6dsv16x_xl_data_rate_get+0xea>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	2224      	movs	r2, #36	@ 0x24
 80088fa:	701a      	strb	r2, [r3, #0]
          break;
 80088fc:	bf00      	nop
      }
      break;
 80088fe:	e093      	b.n	8008a28 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel)
 8008900:	7cfb      	ldrb	r3, [r7, #19]
 8008902:	2b01      	cmp	r3, #1
 8008904:	d005      	beq.n	8008912 <lsm6dsv16x_xl_data_rate_get+0xfe>
 8008906:	2b02      	cmp	r3, #2
 8008908:	d007      	beq.n	800891a <lsm6dsv16x_xl_data_rate_get+0x106>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_60Hz;
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	2205      	movs	r2, #5
 800890e:	701a      	strb	r2, [r3, #0]
          break;
 8008910:	e007      	b.n	8008922 <lsm6dsv16x_xl_data_rate_get+0x10e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	2215      	movs	r2, #21
 8008916:	701a      	strb	r2, [r3, #0]
          break;
 8008918:	e003      	b.n	8008922 <lsm6dsv16x_xl_data_rate_get+0x10e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	2225      	movs	r2, #37	@ 0x25
 800891e:	701a      	strb	r2, [r3, #0]
          break;
 8008920:	bf00      	nop
      }
      break;
 8008922:	e081      	b.n	8008a28 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel)
 8008924:	7cfb      	ldrb	r3, [r7, #19]
 8008926:	2b01      	cmp	r3, #1
 8008928:	d005      	beq.n	8008936 <lsm6dsv16x_xl_data_rate_get+0x122>
 800892a:	2b02      	cmp	r3, #2
 800892c:	d007      	beq.n	800893e <lsm6dsv16x_xl_data_rate_get+0x12a>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_120Hz;
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	2206      	movs	r2, #6
 8008932:	701a      	strb	r2, [r3, #0]
          break;
 8008934:	e007      	b.n	8008946 <lsm6dsv16x_xl_data_rate_get+0x132>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	2216      	movs	r2, #22
 800893a:	701a      	strb	r2, [r3, #0]
          break;
 800893c:	e003      	b.n	8008946 <lsm6dsv16x_xl_data_rate_get+0x132>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	2226      	movs	r2, #38	@ 0x26
 8008942:	701a      	strb	r2, [r3, #0]
          break;
 8008944:	bf00      	nop
      }
      break;
 8008946:	e06f      	b.n	8008a28 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel)
 8008948:	7cfb      	ldrb	r3, [r7, #19]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d005      	beq.n	800895a <lsm6dsv16x_xl_data_rate_get+0x146>
 800894e:	2b02      	cmp	r3, #2
 8008950:	d007      	beq.n	8008962 <lsm6dsv16x_xl_data_rate_get+0x14e>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_240Hz;
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	2207      	movs	r2, #7
 8008956:	701a      	strb	r2, [r3, #0]
          break;
 8008958:	e007      	b.n	800896a <lsm6dsv16x_xl_data_rate_get+0x156>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	2217      	movs	r2, #23
 800895e:	701a      	strb	r2, [r3, #0]
          break;
 8008960:	e003      	b.n	800896a <lsm6dsv16x_xl_data_rate_get+0x156>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2227      	movs	r2, #39	@ 0x27
 8008966:	701a      	strb	r2, [r3, #0]
          break;
 8008968:	bf00      	nop
      }
      break;
 800896a:	e05d      	b.n	8008a28 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel)
 800896c:	7cfb      	ldrb	r3, [r7, #19]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d005      	beq.n	800897e <lsm6dsv16x_xl_data_rate_get+0x16a>
 8008972:	2b02      	cmp	r3, #2
 8008974:	d007      	beq.n	8008986 <lsm6dsv16x_xl_data_rate_get+0x172>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_480Hz;
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	2208      	movs	r2, #8
 800897a:	701a      	strb	r2, [r3, #0]
          break;
 800897c:	e007      	b.n	800898e <lsm6dsv16x_xl_data_rate_get+0x17a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	2218      	movs	r2, #24
 8008982:	701a      	strb	r2, [r3, #0]
          break;
 8008984:	e003      	b.n	800898e <lsm6dsv16x_xl_data_rate_get+0x17a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	2228      	movs	r2, #40	@ 0x28
 800898a:	701a      	strb	r2, [r3, #0]
          break;
 800898c:	bf00      	nop
      }
      break;
 800898e:	e04b      	b.n	8008a28 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel)
 8008990:	7cfb      	ldrb	r3, [r7, #19]
 8008992:	2b01      	cmp	r3, #1
 8008994:	d005      	beq.n	80089a2 <lsm6dsv16x_xl_data_rate_get+0x18e>
 8008996:	2b02      	cmp	r3, #2
 8008998:	d007      	beq.n	80089aa <lsm6dsv16x_xl_data_rate_get+0x196>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_960Hz;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	2209      	movs	r2, #9
 800899e:	701a      	strb	r2, [r3, #0]
          break;
 80089a0:	e007      	b.n	80089b2 <lsm6dsv16x_xl_data_rate_get+0x19e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	2219      	movs	r2, #25
 80089a6:	701a      	strb	r2, [r3, #0]
          break;
 80089a8:	e003      	b.n	80089b2 <lsm6dsv16x_xl_data_rate_get+0x19e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	2229      	movs	r2, #41	@ 0x29
 80089ae:	701a      	strb	r2, [r3, #0]
          break;
 80089b0:	bf00      	nop
      }
      break;
 80089b2:	e039      	b.n	8008a28 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel)
 80089b4:	7cfb      	ldrb	r3, [r7, #19]
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d005      	beq.n	80089c6 <lsm6dsv16x_xl_data_rate_get+0x1b2>
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d007      	beq.n	80089ce <lsm6dsv16x_xl_data_rate_get+0x1ba>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_1920Hz;
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	220a      	movs	r2, #10
 80089c2:	701a      	strb	r2, [r3, #0]
          break;
 80089c4:	e007      	b.n	80089d6 <lsm6dsv16x_xl_data_rate_get+0x1c2>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	221a      	movs	r2, #26
 80089ca:	701a      	strb	r2, [r3, #0]
          break;
 80089cc:	e003      	b.n	80089d6 <lsm6dsv16x_xl_data_rate_get+0x1c2>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	222a      	movs	r2, #42	@ 0x2a
 80089d2:	701a      	strb	r2, [r3, #0]
          break;
 80089d4:	bf00      	nop
      }
      break;
 80089d6:	e027      	b.n	8008a28 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel)
 80089d8:	7cfb      	ldrb	r3, [r7, #19]
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d005      	beq.n	80089ea <lsm6dsv16x_xl_data_rate_get+0x1d6>
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d007      	beq.n	80089f2 <lsm6dsv16x_xl_data_rate_get+0x1de>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_3840Hz;
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	220b      	movs	r2, #11
 80089e6:	701a      	strb	r2, [r3, #0]
          break;
 80089e8:	e007      	b.n	80089fa <lsm6dsv16x_xl_data_rate_get+0x1e6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	221b      	movs	r2, #27
 80089ee:	701a      	strb	r2, [r3, #0]
          break;
 80089f0:	e003      	b.n	80089fa <lsm6dsv16x_xl_data_rate_get+0x1e6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	222b      	movs	r2, #43	@ 0x2b
 80089f6:	701a      	strb	r2, [r3, #0]
          break;
 80089f8:	bf00      	nop
      }
      break;
 80089fa:	e015      	b.n	8008a28 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel)
 80089fc:	7cfb      	ldrb	r3, [r7, #19]
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d005      	beq.n	8008a0e <lsm6dsv16x_xl_data_rate_get+0x1fa>
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	d007      	beq.n	8008a16 <lsm6dsv16x_xl_data_rate_get+0x202>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_7680Hz;
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	220c      	movs	r2, #12
 8008a0a:	701a      	strb	r2, [r3, #0]
          break;
 8008a0c:	e007      	b.n	8008a1e <lsm6dsv16x_xl_data_rate_get+0x20a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	221c      	movs	r2, #28
 8008a12:	701a      	strb	r2, [r3, #0]
          break;
 8008a14:	e003      	b.n	8008a1e <lsm6dsv16x_xl_data_rate_get+0x20a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	222c      	movs	r2, #44	@ 0x2c
 8008a1a:	701a      	strb	r2, [r3, #0]
          break;
 8008a1c:	bf00      	nop
      }
      break;
 8008a1e:	e003      	b.n	8008a28 <lsm6dsv16x_xl_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	2200      	movs	r2, #0
 8008a24:	701a      	strb	r2, [r3, #0]
      break;
 8008a26:	bf00      	nop
  }

  return ret;
 8008a28:	697b      	ldr	r3, [r7, #20]
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3718      	adds	r7, #24
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop

08008a34 <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b086      	sub	sp, #24
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8008a40:	f107 0210 	add.w	r2, r7, #16
 8008a44:	2301      	movs	r3, #1
 8008a46:	2111      	movs	r1, #17
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f7ff fe13 	bl	8008674 <lsm6dsv16x_read_reg>
 8008a4e:	6178      	str	r0, [r7, #20]

  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 8008a50:	78fb      	ldrb	r3, [r7, #3]
 8008a52:	f003 030f 	and.w	r3, r3, #15
 8008a56:	b2da      	uxtb	r2, r3
 8008a58:	7c3b      	ldrb	r3, [r7, #16]
 8008a5a:	f362 0303 	bfi	r3, r2, #0, #4
 8008a5e:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8008a60:	f107 0210 	add.w	r2, r7, #16
 8008a64:	2301      	movs	r3, #1
 8008a66:	2111      	movs	r1, #17
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f7ff fe21 	bl	80086b0 <lsm6dsv16x_write_reg>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	4413      	add	r3, r2
 8008a74:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d001      	beq.n	8008a80 <lsm6dsv16x_gy_data_rate_set+0x4c>
  {
    return ret;
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	e024      	b.n	8008aca <lsm6dsv16x_gy_data_rate_set+0x96>
  }

  sel = ((uint8_t)val >> 4) & 0xFU;
 8008a80:	78fb      	ldrb	r3, [r7, #3]
 8008a82:	091b      	lsrs	r3, r3, #4
 8008a84:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8008a86:	7cfb      	ldrb	r3, [r7, #19]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d01d      	beq.n	8008ac8 <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8008a8c:	f107 020c 	add.w	r2, r7, #12
 8008a90:	2301      	movs	r3, #1
 8008a92:	2162      	movs	r1, #98	@ 0x62
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f7ff fded 	bl	8008674 <lsm6dsv16x_read_reg>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8008aa2:	7cfb      	ldrb	r3, [r7, #19]
 8008aa4:	f003 0303 	and.w	r3, r3, #3
 8008aa8:	b2da      	uxtb	r2, r3
 8008aaa:	7b3b      	ldrb	r3, [r7, #12]
 8008aac:	f362 0301 	bfi	r3, r2, #0, #2
 8008ab0:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8008ab2:	f107 020c 	add.w	r2, r7, #12
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	2162      	movs	r1, #98	@ 0x62
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f7ff fdf8 	bl	80086b0 <lsm6dsv16x_write_reg>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8008ac8:	697b      	ldr	r3, [r7, #20]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3718      	adds	r7, #24
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
	...

08008ad4 <lsm6dsv16x_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_get(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b086      	sub	sp, #24
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8008ade:	f107 0210 	add.w	r2, r7, #16
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	2111      	movs	r1, #17
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7ff fdc4 	bl	8008674 <lsm6dsv16x_read_reg>
 8008aec:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8008aee:	f107 020c 	add.w	r2, r7, #12
 8008af2:	2301      	movs	r3, #1
 8008af4:	2162      	movs	r1, #98	@ 0x62
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f7ff fdbc 	bl	8008674 <lsm6dsv16x_read_reg>
 8008afc:	4602      	mov	r2, r0
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	4413      	add	r3, r2
 8008b02:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d001      	beq.n	8008b0e <lsm6dsv16x_gy_data_rate_get+0x3a>
  {
    return ret;
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	e0ed      	b.n	8008cea <lsm6dsv16x_gy_data_rate_get+0x216>
  }

  sel = haodr.haodr_sel;
 8008b0e:	7b3b      	ldrb	r3, [r7, #12]
 8008b10:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	74fb      	strb	r3, [r7, #19]

  switch (ctrl2.odr_g)
 8008b18:	7c3b      	ldrb	r3, [r7, #16]
 8008b1a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	2b0c      	cmp	r3, #12
 8008b22:	f200 80dd 	bhi.w	8008ce0 <lsm6dsv16x_gy_data_rate_get+0x20c>
 8008b26:	a201      	add	r2, pc, #4	@ (adr r2, 8008b2c <lsm6dsv16x_gy_data_rate_get+0x58>)
 8008b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2c:	08008b61 	.word	0x08008b61
 8008b30:	08008b69 	.word	0x08008b69
 8008b34:	08008b71 	.word	0x08008b71
 8008b38:	08008b79 	.word	0x08008b79
 8008b3c:	08008b9d 	.word	0x08008b9d
 8008b40:	08008bc1 	.word	0x08008bc1
 8008b44:	08008be5 	.word	0x08008be5
 8008b48:	08008c09 	.word	0x08008c09
 8008b4c:	08008c2d 	.word	0x08008c2d
 8008b50:	08008c51 	.word	0x08008c51
 8008b54:	08008c75 	.word	0x08008c75
 8008b58:	08008c99 	.word	0x08008c99
 8008b5c:	08008cbd 	.word	0x08008cbd
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	2200      	movs	r2, #0
 8008b64:	701a      	strb	r2, [r3, #0]
      break;
 8008b66:	e0bf      	b.n	8008ce8 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	701a      	strb	r2, [r3, #0]
      break;
 8008b6e:	e0bb      	b.n	8008ce8 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	2202      	movs	r2, #2
 8008b74:	701a      	strb	r2, [r3, #0]
      break;
 8008b76:	e0b7      	b.n	8008ce8 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel)
 8008b78:	7cfb      	ldrb	r3, [r7, #19]
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d005      	beq.n	8008b8a <lsm6dsv16x_gy_data_rate_get+0xb6>
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d007      	beq.n	8008b92 <lsm6dsv16x_gy_data_rate_get+0xbe>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_15Hz;
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	2203      	movs	r2, #3
 8008b86:	701a      	strb	r2, [r3, #0]
          break;
 8008b88:	e007      	b.n	8008b9a <lsm6dsv16x_gy_data_rate_get+0xc6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	2213      	movs	r2, #19
 8008b8e:	701a      	strb	r2, [r3, #0]
          break;
 8008b90:	e003      	b.n	8008b9a <lsm6dsv16x_gy_data_rate_get+0xc6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	2223      	movs	r2, #35	@ 0x23
 8008b96:	701a      	strb	r2, [r3, #0]
          break;
 8008b98:	bf00      	nop
      }
      break;
 8008b9a:	e0a5      	b.n	8008ce8 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel)
 8008b9c:	7cfb      	ldrb	r3, [r7, #19]
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d005      	beq.n	8008bae <lsm6dsv16x_gy_data_rate_get+0xda>
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d007      	beq.n	8008bb6 <lsm6dsv16x_gy_data_rate_get+0xe2>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_30Hz;
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	2204      	movs	r2, #4
 8008baa:	701a      	strb	r2, [r3, #0]
          break;
 8008bac:	e007      	b.n	8008bbe <lsm6dsv16x_gy_data_rate_get+0xea>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	2214      	movs	r2, #20
 8008bb2:	701a      	strb	r2, [r3, #0]
          break;
 8008bb4:	e003      	b.n	8008bbe <lsm6dsv16x_gy_data_rate_get+0xea>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	2224      	movs	r2, #36	@ 0x24
 8008bba:	701a      	strb	r2, [r3, #0]
          break;
 8008bbc:	bf00      	nop
      }
      break;
 8008bbe:	e093      	b.n	8008ce8 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel)
 8008bc0:	7cfb      	ldrb	r3, [r7, #19]
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d005      	beq.n	8008bd2 <lsm6dsv16x_gy_data_rate_get+0xfe>
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d007      	beq.n	8008bda <lsm6dsv16x_gy_data_rate_get+0x106>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_60Hz;
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	2205      	movs	r2, #5
 8008bce:	701a      	strb	r2, [r3, #0]
          break;
 8008bd0:	e007      	b.n	8008be2 <lsm6dsv16x_gy_data_rate_get+0x10e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	2215      	movs	r2, #21
 8008bd6:	701a      	strb	r2, [r3, #0]
          break;
 8008bd8:	e003      	b.n	8008be2 <lsm6dsv16x_gy_data_rate_get+0x10e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	2225      	movs	r2, #37	@ 0x25
 8008bde:	701a      	strb	r2, [r3, #0]
          break;
 8008be0:	bf00      	nop
      }
      break;
 8008be2:	e081      	b.n	8008ce8 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel)
 8008be4:	7cfb      	ldrb	r3, [r7, #19]
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d005      	beq.n	8008bf6 <lsm6dsv16x_gy_data_rate_get+0x122>
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d007      	beq.n	8008bfe <lsm6dsv16x_gy_data_rate_get+0x12a>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_120Hz;
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	2206      	movs	r2, #6
 8008bf2:	701a      	strb	r2, [r3, #0]
          break;
 8008bf4:	e007      	b.n	8008c06 <lsm6dsv16x_gy_data_rate_get+0x132>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	2216      	movs	r2, #22
 8008bfa:	701a      	strb	r2, [r3, #0]
          break;
 8008bfc:	e003      	b.n	8008c06 <lsm6dsv16x_gy_data_rate_get+0x132>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	2226      	movs	r2, #38	@ 0x26
 8008c02:	701a      	strb	r2, [r3, #0]
          break;
 8008c04:	bf00      	nop
      }
      break;
 8008c06:	e06f      	b.n	8008ce8 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel)
 8008c08:	7cfb      	ldrb	r3, [r7, #19]
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d005      	beq.n	8008c1a <lsm6dsv16x_gy_data_rate_get+0x146>
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	d007      	beq.n	8008c22 <lsm6dsv16x_gy_data_rate_get+0x14e>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_240Hz;
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	2207      	movs	r2, #7
 8008c16:	701a      	strb	r2, [r3, #0]
          break;
 8008c18:	e007      	b.n	8008c2a <lsm6dsv16x_gy_data_rate_get+0x156>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	2217      	movs	r2, #23
 8008c1e:	701a      	strb	r2, [r3, #0]
          break;
 8008c20:	e003      	b.n	8008c2a <lsm6dsv16x_gy_data_rate_get+0x156>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	2227      	movs	r2, #39	@ 0x27
 8008c26:	701a      	strb	r2, [r3, #0]
          break;
 8008c28:	bf00      	nop
      }
      break;
 8008c2a:	e05d      	b.n	8008ce8 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel)
 8008c2c:	7cfb      	ldrb	r3, [r7, #19]
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d005      	beq.n	8008c3e <lsm6dsv16x_gy_data_rate_get+0x16a>
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d007      	beq.n	8008c46 <lsm6dsv16x_gy_data_rate_get+0x172>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_480Hz;
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	2208      	movs	r2, #8
 8008c3a:	701a      	strb	r2, [r3, #0]
          break;
 8008c3c:	e007      	b.n	8008c4e <lsm6dsv16x_gy_data_rate_get+0x17a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	2218      	movs	r2, #24
 8008c42:	701a      	strb	r2, [r3, #0]
          break;
 8008c44:	e003      	b.n	8008c4e <lsm6dsv16x_gy_data_rate_get+0x17a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	2228      	movs	r2, #40	@ 0x28
 8008c4a:	701a      	strb	r2, [r3, #0]
          break;
 8008c4c:	bf00      	nop
      }
      break;
 8008c4e:	e04b      	b.n	8008ce8 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel)
 8008c50:	7cfb      	ldrb	r3, [r7, #19]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d005      	beq.n	8008c62 <lsm6dsv16x_gy_data_rate_get+0x18e>
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	d007      	beq.n	8008c6a <lsm6dsv16x_gy_data_rate_get+0x196>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_960Hz;
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	2209      	movs	r2, #9
 8008c5e:	701a      	strb	r2, [r3, #0]
          break;
 8008c60:	e007      	b.n	8008c72 <lsm6dsv16x_gy_data_rate_get+0x19e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	2219      	movs	r2, #25
 8008c66:	701a      	strb	r2, [r3, #0]
          break;
 8008c68:	e003      	b.n	8008c72 <lsm6dsv16x_gy_data_rate_get+0x19e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	2229      	movs	r2, #41	@ 0x29
 8008c6e:	701a      	strb	r2, [r3, #0]
          break;
 8008c70:	bf00      	nop
      }
      break;
 8008c72:	e039      	b.n	8008ce8 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel)
 8008c74:	7cfb      	ldrb	r3, [r7, #19]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d005      	beq.n	8008c86 <lsm6dsv16x_gy_data_rate_get+0x1b2>
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d007      	beq.n	8008c8e <lsm6dsv16x_gy_data_rate_get+0x1ba>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_1920Hz;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	220a      	movs	r2, #10
 8008c82:	701a      	strb	r2, [r3, #0]
          break;
 8008c84:	e007      	b.n	8008c96 <lsm6dsv16x_gy_data_rate_get+0x1c2>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	221a      	movs	r2, #26
 8008c8a:	701a      	strb	r2, [r3, #0]
          break;
 8008c8c:	e003      	b.n	8008c96 <lsm6dsv16x_gy_data_rate_get+0x1c2>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	222a      	movs	r2, #42	@ 0x2a
 8008c92:	701a      	strb	r2, [r3, #0]
          break;
 8008c94:	bf00      	nop
      }
      break;
 8008c96:	e027      	b.n	8008ce8 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel)
 8008c98:	7cfb      	ldrb	r3, [r7, #19]
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d005      	beq.n	8008caa <lsm6dsv16x_gy_data_rate_get+0x1d6>
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d007      	beq.n	8008cb2 <lsm6dsv16x_gy_data_rate_get+0x1de>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_3840Hz;
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	220b      	movs	r2, #11
 8008ca6:	701a      	strb	r2, [r3, #0]
          break;
 8008ca8:	e007      	b.n	8008cba <lsm6dsv16x_gy_data_rate_get+0x1e6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	221b      	movs	r2, #27
 8008cae:	701a      	strb	r2, [r3, #0]
          break;
 8008cb0:	e003      	b.n	8008cba <lsm6dsv16x_gy_data_rate_get+0x1e6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	222b      	movs	r2, #43	@ 0x2b
 8008cb6:	701a      	strb	r2, [r3, #0]
          break;
 8008cb8:	bf00      	nop
      }
      break;
 8008cba:	e015      	b.n	8008ce8 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel)
 8008cbc:	7cfb      	ldrb	r3, [r7, #19]
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d005      	beq.n	8008cce <lsm6dsv16x_gy_data_rate_get+0x1fa>
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d007      	beq.n	8008cd6 <lsm6dsv16x_gy_data_rate_get+0x202>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_7680Hz;
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	220c      	movs	r2, #12
 8008cca:	701a      	strb	r2, [r3, #0]
          break;
 8008ccc:	e007      	b.n	8008cde <lsm6dsv16x_gy_data_rate_get+0x20a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	221c      	movs	r2, #28
 8008cd2:	701a      	strb	r2, [r3, #0]
          break;
 8008cd4:	e003      	b.n	8008cde <lsm6dsv16x_gy_data_rate_get+0x20a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	222c      	movs	r2, #44	@ 0x2c
 8008cda:	701a      	strb	r2, [r3, #0]
          break;
 8008cdc:	bf00      	nop
      }
      break;
 8008cde:	e003      	b.n	8008ce8 <lsm6dsv16x_gy_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	701a      	strb	r2, [r3, #0]
      break;
 8008ce6:	bf00      	nop
  }

  return ret;
 8008ce8:	697b      	ldr	r3, [r7, #20]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3718      	adds	r7, #24
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop

08008cf4 <lsm6dsv16x_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8008d00:	f107 0208 	add.w	r2, r7, #8
 8008d04:	2301      	movs	r3, #1
 8008d06:	2112      	movs	r1, #18
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f7ff fcb3 	bl	8008674 <lsm6dsv16x_read_reg>
 8008d0e:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d10f      	bne.n	8008d36 <lsm6dsv16x_auto_increment_set+0x42>
  {
    ctrl3.if_inc = val;
 8008d16:	78fb      	ldrb	r3, [r7, #3]
 8008d18:	f003 0301 	and.w	r3, r3, #1
 8008d1c:	b2da      	uxtb	r2, r3
 8008d1e:	7a3b      	ldrb	r3, [r7, #8]
 8008d20:	f362 0382 	bfi	r3, r2, #2, #1
 8008d24:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8008d26:	f107 0208 	add.w	r2, r7, #8
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	2112      	movs	r1, #18
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f7ff fcbe 	bl	80086b0 <lsm6dsv16x_write_reg>
 8008d34:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008d36:	68fb      	ldr	r3, [r7, #12]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3710      	adds	r7, #16
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	460b      	mov	r3, r1
 8008d4a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8008d4c:	f107 0208 	add.w	r2, r7, #8
 8008d50:	2301      	movs	r3, #1
 8008d52:	2112      	movs	r1, #18
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f7ff fc8d 	bl	8008674 <lsm6dsv16x_read_reg>
 8008d5a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d10f      	bne.n	8008d82 <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 8008d62:	78fb      	ldrb	r3, [r7, #3]
 8008d64:	f003 0301 	and.w	r3, r3, #1
 8008d68:	b2da      	uxtb	r2, r3
 8008d6a:	7a3b      	ldrb	r3, [r7, #8]
 8008d6c:	f362 1386 	bfi	r3, r2, #6, #1
 8008d70:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8008d72:	f107 0208 	add.w	r2, r7, #8
 8008d76:	2301      	movs	r3, #1
 8008d78:	2112      	movs	r1, #18
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f7ff fc98 	bl	80086b0 <lsm6dsv16x_write_reg>
 8008d80:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008d82:	68fb      	ldr	r3, [r7, #12]
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3710      	adds	r7, #16
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	460b      	mov	r3, r1
 8008d96:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8008d98:	f107 0208 	add.w	r2, r7, #8
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	2115      	movs	r1, #21
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f7ff fc67 	bl	8008674 <lsm6dsv16x_read_reg>
 8008da6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10f      	bne.n	8008dce <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 8008dae:	78fb      	ldrb	r3, [r7, #3]
 8008db0:	f003 030f 	and.w	r3, r3, #15
 8008db4:	b2da      	uxtb	r2, r3
 8008db6:	7a3b      	ldrb	r3, [r7, #8]
 8008db8:	f362 0303 	bfi	r3, r2, #0, #4
 8008dbc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8008dbe:	f107 0208 	add.w	r2, r7, #8
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	2115      	movs	r1, #21
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7ff fc72 	bl	80086b0 <lsm6dsv16x_write_reg>
 8008dcc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008dce:	68fb      	ldr	r3, [r7, #12]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3710      	adds	r7, #16
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <lsm6dsv16x_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_get(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t *val)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8008de2:	f107 0208 	add.w	r2, r7, #8
 8008de6:	2301      	movs	r3, #1
 8008de8:	2115      	movs	r1, #21
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f7ff fc42 	bl	8008674 <lsm6dsv16x_read_reg>
 8008df0:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d001      	beq.n	8008dfc <lsm6dsv16x_gy_full_scale_get+0x24>
  {
    return ret;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	e040      	b.n	8008e7e <lsm6dsv16x_gy_full_scale_get+0xa6>
  }

  switch (ctrl6.fs_g)
 8008dfc:	7a3b      	ldrb	r3, [r7, #8]
 8008dfe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	2b0c      	cmp	r3, #12
 8008e06:	d835      	bhi.n	8008e74 <lsm6dsv16x_gy_full_scale_get+0x9c>
 8008e08:	a201      	add	r2, pc, #4	@ (adr r2, 8008e10 <lsm6dsv16x_gy_full_scale_get+0x38>)
 8008e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0e:	bf00      	nop
 8008e10:	08008e45 	.word	0x08008e45
 8008e14:	08008e4d 	.word	0x08008e4d
 8008e18:	08008e55 	.word	0x08008e55
 8008e1c:	08008e5d 	.word	0x08008e5d
 8008e20:	08008e65 	.word	0x08008e65
 8008e24:	08008e75 	.word	0x08008e75
 8008e28:	08008e75 	.word	0x08008e75
 8008e2c:	08008e75 	.word	0x08008e75
 8008e30:	08008e75 	.word	0x08008e75
 8008e34:	08008e75 	.word	0x08008e75
 8008e38:	08008e75 	.word	0x08008e75
 8008e3c:	08008e75 	.word	0x08008e75
 8008e40:	08008e6d 	.word	0x08008e6d
  {
    case LSM6DSV16X_125dps:
      *val = LSM6DSV16X_125dps;
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	2200      	movs	r2, #0
 8008e48:	701a      	strb	r2, [r3, #0]
      break;
 8008e4a:	e017      	b.n	8008e7c <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_250dps:
      *val = LSM6DSV16X_250dps;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	701a      	strb	r2, [r3, #0]
      break;
 8008e52:	e013      	b.n	8008e7c <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_500dps:
      *val = LSM6DSV16X_500dps;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	2202      	movs	r2, #2
 8008e58:	701a      	strb	r2, [r3, #0]
      break;
 8008e5a:	e00f      	b.n	8008e7c <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_1000dps:
      *val = LSM6DSV16X_1000dps;
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	2203      	movs	r2, #3
 8008e60:	701a      	strb	r2, [r3, #0]
      break;
 8008e62:	e00b      	b.n	8008e7c <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_2000dps:
      *val = LSM6DSV16X_2000dps;
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	2204      	movs	r2, #4
 8008e68:	701a      	strb	r2, [r3, #0]
      break;
 8008e6a:	e007      	b.n	8008e7c <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_4000dps:
      *val = LSM6DSV16X_4000dps;
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	220c      	movs	r2, #12
 8008e70:	701a      	strb	r2, [r3, #0]
      break;
 8008e72:	e003      	b.n	8008e7c <lsm6dsv16x_gy_full_scale_get+0xa4>

    default:
      *val = LSM6DSV16X_125dps;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	2200      	movs	r2, #0
 8008e78:	701a      	strb	r2, [r3, #0]
      break;
 8008e7a:	bf00      	nop
  }

  return ret;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3710      	adds	r7, #16
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop

08008e88 <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	460b      	mov	r3, r1
 8008e92:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8008e94:	f107 0208 	add.w	r2, r7, #8
 8008e98:	2301      	movs	r3, #1
 8008e9a:	2117      	movs	r1, #23
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f7ff fbe9 	bl	8008674 <lsm6dsv16x_read_reg>
 8008ea2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d10f      	bne.n	8008eca <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 8008eaa:	78fb      	ldrb	r3, [r7, #3]
 8008eac:	f003 0303 	and.w	r3, r3, #3
 8008eb0:	b2da      	uxtb	r2, r3
 8008eb2:	7a3b      	ldrb	r3, [r7, #8]
 8008eb4:	f362 0301 	bfi	r3, r2, #0, #2
 8008eb8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8008eba:	f107 0208 	add.w	r2, r7, #8
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	2117      	movs	r1, #23
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f7ff fbf4 	bl	80086b0 <lsm6dsv16x_write_reg>
 8008ec8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008eca:	68fb      	ldr	r3, [r7, #12]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3710      	adds	r7, #16
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <lsm6dsv16x_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_get(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t *val)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8008ede:	f107 0208 	add.w	r2, r7, #8
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	2117      	movs	r1, #23
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f7ff fbc4 	bl	8008674 <lsm6dsv16x_read_reg>
 8008eec:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d001      	beq.n	8008ef8 <lsm6dsv16x_xl_full_scale_get+0x24>
  {
    return ret;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	e026      	b.n	8008f46 <lsm6dsv16x_xl_full_scale_get+0x72>
  }

  switch (ctrl8.fs_xl)
 8008ef8:	7a3b      	ldrb	r3, [r7, #8]
 8008efa:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	2b03      	cmp	r3, #3
 8008f02:	d81b      	bhi.n	8008f3c <lsm6dsv16x_xl_full_scale_get+0x68>
 8008f04:	a201      	add	r2, pc, #4	@ (adr r2, 8008f0c <lsm6dsv16x_xl_full_scale_get+0x38>)
 8008f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f0a:	bf00      	nop
 8008f0c:	08008f1d 	.word	0x08008f1d
 8008f10:	08008f25 	.word	0x08008f25
 8008f14:	08008f2d 	.word	0x08008f2d
 8008f18:	08008f35 	.word	0x08008f35
  {
    case LSM6DSV16X_2g:
      *val = LSM6DSV16X_2g;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	701a      	strb	r2, [r3, #0]
      break;
 8008f22:	e00f      	b.n	8008f44 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_4g:
      *val = LSM6DSV16X_4g;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	2201      	movs	r2, #1
 8008f28:	701a      	strb	r2, [r3, #0]
      break;
 8008f2a:	e00b      	b.n	8008f44 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_8g:
      *val = LSM6DSV16X_8g;
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	2202      	movs	r2, #2
 8008f30:	701a      	strb	r2, [r3, #0]
      break;
 8008f32:	e007      	b.n	8008f44 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_16g:
      *val = LSM6DSV16X_16g;
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	2203      	movs	r2, #3
 8008f38:	701a      	strb	r2, [r3, #0]
      break;
 8008f3a:	e003      	b.n	8008f44 <lsm6dsv16x_xl_full_scale_get+0x70>

    default:
      *val = LSM6DSV16X_2g;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	701a      	strb	r2, [r3, #0]
      break;
 8008f42:	bf00      	nop
  }

  return ret;
 8008f44:	68fb      	ldr	r3, [r7, #12]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop

08008f50 <lsm6dsv16x_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b086      	sub	sp, #24
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_G, &buff[0], 6);
 8008f5a:	f107 020c 	add.w	r2, r7, #12
 8008f5e:	2306      	movs	r3, #6
 8008f60:	2122      	movs	r1, #34	@ 0x22
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f7ff fb86 	bl	8008674 <lsm6dsv16x_read_reg>
 8008f68:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d001      	beq.n	8008f74 <lsm6dsv16x_angular_rate_raw_get+0x24>
  {
    return ret;
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	e036      	b.n	8008fe2 <lsm6dsv16x_angular_rate_raw_get+0x92>
  }

  val[0] = (int16_t)buff[1];
 8008f74:	7b7b      	ldrb	r3, [r7, #13]
 8008f76:	b21a      	sxth	r2, r3
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	021b      	lsls	r3, r3, #8
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	7b3a      	ldrb	r2, [r7, #12]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	b21a      	sxth	r2, r3
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8008f94:	7bfa      	ldrb	r2, [r7, #15]
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	3302      	adds	r3, #2
 8008f9a:	b212      	sxth	r2, r2
 8008f9c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	3302      	adds	r3, #2
 8008fa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	021b      	lsls	r3, r3, #8
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	7bba      	ldrb	r2, [r7, #14]
 8008fae:	4413      	add	r3, r2
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	3302      	adds	r3, #2
 8008fb6:	b212      	sxth	r2, r2
 8008fb8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8008fba:	7c7a      	ldrb	r2, [r7, #17]
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	3304      	adds	r3, #4
 8008fc0:	b212      	sxth	r2, r2
 8008fc2:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	3304      	adds	r3, #4
 8008fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	021b      	lsls	r3, r3, #8
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	7c3a      	ldrb	r2, [r7, #16]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	3304      	adds	r3, #4
 8008fdc:	b212      	sxth	r2, r2
 8008fde:	801a      	strh	r2, [r3, #0]

  return ret;
 8008fe0:	697b      	ldr	r3, [r7, #20]
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3718      	adds	r7, #24
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <lsm6dsv16x_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b086      	sub	sp, #24
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
 8008ff2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_A, &buff[0], 6);
 8008ff4:	f107 020c 	add.w	r2, r7, #12
 8008ff8:	2306      	movs	r3, #6
 8008ffa:	2128      	movs	r1, #40	@ 0x28
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f7ff fb39 	bl	8008674 <lsm6dsv16x_read_reg>
 8009002:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d001      	beq.n	800900e <lsm6dsv16x_acceleration_raw_get+0x24>
  {
    return ret;
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	e036      	b.n	800907c <lsm6dsv16x_acceleration_raw_get+0x92>
  }

  val[0] = (int16_t)buff[1];
 800900e:	7b7b      	ldrb	r3, [r7, #13]
 8009010:	b21a      	sxth	r2, r3
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	f9b3 3000 	ldrsh.w	r3, [r3]
 800901c:	b29b      	uxth	r3, r3
 800901e:	021b      	lsls	r3, r3, #8
 8009020:	b29b      	uxth	r3, r3
 8009022:	7b3a      	ldrb	r2, [r7, #12]
 8009024:	4413      	add	r3, r2
 8009026:	b29b      	uxth	r3, r3
 8009028:	b21a      	sxth	r2, r3
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800902e:	7bfa      	ldrb	r2, [r7, #15]
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	3302      	adds	r3, #2
 8009034:	b212      	sxth	r2, r2
 8009036:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	3302      	adds	r3, #2
 800903c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009040:	b29b      	uxth	r3, r3
 8009042:	021b      	lsls	r3, r3, #8
 8009044:	b29b      	uxth	r3, r3
 8009046:	7bba      	ldrb	r2, [r7, #14]
 8009048:	4413      	add	r3, r2
 800904a:	b29a      	uxth	r2, r3
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	3302      	adds	r3, #2
 8009050:	b212      	sxth	r2, r2
 8009052:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8009054:	7c7a      	ldrb	r2, [r7, #17]
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	3304      	adds	r3, #4
 800905a:	b212      	sxth	r2, r2
 800905c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	3304      	adds	r3, #4
 8009062:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009066:	b29b      	uxth	r3, r3
 8009068:	021b      	lsls	r3, r3, #8
 800906a:	b29b      	uxth	r3, r3
 800906c:	7c3a      	ldrb	r2, [r7, #16]
 800906e:	4413      	add	r3, r2
 8009070:	b29a      	uxth	r2, r3
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	3304      	adds	r3, #4
 8009076:	b212      	sxth	r2, r2
 8009078:	801a      	strh	r2, [r3, #0]

  return ret;
 800907a:	697b      	ldr	r3, [r7, #20]
}
 800907c:	4618      	mov	r0, r3
 800907e:	3718      	adds	r7, #24
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(const stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	460b      	mov	r3, r1
 800908e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8009090:	f107 0208 	add.w	r2, r7, #8
 8009094:	2301      	movs	r3, #1
 8009096:	210a      	movs	r1, #10
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f7ff faeb 	bl	8008674 <lsm6dsv16x_read_reg>
 800909e:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10f      	bne.n	80090c6 <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 80090a6:	78fb      	ldrb	r3, [r7, #3]
 80090a8:	f003 0307 	and.w	r3, r3, #7
 80090ac:	b2da      	uxtb	r2, r3
 80090ae:	7a3b      	ldrb	r3, [r7, #8]
 80090b0:	f362 0302 	bfi	r3, r2, #0, #3
 80090b4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 80090b6:	f107 0208 	add.w	r2, r7, #8
 80090ba:	2301      	movs	r3, #1
 80090bc:	210a      	movs	r1, #10
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f7ff faf6 	bl	80086b0 <lsm6dsv16x_write_reg>
 80090c4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80090c6:	68fb      	ldr	r3, [r7, #12]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <lsm6dsv16x_ah_qvar_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ah_qvar_mode_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_ah_qvar_mode_t val)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	7039      	strb	r1, [r7, #0]
  lsm6dsv16x_ctrl7_t ctrl7;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 80090da:	f107 0208 	add.w	r2, r7, #8
 80090de:	2301      	movs	r3, #1
 80090e0:	2116      	movs	r1, #22
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f7ff fac6 	bl	8008674 <lsm6dsv16x_read_reg>
 80090e8:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d10f      	bne.n	8009110 <lsm6dsv16x_ah_qvar_mode_set+0x40>
  {
    ctrl7.ah_qvar_en = val.ah_qvar_en;
 80090f0:	783b      	ldrb	r3, [r7, #0]
 80090f2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80090f6:	b2da      	uxtb	r2, r3
 80090f8:	7a3b      	ldrb	r3, [r7, #8]
 80090fa:	f362 13c7 	bfi	r3, r2, #7, #1
 80090fe:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 8009100:	f107 0208 	add.w	r2, r7, #8
 8009104:	2301      	movs	r3, #1
 8009106:	2116      	movs	r1, #22
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f7ff fad1 	bl	80086b0 <lsm6dsv16x_write_reg>
 800910e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009110:	68fb      	ldr	r3, [r7, #12]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
	...

0800911c <SHT40AD1B_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_RegisterBusIO(SHT40AD1B_Object_t *pObj, SHT40AD1B_IO_t *pIO)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d103      	bne.n	8009134 <SHT40AD1B_RegisterBusIO+0x18>
  {
    ret = SHT40AD1B_ERROR;
 800912c:	f04f 33ff 	mov.w	r3, #4294967295
 8009130:	60fb      	str	r3, [r7, #12]
 8009132:	e034      	b.n	800919e <SHT40AD1B_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init    = pIO->Init;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit  = pIO->DeInit;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	685a      	ldr	r2, [r3, #4]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType = pIO->BusType;
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	689a      	ldr	r2, [r3, #8]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address = pIO->Address;
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	7b1a      	ldrb	r2, [r3, #12]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	731a      	strb	r2, [r3, #12]
    pObj->IO.Write   = pIO->Write;
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	691a      	ldr	r2, [r3, #16]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	611a      	str	r2, [r3, #16]
    pObj->IO.Read    = pIO->Read;
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	695a      	ldr	r2, [r3, #20]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick = pIO->GetTick;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	699a      	ldr	r2, [r3, #24]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	4a0e      	ldr	r2, [pc, #56]	@ (80091a8 <SHT40AD1B_RegisterBusIO+0x8c>)
 8009170:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a0d      	ldr	r2, [pc, #52]	@ (80091ac <SHT40AD1B_RegisterBusIO+0x90>)
 8009176:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	69da      	ldr	r2, [r3, #28]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d004      	beq.n	8009198 <SHT40AD1B_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4798      	blx	r3
 8009194:	60f8      	str	r0, [r7, #12]
 8009196:	e002      	b.n	800919e <SHT40AD1B_RegisterBusIO+0x82>
    }
    else
    {
      ret = SHT40AD1B_ERROR;
 8009198:	f04f 33ff 	mov.w	r3, #4294967295
 800919c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800919e:	68fb      	ldr	r3, [r7, #12]
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3710      	adds	r7, #16
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	0800942d 	.word	0x0800942d
 80091ac:	0800946d 	.word	0x0800946d

080091b0 <SHT40AD1B_Init>:
  * @brief  Initialize the SHT40AD1B sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_Init(SHT40AD1B_Object_t *pObj)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  /* This device doesn't support ODR, works more like one-shot measurement */
  pObj->hum_odr  = 0.0f;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f04f 0200 	mov.w	r2, #0
 80091be:	635a      	str	r2, [r3, #52]	@ 0x34
  pObj->temp_odr = 0.0f;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f04f 0200 	mov.w	r2, #0
 80091c6:	639a      	str	r2, [r3, #56]	@ 0x38

  pObj->is_initialized = 1;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return SHT40AD1B_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	370c      	adds	r7, #12
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr

080091de <SHT40AD1B_DeInit>:
  * @brief  Deinitialize the SHT40AD1B sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_DeInit(SHT40AD1B_Object_t *pObj)
{
 80091de:	b480      	push	{r7}
 80091e0:	b083      	sub	sp, #12
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
  pObj->is_initialized = 0;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return SHT40AD1B_OK;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <SHT40AD1B_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_ReadID(SHT40AD1B_Object_t *pObj, uint8_t *Id)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b082      	sub	sp, #8
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  return sht40ad1b_device_id_get(&(pObj->Ctx), Id);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	3320      	adds	r3, #32
 800920a:	6839      	ldr	r1, [r7, #0]
 800920c:	4618      	mov	r0, r3
 800920e:	f000 fa23 	bl	8009658 <sht40ad1b_device_id_get>
 8009212:	4603      	mov	r3, r0
}
 8009214:	4618      	mov	r0, r3
 8009216:	3708      	adds	r7, #8
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <SHT40AD1B_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to SHT40AD1B sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_GetCapabilities(SHT40AD1B_Object_t *pObj, SHT40AD1B_Capabilities_t *Capabilities)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	2201      	movs	r2, #1
 800922a:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	2200      	movs	r2, #0
 8009230:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	2201      	movs	r2, #1
 8009236:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	2200      	movs	r2, #0
 800923c:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	2200      	movs	r2, #0
 8009242:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	f04f 0200 	mov.w	r2, #0
 800924a:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 0.0f;
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	f04f 0200 	mov.w	r2, #0
 8009252:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	f04f 0200 	mov.w	r2, #0
 800925a:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	f04f 0200 	mov.w	r2, #0
 8009262:	615a      	str	r2, [r3, #20]
  return SHT40AD1B_OK;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	370c      	adds	r7, #12
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr

08009272 <SHT40AD1B_HUM_Enable>:
  * @brief  Enable the SHT40AD1B humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_Enable(SHT40AD1B_Object_t *pObj)
{
 8009272:	b480      	push	{r7}
 8009274:	b083      	sub	sp, #12
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009280:	2b01      	cmp	r3, #1
 8009282:	d101      	bne.n	8009288 <SHT40AD1B_HUM_Enable+0x16>
  {
    return SHT40AD1B_OK;
 8009284:	2300      	movs	r3, #0
 8009286:	e004      	b.n	8009292 <SHT40AD1B_HUM_Enable+0x20>
  }

  pObj->hum_is_enabled = 1;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return SHT40AD1B_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	370c      	adds	r7, #12
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr

0800929e <SHT40AD1B_HUM_Disable>:
  * @brief  Disable the SHT40AD1B humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_Disable(SHT40AD1B_Object_t *pObj)
{
 800929e:	b480      	push	{r7}
 80092a0:	b083      	sub	sp, #12
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d101      	bne.n	80092b4 <SHT40AD1B_HUM_Disable+0x16>
  {
    return SHT40AD1B_OK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	e004      	b.n	80092be <SHT40AD1B_HUM_Disable+0x20>
  }

  pObj->hum_is_enabled = 0;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return SHT40AD1B_OK;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	370c      	adds	r7, #12
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr

080092ca <SHT40AD1B_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_GetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t *Odr)
{
 80092ca:	b480      	push	{r7}
 80092cc:	b083      	sub	sp, #12
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	6039      	str	r1, [r7, #0]
  *Odr = pObj->hum_odr;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	370c      	adds	r7, #12
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr

080092ea <SHT40AD1B_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_SetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t Odr)
{
 80092ea:	b480      	push	{r7}
 80092ec:	b083      	sub	sp, #12
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
 80092f2:	ed87 0a00 	vstr	s0, [r7]
  /* This device doesn't support ODR, works more like one-shot measurement */
  return SHT40AD1B_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <SHT40AD1B_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_GetHumidity(SHT40AD1B_Object_t *pObj, float_t *Value)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  if (GetData(pObj) != SHT40AD1B_OK)
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 f86f 	bl	80093f2 <GetData>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d002      	beq.n	8009320 <SHT40AD1B_HUM_GetHumidity+0x1c>
  {
    return SHT40AD1B_ERROR;
 800931a:	f04f 33ff 	mov.w	r3, #4294967295
 800931e:	e004      	b.n	800932a <SHT40AD1B_HUM_GetHumidity+0x26>
  }

  *Value = pObj->hum_value;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <SHT40AD1B_TEMP_Enable>:
  * @brief  Enable the SHT40AD1B temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_Enable(SHT40AD1B_Object_t *pObj)
{
 8009332:	b480      	push	{r7}
 8009334:	b083      	sub	sp, #12
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009340:	2b01      	cmp	r3, #1
 8009342:	d101      	bne.n	8009348 <SHT40AD1B_TEMP_Enable+0x16>
  {
    return SHT40AD1B_OK;
 8009344:	2300      	movs	r3, #0
 8009346:	e004      	b.n	8009352 <SHT40AD1B_TEMP_Enable+0x20>
  }

  pObj->temp_is_enabled = 1;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return SHT40AD1B_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	370c      	adds	r7, #12
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr

0800935e <SHT40AD1B_TEMP_Disable>:
  * @brief  Disable the SHT40AD1B temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_Disable(SHT40AD1B_Object_t *pObj)
{
 800935e:	b480      	push	{r7}
 8009360:	b083      	sub	sp, #12
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800936c:	2b00      	cmp	r3, #0
 800936e:	d101      	bne.n	8009374 <SHT40AD1B_TEMP_Disable+0x16>
  {
    return SHT40AD1B_OK;
 8009370:	2300      	movs	r3, #0
 8009372:	e004      	b.n	800937e <SHT40AD1B_TEMP_Disable+0x20>
  }

  pObj->temp_is_enabled = 0;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return SHT40AD1B_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	370c      	adds	r7, #12
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr

0800938a <SHT40AD1B_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_GetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t *Odr)
{
 800938a:	b480      	push	{r7}
 800938c:	b083      	sub	sp, #12
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
 8009392:	6039      	str	r1, [r7, #0]
  *Odr = pObj->temp_odr;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	370c      	adds	r7, #12
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <SHT40AD1B_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_SetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t Odr)
{
 80093aa:	b480      	push	{r7}
 80093ac:	b083      	sub	sp, #12
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	ed87 0a00 	vstr	s0, [r7]
  /* This device doesn't support ODR, works more like one-shot measurement */
  return SHT40AD1B_OK;
 80093b6:	2300      	movs	r3, #0
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <SHT40AD1B_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_GetTemperature(SHT40AD1B_Object_t *pObj, float_t *Value)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  if (GetData(pObj) != SHT40AD1B_OK)
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f80f 	bl	80093f2 <GetData>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d002      	beq.n	80093e0 <SHT40AD1B_TEMP_GetTemperature+0x1c>
  {
    return SHT40AD1B_ERROR;
 80093da:	f04f 33ff 	mov.w	r3, #4294967295
 80093de:	e004      	b.n	80093ea <SHT40AD1B_TEMP_GetTemperature+0x26>
  }

  *Value = pObj->temp_value;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <GetData>:
  * @param  pObj the device pObj
  * @param  Status the new data status
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t GetData(SHT40AD1B_Object_t *pObj)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b084      	sub	sp, #16
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
  float_t data[2];  /* humidity, temperature */

  if (sht40ad1b_data_get(&(pObj->Ctx), data) != 0)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	3320      	adds	r3, #32
 80093fe:	f107 0208 	add.w	r2, r7, #8
 8009402:	4611      	mov	r1, r2
 8009404:	4618      	mov	r0, r3
 8009406:	f000 f881 	bl	800950c <sht40ad1b_data_get>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d002      	beq.n	8009416 <GetData+0x24>
  {
    return SHT40AD1B_ERROR;
 8009410:	f04f 33ff 	mov.w	r3, #4294967295
 8009414:	e006      	b.n	8009424 <GetData+0x32>
  }

  pObj->hum_value = data[0];
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	63da      	str	r2, [r3, #60]	@ 0x3c
  pObj->temp_value = data[1];
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	641a      	str	r2, [r3, #64]	@ 0x40

  return SHT40AD1B_OK;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	3710      	adds	r7, #16
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b086      	sub	sp, #24
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	607a      	str	r2, [r7, #4]
 8009436:	461a      	mov	r2, r3
 8009438:	460b      	mov	r3, r1
 800943a:	72fb      	strb	r3, [r7, #11]
 800943c:	4613      	mov	r3, r2
 800943e:	813b      	strh	r3, [r7, #8]
  SHT40AD1B_Object_t *pObj = (SHT40AD1B_Object_t *)Handle;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	617b      	str	r3, [r7, #20]
  (void)Reg;

  if (pObj->IO.BusType == (uint32_t)SHT40AD1B_I2C_BUS) /* I2C */
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d109      	bne.n	8009460 <ReadRegWrap+0x34>
  {
    return pObj->IO.Read(pObj->IO.Address, pData, Length);
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	695b      	ldr	r3, [r3, #20]
 8009450:	697a      	ldr	r2, [r7, #20]
 8009452:	7b12      	ldrb	r2, [r2, #12]
 8009454:	4610      	mov	r0, r2
 8009456:	893a      	ldrh	r2, [r7, #8]
 8009458:	6879      	ldr	r1, [r7, #4]
 800945a:	4798      	blx	r3
 800945c:	4603      	mov	r3, r0
 800945e:	e001      	b.n	8009464 <ReadRegWrap+0x38>
  }
  else
  {
    return SHT40AD1B_ERROR;
 8009460:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8009464:	4618      	mov	r0, r3
 8009466:	3718      	adds	r7, #24
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b086      	sub	sp, #24
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	607a      	str	r2, [r7, #4]
 8009476:	461a      	mov	r2, r3
 8009478:	460b      	mov	r3, r1
 800947a:	72fb      	strb	r3, [r7, #11]
 800947c:	4613      	mov	r3, r2
 800947e:	813b      	strh	r3, [r7, #8]
  SHT40AD1B_Object_t *pObj = (SHT40AD1B_Object_t *)Handle;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	617b      	str	r3, [r7, #20]
  (void)Reg;

  if (pObj->IO.BusType == (uint32_t)SHT40AD1B_I2C_BUS) /* I2C */
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d109      	bne.n	80094a0 <WriteRegWrap+0x34>
  {
    return pObj->IO.Write(pObj->IO.Address, pData, Length);
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	691b      	ldr	r3, [r3, #16]
 8009490:	697a      	ldr	r2, [r7, #20]
 8009492:	7b12      	ldrb	r2, [r2, #12]
 8009494:	4610      	mov	r0, r2
 8009496:	893a      	ldrh	r2, [r7, #8]
 8009498:	6879      	ldr	r1, [r7, #4]
 800949a:	4798      	blx	r3
 800949c:	4603      	mov	r3, r0
 800949e:	e001      	b.n	80094a4 <WriteRegWrap+0x38>
  }
  else
  {
    return SHT40AD1B_ERROR;
 80094a0:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3718      	adds	r7, #24
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <sht40ad1b_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak sht40ad1b_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data, uint16_t len)
{
 80094ac:	b590      	push	{r4, r7, lr}
 80094ae:	b087      	sub	sp, #28
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	607a      	str	r2, [r7, #4]
 80094b6:	461a      	mov	r2, r3
 80094b8:	460b      	mov	r3, r1
 80094ba:	72fb      	strb	r3, [r7, #11]
 80094bc:	4613      	mov	r3, r2
 80094be:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	685c      	ldr	r4, [r3, #4]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	68d8      	ldr	r0, [r3, #12]
 80094c8:	893b      	ldrh	r3, [r7, #8]
 80094ca:	7af9      	ldrb	r1, [r7, #11]
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	47a0      	blx	r4
 80094d0:	6178      	str	r0, [r7, #20]

  return ret;
 80094d2:	697b      	ldr	r3, [r7, #20]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	371c      	adds	r7, #28
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd90      	pop	{r4, r7, pc}

080094dc <sht40ad1b_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak sht40ad1b_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data, uint16_t len)
{
 80094dc:	b590      	push	{r4, r7, lr}
 80094de:	b087      	sub	sp, #28
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	607a      	str	r2, [r7, #4]
 80094e6:	461a      	mov	r2, r3
 80094e8:	460b      	mov	r3, r1
 80094ea:	72fb      	strb	r3, [r7, #11]
 80094ec:	4613      	mov	r3, r2
 80094ee:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681c      	ldr	r4, [r3, #0]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	68d8      	ldr	r0, [r3, #12]
 80094f8:	893b      	ldrh	r3, [r7, #8]
 80094fa:	7af9      	ldrb	r1, [r7, #11]
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	47a0      	blx	r4
 8009500:	6178      	str	r0, [r7, #20]

  return ret;
 8009502:	697b      	ldr	r3, [r7, #20]
}
 8009504:	4618      	mov	r0, r3
 8009506:	371c      	adds	r7, #28
 8009508:	46bd      	mov	sp, r7
 800950a:	bd90      	pop	{r4, r7, pc}

0800950c <sht40ad1b_data_get>:
  * @param  buffer  buffer to store humidity and temperature values pair
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sht40ad1b_data_get(stmdev_ctx_t *ctx, float_t *buffer)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b088      	sub	sp, #32
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  uint8_t command = 0xFD;
 8009516:	23fd      	movs	r3, #253	@ 0xfd
 8009518:	73fb      	strb	r3, [r7, #15]
  uint8_t data[6] = {0};
 800951a:	f107 0308 	add.w	r3, r7, #8
 800951e:	2200      	movs	r2, #0
 8009520:	601a      	str	r2, [r3, #0]
 8009522:	809a      	strh	r2, [r3, #4]

  if (sht40ad1b_write_reg(ctx, 0, &command, 1) != 0)
 8009524:	f107 020f 	add.w	r2, r7, #15
 8009528:	2301      	movs	r3, #1
 800952a:	2100      	movs	r1, #0
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f7ff ffd5 	bl	80094dc <sht40ad1b_write_reg>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d001      	beq.n	800953c <sht40ad1b_data_get+0x30>
  {
    return 1;
 8009538:	2301      	movs	r3, #1
 800953a:	e07d      	b.n	8009638 <sht40ad1b_data_get+0x12c>
  }

  /* Wait 10 ms */
  ctx->mdelay(10);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	200a      	movs	r0, #10
 8009542:	4798      	blx	r3

  if (sht40ad1b_read_reg(ctx, 0, data, 6) != 0)
 8009544:	f107 0208 	add.w	r2, r7, #8
 8009548:	2306      	movs	r3, #6
 800954a:	2100      	movs	r1, #0
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f7ff ffad 	bl	80094ac <sht40ad1b_read_reg>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d001      	beq.n	800955c <sht40ad1b_data_get+0x50>
  {
    return 1;
 8009558:	2301      	movs	r3, #1
 800955a:	e06d      	b.n	8009638 <sht40ad1b_data_get+0x12c>
  }

  uint16_t temp_value_raw = (data[0] * 0x100U) + data[1];
 800955c:	7a3b      	ldrb	r3, [r7, #8]
 800955e:	021b      	lsls	r3, r3, #8
 8009560:	b29b      	uxth	r3, r3
 8009562:	7a7a      	ldrb	r2, [r7, #9]
 8009564:	4413      	add	r3, r2
 8009566:	83fb      	strh	r3, [r7, #30]
  uint8_t temp_value_crc  = data[2];
 8009568:	7abb      	ldrb	r3, [r7, #10]
 800956a:	777b      	strb	r3, [r7, #29]
  uint16_t hum_value_raw  = (data[3] * 0x100U) + data[4];
 800956c:	7afb      	ldrb	r3, [r7, #11]
 800956e:	021b      	lsls	r3, r3, #8
 8009570:	b29b      	uxth	r3, r3
 8009572:	7b3a      	ldrb	r2, [r7, #12]
 8009574:	4413      	add	r3, r2
 8009576:	837b      	strh	r3, [r7, #26]
  uint8_t hum_value_crc   = data[5];
 8009578:	7b7b      	ldrb	r3, [r7, #13]
 800957a:	767b      	strb	r3, [r7, #25]

  /* Check CRC for temperature value */
  if (crc_check(&data[0], 2, temp_value_crc) != 0U)
 800957c:	7f7a      	ldrb	r2, [r7, #29]
 800957e:	f107 0308 	add.w	r3, r7, #8
 8009582:	2102      	movs	r1, #2
 8009584:	4618      	mov	r0, r3
 8009586:	f000 f8b3 	bl	80096f0 <crc_check>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d001      	beq.n	8009594 <sht40ad1b_data_get+0x88>
  {
    return 1;
 8009590:	2301      	movs	r3, #1
 8009592:	e051      	b.n	8009638 <sht40ad1b_data_get+0x12c>
  }

  /* Check CRC for humidity value */
  if (crc_check(&data[3], 2, hum_value_crc) != 0U)
 8009594:	7e7a      	ldrb	r2, [r7, #25]
 8009596:	f107 0308 	add.w	r3, r7, #8
 800959a:	3303      	adds	r3, #3
 800959c:	2102      	movs	r1, #2
 800959e:	4618      	mov	r0, r3
 80095a0:	f000 f8a6 	bl	80096f0 <crc_check>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <sht40ad1b_data_get+0xa2>
  {
    return 1;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e044      	b.n	8009638 <sht40ad1b_data_get+0x12c>
  }

  float_t temp_value = -45.0f + (175.0f * (float_t)temp_value_raw / (float_t)0xFFFF);
 80095ae:	8bfb      	ldrh	r3, [r7, #30]
 80095b0:	ee07 3a90 	vmov	s15, r3
 80095b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095b8:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8009640 <sht40ad1b_data_get+0x134>
 80095bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80095c0:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8009644 <sht40ad1b_data_get+0x138>
 80095c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80095c8:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8009648 <sht40ad1b_data_get+0x13c>
 80095cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80095d0:	edc7 7a05 	vstr	s15, [r7, #20]
  float_t hum_value  =  -6.0f + (125.0f * (float_t)hum_value_raw  / (float_t)0xFFFF);
 80095d4:	8b7b      	ldrh	r3, [r7, #26]
 80095d6:	ee07 3a90 	vmov	s15, r3
 80095da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095de:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800964c <sht40ad1b_data_get+0x140>
 80095e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80095e6:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8009644 <sht40ad1b_data_get+0x138>
 80095ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80095ee:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80095f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80095f6:	edc7 7a04 	vstr	s15, [r7, #16]

  hum_value = (hum_value > 100.0f) ? 100.0f
              : (hum_value <   0.0f) ?   0.0f
 80095fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80095fe:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8009650 <sht40ad1b_data_get+0x144>
 8009602:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800960a:	dd01      	ble.n	8009610 <sht40ad1b_data_get+0x104>
 800960c:	4b11      	ldr	r3, [pc, #68]	@ (8009654 <sht40ad1b_data_get+0x148>)
 800960e:	e00a      	b.n	8009626 <sht40ad1b_data_get+0x11a>
              :                        hum_value;
 8009610:	edd7 7a04 	vldr	s15, [r7, #16]
 8009614:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800961c:	d502      	bpl.n	8009624 <sht40ad1b_data_get+0x118>
 800961e:	f04f 0300 	mov.w	r3, #0
 8009622:	e000      	b.n	8009626 <sht40ad1b_data_get+0x11a>
 8009624:	693b      	ldr	r3, [r7, #16]
  hum_value = (hum_value > 100.0f) ? 100.0f
 8009626:	613b      	str	r3, [r7, #16]

  buffer[0] = hum_value;
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	693a      	ldr	r2, [r7, #16]
 800962c:	601a      	str	r2, [r3, #0]
  buffer[1] = temp_value;
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	3304      	adds	r3, #4
 8009632:	697a      	ldr	r2, [r7, #20]
 8009634:	601a      	str	r2, [r3, #0]
  return 0;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3720      	adds	r7, #32
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	432f0000 	.word	0x432f0000
 8009644:	477fff00 	.word	0x477fff00
 8009648:	42340000 	.word	0x42340000
 800964c:	42fa0000 	.word	0x42fa0000
 8009650:	42c80000 	.word	0x42c80000
 8009654:	42c80000 	.word	0x42c80000

08009658 <sht40ad1b_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sht40ad1b_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  (void)ctx;
  *buff = SHT40AD1B_ID;
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	2200      	movs	r2, #0
 8009666:	701a      	strb	r2, [r3, #0]
  return 0;
 8009668:	2300      	movs	r3, #0
}
 800966a:	4618      	mov	r0, r3
 800966c:	370c      	adds	r7, #12
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr

08009676 <crc_calculate>:
  * @param  count  number of data bytes
  * @retval        CRC check sum of data stream
  *
  */
static uint8_t crc_calculate(const uint8_t *data, uint16_t count)
{
 8009676:	b480      	push	{r7}
 8009678:	b085      	sub	sp, #20
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
 800967e:	460b      	mov	r3, r1
 8009680:	807b      	strh	r3, [r7, #2]
  const uint8_t crc8_polynomial = 0x31;
 8009682:	2331      	movs	r3, #49	@ 0x31
 8009684:	72bb      	strb	r3, [r7, #10]
  uint8_t crc = 0xFF;
 8009686:	23ff      	movs	r3, #255	@ 0xff
 8009688:	73fb      	strb	r3, [r7, #15]

  /* Calculate 8-bit checksum for given polynomial */
  for (uint16_t index = 0; index < count; index++)
 800968a:	2300      	movs	r3, #0
 800968c:	81bb      	strh	r3, [r7, #12]
 800968e:	e024      	b.n	80096da <crc_calculate+0x64>
  {
    crc ^= data[index];
 8009690:	89bb      	ldrh	r3, [r7, #12]
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	4413      	add	r3, r2
 8009696:	781a      	ldrb	r2, [r3, #0]
 8009698:	7bfb      	ldrb	r3, [r7, #15]
 800969a:	4053      	eors	r3, r2
 800969c:	73fb      	strb	r3, [r7, #15]
    for (uint8_t crc_bit = 8U; crc_bit > 0U; crc_bit--)
 800969e:	2308      	movs	r3, #8
 80096a0:	72fb      	strb	r3, [r7, #11]
 80096a2:	e014      	b.n	80096ce <crc_calculate+0x58>
    {
      crc = ((crc & 0x80U) != 0U) ? ((crc << 1) ^ crc8_polynomial) : (crc << 1);
 80096a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	da09      	bge.n	80096c0 <crc_calculate+0x4a>
 80096ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096b0:	005b      	lsls	r3, r3, #1
 80096b2:	b25a      	sxtb	r2, r3
 80096b4:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80096b8:	4053      	eors	r3, r2
 80096ba:	b25b      	sxtb	r3, r3
 80096bc:	b2db      	uxtb	r3, r3
 80096be:	e002      	b.n	80096c6 <crc_calculate+0x50>
 80096c0:	7bfb      	ldrb	r3, [r7, #15]
 80096c2:	005b      	lsls	r3, r3, #1
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	73fb      	strb	r3, [r7, #15]
    for (uint8_t crc_bit = 8U; crc_bit > 0U; crc_bit--)
 80096c8:	7afb      	ldrb	r3, [r7, #11]
 80096ca:	3b01      	subs	r3, #1
 80096cc:	72fb      	strb	r3, [r7, #11]
 80096ce:	7afb      	ldrb	r3, [r7, #11]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1e7      	bne.n	80096a4 <crc_calculate+0x2e>
  for (uint16_t index = 0; index < count; index++)
 80096d4:	89bb      	ldrh	r3, [r7, #12]
 80096d6:	3301      	adds	r3, #1
 80096d8:	81bb      	strh	r3, [r7, #12]
 80096da:	89ba      	ldrh	r2, [r7, #12]
 80096dc:	887b      	ldrh	r3, [r7, #2]
 80096de:	429a      	cmp	r2, r3
 80096e0:	d3d6      	bcc.n	8009690 <crc_calculate+0x1a>
    }
  }

  return crc;
 80096e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3714      	adds	r7, #20
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <crc_check>:
  * @param  crc    CRC check sum of data stream
  * @retval        0 if CRC is OK else 1
  *
  */
static uint8_t crc_check(const uint8_t *data, uint16_t count, uint8_t crc)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	460b      	mov	r3, r1
 80096fa:	807b      	strh	r3, [r7, #2]
 80096fc:	4613      	mov	r3, r2
 80096fe:	707b      	strb	r3, [r7, #1]
  return (crc_calculate(data, count) == crc) ? 0U : 1U;
 8009700:	887b      	ldrh	r3, [r7, #2]
 8009702:	4619      	mov	r1, r3
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f7ff ffb6 	bl	8009676 <crc_calculate>
 800970a:	4603      	mov	r3, r0
 800970c:	461a      	mov	r2, r3
 800970e:	787b      	ldrb	r3, [r7, #1]
 8009710:	4293      	cmp	r3, r2
 8009712:	bf14      	ite	ne
 8009714:	2301      	movne	r3, #1
 8009716:	2300      	moveq	r3, #0
 8009718:	b2db      	uxtb	r3, r3
}
 800971a:	4618      	mov	r0, r3
 800971c:	3708      	adds	r7, #8
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
	...

08009724 <STTS22H_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_RegisterBusIO(STTS22H_Object_t *pObj, STTS22H_IO_t *pIO)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d103      	bne.n	800973c <STTS22H_RegisterBusIO+0x18>
  {
    ret = STTS22H_ERROR;
 8009734:	f04f 33ff 	mov.w	r3, #4294967295
 8009738:	60fb      	str	r3, [r7, #12]
 800973a:	e034      	b.n	80097a6 <STTS22H_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	685a      	ldr	r2, [r3, #4]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	689a      	ldr	r2, [r3, #8]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	7b1a      	ldrb	r2, [r3, #12]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	691a      	ldr	r2, [r3, #16]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	695a      	ldr	r2, [r3, #20]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	699a      	ldr	r2, [r3, #24]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a0e      	ldr	r2, [pc, #56]	@ (80097b0 <STTS22H_RegisterBusIO+0x8c>)
 8009778:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4a0d      	ldr	r2, [pc, #52]	@ (80097b4 <STTS22H_RegisterBusIO+0x90>)
 800977e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	69da      	ldr	r2, [r3, #28]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d004      	beq.n	80097a0 <STTS22H_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4798      	blx	r3
 800979c:	60f8      	str	r0, [r7, #12]
 800979e:	e002      	b.n	80097a6 <STTS22H_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS22H_ERROR;
 80097a0:	f04f 33ff 	mov.w	r3, #4294967295
 80097a4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80097a6:	68fb      	ldr	r3, [r7, #12]
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	08009bc1 	.word	0x08009bc1
 80097b4:	08009c2f 	.word	0x08009c2f

080097b8 <STTS22H_Init>:
  * @brief  Initialize the STTS22H sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_Init(STTS22H_Object_t *pObj)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d127      	bne.n	800981a <STTS22H_Init+0x62>
  {
    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80097d0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable BDU */
    if (stts22h_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	3320      	adds	r3, #32
 80097d6:	2101      	movs	r1, #1
 80097d8:	4618      	mov	r0, r3
 80097da:	f000 fbad 	bl	8009f38 <stts22h_block_data_update_set>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d002      	beq.n	80097ea <STTS22H_Init+0x32>
    {
      return STTS22H_ERROR;
 80097e4:	f04f 33ff 	mov.w	r3, #4294967295
 80097e8:	e01c      	b.n	8009824 <STTS22H_Init+0x6c>
    }

    /* Enable Automatic Address Increment */
    if (stts22h_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	3320      	adds	r3, #32
 80097ee:	2101      	movs	r1, #1
 80097f0:	4618      	mov	r0, r3
 80097f2:	f000 fbfa 	bl	8009fea <stts22h_auto_increment_set>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d002      	beq.n	8009802 <STTS22H_Init+0x4a>
    {
      return STTS22H_ERROR;
 80097fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009800:	e010      	b.n	8009824 <STTS22H_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	3320      	adds	r3, #32
 8009806:	2100      	movs	r1, #0
 8009808:	4618      	mov	r0, r3
 800980a:	f000 fa9d 	bl	8009d48 <stts22h_temp_data_rate_set>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d002      	beq.n	800981a <STTS22H_Init+0x62>
    {
      return STTS22H_ERROR;
 8009814:	f04f 33ff 	mov.w	r3, #4294967295
 8009818:	e004      	b.n	8009824 <STTS22H_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS22H_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3708      	adds	r7, #8
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <STTS22H_DeInit>:
  * @brief  Deinitialize the STTS22H sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_DeInit(STTS22H_Object_t *pObj)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800983a:	2b01      	cmp	r3, #1
 800983c:	d108      	bne.n	8009850 <STTS22H_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS22H_TEMP_Disable(pObj) != STTS22H_OK)
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 f878 	bl	8009934 <STTS22H_TEMP_Disable>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d002      	beq.n	8009850 <STTS22H_DeInit+0x24>
    {
      return STTS22H_ERROR;
 800984a:	f04f 33ff 	mov.w	r3, #4294967295
 800984e:	e004      	b.n	800985a <STTS22H_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS22H_OK;
 8009858:	2300      	movs	r3, #0
}
 800985a:	4618      	mov	r0, r3
 800985c:	3708      	adds	r7, #8
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <STTS22H_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_ReadID(STTS22H_Object_t *pObj, uint8_t *Id)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b084      	sub	sp, #16
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
 800986a:	6039      	str	r1, [r7, #0]
  uint8_t buf;

  if (stts22h_dev_id_get(&(pObj->Ctx), &buf) != STTS22H_OK)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	3320      	adds	r3, #32
 8009870:	f107 020f 	add.w	r2, r7, #15
 8009874:	4611      	mov	r1, r2
 8009876:	4618      	mov	r0, r3
 8009878:	f000 fba6 	bl	8009fc8 <stts22h_dev_id_get>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d002      	beq.n	8009888 <STTS22H_ReadID+0x26>
  {
    return STTS22H_ERROR;
 8009882:	f04f 33ff 	mov.w	r3, #4294967295
 8009886:	e003      	b.n	8009890 <STTS22H_ReadID+0x2e>
  }

  *Id = buf;
 8009888:	7bfa      	ldrb	r2, [r7, #15]
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	701a      	strb	r2, [r3, #0]

  return STTS22H_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3710      	adds	r7, #16
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <STTS22H_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS22H sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_GetCapabilities(STTS22H_Object_t *pObj, STTS22H_Capabilities_t *Capabilities)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	2200      	movs	r2, #0
 80098a6:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	2200      	movs	r2, #0
 80098ac:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	2201      	movs	r2, #1
 80098b2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	2200      	movs	r2, #0
 80098b8:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	2200      	movs	r2, #0
 80098be:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	f04f 0200 	mov.w	r2, #0
 80098c6:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	4a08      	ldr	r2, [pc, #32]	@ (80098ec <STTS22H_GetCapabilities+0x54>)
 80098cc:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	f04f 0200 	mov.w	r2, #0
 80098d4:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	f04f 0200 	mov.w	r2, #0
 80098dc:	615a      	str	r2, [r3, #20]
  return STTS22H_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr
 80098ec:	43480000 	.word	0x43480000

080098f0 <STTS22H_TEMP_Enable>:
  * @brief  Enable the STTS22H temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_Enable(STTS22H_Object_t *pObj)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d101      	bne.n	8009906 <STTS22H_TEMP_Enable+0x16>
  {
    return STTS22H_OK;
 8009902:	2300      	movs	r3, #0
 8009904:	e012      	b.n	800992c <STTS22H_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS22H_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS22H_OK)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800990c:	eeb0 0a67 	vmov.f32	s0, s15
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 f8e9 	bl	8009ae8 <STTS22H_TEMP_SetOutputDataRate>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d002      	beq.n	8009922 <STTS22H_TEMP_Enable+0x32>
  {
    return STTS22H_ERROR;
 800991c:	f04f 33ff 	mov.w	r3, #4294967295
 8009920:	e004      	b.n	800992c <STTS22H_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2201      	movs	r2, #1
 8009926:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS22H_OK;
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	3708      	adds	r7, #8
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <STTS22H_TEMP_Disable>:
  * @brief  Disable the STTS22H temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_Disable(STTS22H_Object_t *pObj)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009942:	2b00      	cmp	r3, #0
 8009944:	d101      	bne.n	800994a <STTS22H_TEMP_Disable+0x16>
  {
    return STTS22H_OK;
 8009946:	2300      	movs	r3, #0
 8009948:	e01c      	b.n	8009984 <STTS22H_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS22H_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS22H_OK)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	3334      	adds	r3, #52	@ 0x34
 800994e:	4619      	mov	r1, r3
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 f81b 	bl	800998c <STTS22H_TEMP_GetOutputDataRate>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d002      	beq.n	8009962 <STTS22H_TEMP_Disable+0x2e>
  {
    return STTS22H_ERROR;
 800995c:	f04f 33ff 	mov.w	r3, #4294967295
 8009960:	e010      	b.n	8009984 <STTS22H_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	3320      	adds	r3, #32
 8009966:	2100      	movs	r1, #0
 8009968:	4618      	mov	r0, r3
 800996a:	f000 f9ed 	bl	8009d48 <stts22h_temp_data_rate_set>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d002      	beq.n	800997a <STTS22H_TEMP_Disable+0x46>
  {
    return STTS22H_ERROR;
 8009974:	f04f 33ff 	mov.w	r3, #4294967295
 8009978:	e004      	b.n	8009984 <STTS22H_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS22H_OK;
 8009982:	2300      	movs	r3, #0
}
 8009984:	4618      	mov	r0, r3
 8009986:	3708      	adds	r7, #8
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <STTS22H_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_GetOutputDataRate(STTS22H_Object_t *pObj, float *Odr)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS22H_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	60fb      	str	r3, [r7, #12]
  stts22h_odr_temp_t odr_low_level;

  if (stts22h_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS22H_OK)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	3320      	adds	r3, #32
 800999e:	f107 020b 	add.w	r2, r7, #11
 80099a2:	4611      	mov	r1, r2
 80099a4:	4618      	mov	r0, r3
 80099a6:	f000 fa11 	bl	8009dcc <stts22h_temp_data_rate_get>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d002      	beq.n	80099b6 <STTS22H_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS22H_ERROR;
 80099b0:	f04f 33ff 	mov.w	r3, #4294967295
 80099b4:	e08b      	b.n	8009ace <STTS22H_TEMP_GetOutputDataRate+0x142>
  }

  switch (odr_low_level)
 80099b6:	7afb      	ldrb	r3, [r7, #11]
 80099b8:	2b32      	cmp	r3, #50	@ 0x32
 80099ba:	f200 8083 	bhi.w	8009ac4 <STTS22H_TEMP_GetOutputDataRate+0x138>
 80099be:	a201      	add	r2, pc, #4	@ (adr r2, 80099c4 <STTS22H_TEMP_GetOutputDataRate+0x38>)
 80099c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c4:	08009a91 	.word	0x08009a91
 80099c8:	08009a91 	.word	0x08009a91
 80099cc:	08009aa5 	.word	0x08009aa5
 80099d0:	08009ac5 	.word	0x08009ac5
 80099d4:	08009a9b 	.word	0x08009a9b
 80099d8:	08009ac5 	.word	0x08009ac5
 80099dc:	08009ac5 	.word	0x08009ac5
 80099e0:	08009ac5 	.word	0x08009ac5
 80099e4:	08009ac5 	.word	0x08009ac5
 80099e8:	08009ac5 	.word	0x08009ac5
 80099ec:	08009ac5 	.word	0x08009ac5
 80099f0:	08009ac5 	.word	0x08009ac5
 80099f4:	08009ac5 	.word	0x08009ac5
 80099f8:	08009ac5 	.word	0x08009ac5
 80099fc:	08009ac5 	.word	0x08009ac5
 8009a00:	08009ac5 	.word	0x08009ac5
 8009a04:	08009ac5 	.word	0x08009ac5
 8009a08:	08009ac5 	.word	0x08009ac5
 8009a0c:	08009aad 	.word	0x08009aad
 8009a10:	08009ac5 	.word	0x08009ac5
 8009a14:	08009ac5 	.word	0x08009ac5
 8009a18:	08009ac5 	.word	0x08009ac5
 8009a1c:	08009ac5 	.word	0x08009ac5
 8009a20:	08009ac5 	.word	0x08009ac5
 8009a24:	08009ac5 	.word	0x08009ac5
 8009a28:	08009ac5 	.word	0x08009ac5
 8009a2c:	08009ac5 	.word	0x08009ac5
 8009a30:	08009ac5 	.word	0x08009ac5
 8009a34:	08009ac5 	.word	0x08009ac5
 8009a38:	08009ac5 	.word	0x08009ac5
 8009a3c:	08009ac5 	.word	0x08009ac5
 8009a40:	08009ac5 	.word	0x08009ac5
 8009a44:	08009ac5 	.word	0x08009ac5
 8009a48:	08009ac5 	.word	0x08009ac5
 8009a4c:	08009ab5 	.word	0x08009ab5
 8009a50:	08009ac5 	.word	0x08009ac5
 8009a54:	08009ac5 	.word	0x08009ac5
 8009a58:	08009ac5 	.word	0x08009ac5
 8009a5c:	08009ac5 	.word	0x08009ac5
 8009a60:	08009ac5 	.word	0x08009ac5
 8009a64:	08009ac5 	.word	0x08009ac5
 8009a68:	08009ac5 	.word	0x08009ac5
 8009a6c:	08009ac5 	.word	0x08009ac5
 8009a70:	08009ac5 	.word	0x08009ac5
 8009a74:	08009ac5 	.word	0x08009ac5
 8009a78:	08009ac5 	.word	0x08009ac5
 8009a7c:	08009ac5 	.word	0x08009ac5
 8009a80:	08009ac5 	.word	0x08009ac5
 8009a84:	08009ac5 	.word	0x08009ac5
 8009a88:	08009ac5 	.word	0x08009ac5
 8009a8c:	08009abd 	.word	0x08009abd
  {
    case STTS22H_POWER_DOWN:
    case STTS22H_ONE_SHOT:
      *Odr = 0.0f;
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	f04f 0200 	mov.w	r2, #0
 8009a96:	601a      	str	r2, [r3, #0]
      break;
 8009a98:	e018      	b.n	8009acc <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_1Hz:
      *Odr = 1.0f;
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009aa0:	601a      	str	r2, [r3, #0]
      break;
 8009aa2:	e013      	b.n	8009acc <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_25Hz:
      *Odr = 25.0f;
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	4a0c      	ldr	r2, [pc, #48]	@ (8009ad8 <STTS22H_TEMP_GetOutputDataRate+0x14c>)
 8009aa8:	601a      	str	r2, [r3, #0]
      break;
 8009aaa:	e00f      	b.n	8009acc <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_50Hz:
      *Odr = 50.0f;
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	4a0b      	ldr	r2, [pc, #44]	@ (8009adc <STTS22H_TEMP_GetOutputDataRate+0x150>)
 8009ab0:	601a      	str	r2, [r3, #0]
      break;
 8009ab2:	e00b      	b.n	8009acc <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_100Hz:
      *Odr = 100.0f;
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8009ae0 <STTS22H_TEMP_GetOutputDataRate+0x154>)
 8009ab8:	601a      	str	r2, [r3, #0]
      break;
 8009aba:	e007      	b.n	8009acc <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_200Hz:
      *Odr = 200.0f;
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	4a09      	ldr	r2, [pc, #36]	@ (8009ae4 <STTS22H_TEMP_GetOutputDataRate+0x158>)
 8009ac0:	601a      	str	r2, [r3, #0]
      break;
 8009ac2:	e003      	b.n	8009acc <STTS22H_TEMP_GetOutputDataRate+0x140>

    default:
      ret = STTS22H_ERROR;
 8009ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ac8:	60fb      	str	r3, [r7, #12]
      break;
 8009aca:	bf00      	nop
  }

  return ret;
 8009acc:	68fb      	ldr	r3, [r7, #12]
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3710      	adds	r7, #16
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	41c80000 	.word	0x41c80000
 8009adc:	42480000 	.word	0x42480000
 8009ae0:	42c80000 	.word	0x42c80000
 8009ae4:	43480000 	.word	0x43480000

08009ae8 <STTS22H_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_SetOutputDataRate(STTS22H_Object_t *pObj, float Odr)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	ed87 0a00 	vstr	s0, [r7]
  stts22h_odr_temp_t new_odr;

  new_odr = (Odr <= 1.0f) ? STTS22H_1Hz
            : (Odr <= 25.0f) ? STTS22H_25Hz
 8009af4:	edd7 7a00 	vldr	s15, [r7]
 8009af8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b04:	d801      	bhi.n	8009b0a <STTS22H_TEMP_SetOutputDataRate+0x22>
 8009b06:	2304      	movs	r3, #4
 8009b08:	e021      	b.n	8009b4e <STTS22H_TEMP_SetOutputDataRate+0x66>
 8009b0a:	edd7 7a00 	vldr	s15, [r7]
 8009b0e:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8009b12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b1a:	d801      	bhi.n	8009b20 <STTS22H_TEMP_SetOutputDataRate+0x38>
 8009b1c:	2302      	movs	r3, #2
 8009b1e:	e016      	b.n	8009b4e <STTS22H_TEMP_SetOutputDataRate+0x66>
 8009b20:	edd7 7a00 	vldr	s15, [r7]
 8009b24:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8009b74 <STTS22H_TEMP_SetOutputDataRate+0x8c>
 8009b28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b30:	d801      	bhi.n	8009b36 <STTS22H_TEMP_SetOutputDataRate+0x4e>
 8009b32:	2312      	movs	r3, #18
 8009b34:	e00b      	b.n	8009b4e <STTS22H_TEMP_SetOutputDataRate+0x66>
 8009b36:	edd7 7a00 	vldr	s15, [r7]
 8009b3a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8009b78 <STTS22H_TEMP_SetOutputDataRate+0x90>
 8009b3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b46:	d801      	bhi.n	8009b4c <STTS22H_TEMP_SetOutputDataRate+0x64>
 8009b48:	2322      	movs	r3, #34	@ 0x22
 8009b4a:	e000      	b.n	8009b4e <STTS22H_TEMP_SetOutputDataRate+0x66>
 8009b4c:	2332      	movs	r3, #50	@ 0x32
  new_odr = (Odr <= 1.0f) ? STTS22H_1Hz
 8009b4e:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.0f) ? STTS22H_50Hz
            : (Odr <= 100.0f) ? STTS22H_100Hz
            :                    STTS22H_200Hz;

  if (stts22h_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS22H_OK)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	3320      	adds	r3, #32
 8009b54:	7bfa      	ldrb	r2, [r7, #15]
 8009b56:	4611      	mov	r1, r2
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f000 f8f5 	bl	8009d48 <stts22h_temp_data_rate_set>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d002      	beq.n	8009b6a <STTS22H_TEMP_SetOutputDataRate+0x82>
  {
    return STTS22H_ERROR;
 8009b64:	f04f 33ff 	mov.w	r3, #4294967295
 8009b68:	e000      	b.n	8009b6c <STTS22H_TEMP_SetOutputDataRate+0x84>
  }

  return STTS22H_OK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	42480000 	.word	0x42480000
 8009b78:	42c80000 	.word	0x42c80000

08009b7c <STTS22H_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_GetTemperature(STTS22H_Object_t *pObj, float *Value)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts22h_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS22H_OK)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	3320      	adds	r3, #32
 8009b8a:	f107 020e 	add.w	r2, r7, #14
 8009b8e:	4611      	mov	r1, r2
 8009b90:	4618      	mov	r0, r3
 8009b92:	f000 f9f7 	bl	8009f84 <stts22h_temperature_raw_get>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d002      	beq.n	8009ba2 <STTS22H_TEMP_GetTemperature+0x26>
  {
    return STTS22H_ERROR;
 8009b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba0:	e00a      	b.n	8009bb8 <STTS22H_TEMP_GetTemperature+0x3c>
  }

  *Value = stts22h_from_lsb_to_celsius(raw_value);
 8009ba2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f000 f8b4 	bl	8009d14 <stts22h_from_lsb_to_celsius>
 8009bac:	eef0 7a40 	vmov.f32	s15, s0
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	edc3 7a00 	vstr	s15, [r3]

  return STTS22H_OK;
 8009bb6:	2300      	movs	r3, #0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3710      	adds	r7, #16
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009bc0:	b590      	push	{r4, r7, lr}
 8009bc2:	b089      	sub	sp, #36	@ 0x24
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	607a      	str	r2, [r7, #4]
 8009bca:	461a      	mov	r2, r3
 8009bcc:	460b      	mov	r3, r1
 8009bce:	72fb      	strb	r3, [r7, #11]
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS22H_OK;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	61bb      	str	r3, [r7, #24]
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d11f      	bne.n	8009c24 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8009be4:	2300      	movs	r3, #0
 8009be6:	83fb      	strh	r3, [r7, #30]
 8009be8:	e018      	b.n	8009c1c <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	695c      	ldr	r4, [r3, #20]
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	7b1b      	ldrb	r3, [r3, #12]
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	7afb      	ldrb	r3, [r7, #11]
 8009bf6:	b29a      	uxth	r2, r3
 8009bf8:	8bfb      	ldrh	r3, [r7, #30]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	b299      	uxth	r1, r3
 8009bfe:	8bfb      	ldrh	r3, [r7, #30]
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	441a      	add	r2, r3
 8009c04:	2301      	movs	r3, #1
 8009c06:	47a0      	blx	r4
 8009c08:	61b8      	str	r0, [r7, #24]
      if (ret != STTS22H_OK)
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d002      	beq.n	8009c16 <ReadRegWrap+0x56>
      {
        return STTS22H_ERROR;
 8009c10:	f04f 33ff 	mov.w	r3, #4294967295
 8009c14:	e007      	b.n	8009c26 <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8009c16:	8bfb      	ldrh	r3, [r7, #30]
 8009c18:	3301      	adds	r3, #1
 8009c1a:	83fb      	strh	r3, [r7, #30]
 8009c1c:	8bfa      	ldrh	r2, [r7, #30]
 8009c1e:	893b      	ldrh	r3, [r7, #8]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d3e2      	bcc.n	8009bea <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 8009c24:	69bb      	ldr	r3, [r7, #24]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3724      	adds	r7, #36	@ 0x24
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd90      	pop	{r4, r7, pc}

08009c2e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009c2e:	b590      	push	{r4, r7, lr}
 8009c30:	b089      	sub	sp, #36	@ 0x24
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	60f8      	str	r0, [r7, #12]
 8009c36:	607a      	str	r2, [r7, #4]
 8009c38:	461a      	mov	r2, r3
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	72fb      	strb	r3, [r7, #11]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS22H_OK;
 8009c42:	2300      	movs	r3, #0
 8009c44:	61bb      	str	r3, [r7, #24]
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d11f      	bne.n	8009c92 <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8009c52:	2300      	movs	r3, #0
 8009c54:	83fb      	strh	r3, [r7, #30]
 8009c56:	e018      	b.n	8009c8a <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	691c      	ldr	r4, [r3, #16]
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	7b1b      	ldrb	r3, [r3, #12]
 8009c60:	4618      	mov	r0, r3
 8009c62:	7afb      	ldrb	r3, [r7, #11]
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	8bfb      	ldrh	r3, [r7, #30]
 8009c68:	4413      	add	r3, r2
 8009c6a:	b299      	uxth	r1, r3
 8009c6c:	8bfb      	ldrh	r3, [r7, #30]
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	441a      	add	r2, r3
 8009c72:	2301      	movs	r3, #1
 8009c74:	47a0      	blx	r4
 8009c76:	61b8      	str	r0, [r7, #24]
      if (ret != STTS22H_OK)
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d002      	beq.n	8009c84 <WriteRegWrap+0x56>
      {
        return STTS22H_ERROR;
 8009c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c82:	e007      	b.n	8009c94 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8009c84:	8bfb      	ldrh	r3, [r7, #30]
 8009c86:	3301      	adds	r3, #1
 8009c88:	83fb      	strh	r3, [r7, #30]
 8009c8a:	8bfa      	ldrh	r2, [r7, #30]
 8009c8c:	893b      	ldrh	r3, [r7, #8]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d3e2      	bcc.n	8009c58 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 8009c92:	69bb      	ldr	r3, [r7, #24]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3724      	adds	r7, #36	@ 0x24
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd90      	pop	{r4, r7, pc}

08009c9c <stts22h_read_reg>:
  *
  */
int32_t __weak stts22h_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8009c9c:	b590      	push	{r4, r7, lr}
 8009c9e:	b087      	sub	sp, #28
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	607a      	str	r2, [r7, #4]
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	460b      	mov	r3, r1
 8009caa:	72fb      	strb	r3, [r7, #11]
 8009cac:	4613      	mov	r3, r2
 8009cae:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d102      	bne.n	8009cbc <stts22h_read_reg+0x20>
 8009cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8009cba:	e009      	b.n	8009cd0 <stts22h_read_reg+0x34>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	685c      	ldr	r4, [r3, #4]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	68d8      	ldr	r0, [r3, #12]
 8009cc4:	893b      	ldrh	r3, [r7, #8]
 8009cc6:	7af9      	ldrb	r1, [r7, #11]
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	47a0      	blx	r4
 8009ccc:	6178      	str	r0, [r7, #20]

  return ret;
 8009cce:	697b      	ldr	r3, [r7, #20]
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	371c      	adds	r7, #28
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd90      	pop	{r4, r7, pc}

08009cd8 <stts22h_write_reg>:
  *
  */
int32_t __weak stts22h_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8009cd8:	b590      	push	{r4, r7, lr}
 8009cda:	b087      	sub	sp, #28
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	607a      	str	r2, [r7, #4]
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	72fb      	strb	r3, [r7, #11]
 8009ce8:	4613      	mov	r3, r2
 8009cea:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d102      	bne.n	8009cf8 <stts22h_write_reg+0x20>
 8009cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8009cf6:	e009      	b.n	8009d0c <stts22h_write_reg+0x34>

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681c      	ldr	r4, [r3, #0]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	68d8      	ldr	r0, [r3, #12]
 8009d00:	893b      	ldrh	r3, [r7, #8]
 8009d02:	7af9      	ldrb	r1, [r7, #11]
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	47a0      	blx	r4
 8009d08:	6178      	str	r0, [r7, #20]

  return ret;
 8009d0a:	697b      	ldr	r3, [r7, #20]
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	371c      	adds	r7, #28
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd90      	pop	{r4, r7, pc}

08009d14 <stts22h_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts22h_from_lsb_to_celsius(int16_t lsb)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 8009d1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d22:	ee07 3a90 	vmov	s15, r3
 8009d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d2a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8009d44 <stts22h_from_lsb_to_celsius+0x30>
 8009d2e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009d32:	eef0 7a66 	vmov.f32	s15, s13
}
 8009d36:	eeb0 0a67 	vmov.f32	s0, s15
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr
 8009d44:	42c80000 	.word	0x42c80000

08009d48 <stts22h_temp_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_set(const stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t val)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	460b      	mov	r3, r1
 8009d52:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 8009d54:	f107 0208 	add.w	r2, r7, #8
 8009d58:	2301      	movs	r3, #1
 8009d5a:	2104      	movs	r1, #4
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f7ff ff9d 	bl	8009c9c <stts22h_read_reg>
 8009d62:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d12a      	bne.n	8009dc0 <stts22h_temp_data_rate_set+0x78>
  {
    ctrl.one_shot = (uint8_t)val & 0x01U;
 8009d6a:	78fb      	ldrb	r3, [r7, #3]
 8009d6c:	f003 0301 	and.w	r3, r3, #1
 8009d70:	b2da      	uxtb	r2, r3
 8009d72:	7a3b      	ldrb	r3, [r7, #8]
 8009d74:	f362 0300 	bfi	r3, r2, #0, #1
 8009d78:	723b      	strb	r3, [r7, #8]
    ctrl.freerun = ((uint8_t)val & 0x02U) >> 1;
 8009d7a:	78fb      	ldrb	r3, [r7, #3]
 8009d7c:	085b      	lsrs	r3, r3, #1
 8009d7e:	f003 0301 	and.w	r3, r3, #1
 8009d82:	b2da      	uxtb	r2, r3
 8009d84:	7a3b      	ldrb	r3, [r7, #8]
 8009d86:	f362 0382 	bfi	r3, r2, #2, #1
 8009d8a:	723b      	strb	r3, [r7, #8]
    ctrl.low_odr_start = ((uint8_t)val & 0x04U) >> 2;
 8009d8c:	78fb      	ldrb	r3, [r7, #3]
 8009d8e:	089b      	lsrs	r3, r3, #2
 8009d90:	f003 0301 	and.w	r3, r3, #1
 8009d94:	b2da      	uxtb	r2, r3
 8009d96:	7a3b      	ldrb	r3, [r7, #8]
 8009d98:	f362 13c7 	bfi	r3, r2, #7, #1
 8009d9c:	723b      	strb	r3, [r7, #8]
    ctrl.avg = ((uint8_t)val & 0x30U) >> 4;
 8009d9e:	78fb      	ldrb	r3, [r7, #3]
 8009da0:	091b      	lsrs	r3, r3, #4
 8009da2:	f003 0303 	and.w	r3, r3, #3
 8009da6:	b2da      	uxtb	r2, r3
 8009da8:	7a3b      	ldrb	r3, [r7, #8]
 8009daa:	f362 1305 	bfi	r3, r2, #4, #2
 8009dae:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 8009db0:	f107 0208 	add.w	r2, r7, #8
 8009db4:	2301      	movs	r3, #1
 8009db6:	2104      	movs	r1, #4
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f7ff ff8d 	bl	8009cd8 <stts22h_write_reg>
 8009dbe:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
	...

08009dcc <stts22h_temp_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_get(const stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t *val)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL,
 8009dd6:	f107 0208 	add.w	r2, r7, #8
 8009dda:	2301      	movs	r3, #1
 8009ddc:	2104      	movs	r1, #4
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f7ff ff5c 	bl	8009c9c <stts22h_read_reg>
 8009de4:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl, 1);

  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 8009de6:	7a3b      	ldrb	r3, [r7, #8]
 8009de8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	461a      	mov	r2, r3
 8009df0:	7a3b      	ldrb	r3, [r7, #8]
 8009df2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	005b      	lsls	r3, r3, #1
 8009dfa:	431a      	orrs	r2, r3
 8009dfc:	7a3b      	ldrb	r3, [r7, #8]
 8009dfe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	431a      	orrs	r2, r3
                                                 2) |
          (ctrl.avg << 4))
 8009e08:	7a3b      	ldrb	r3, [r7, #8]
 8009e0a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	011b      	lsls	r3, r3, #4
                                                 2) |
 8009e12:	4313      	orrs	r3, r2
  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 8009e14:	2b32      	cmp	r3, #50	@ 0x32
 8009e16:	f200 8085 	bhi.w	8009f24 <stts22h_temp_data_rate_get+0x158>
 8009e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8009e20 <stts22h_temp_data_rate_get+0x54>)
 8009e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e20:	08009eed 	.word	0x08009eed
 8009e24:	08009ef5 	.word	0x08009ef5
 8009e28:	08009f05 	.word	0x08009f05
 8009e2c:	08009f25 	.word	0x08009f25
 8009e30:	08009efd 	.word	0x08009efd
 8009e34:	08009f25 	.word	0x08009f25
 8009e38:	08009f25 	.word	0x08009f25
 8009e3c:	08009f25 	.word	0x08009f25
 8009e40:	08009f25 	.word	0x08009f25
 8009e44:	08009f25 	.word	0x08009f25
 8009e48:	08009f25 	.word	0x08009f25
 8009e4c:	08009f25 	.word	0x08009f25
 8009e50:	08009f25 	.word	0x08009f25
 8009e54:	08009f25 	.word	0x08009f25
 8009e58:	08009f25 	.word	0x08009f25
 8009e5c:	08009f25 	.word	0x08009f25
 8009e60:	08009f25 	.word	0x08009f25
 8009e64:	08009f25 	.word	0x08009f25
 8009e68:	08009f0d 	.word	0x08009f0d
 8009e6c:	08009f25 	.word	0x08009f25
 8009e70:	08009f25 	.word	0x08009f25
 8009e74:	08009f25 	.word	0x08009f25
 8009e78:	08009f25 	.word	0x08009f25
 8009e7c:	08009f25 	.word	0x08009f25
 8009e80:	08009f25 	.word	0x08009f25
 8009e84:	08009f25 	.word	0x08009f25
 8009e88:	08009f25 	.word	0x08009f25
 8009e8c:	08009f25 	.word	0x08009f25
 8009e90:	08009f25 	.word	0x08009f25
 8009e94:	08009f25 	.word	0x08009f25
 8009e98:	08009f25 	.word	0x08009f25
 8009e9c:	08009f25 	.word	0x08009f25
 8009ea0:	08009f25 	.word	0x08009f25
 8009ea4:	08009f25 	.word	0x08009f25
 8009ea8:	08009f15 	.word	0x08009f15
 8009eac:	08009f25 	.word	0x08009f25
 8009eb0:	08009f25 	.word	0x08009f25
 8009eb4:	08009f25 	.word	0x08009f25
 8009eb8:	08009f25 	.word	0x08009f25
 8009ebc:	08009f25 	.word	0x08009f25
 8009ec0:	08009f25 	.word	0x08009f25
 8009ec4:	08009f25 	.word	0x08009f25
 8009ec8:	08009f25 	.word	0x08009f25
 8009ecc:	08009f25 	.word	0x08009f25
 8009ed0:	08009f25 	.word	0x08009f25
 8009ed4:	08009f25 	.word	0x08009f25
 8009ed8:	08009f25 	.word	0x08009f25
 8009edc:	08009f25 	.word	0x08009f25
 8009ee0:	08009f25 	.word	0x08009f25
 8009ee4:	08009f25 	.word	0x08009f25
 8009ee8:	08009f1d 	.word	0x08009f1d
  {
    case STTS22H_POWER_DOWN:
      *val = STTS22H_POWER_DOWN;
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	701a      	strb	r2, [r3, #0]
      break;
 8009ef2:	e01b      	b.n	8009f2c <stts22h_temp_data_rate_get+0x160>

    case STTS22H_ONE_SHOT:
      *val = STTS22H_ONE_SHOT;
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	701a      	strb	r2, [r3, #0]
      break;
 8009efa:	e017      	b.n	8009f2c <stts22h_temp_data_rate_get+0x160>

    case STTS22H_1Hz:
      *val = STTS22H_1Hz;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	2204      	movs	r2, #4
 8009f00:	701a      	strb	r2, [r3, #0]
      break;
 8009f02:	e013      	b.n	8009f2c <stts22h_temp_data_rate_get+0x160>

    case STTS22H_25Hz:
      *val = STTS22H_25Hz;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	2202      	movs	r2, #2
 8009f08:	701a      	strb	r2, [r3, #0]
      break;
 8009f0a:	e00f      	b.n	8009f2c <stts22h_temp_data_rate_get+0x160>

    case STTS22H_50Hz:
      *val = STTS22H_50Hz;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	2212      	movs	r2, #18
 8009f10:	701a      	strb	r2, [r3, #0]
      break;
 8009f12:	e00b      	b.n	8009f2c <stts22h_temp_data_rate_get+0x160>

    case STTS22H_100Hz:
      *val = STTS22H_100Hz;
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	2222      	movs	r2, #34	@ 0x22
 8009f18:	701a      	strb	r2, [r3, #0]
      break;
 8009f1a:	e007      	b.n	8009f2c <stts22h_temp_data_rate_get+0x160>

    case STTS22H_200Hz:
      *val = STTS22H_200Hz;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	2232      	movs	r2, #50	@ 0x32
 8009f20:	701a      	strb	r2, [r3, #0]
      break;
 8009f22:	e003      	b.n	8009f2c <stts22h_temp_data_rate_get+0x160>

    default:
      *val = STTS22H_POWER_DOWN;
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	2200      	movs	r2, #0
 8009f28:	701a      	strb	r2, [r3, #0]
      break;
 8009f2a:	bf00      	nop
  }

  return ret;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop

08009f38 <stts22h_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	460b      	mov	r3, r1
 8009f42:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 8009f44:	f107 0208 	add.w	r2, r7, #8
 8009f48:	2301      	movs	r3, #1
 8009f4a:	2104      	movs	r1, #4
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f7ff fea5 	bl	8009c9c <stts22h_read_reg>
 8009f52:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d10f      	bne.n	8009f7a <stts22h_block_data_update_set+0x42>
  {
    ctrl.bdu = val;
 8009f5a:	78fb      	ldrb	r3, [r7, #3]
 8009f5c:	f003 0301 	and.w	r3, r3, #1
 8009f60:	b2da      	uxtb	r2, r3
 8009f62:	7a3b      	ldrb	r3, [r7, #8]
 8009f64:	f362 1386 	bfi	r3, r2, #6, #1
 8009f68:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 8009f6a:	f107 0208 	add.w	r2, r7, #8
 8009f6e:	2301      	movs	r3, #1
 8009f70:	2104      	movs	r1, #4
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f7ff feb0 	bl	8009cd8 <stts22h_write_reg>
 8009f78:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3710      	adds	r7, #16
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <stts22h_temperature_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_TEMP_L_OUT, buff, 2);
 8009f8e:	f107 0208 	add.w	r2, r7, #8
 8009f92:	2302      	movs	r3, #2
 8009f94:	2106      	movs	r1, #6
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f7ff fe80 	bl	8009c9c <stts22h_read_reg>
 8009f9c:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8009f9e:	7a7b      	ldrb	r3, [r7, #9]
 8009fa0:	b21a      	sxth	r2, r3
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	021b      	lsls	r3, r3, #8
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	7a3a      	ldrb	r2, [r7, #8]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	b21a      	sxth	r2, r3
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	801a      	strh	r2, [r3, #0]

  return ret;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3710      	adds	r7, #16
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <stts22h_dev_id_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_dev_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_WHOAMI, buff, 1);
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	683a      	ldr	r2, [r7, #0]
 8009fd6:	2101      	movs	r1, #1
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f7ff fe5f 	bl	8009c9c <stts22h_read_reg>
 8009fde:	60f8      	str	r0, [r7, #12]

  return ret;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3710      	adds	r7, #16
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <stts22h_auto_increment_set>:
  * @param  val    Change the values of "if_add_inc" in reg STTS22H.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b084      	sub	sp, #16
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 8009ff6:	f107 0208 	add.w	r2, r7, #8
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	2104      	movs	r1, #4
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f7ff fe4c 	bl	8009c9c <stts22h_read_reg>
 800a004:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d10f      	bne.n	800a02c <stts22h_auto_increment_set+0x42>
  {
    ctrl.if_add_inc = (uint8_t)val;
 800a00c:	78fb      	ldrb	r3, [r7, #3]
 800a00e:	f003 0301 	and.w	r3, r3, #1
 800a012:	b2da      	uxtb	r2, r3
 800a014:	7a3b      	ldrb	r3, [r7, #8]
 800a016:	f362 03c3 	bfi	r3, r2, #3, #1
 800a01a:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800a01c:	f107 0208 	add.w	r2, r7, #8
 800a020:	2301      	movs	r3, #1
 800a022:	2104      	movs	r1, #4
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f7ff fe57 	bl	8009cd8 <stts22h_write_reg>
 800a02a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a02c:	68fb      	ldr	r3, [r7, #12]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
	...

0800a038 <IKS4A1_ENV_SENSOR_Init>:
  *         - ENV_PRESSURE
  *         - ENV_HUMIDITY
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b08c      	sub	sp, #48	@ 0x30
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800a042:	2300      	movs	r3, #0
 800a044:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t function = ENV_TEMPERATURE;
 800a046:	2301      	movs	r3, #1
 800a048:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 800a04a:	2300      	movs	r3, #0
 800a04c:	623b      	str	r3, [r7, #32]
  IKS4A1_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2b02      	cmp	r3, #2
 800a052:	d07c      	beq.n	800a14e <IKS4A1_ENV_SENSOR_Init+0x116>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2b02      	cmp	r3, #2
 800a058:	f200 80b2 	bhi.w	800a1c0 <IKS4A1_ENV_SENSOR_Init+0x188>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d003      	beq.n	800a06a <IKS4A1_ENV_SENSOR_Init+0x32>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2b01      	cmp	r3, #1
 800a066:	d039      	beq.n	800a0dc <IKS4A1_ENV_SENSOR_Init+0xa4>
 800a068:	e0aa      	b.n	800a1c0 <IKS4A1_ENV_SENSOR_Init+0x188>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_STTS22H_0 == 1)
    case IKS4A1_STTS22H_0:
      if (STTS22H_0_Probe(Functions) != BSP_ERROR_NONE)
 800a06a:	6838      	ldr	r0, [r7, #0]
 800a06c:	f000 f9ca 	bl	800a404 <STTS22H_0_Probe>
 800a070:	4603      	mov	r3, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d002      	beq.n	800a07c <IKS4A1_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800a076:	f04f 33ff 	mov.w	r3, #4294967295
 800a07a:	e0df      	b.n	800a23c <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a07c:	4a71      	ldr	r2, [pc, #452]	@ (800a244 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	4970      	ldr	r1, [pc, #448]	@ (800a248 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a08e:	f107 0108 	add.w	r1, r7, #8
 800a092:	4610      	mov	r0, r2
 800a094:	4798      	blx	r3
 800a096:	4603      	mov	r3, r0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d002      	beq.n	800a0a2 <IKS4A1_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a09c:	f06f 0306 	mvn.w	r3, #6
 800a0a0:	e0cc      	b.n	800a23c <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800a0a2:	7a3b      	ldrb	r3, [r7, #8]
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d103      	bne.n	800a0b0 <IKS4A1_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 800a0a8:	6a3b      	ldr	r3, [r7, #32]
 800a0aa:	f043 0301 	orr.w	r3, r3, #1
 800a0ae:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800a0b0:	7abb      	ldrb	r3, [r7, #10]
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d103      	bne.n	800a0be <IKS4A1_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 800a0b6:	6a3b      	ldr	r3, [r7, #32]
 800a0b8:	f043 0304 	orr.w	r3, r3, #4
 800a0bc:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800a0be:	7a7b      	ldrb	r3, [r7, #9]
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d103      	bne.n	800a0cc <IKS4A1_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 800a0c4:	6a3b      	ldr	r3, [r7, #32]
 800a0c6:	f043 0302 	orr.w	r3, r3, #2
 800a0ca:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800a0cc:	7afb      	ldrb	r3, [r7, #11]
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d17a      	bne.n	800a1c8 <IKS4A1_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 800a0d2:	6a3b      	ldr	r3, [r7, #32]
 800a0d4:	f043 0308 	orr.w	r3, r3, #8
 800a0d8:	623b      	str	r3, [r7, #32]
      }
      break;
 800a0da:	e075      	b.n	800a1c8 <IKS4A1_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_LPS22DF_0 == 1)
    case IKS4A1_LPS22DF_0:
      if (LPS22DF_0_Probe(Functions) != BSP_ERROR_NONE)
 800a0dc:	6838      	ldr	r0, [r7, #0]
 800a0de:	f000 fa47 	bl	800a570 <LPS22DF_0_Probe>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d002      	beq.n	800a0ee <IKS4A1_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 800a0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ec:	e0a6      	b.n	800a23c <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a0ee:	4a55      	ldr	r2, [pc, #340]	@ (800a244 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	4953      	ldr	r1, [pc, #332]	@ (800a248 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a100:	f107 0108 	add.w	r1, r7, #8
 800a104:	4610      	mov	r0, r2
 800a106:	4798      	blx	r3
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d002      	beq.n	800a114 <IKS4A1_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a10e:	f06f 0306 	mvn.w	r3, #6
 800a112:	e093      	b.n	800a23c <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800a114:	7a3b      	ldrb	r3, [r7, #8]
 800a116:	2b01      	cmp	r3, #1
 800a118:	d103      	bne.n	800a122 <IKS4A1_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 800a11a:	6a3b      	ldr	r3, [r7, #32]
 800a11c:	f043 0301 	orr.w	r3, r3, #1
 800a120:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800a122:	7abb      	ldrb	r3, [r7, #10]
 800a124:	2b01      	cmp	r3, #1
 800a126:	d103      	bne.n	800a130 <IKS4A1_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 800a128:	6a3b      	ldr	r3, [r7, #32]
 800a12a:	f043 0304 	orr.w	r3, r3, #4
 800a12e:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800a130:	7a7b      	ldrb	r3, [r7, #9]
 800a132:	2b01      	cmp	r3, #1
 800a134:	d103      	bne.n	800a13e <IKS4A1_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 800a136:	6a3b      	ldr	r3, [r7, #32]
 800a138:	f043 0302 	orr.w	r3, r3, #2
 800a13c:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800a13e:	7afb      	ldrb	r3, [r7, #11]
 800a140:	2b01      	cmp	r3, #1
 800a142:	d143      	bne.n	800a1cc <IKS4A1_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 800a144:	6a3b      	ldr	r3, [r7, #32]
 800a146:	f043 0308 	orr.w	r3, r3, #8
 800a14a:	623b      	str	r3, [r7, #32]
      }
      break;
 800a14c:	e03e      	b.n	800a1cc <IKS4A1_ENV_SENSOR_Init+0x194>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_SHT40AD1B_0 == 1)
    case IKS4A1_SHT40AD1B_0:
      if (SHT40AD1B_0_Probe(Functions) != BSP_ERROR_NONE)
 800a14e:	6838      	ldr	r0, [r7, #0]
 800a150:	f000 fade 	bl	800a710 <SHT40AD1B_0_Probe>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d002      	beq.n	800a160 <IKS4A1_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 800a15a:	f04f 33ff 	mov.w	r3, #4294967295
 800a15e:	e06d      	b.n	800a23c <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a160:	4a38      	ldr	r2, [pc, #224]	@ (800a244 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	4937      	ldr	r1, [pc, #220]	@ (800a248 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a172:	f107 0108 	add.w	r1, r7, #8
 800a176:	4610      	mov	r0, r2
 800a178:	4798      	blx	r3
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d002      	beq.n	800a186 <IKS4A1_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a180:	f06f 0306 	mvn.w	r3, #6
 800a184:	e05a      	b.n	800a23c <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800a186:	7a3b      	ldrb	r3, [r7, #8]
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d103      	bne.n	800a194 <IKS4A1_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 800a18c:	6a3b      	ldr	r3, [r7, #32]
 800a18e:	f043 0301 	orr.w	r3, r3, #1
 800a192:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800a194:	7abb      	ldrb	r3, [r7, #10]
 800a196:	2b01      	cmp	r3, #1
 800a198:	d103      	bne.n	800a1a2 <IKS4A1_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 800a19a:	6a3b      	ldr	r3, [r7, #32]
 800a19c:	f043 0304 	orr.w	r3, r3, #4
 800a1a0:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800a1a2:	7a7b      	ldrb	r3, [r7, #9]
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d103      	bne.n	800a1b0 <IKS4A1_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 800a1a8:	6a3b      	ldr	r3, [r7, #32]
 800a1aa:	f043 0302 	orr.w	r3, r3, #2
 800a1ae:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800a1b0:	7afb      	ldrb	r3, [r7, #11]
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d10c      	bne.n	800a1d0 <IKS4A1_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 800a1b6:	6a3b      	ldr	r3, [r7, #32]
 800a1b8:	f043 0308 	orr.w	r3, r3, #8
 800a1bc:	623b      	str	r3, [r7, #32]
      }
      break;
 800a1be:	e007      	b.n	800a1d0 <IKS4A1_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800a1c0:	f06f 0301 	mvn.w	r3, #1
 800a1c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800a1c6:	e004      	b.n	800a1d2 <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800a1c8:	bf00      	nop
 800a1ca:	e002      	b.n	800a1d2 <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800a1cc:	bf00      	nop
 800a1ce:	e000      	b.n	800a1d2 <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800a1d0:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800a1d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d001      	beq.n	800a1dc <IKS4A1_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 800a1d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1da:	e02f      	b.n	800a23c <IKS4A1_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS4A1_ENV_FUNCTIONS_NBR; i++)
 800a1dc:	2300      	movs	r3, #0
 800a1de:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1e0:	e028      	b.n	800a234 <IKS4A1_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800a1e2:	683a      	ldr	r2, [r7, #0]
 800a1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e6:	4013      	ands	r3, r2
 800a1e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d11c      	bne.n	800a228 <IKS4A1_ENV_SENSOR_Init+0x1f0>
 800a1ee:	6a3a      	ldr	r2, [r7, #32]
 800a1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d116      	bne.n	800a228 <IKS4A1_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800a1fa:	4a14      	ldr	r2, [pc, #80]	@ (800a24c <IKS4A1_ENV_SENSOR_Init+0x214>)
 800a1fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a202:	4913      	ldr	r1, [pc, #76]	@ (800a250 <IKS4A1_ENV_SENSOR_Init+0x218>)
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	0092      	lsls	r2, r2, #2
 800a208:	4413      	add	r3, r2
 800a20a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	490d      	ldr	r1, [pc, #52]	@ (800a248 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a218:	4610      	mov	r0, r2
 800a21a:	4798      	blx	r3
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d002      	beq.n	800a228 <IKS4A1_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800a222:	f06f 0304 	mvn.w	r3, #4
 800a226:	e009      	b.n	800a23c <IKS4A1_ENV_SENSOR_Init+0x204>
      }
    }
    function = function << 1;
 800a228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a22a:	005b      	lsls	r3, r3, #1
 800a22c:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (i = 0; i < IKS4A1_ENV_FUNCTIONS_NBR; i++)
 800a22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a230:	3301      	adds	r3, #1
 800a232:	627b      	str	r3, [r7, #36]	@ 0x24
 800a234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a236:	2b03      	cmp	r3, #3
 800a238:	d9d3      	bls.n	800a1e2 <IKS4A1_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 800a23a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3730      	adds	r7, #48	@ 0x30
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	20000504 	.word	0x20000504
 800a248:	200004c8 	.word	0x200004c8
 800a24c:	200001b0 	.word	0x200001b0
 800a250:	200004d4 	.word	0x200004d4

0800a254 <IKS4A1_ENV_SENSOR_GetCapabilities>:
  * @param  Instance Environmental sensor instance
  * @param  Capabilities pointer to Environmental sensor capabilities
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_GetCapabilities(uint32_t Instance, IKS4A1_ENV_SENSOR_Capabilities_t *Capabilities)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2b02      	cmp	r3, #2
 800a262:	d903      	bls.n	800a26c <IKS4A1_ENV_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a264:	f06f 0301 	mvn.w	r3, #1
 800a268:	60fb      	str	r3, [r7, #12]
 800a26a:	e014      	b.n	800a296 <IKS4A1_ENV_SENSOR_GetCapabilities+0x42>
  }
  else if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 800a26c:	4a0c      	ldr	r2, [pc, #48]	@ (800a2a0 <IKS4A1_ENV_SENSOR_GetCapabilities+0x4c>)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	490b      	ldr	r1, [pc, #44]	@ (800a2a4 <IKS4A1_ENV_SENSOR_GetCapabilities+0x50>)
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a27e:	6839      	ldr	r1, [r7, #0]
 800a280:	4610      	mov	r0, r2
 800a282:	4798      	blx	r3
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d003      	beq.n	800a292 <IKS4A1_ENV_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a28a:	f06f 0306 	mvn.w	r3, #6
 800a28e:	60fb      	str	r3, [r7, #12]
 800a290:	e001      	b.n	800a296 <IKS4A1_ENV_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800a292:	2300      	movs	r3, #0
 800a294:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a296:	68fb      	ldr	r3, [r7, #12]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	20000504 	.word	0x20000504
 800a2a4:	200004c8 	.word	0x200004c8

0800a2a8 <IKS4A1_ENV_SENSOR_ReadID>:
  * @param  Instance environmental sensor instance to be used
  * @param  Id WHOAMI value
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2b02      	cmp	r3, #2
 800a2b6:	d903      	bls.n	800a2c0 <IKS4A1_ENV_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a2b8:	f06f 0301 	mvn.w	r3, #1
 800a2bc:	60fb      	str	r3, [r7, #12]
 800a2be:	e014      	b.n	800a2ea <IKS4A1_ENV_SENSOR_ReadID+0x42>
  }
  else if (EnvDrv[Instance]->ReadID(EnvCompObj[Instance], Id) != BSP_ERROR_NONE)
 800a2c0:	4a0c      	ldr	r2, [pc, #48]	@ (800a2f4 <IKS4A1_ENV_SENSOR_ReadID+0x4c>)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	490b      	ldr	r1, [pc, #44]	@ (800a2f8 <IKS4A1_ENV_SENSOR_ReadID+0x50>)
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a2d2:	6839      	ldr	r1, [r7, #0]
 800a2d4:	4610      	mov	r0, r2
 800a2d6:	4798      	blx	r3
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d003      	beq.n	800a2e6 <IKS4A1_ENV_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a2de:	f06f 0306 	mvn.w	r3, #6
 800a2e2:	60fb      	str	r3, [r7, #12]
 800a2e4:	e001      	b.n	800a2ea <IKS4A1_ENV_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	20000504 	.word	0x20000504
 800a2f8:	200004c8 	.word	0x200004c8

0800a2fc <IKS4A1_ENV_SENSOR_GetOutputDataRate>:
  *         - ENV_HUMIDITY
  * @param  Odr pointer to Output Data Rate read value
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float_t *Odr)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b086      	sub	sp, #24
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d903      	bls.n	800a316 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a30e:	f06f 0301 	mvn.w	r3, #1
 800a312:	617b      	str	r3, [r7, #20]
 800a314:	e027      	b.n	800a366 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800a316:	4a16      	ldr	r2, [pc, #88]	@ (800a370 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x74>)
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	4013      	ands	r3, r2
 800a322:	68ba      	ldr	r2, [r7, #8]
 800a324:	429a      	cmp	r2, r3
 800a326:	d11b      	bne.n	800a360 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800a328:	4a12      	ldr	r2, [pc, #72]	@ (800a374 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x78>)
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a330:	4911      	ldr	r1, [pc, #68]	@ (800a378 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x7c>)
 800a332:	68fa      	ldr	r2, [r7, #12]
 800a334:	0092      	lsls	r2, r2, #2
 800a336:	4413      	add	r3, r2
 800a338:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a33c:	689b      	ldr	r3, [r3, #8]
 800a33e:	490f      	ldr	r1, [pc, #60]	@ (800a37c <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x80>)
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a346:	6879      	ldr	r1, [r7, #4]
 800a348:	4610      	mov	r0, r2
 800a34a:	4798      	blx	r3
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d003      	beq.n	800a35a <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a352:	f06f 0304 	mvn.w	r3, #4
 800a356:	617b      	str	r3, [r7, #20]
 800a358:	e005      	b.n	800a366 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a35a:	2300      	movs	r3, #0
 800a35c:	617b      	str	r3, [r7, #20]
 800a35e:	e002      	b.n	800a366 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800a360:	f06f 0301 	mvn.w	r3, #1
 800a364:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800a366:	697b      	ldr	r3, [r7, #20]
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3718      	adds	r7, #24
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	20000510 	.word	0x20000510
 800a374:	200001b0 	.word	0x200001b0
 800a378:	200004d4 	.word	0x200004d4
 800a37c:	200004c8 	.word	0x200004c8

0800a380 <IKS4A1_ENV_SENSOR_GetValue>:
  *         - ENV_HUMIDITY
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float_t *Value)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b086      	sub	sp, #24
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2b02      	cmp	r3, #2
 800a390:	d903      	bls.n	800a39a <IKS4A1_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a392:	f06f 0301 	mvn.w	r3, #1
 800a396:	617b      	str	r3, [r7, #20]
 800a398:	e027      	b.n	800a3ea <IKS4A1_ENV_SENSOR_GetValue+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800a39a:	4a16      	ldr	r2, [pc, #88]	@ (800a3f4 <IKS4A1_ENV_SENSOR_GetValue+0x74>)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	68ba      	ldr	r2, [r7, #8]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d11b      	bne.n	800a3e4 <IKS4A1_ENV_SENSOR_GetValue+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800a3ac:	4a12      	ldr	r2, [pc, #72]	@ (800a3f8 <IKS4A1_ENV_SENSOR_GetValue+0x78>)
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3b4:	4911      	ldr	r1, [pc, #68]	@ (800a3fc <IKS4A1_ENV_SENSOR_GetValue+0x7c>)
 800a3b6:	68fa      	ldr	r2, [r7, #12]
 800a3b8:	0092      	lsls	r2, r2, #2
 800a3ba:	4413      	add	r3, r2
 800a3bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a3c0:	691b      	ldr	r3, [r3, #16]
 800a3c2:	490f      	ldr	r1, [pc, #60]	@ (800a400 <IKS4A1_ENV_SENSOR_GetValue+0x80>)
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a3ca:	6879      	ldr	r1, [r7, #4]
 800a3cc:	4610      	mov	r0, r2
 800a3ce:	4798      	blx	r3
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d003      	beq.n	800a3de <IKS4A1_ENV_SENSOR_GetValue+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a3d6:	f06f 0304 	mvn.w	r3, #4
 800a3da:	617b      	str	r3, [r7, #20]
 800a3dc:	e005      	b.n	800a3ea <IKS4A1_ENV_SENSOR_GetValue+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	617b      	str	r3, [r7, #20]
 800a3e2:	e002      	b.n	800a3ea <IKS4A1_ENV_SENSOR_GetValue+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800a3e4:	f06f 0301 	mvn.w	r3, #1
 800a3e8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800a3ea:	697b      	ldr	r3, [r7, #20]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3718      	adds	r7, #24
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	20000510 	.word	0x20000510
 800a3f8:	200001b0 	.word	0x200001b0
 800a3fc:	200004d4 	.word	0x200004d4
 800a400:	200004c8 	.word	0x200004c8

0800a404 <STTS22H_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS22H_0_Probe(uint32_t Functions)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b092      	sub	sp, #72	@ 0x48
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  STTS22H_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800a40c:	2300      	movs	r3, #0
 800a40e:	647b      	str	r3, [r7, #68]	@ 0x44
  static STTS22H_Object_t stts22h_obj_0;
  STTS22H_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = STTS22H_I2C_BUS; /* I2C */
 800a410:	2300      	movs	r3, #0
 800a412:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = STTS22H_I2C_ADD_H;
 800a414:	2371      	movs	r3, #113	@ 0x71
 800a416:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800a41a:	4b47      	ldr	r3, [pc, #284]	@ (800a538 <STTS22H_0_Probe+0x134>)
 800a41c:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800a41e:	4b47      	ldr	r3, [pc, #284]	@ (800a53c <STTS22H_0_Probe+0x138>)
 800a420:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800a422:	4b47      	ldr	r3, [pc, #284]	@ (800a540 <STTS22H_0_Probe+0x13c>)
 800a424:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800a426:	4b47      	ldr	r3, [pc, #284]	@ (800a544 <STTS22H_0_Probe+0x140>)
 800a428:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800a42a:	4b47      	ldr	r3, [pc, #284]	@ (800a548 <STTS22H_0_Probe+0x144>)
 800a42c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800a42e:	4b47      	ldr	r3, [pc, #284]	@ (800a54c <STTS22H_0_Probe+0x148>)
 800a430:	643b      	str	r3, [r7, #64]	@ 0x40

  if (STTS22H_RegisterBusIO(&stts22h_obj_0, &io_ctx) != STTS22H_OK)
 800a432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a436:	4619      	mov	r1, r3
 800a438:	4845      	ldr	r0, [pc, #276]	@ (800a550 <STTS22H_0_Probe+0x14c>)
 800a43a:	f7ff f973 	bl	8009724 <STTS22H_RegisterBusIO>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d003      	beq.n	800a44c <STTS22H_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a444:	f06f 0306 	mvn.w	r3, #6
 800a448:	647b      	str	r3, [r7, #68]	@ 0x44
 800a44a:	e06f      	b.n	800a52c <STTS22H_0_Probe+0x128>
  }
  else if (STTS22H_ReadID(&stts22h_obj_0, &id) != STTS22H_OK)
 800a44c:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800a450:	4619      	mov	r1, r3
 800a452:	483f      	ldr	r0, [pc, #252]	@ (800a550 <STTS22H_0_Probe+0x14c>)
 800a454:	f7ff fa05 	bl	8009862 <STTS22H_ReadID>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d003      	beq.n	800a466 <STTS22H_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a45e:	f06f 0306 	mvn.w	r3, #6
 800a462:	647b      	str	r3, [r7, #68]	@ 0x44
 800a464:	e062      	b.n	800a52c <STTS22H_0_Probe+0x128>
  }
  else if (id != STTS22H_ID)
 800a466:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a46a:	2ba0      	cmp	r3, #160	@ 0xa0
 800a46c:	d003      	beq.n	800a476 <STTS22H_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a46e:	f06f 0306 	mvn.w	r3, #6
 800a472:	647b      	str	r3, [r7, #68]	@ 0x44
 800a474:	e05a      	b.n	800a52c <STTS22H_0_Probe+0x128>
  }
  else
  {
    (void)STTS22H_GetCapabilities(&stts22h_obj_0, &cap);
 800a476:	f107 0308 	add.w	r3, r7, #8
 800a47a:	4619      	mov	r1, r3
 800a47c:	4834      	ldr	r0, [pc, #208]	@ (800a550 <STTS22H_0_Probe+0x14c>)
 800a47e:	f7ff fa0b 	bl	8009898 <STTS22H_GetCapabilities>

    EnvCtx[IKS4A1_STTS22H_0].Functions = ((uint32_t)cap.Temperature)
 800a482:	7a3b      	ldrb	r3, [r7, #8]
 800a484:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800a486:	7a7b      	ldrb	r3, [r7, #9]
 800a488:	005b      	lsls	r3, r3, #1
 800a48a:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 800a48c:	7abb      	ldrb	r3, [r7, #10]
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800a492:	7afb      	ldrb	r3, [r7, #11]
 800a494:	00db      	lsls	r3, r3, #3
 800a496:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_STTS22H_0].Functions = ((uint32_t)cap.Temperature)
 800a498:	4a2e      	ldr	r2, [pc, #184]	@ (800a554 <STTS22H_0_Probe+0x150>)
 800a49a:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS4A1_STTS22H_0] = &stts22h_obj_0;
 800a49c:	4b2e      	ldr	r3, [pc, #184]	@ (800a558 <STTS22H_0_Probe+0x154>)
 800a49e:	4a2c      	ldr	r2, [pc, #176]	@ (800a550 <STTS22H_0_Probe+0x14c>)
 800a4a0:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_STTS22H_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS22H_COMMON_Driver;
 800a4a2:	4b2e      	ldr	r3, [pc, #184]	@ (800a55c <STTS22H_0_Probe+0x158>)
 800a4a4:	4a2e      	ldr	r2, [pc, #184]	@ (800a560 <STTS22H_0_Probe+0x15c>)
 800a4a6:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800a4a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d11d      	bne.n	800a4ea <STTS22H_0_Probe+0xe6>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f003 0301 	and.w	r3, r3, #1
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d018      	beq.n	800a4ea <STTS22H_0_Probe+0xe6>
 800a4b8:	7a3b      	ldrb	r3, [r7, #8]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d115      	bne.n	800a4ea <STTS22H_0_Probe+0xe6>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_STTS22H_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS22H_TEMP_Driver;
 800a4be:	4b29      	ldr	r3, [pc, #164]	@ (800a564 <STTS22H_0_Probe+0x160>)
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	4a29      	ldr	r2, [pc, #164]	@ (800a568 <STTS22H_0_Probe+0x164>)
 800a4c4:	4929      	ldr	r1, [pc, #164]	@ (800a56c <STTS22H_0_Probe+0x168>)
 800a4c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_STTS22H_0]->Init(EnvCompObj[IKS4A1_STTS22H_0]) != STTS22H_OK)
 800a4ca:	4b24      	ldr	r3, [pc, #144]	@ (800a55c <STTS22H_0_Probe+0x158>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a21      	ldr	r2, [pc, #132]	@ (800a558 <STTS22H_0_Probe+0x154>)
 800a4d2:	6812      	ldr	r2, [r2, #0]
 800a4d4:	4610      	mov	r0, r2
 800a4d6:	4798      	blx	r3
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d003      	beq.n	800a4e6 <STTS22H_0_Probe+0xe2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a4de:	f06f 0304 	mvn.w	r3, #4
 800a4e2:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4e4:	e001      	b.n	800a4ea <STTS22H_0_Probe+0xe6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800a4ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d107      	bne.n	800a500 <STTS22H_0_Probe+0xfc>
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f003 0304 	and.w	r3, r3, #4
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d002      	beq.n	800a500 <STTS22H_0_Probe+0xfc>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a4fa:	f06f 0304 	mvn.w	r3, #4
 800a4fe:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800a500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a502:	2b00      	cmp	r3, #0
 800a504:	d107      	bne.n	800a516 <STTS22H_0_Probe+0x112>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f003 0302 	and.w	r3, r3, #2
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d002      	beq.n	800a516 <STTS22H_0_Probe+0x112>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a510:	f06f 0304 	mvn.w	r3, #4
 800a514:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800a516:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d107      	bne.n	800a52c <STTS22H_0_Probe+0x128>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f003 0308 	and.w	r3, r3, #8
 800a522:	2b00      	cmp	r3, #0
 800a524:	d002      	beq.n	800a52c <STTS22H_0_Probe+0x128>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a526:	f06f 0304 	mvn.w	r3, #4
 800a52a:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800a52c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3748      	adds	r7, #72	@ 0x48
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	0800179d 	.word	0x0800179d
 800a53c:	08001819 	.word	0x08001819
 800a540:	080018cd 	.word	0x080018cd
 800a544:	08001869 	.word	0x08001869
 800a548:	080019d9 	.word	0x080019d9
 800a54c:	0800b8b5 	.word	0x0800b8b5
 800a550:	2000051c 	.word	0x2000051c
 800a554:	20000510 	.word	0x20000510
 800a558:	200004c8 	.word	0x200004c8
 800a55c:	20000504 	.word	0x20000504
 800a560:	2000018c 	.word	0x2000018c
 800a564:	200001b0 	.word	0x200001b0
 800a568:	200004d4 	.word	0x200004d4
 800a56c:	2000019c 	.word	0x2000019c

0800a570 <LPS22DF_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22DF_0_Probe(uint32_t Functions)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b092      	sub	sp, #72	@ 0x48
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  LPS22DF_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800a578:	2300      	movs	r3, #0
 800a57a:	647b      	str	r3, [r7, #68]	@ 0x44
  static LPS22DF_Object_t lps22df_obj_0;
  LPS22DF_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = LPS22DF_I2C_BUS; /* I2C */
 800a57c:	2300      	movs	r3, #0
 800a57e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = LPS22DF_I2C_ADD_H;
 800a580:	23bb      	movs	r3, #187	@ 0xbb
 800a582:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800a586:	4b53      	ldr	r3, [pc, #332]	@ (800a6d4 <LPS22DF_0_Probe+0x164>)
 800a588:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800a58a:	4b53      	ldr	r3, [pc, #332]	@ (800a6d8 <LPS22DF_0_Probe+0x168>)
 800a58c:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800a58e:	4b53      	ldr	r3, [pc, #332]	@ (800a6dc <LPS22DF_0_Probe+0x16c>)
 800a590:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800a592:	4b53      	ldr	r3, [pc, #332]	@ (800a6e0 <LPS22DF_0_Probe+0x170>)
 800a594:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800a596:	4b53      	ldr	r3, [pc, #332]	@ (800a6e4 <LPS22DF_0_Probe+0x174>)
 800a598:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800a59a:	4b53      	ldr	r3, [pc, #332]	@ (800a6e8 <LPS22DF_0_Probe+0x178>)
 800a59c:	643b      	str	r3, [r7, #64]	@ 0x40

  if (LPS22DF_RegisterBusIO(&lps22df_obj_0, &io_ctx) != LPS22DF_OK)
 800a59e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	4851      	ldr	r0, [pc, #324]	@ (800a6ec <LPS22DF_0_Probe+0x17c>)
 800a5a6:	f7fa f8bd 	bl	8004724 <LPS22DF_RegisterBusIO>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d003      	beq.n	800a5b8 <LPS22DF_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a5b0:	f06f 0306 	mvn.w	r3, #6
 800a5b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5b6:	e087      	b.n	800a6c8 <LPS22DF_0_Probe+0x158>
  }
  else if (LPS22DF_ReadID(&lps22df_obj_0, &id) != LPS22DF_OK)
 800a5b8:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800a5bc:	4619      	mov	r1, r3
 800a5be:	484b      	ldr	r0, [pc, #300]	@ (800a6ec <LPS22DF_0_Probe+0x17c>)
 800a5c0:	f7fa f959 	bl	8004876 <LPS22DF_ReadID>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d003      	beq.n	800a5d2 <LPS22DF_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a5ca:	f06f 0306 	mvn.w	r3, #6
 800a5ce:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5d0:	e07a      	b.n	800a6c8 <LPS22DF_0_Probe+0x158>
  }
  else if (id != LPS22DF_ID)
 800a5d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a5d6:	2bb4      	cmp	r3, #180	@ 0xb4
 800a5d8:	d003      	beq.n	800a5e2 <LPS22DF_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a5da:	f06f 0306 	mvn.w	r3, #6
 800a5de:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5e0:	e072      	b.n	800a6c8 <LPS22DF_0_Probe+0x158>
  }
  else
  {
    (void)LPS22DF_GetCapabilities(&lps22df_obj_0, &cap);
 800a5e2:	f107 0308 	add.w	r3, r7, #8
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	4840      	ldr	r0, [pc, #256]	@ (800a6ec <LPS22DF_0_Probe+0x17c>)
 800a5ea:	f7fa f95f 	bl	80048ac <LPS22DF_GetCapabilities>

    EnvCtx[IKS4A1_LPS22DF_0].Functions = ((uint32_t)cap.Temperature)
 800a5ee:	7a3b      	ldrb	r3, [r7, #8]
 800a5f0:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800a5f2:	7a7b      	ldrb	r3, [r7, #9]
 800a5f4:	005b      	lsls	r3, r3, #1
 800a5f6:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 800a5f8:	7abb      	ldrb	r3, [r7, #10]
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800a5fe:	7afb      	ldrb	r3, [r7, #11]
 800a600:	00db      	lsls	r3, r3, #3
 800a602:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_LPS22DF_0].Functions = ((uint32_t)cap.Temperature)
 800a604:	4a3a      	ldr	r2, [pc, #232]	@ (800a6f0 <LPS22DF_0_Probe+0x180>)
 800a606:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS4A1_LPS22DF_0] = &lps22df_obj_0;
 800a608:	4b3a      	ldr	r3, [pc, #232]	@ (800a6f4 <LPS22DF_0_Probe+0x184>)
 800a60a:	4a38      	ldr	r2, [pc, #224]	@ (800a6ec <LPS22DF_0_Probe+0x17c>)
 800a60c:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_LPS22DF_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22DF_COMMON_Driver;
 800a60e:	4b3a      	ldr	r3, [pc, #232]	@ (800a6f8 <LPS22DF_0_Probe+0x188>)
 800a610:	4a3a      	ldr	r2, [pc, #232]	@ (800a6fc <LPS22DF_0_Probe+0x18c>)
 800a612:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800a614:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a616:	2b00      	cmp	r3, #0
 800a618:	d11e      	bne.n	800a658 <LPS22DF_0_Probe+0xe8>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f003 0301 	and.w	r3, r3, #1
 800a620:	2b00      	cmp	r3, #0
 800a622:	d019      	beq.n	800a658 <LPS22DF_0_Probe+0xe8>
 800a624:	7a3b      	ldrb	r3, [r7, #8]
 800a626:	2b01      	cmp	r3, #1
 800a628:	d116      	bne.n	800a658 <LPS22DF_0_Probe+0xe8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_LPS22DF_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22DF_TEMP_Driver;
 800a62a:	4b35      	ldr	r3, [pc, #212]	@ (800a700 <LPS22DF_0_Probe+0x190>)
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	4a35      	ldr	r2, [pc, #212]	@ (800a704 <LPS22DF_0_Probe+0x194>)
 800a630:	3304      	adds	r3, #4
 800a632:	4935      	ldr	r1, [pc, #212]	@ (800a708 <LPS22DF_0_Probe+0x198>)
 800a634:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_LPS22DF_0]->Init(EnvCompObj[IKS4A1_LPS22DF_0]) != LPS22DF_OK)
 800a638:	4b2f      	ldr	r3, [pc, #188]	@ (800a6f8 <LPS22DF_0_Probe+0x188>)
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a2d      	ldr	r2, [pc, #180]	@ (800a6f4 <LPS22DF_0_Probe+0x184>)
 800a640:	6852      	ldr	r2, [r2, #4]
 800a642:	4610      	mov	r0, r2
 800a644:	4798      	blx	r3
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d003      	beq.n	800a654 <LPS22DF_0_Probe+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a64c:	f06f 0304 	mvn.w	r3, #4
 800a650:	647b      	str	r3, [r7, #68]	@ 0x44
 800a652:	e001      	b.n	800a658 <LPS22DF_0_Probe+0xe8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a654:	2300      	movs	r3, #0
 800a656:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800a658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d11e      	bne.n	800a69c <LPS22DF_0_Probe+0x12c>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f003 0302 	and.w	r3, r3, #2
 800a664:	2b00      	cmp	r3, #0
 800a666:	d019      	beq.n	800a69c <LPS22DF_0_Probe+0x12c>
 800a668:	7a7b      	ldrb	r3, [r7, #9]
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d116      	bne.n	800a69c <LPS22DF_0_Probe+0x12c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_LPS22DF_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22DF_PRESS_Driver;
 800a66e:	4b24      	ldr	r3, [pc, #144]	@ (800a700 <LPS22DF_0_Probe+0x190>)
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	4a24      	ldr	r2, [pc, #144]	@ (800a704 <LPS22DF_0_Probe+0x194>)
 800a674:	3304      	adds	r3, #4
 800a676:	4925      	ldr	r1, [pc, #148]	@ (800a70c <LPS22DF_0_Probe+0x19c>)
 800a678:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_LPS22DF_0]->Init(EnvCompObj[IKS4A1_LPS22DF_0]) != LPS22DF_OK)
 800a67c:	4b1e      	ldr	r3, [pc, #120]	@ (800a6f8 <LPS22DF_0_Probe+0x188>)
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4a1c      	ldr	r2, [pc, #112]	@ (800a6f4 <LPS22DF_0_Probe+0x184>)
 800a684:	6852      	ldr	r2, [r2, #4]
 800a686:	4610      	mov	r0, r2
 800a688:	4798      	blx	r3
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d003      	beq.n	800a698 <LPS22DF_0_Probe+0x128>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a690:	f06f 0304 	mvn.w	r3, #4
 800a694:	647b      	str	r3, [r7, #68]	@ 0x44
 800a696:	e001      	b.n	800a69c <LPS22DF_0_Probe+0x12c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a698:	2300      	movs	r3, #0
 800a69a:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800a69c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d107      	bne.n	800a6b2 <LPS22DF_0_Probe+0x142>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f003 0304 	and.w	r3, r3, #4
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d002      	beq.n	800a6b2 <LPS22DF_0_Probe+0x142>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a6ac:	f06f 0304 	mvn.w	r3, #4
 800a6b0:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800a6b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d107      	bne.n	800a6c8 <LPS22DF_0_Probe+0x158>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f003 0308 	and.w	r3, r3, #8
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d002      	beq.n	800a6c8 <LPS22DF_0_Probe+0x158>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a6c2:	f06f 0304 	mvn.w	r3, #4
 800a6c6:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800a6c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3748      	adds	r7, #72	@ 0x48
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	0800179d 	.word	0x0800179d
 800a6d8:	08001819 	.word	0x08001819
 800a6dc:	080018cd 	.word	0x080018cd
 800a6e0:	08001869 	.word	0x08001869
 800a6e4:	080019d9 	.word	0x080019d9
 800a6e8:	0800b8b5 	.word	0x0800b8b5
 800a6ec:	20000554 	.word	0x20000554
 800a6f0:	20000510 	.word	0x20000510
 800a6f4:	200004c8 	.word	0x200004c8
 800a6f8:	20000504 	.word	0x20000504
 800a6fc:	2000006c 	.word	0x2000006c
 800a700:	200001b0 	.word	0x200001b0
 800a704:	200004d4 	.word	0x200004d4
 800a708:	20000090 	.word	0x20000090
 800a70c:	2000007c 	.word	0x2000007c

0800a710 <SHT40AD1B_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t SHT40AD1B_0_Probe(uint32_t Functions)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b092      	sub	sp, #72	@ 0x48
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  SHT40AD1B_IO_t            io_ctx;
  uint8_t                   id;
  int32_t                   ret = BSP_ERROR_NONE;
 800a718:	2300      	movs	r3, #0
 800a71a:	647b      	str	r3, [r7, #68]	@ 0x44
  static SHT40AD1B_Object_t sht40ad1b_obj_0;
  SHT40AD1B_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = SHT40AD1B_I2C_BUS; /* I2C */
 800a71c:	2300      	movs	r3, #0
 800a71e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = SHT40AD1B_I2C_ADDRESS;
 800a720:	2389      	movs	r3, #137	@ 0x89
 800a722:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800a726:	4b53      	ldr	r3, [pc, #332]	@ (800a874 <SHT40AD1B_0_Probe+0x164>)
 800a728:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800a72a:	4b53      	ldr	r3, [pc, #332]	@ (800a878 <SHT40AD1B_0_Probe+0x168>)
 800a72c:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.Read        = IKS4A1_I2C_READ;
 800a72e:	4b53      	ldr	r3, [pc, #332]	@ (800a87c <SHT40AD1B_0_Probe+0x16c>)
 800a730:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.Write       = IKS4A1_I2C_WRITE;
 800a732:	4b53      	ldr	r3, [pc, #332]	@ (800a880 <SHT40AD1B_0_Probe+0x170>)
 800a734:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800a736:	4b53      	ldr	r3, [pc, #332]	@ (800a884 <SHT40AD1B_0_Probe+0x174>)
 800a738:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800a73a:	4b53      	ldr	r3, [pc, #332]	@ (800a888 <SHT40AD1B_0_Probe+0x178>)
 800a73c:	643b      	str	r3, [r7, #64]	@ 0x40

  if (SHT40AD1B_RegisterBusIO(&sht40ad1b_obj_0, &io_ctx) != SHT40AD1B_OK)
 800a73e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a742:	4619      	mov	r1, r3
 800a744:	4851      	ldr	r0, [pc, #324]	@ (800a88c <SHT40AD1B_0_Probe+0x17c>)
 800a746:	f7fe fce9 	bl	800911c <SHT40AD1B_RegisterBusIO>
 800a74a:	4603      	mov	r3, r0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d003      	beq.n	800a758 <SHT40AD1B_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a750:	f06f 0306 	mvn.w	r3, #6
 800a754:	647b      	str	r3, [r7, #68]	@ 0x44
 800a756:	e087      	b.n	800a868 <SHT40AD1B_0_Probe+0x158>
  }
  else if (SHT40AD1B_ReadID(&sht40ad1b_obj_0, &id) != SHT40AD1B_OK)
 800a758:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800a75c:	4619      	mov	r1, r3
 800a75e:	484b      	ldr	r0, [pc, #300]	@ (800a88c <SHT40AD1B_0_Probe+0x17c>)
 800a760:	f7fe fd4c 	bl	80091fc <SHT40AD1B_ReadID>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d003      	beq.n	800a772 <SHT40AD1B_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a76a:	f06f 0306 	mvn.w	r3, #6
 800a76e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a770:	e07a      	b.n	800a868 <SHT40AD1B_0_Probe+0x158>
  }
  else if (id != SHT40AD1B_ID)
 800a772:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a776:	2b00      	cmp	r3, #0
 800a778:	d003      	beq.n	800a782 <SHT40AD1B_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a77a:	f06f 0306 	mvn.w	r3, #6
 800a77e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a780:	e072      	b.n	800a868 <SHT40AD1B_0_Probe+0x158>
  }
  else
  {
    (void)SHT40AD1B_GetCapabilities(&sht40ad1b_obj_0, &cap);
 800a782:	f107 0308 	add.w	r3, r7, #8
 800a786:	4619      	mov	r1, r3
 800a788:	4840      	ldr	r0, [pc, #256]	@ (800a88c <SHT40AD1B_0_Probe+0x17c>)
 800a78a:	f7fe fd47 	bl	800921c <SHT40AD1B_GetCapabilities>

    EnvCtx[IKS4A1_SHT40AD1B_0].Functions = ((uint32_t)cap.Temperature)
 800a78e:	7a3b      	ldrb	r3, [r7, #8]
 800a790:	461a      	mov	r2, r3
                                         | ((uint32_t)cap.Pressure << 1)
 800a792:	7a7b      	ldrb	r3, [r7, #9]
 800a794:	005b      	lsls	r3, r3, #1
 800a796:	431a      	orrs	r2, r3
                                         | ((uint32_t)cap.Humidity << 2)
 800a798:	7abb      	ldrb	r3, [r7, #10]
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	431a      	orrs	r2, r3
                                         | ((uint32_t)cap.Gas      << 3);
 800a79e:	7afb      	ldrb	r3, [r7, #11]
 800a7a0:	00db      	lsls	r3, r3, #3
 800a7a2:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_SHT40AD1B_0].Functions = ((uint32_t)cap.Temperature)
 800a7a4:	4a3a      	ldr	r2, [pc, #232]	@ (800a890 <SHT40AD1B_0_Probe+0x180>)
 800a7a6:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS4A1_SHT40AD1B_0] = &sht40ad1b_obj_0;
 800a7a8:	4b3a      	ldr	r3, [pc, #232]	@ (800a894 <SHT40AD1B_0_Probe+0x184>)
 800a7aa:	4a38      	ldr	r2, [pc, #224]	@ (800a88c <SHT40AD1B_0_Probe+0x17c>)
 800a7ac:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_SHT40AD1B_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&SHT40AD1B_COMMON_Driver;
 800a7ae:	4b3a      	ldr	r3, [pc, #232]	@ (800a898 <SHT40AD1B_0_Probe+0x188>)
 800a7b0:	4a3a      	ldr	r2, [pc, #232]	@ (800a89c <SHT40AD1B_0_Probe+0x18c>)
 800a7b2:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800a7b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d11e      	bne.n	800a7f8 <SHT40AD1B_0_Probe+0xe8>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f003 0301 	and.w	r3, r3, #1
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d019      	beq.n	800a7f8 <SHT40AD1B_0_Probe+0xe8>
 800a7c4:	7a3b      	ldrb	r3, [r7, #8]
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d116      	bne.n	800a7f8 <SHT40AD1B_0_Probe+0xe8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_SHT40AD1B_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&SHT40AD1B_TEMP_Driver;
 800a7ca:	4b35      	ldr	r3, [pc, #212]	@ (800a8a0 <SHT40AD1B_0_Probe+0x190>)
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	4a35      	ldr	r2, [pc, #212]	@ (800a8a4 <SHT40AD1B_0_Probe+0x194>)
 800a7d0:	3308      	adds	r3, #8
 800a7d2:	4935      	ldr	r1, [pc, #212]	@ (800a8a8 <SHT40AD1B_0_Probe+0x198>)
 800a7d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_SHT40AD1B_0]->Init(EnvCompObj[IKS4A1_SHT40AD1B_0]) != SHT40AD1B_OK)
 800a7d8:	4b2f      	ldr	r3, [pc, #188]	@ (800a898 <SHT40AD1B_0_Probe+0x188>)
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a2d      	ldr	r2, [pc, #180]	@ (800a894 <SHT40AD1B_0_Probe+0x184>)
 800a7e0:	6892      	ldr	r2, [r2, #8]
 800a7e2:	4610      	mov	r0, r2
 800a7e4:	4798      	blx	r3
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d003      	beq.n	800a7f4 <SHT40AD1B_0_Probe+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a7ec:	f06f 0304 	mvn.w	r3, #4
 800a7f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a7f2:	e001      	b.n	800a7f8 <SHT40AD1B_0_Probe+0xe8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800a7f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d11e      	bne.n	800a83c <SHT40AD1B_0_Probe+0x12c>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f003 0304 	and.w	r3, r3, #4
 800a804:	2b00      	cmp	r3, #0
 800a806:	d019      	beq.n	800a83c <SHT40AD1B_0_Probe+0x12c>
 800a808:	7abb      	ldrb	r3, [r7, #10]
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d116      	bne.n	800a83c <SHT40AD1B_0_Probe+0x12c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_SHT40AD1B_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&SHT40AD1B_HUM_Driver;
 800a80e:	4b24      	ldr	r3, [pc, #144]	@ (800a8a0 <SHT40AD1B_0_Probe+0x190>)
 800a810:	691b      	ldr	r3, [r3, #16]
 800a812:	4a24      	ldr	r2, [pc, #144]	@ (800a8a4 <SHT40AD1B_0_Probe+0x194>)
 800a814:	3308      	adds	r3, #8
 800a816:	4925      	ldr	r1, [pc, #148]	@ (800a8ac <SHT40AD1B_0_Probe+0x19c>)
 800a818:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_SHT40AD1B_0]->Init(EnvCompObj[IKS4A1_SHT40AD1B_0]) != SHT40AD1B_OK)
 800a81c:	4b1e      	ldr	r3, [pc, #120]	@ (800a898 <SHT40AD1B_0_Probe+0x188>)
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a1c      	ldr	r2, [pc, #112]	@ (800a894 <SHT40AD1B_0_Probe+0x184>)
 800a824:	6892      	ldr	r2, [r2, #8]
 800a826:	4610      	mov	r0, r2
 800a828:	4798      	blx	r3
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d003      	beq.n	800a838 <SHT40AD1B_0_Probe+0x128>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a830:	f06f 0304 	mvn.w	r3, #4
 800a834:	647b      	str	r3, [r7, #68]	@ 0x44
 800a836:	e001      	b.n	800a83c <SHT40AD1B_0_Probe+0x12c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a838:	2300      	movs	r3, #0
 800a83a:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800a83c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d107      	bne.n	800a852 <SHT40AD1B_0_Probe+0x142>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f003 0302 	and.w	r3, r3, #2
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d002      	beq.n	800a852 <SHT40AD1B_0_Probe+0x142>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a84c:	f06f 0304 	mvn.w	r3, #4
 800a850:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800a852:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a854:	2b00      	cmp	r3, #0
 800a856:	d107      	bne.n	800a868 <SHT40AD1B_0_Probe+0x158>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f003 0308 	and.w	r3, r3, #8
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d002      	beq.n	800a868 <SHT40AD1B_0_Probe+0x158>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a862:	f06f 0304 	mvn.w	r3, #4
 800a866:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800a868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3748      	adds	r7, #72	@ 0x48
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	0800179d 	.word	0x0800179d
 800a878:	08001819 	.word	0x08001819
 800a87c:	08001985 	.word	0x08001985
 800a880:	08001931 	.word	0x08001931
 800a884:	080019d9 	.word	0x080019d9
 800a888:	0800b8b5 	.word	0x0800b8b5
 800a88c:	2000058c 	.word	0x2000058c
 800a890:	20000510 	.word	0x20000510
 800a894:	200004c8 	.word	0x200004c8
 800a898:	20000504 	.word	0x20000504
 800a89c:	20000154 	.word	0x20000154
 800a8a0:	200001b0 	.word	0x200001b0
 800a8a4:	200004d4 	.word	0x200004d4
 800a8a8:	20000178 	.word	0x20000178
 800a8ac:	20000164 	.word	0x20000164

0800a8b0 <IKS4A1_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b08e      	sub	sp, #56	@ 0x38
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  IKS4A1_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2b03      	cmp	r3, #3
 800a8ca:	f200 80d4 	bhi.w	800aa76 <IKS4A1_MOTION_SENSOR_Init+0x1c6>
 800a8ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a8d4 <IKS4A1_MOTION_SENSOR_Init+0x24>)
 800a8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d4:	0800a8e5 	.word	0x0800a8e5
 800a8d8:	0800a94b 	.word	0x0800a94b
 800a8dc:	0800a9af 	.word	0x0800a9af
 800a8e0:	0800aa13 	.word	0x0800aa13
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS4A1_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800a8e4:	6838      	ldr	r0, [r7, #0]
 800a8e6:	f000 fa35 	bl	800ad54 <LIS2MDL_0_Probe>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d002      	beq.n	800a8f6 <IKS4A1_MOTION_SENSOR_Init+0x46>
      {
        return BSP_ERROR_NO_INIT;
 800a8f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a8f4:	e101      	b.n	800aafa <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a8f6:	4a83      	ldr	r2, [pc, #524]	@ (800ab04 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	4981      	ldr	r1, [pc, #516]	@ (800ab08 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a908:	f107 010c 	add.w	r1, r7, #12
 800a90c:	4610      	mov	r0, r2
 800a90e:	4798      	blx	r3
 800a910:	4603      	mov	r3, r0
 800a912:	2b00      	cmp	r3, #0
 800a914:	d002      	beq.n	800a91c <IKS4A1_MOTION_SENSOR_Init+0x6c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a916:	f06f 0306 	mvn.w	r3, #6
 800a91a:	e0ee      	b.n	800aafa <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800a91c:	7b3b      	ldrb	r3, [r7, #12]
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d103      	bne.n	800a92a <IKS4A1_MOTION_SENSOR_Init+0x7a>
      {
        component_functions |= MOTION_ACCELERO;
 800a922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a924:	f043 0302 	orr.w	r3, r3, #2
 800a928:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800a92a:	7b7b      	ldrb	r3, [r7, #13]
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d103      	bne.n	800a938 <IKS4A1_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_GYRO;
 800a930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a932:	f043 0301 	orr.w	r3, r3, #1
 800a936:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800a938:	7bbb      	ldrb	r3, [r7, #14]
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	f040 809f 	bne.w	800aa7e <IKS4A1_MOTION_SENSOR_Init+0x1ce>
      {
        component_functions |= MOTION_MAGNETO;
 800a940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a942:	f043 0304 	orr.w	r3, r3, #4
 800a946:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800a948:	e099      	b.n	800aa7e <IKS4A1_MOTION_SENSOR_Init+0x1ce>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LSM6DSV16X_0 == 1)
    case IKS4A1_LSM6DSV16X_0:
      if (LSM6DSV16X_0_Probe(Functions) != BSP_ERROR_NONE)
 800a94a:	6838      	ldr	r0, [r7, #0]
 800a94c:	f000 faaa 	bl	800aea4 <LSM6DSV16X_0_Probe>
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d002      	beq.n	800a95c <IKS4A1_MOTION_SENSOR_Init+0xac>
      {
        return BSP_ERROR_NO_INIT;
 800a956:	f04f 33ff 	mov.w	r3, #4294967295
 800a95a:	e0ce      	b.n	800aafa <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a95c:	4a69      	ldr	r2, [pc, #420]	@ (800ab04 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	4968      	ldr	r1, [pc, #416]	@ (800ab08 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800a968:	687a      	ldr	r2, [r7, #4]
 800a96a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a96e:	f107 010c 	add.w	r1, r7, #12
 800a972:	4610      	mov	r0, r2
 800a974:	4798      	blx	r3
 800a976:	4603      	mov	r3, r0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d002      	beq.n	800a982 <IKS4A1_MOTION_SENSOR_Init+0xd2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a97c:	f06f 0306 	mvn.w	r3, #6
 800a980:	e0bb      	b.n	800aafa <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800a982:	7b3b      	ldrb	r3, [r7, #12]
 800a984:	2b01      	cmp	r3, #1
 800a986:	d103      	bne.n	800a990 <IKS4A1_MOTION_SENSOR_Init+0xe0>
      {
        component_functions |= MOTION_ACCELERO;
 800a988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a98a:	f043 0302 	orr.w	r3, r3, #2
 800a98e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800a990:	7b7b      	ldrb	r3, [r7, #13]
 800a992:	2b01      	cmp	r3, #1
 800a994:	d103      	bne.n	800a99e <IKS4A1_MOTION_SENSOR_Init+0xee>
      {
        component_functions |= MOTION_GYRO;
 800a996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a998:	f043 0301 	orr.w	r3, r3, #1
 800a99c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800a99e:	7bbb      	ldrb	r3, [r7, #14]
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d16e      	bne.n	800aa82 <IKS4A1_MOTION_SENSOR_Init+0x1d2>
      {
        component_functions |= MOTION_MAGNETO;
 800a9a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9a6:	f043 0304 	orr.w	r3, r3, #4
 800a9aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800a9ac:	e069      	b.n	800aa82 <IKS4A1_MOTION_SENSOR_Init+0x1d2>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LIS2DUXS12_0 == 1)
    case IKS4A1_LIS2DUXS12_0:
      if (LIS2DUXS12_0_Probe(Functions) != BSP_ERROR_NONE)
 800a9ae:	6838      	ldr	r0, [r7, #0]
 800a9b0:	f000 fb44 	bl	800b03c <LIS2DUXS12_0_Probe>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d002      	beq.n	800a9c0 <IKS4A1_MOTION_SENSOR_Init+0x110>
      {
        return BSP_ERROR_NO_INIT;
 800a9ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a9be:	e09c      	b.n	800aafa <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a9c0:	4a50      	ldr	r2, [pc, #320]	@ (800ab04 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9c8:	68db      	ldr	r3, [r3, #12]
 800a9ca:	494f      	ldr	r1, [pc, #316]	@ (800ab08 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a9d2:	f107 010c 	add.w	r1, r7, #12
 800a9d6:	4610      	mov	r0, r2
 800a9d8:	4798      	blx	r3
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d002      	beq.n	800a9e6 <IKS4A1_MOTION_SENSOR_Init+0x136>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a9e0:	f06f 0306 	mvn.w	r3, #6
 800a9e4:	e089      	b.n	800aafa <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800a9e6:	7b3b      	ldrb	r3, [r7, #12]
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d103      	bne.n	800a9f4 <IKS4A1_MOTION_SENSOR_Init+0x144>
      {
        component_functions |= MOTION_ACCELERO;
 800a9ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ee:	f043 0302 	orr.w	r3, r3, #2
 800a9f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800a9f4:	7b7b      	ldrb	r3, [r7, #13]
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d103      	bne.n	800aa02 <IKS4A1_MOTION_SENSOR_Init+0x152>
      {
        component_functions |= MOTION_GYRO;
 800a9fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9fc:	f043 0301 	orr.w	r3, r3, #1
 800aa00:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800aa02:	7bbb      	ldrb	r3, [r7, #14]
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d13e      	bne.n	800aa86 <IKS4A1_MOTION_SENSOR_Init+0x1d6>
      {
        component_functions |= MOTION_MAGNETO;
 800aa08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa0a:	f043 0304 	orr.w	r3, r3, #4
 800aa0e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800aa10:	e039      	b.n	800aa86 <IKS4A1_MOTION_SENSOR_Init+0x1d6>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LSM6DSO16IS_0 == 1)
    case IKS4A1_LSM6DSO16IS_0:
      if (LSM6DSO16IS_0_Probe(Functions) != BSP_ERROR_NONE)
 800aa12:	6838      	ldr	r0, [r7, #0]
 800aa14:	f000 fbc8 	bl	800b1a8 <LSM6DSO16IS_0_Probe>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d002      	beq.n	800aa24 <IKS4A1_MOTION_SENSOR_Init+0x174>
      {
        return BSP_ERROR_NO_INIT;
 800aa1e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa22:	e06a      	b.n	800aafa <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800aa24:	4a37      	ldr	r2, [pc, #220]	@ (800ab04 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa2c:	68db      	ldr	r3, [r3, #12]
 800aa2e:	4936      	ldr	r1, [pc, #216]	@ (800ab08 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800aa36:	f107 010c 	add.w	r1, r7, #12
 800aa3a:	4610      	mov	r0, r2
 800aa3c:	4798      	blx	r3
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d002      	beq.n	800aa4a <IKS4A1_MOTION_SENSOR_Init+0x19a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800aa44:	f06f 0306 	mvn.w	r3, #6
 800aa48:	e057      	b.n	800aafa <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800aa4a:	7b3b      	ldrb	r3, [r7, #12]
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d103      	bne.n	800aa58 <IKS4A1_MOTION_SENSOR_Init+0x1a8>
      {
        component_functions |= MOTION_ACCELERO;
 800aa50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa52:	f043 0302 	orr.w	r3, r3, #2
 800aa56:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800aa58:	7b7b      	ldrb	r3, [r7, #13]
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d103      	bne.n	800aa66 <IKS4A1_MOTION_SENSOR_Init+0x1b6>
      {
        component_functions |= MOTION_GYRO;
 800aa5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa60:	f043 0301 	orr.w	r3, r3, #1
 800aa64:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800aa66:	7bbb      	ldrb	r3, [r7, #14]
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d10e      	bne.n	800aa8a <IKS4A1_MOTION_SENSOR_Init+0x1da>
      {
        component_functions |= MOTION_MAGNETO;
 800aa6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa6e:	f043 0304 	orr.w	r3, r3, #4
 800aa72:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800aa74:	e009      	b.n	800aa8a <IKS4A1_MOTION_SENSOR_Init+0x1da>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800aa76:	f06f 0301 	mvn.w	r3, #1
 800aa7a:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 800aa7c:	e006      	b.n	800aa8c <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800aa7e:	bf00      	nop
 800aa80:	e004      	b.n	800aa8c <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800aa82:	bf00      	nop
 800aa84:	e002      	b.n	800aa8c <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800aa86:	bf00      	nop
 800aa88:	e000      	b.n	800aa8c <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800aa8a:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800aa8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d001      	beq.n	800aa96 <IKS4A1_MOTION_SENSOR_Init+0x1e6>
  {
    return ret;
 800aa92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa94:	e031      	b.n	800aafa <IKS4A1_MOTION_SENSOR_Init+0x24a>
  }

  for (i = 0; i < IKS4A1_MOTION_FUNCTIONS_NBR; i++)
 800aa96:	2300      	movs	r3, #0
 800aa98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa9a:	e02a      	b.n	800aaf2 <IKS4A1_MOTION_SENSOR_Init+0x242>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800aa9c:	683a      	ldr	r2, [r7, #0]
 800aa9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaa0:	4013      	ands	r3, r2
 800aaa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d11e      	bne.n	800aae6 <IKS4A1_MOTION_SENSOR_Init+0x236>
 800aaa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aaaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaac:	4013      	ands	r3, r2
 800aaae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d118      	bne.n	800aae6 <IKS4A1_MOTION_SENSOR_Init+0x236>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800aab4:	4a15      	ldr	r2, [pc, #84]	@ (800ab0c <IKS4A1_MOTION_SENSOR_Init+0x25c>)
 800aab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800aabc:	4814      	ldr	r0, [pc, #80]	@ (800ab10 <IKS4A1_MOTION_SENSOR_Init+0x260>)
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	4613      	mov	r3, r2
 800aac2:	005b      	lsls	r3, r3, #1
 800aac4:	4413      	add	r3, r2
 800aac6:	440b      	add	r3, r1
 800aac8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	490e      	ldr	r1, [pc, #56]	@ (800ab08 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800aad6:	4610      	mov	r0, r2
 800aad8:	4798      	blx	r3
 800aada:	4603      	mov	r3, r0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d002      	beq.n	800aae6 <IKS4A1_MOTION_SENSOR_Init+0x236>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800aae0:	f06f 0304 	mvn.w	r3, #4
 800aae4:	e009      	b.n	800aafa <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
    }
    function = function << 1;
 800aae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae8:	005b      	lsls	r3, r3, #1
 800aaea:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < IKS4A1_MOTION_FUNCTIONS_NBR; i++)
 800aaec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaee:	3301      	adds	r3, #1
 800aaf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aaf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaf4:	2b02      	cmp	r3, #2
 800aaf6:	d9d1      	bls.n	800aa9c <IKS4A1_MOTION_SENSOR_Init+0x1ec>
  }

  return ret;
 800aaf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3738      	adds	r7, #56	@ 0x38
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	20000610 	.word	0x20000610
 800ab08:	200005d0 	.word	0x200005d0
 800ab0c:	200001f0 	.word	0x200001f0
 800ab10:	200005e0 	.word	0x200005e0

0800ab14 <IKS4A1_MOTION_SENSOR_GetCapabilities>:
  * @param  Instance Motion sensor instance
  * @param  Capabilities pointer to motion sensor capabilities
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetCapabilities(uint32_t Instance, IKS4A1_MOTION_SENSOR_Capabilities_t *Capabilities)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2b03      	cmp	r3, #3
 800ab22:	d903      	bls.n	800ab2c <IKS4A1_MOTION_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ab24:	f06f 0301 	mvn.w	r3, #1
 800ab28:	60fb      	str	r3, [r7, #12]
 800ab2a:	e014      	b.n	800ab56 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 800ab2c:	4a0c      	ldr	r2, [pc, #48]	@ (800ab60 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x4c>)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab34:	68db      	ldr	r3, [r3, #12]
 800ab36:	490b      	ldr	r1, [pc, #44]	@ (800ab64 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x50>)
 800ab38:	687a      	ldr	r2, [r7, #4]
 800ab3a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ab3e:	6839      	ldr	r1, [r7, #0]
 800ab40:	4610      	mov	r0, r2
 800ab42:	4798      	blx	r3
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d003      	beq.n	800ab52 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ab4a:	f06f 0306 	mvn.w	r3, #6
 800ab4e:	60fb      	str	r3, [r7, #12]
 800ab50:	e001      	b.n	800ab56 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800ab52:	2300      	movs	r3, #0
 800ab54:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ab56:	68fb      	ldr	r3, [r7, #12]
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3710      	adds	r7, #16
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	20000610 	.word	0x20000610
 800ab64:	200005d0 	.word	0x200005d0

0800ab68 <IKS4A1_MOTION_SENSOR_ReadID>:
  * @param  Instance Motion sensor instance
  * @param  Id WHOAMI value
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2b03      	cmp	r3, #3
 800ab76:	d903      	bls.n	800ab80 <IKS4A1_MOTION_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ab78:	f06f 0301 	mvn.w	r3, #1
 800ab7c:	60fb      	str	r3, [r7, #12]
 800ab7e:	e014      	b.n	800abaa <IKS4A1_MOTION_SENSOR_ReadID+0x42>
  }
  else if (MotionDrv[Instance]->ReadID(MotionCompObj[Instance], Id) != BSP_ERROR_NONE)
 800ab80:	4a0c      	ldr	r2, [pc, #48]	@ (800abb4 <IKS4A1_MOTION_SENSOR_ReadID+0x4c>)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab88:	689b      	ldr	r3, [r3, #8]
 800ab8a:	490b      	ldr	r1, [pc, #44]	@ (800abb8 <IKS4A1_MOTION_SENSOR_ReadID+0x50>)
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ab92:	6839      	ldr	r1, [r7, #0]
 800ab94:	4610      	mov	r0, r2
 800ab96:	4798      	blx	r3
 800ab98:	4603      	mov	r3, r0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d003      	beq.n	800aba6 <IKS4A1_MOTION_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ab9e:	f06f 0306 	mvn.w	r3, #6
 800aba2:	60fb      	str	r3, [r7, #12]
 800aba4:	e001      	b.n	800abaa <IKS4A1_MOTION_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800aba6:	2300      	movs	r3, #0
 800aba8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800abaa:	68fb      	ldr	r3, [r7, #12]
}
 800abac:	4618      	mov	r0, r3
 800abae:	3710      	adds	r7, #16
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	20000610 	.word	0x20000610
 800abb8:	200005d0 	.word	0x200005d0

0800abbc <IKS4A1_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS4A1_MOTION_SENSOR_Axes_t *Axes)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b086      	sub	sp, #24
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2b03      	cmp	r3, #3
 800abcc:	d903      	bls.n	800abd6 <IKS4A1_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800abce:	f06f 0301 	mvn.w	r3, #1
 800abd2:	617b      	str	r3, [r7, #20]
 800abd4:	e029      	b.n	800ac2a <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800abd6:	4a17      	ldr	r2, [pc, #92]	@ (800ac34 <IKS4A1_MOTION_SENSOR_GetAxes+0x78>)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	4013      	ands	r3, r2
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d11d      	bne.n	800ac24 <IKS4A1_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800abe8:	4a13      	ldr	r2, [pc, #76]	@ (800ac38 <IKS4A1_MOTION_SENSOR_GetAxes+0x7c>)
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800abf0:	4812      	ldr	r0, [pc, #72]	@ (800ac3c <IKS4A1_MOTION_SENSOR_GetAxes+0x80>)
 800abf2:	68fa      	ldr	r2, [r7, #12]
 800abf4:	4613      	mov	r3, r2
 800abf6:	005b      	lsls	r3, r3, #1
 800abf8:	4413      	add	r3, r2
 800abfa:	440b      	add	r3, r1
 800abfc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800ac00:	69db      	ldr	r3, [r3, #28]
 800ac02:	490f      	ldr	r1, [pc, #60]	@ (800ac40 <IKS4A1_MOTION_SENSOR_GetAxes+0x84>)
 800ac04:	68fa      	ldr	r2, [r7, #12]
 800ac06:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ac0a:	6879      	ldr	r1, [r7, #4]
 800ac0c:	4610      	mov	r0, r2
 800ac0e:	4798      	blx	r3
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d003      	beq.n	800ac1e <IKS4A1_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ac16:	f06f 0304 	mvn.w	r3, #4
 800ac1a:	617b      	str	r3, [r7, #20]
 800ac1c:	e005      	b.n	800ac2a <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	617b      	str	r3, [r7, #20]
 800ac22:	e002      	b.n	800ac2a <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800ac24:	f06f 0301 	mvn.w	r3, #1
 800ac28:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800ac2a:	697b      	ldr	r3, [r7, #20]
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3718      	adds	r7, #24
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}
 800ac34:	20000620 	.word	0x20000620
 800ac38:	200001f0 	.word	0x200001f0
 800ac3c:	200005e0 	.word	0x200005e0
 800ac40:	200005d0 	.word	0x200005d0

0800ac44 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>:
  *         - MOTION_MAGNETO
  * @param  Odr pointer to Output Data Rate read value
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float_t *Odr)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b086      	sub	sp, #24
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	60b9      	str	r1, [r7, #8]
 800ac4e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2b03      	cmp	r3, #3
 800ac54:	d903      	bls.n	800ac5e <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ac56:	f06f 0301 	mvn.w	r3, #1
 800ac5a:	617b      	str	r3, [r7, #20]
 800ac5c:	e029      	b.n	800acb2 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800ac5e:	4a17      	ldr	r2, [pc, #92]	@ (800acbc <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x78>)
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	4013      	ands	r3, r2
 800ac6a:	68ba      	ldr	r2, [r7, #8]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d11d      	bne.n	800acac <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800ac70:	4a13      	ldr	r2, [pc, #76]	@ (800acc0 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x7c>)
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ac78:	4812      	ldr	r0, [pc, #72]	@ (800acc4 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x80>)
 800ac7a:	68fa      	ldr	r2, [r7, #12]
 800ac7c:	4613      	mov	r3, r2
 800ac7e:	005b      	lsls	r3, r3, #1
 800ac80:	4413      	add	r3, r2
 800ac82:	440b      	add	r3, r1
 800ac84:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800ac88:	68db      	ldr	r3, [r3, #12]
 800ac8a:	490f      	ldr	r1, [pc, #60]	@ (800acc8 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x84>)
 800ac8c:	68fa      	ldr	r2, [r7, #12]
 800ac8e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ac92:	6879      	ldr	r1, [r7, #4]
 800ac94:	4610      	mov	r0, r2
 800ac96:	4798      	blx	r3
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d003      	beq.n	800aca6 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ac9e:	f06f 0304 	mvn.w	r3, #4
 800aca2:	617b      	str	r3, [r7, #20]
 800aca4:	e005      	b.n	800acb2 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800aca6:	2300      	movs	r3, #0
 800aca8:	617b      	str	r3, [r7, #20]
 800acaa:	e002      	b.n	800acb2 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800acac:	f06f 0301 	mvn.w	r3, #1
 800acb0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800acb2:	697b      	ldr	r3, [r7, #20]
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3718      	adds	r7, #24
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}
 800acbc:	20000620 	.word	0x20000620
 800acc0:	200001f0 	.word	0x200001f0
 800acc4:	200005e0 	.word	0x200005e0
 800acc8:	200005d0 	.word	0x200005d0

0800accc <IKS4A1_MOTION_SENSOR_GetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale pointer to Fullscale read value
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetFullScale(uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b086      	sub	sp, #24
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2b03      	cmp	r3, #3
 800acdc:	d903      	bls.n	800ace6 <IKS4A1_MOTION_SENSOR_GetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800acde:	f06f 0301 	mvn.w	r3, #1
 800ace2:	617b      	str	r3, [r7, #20]
 800ace4:	e029      	b.n	800ad3a <IKS4A1_MOTION_SENSOR_GetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800ace6:	4a17      	ldr	r2, [pc, #92]	@ (800ad44 <IKS4A1_MOTION_SENSOR_GetFullScale+0x78>)
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	4013      	ands	r3, r2
 800acf2:	68ba      	ldr	r2, [r7, #8]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d11d      	bne.n	800ad34 <IKS4A1_MOTION_SENSOR_GetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetFullScale(MotionCompObj[Instance],
 800acf8:	4a13      	ldr	r2, [pc, #76]	@ (800ad48 <IKS4A1_MOTION_SENSOR_GetFullScale+0x7c>)
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ad00:	4812      	ldr	r0, [pc, #72]	@ (800ad4c <IKS4A1_MOTION_SENSOR_GetFullScale+0x80>)
 800ad02:	68fa      	ldr	r2, [r7, #12]
 800ad04:	4613      	mov	r3, r2
 800ad06:	005b      	lsls	r3, r3, #1
 800ad08:	4413      	add	r3, r2
 800ad0a:	440b      	add	r3, r1
 800ad0c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800ad10:	695b      	ldr	r3, [r3, #20]
 800ad12:	490f      	ldr	r1, [pc, #60]	@ (800ad50 <IKS4A1_MOTION_SENSOR_GetFullScale+0x84>)
 800ad14:	68fa      	ldr	r2, [r7, #12]
 800ad16:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ad1a:	6879      	ldr	r1, [r7, #4]
 800ad1c:	4610      	mov	r0, r2
 800ad1e:	4798      	blx	r3
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d003      	beq.n	800ad2e <IKS4A1_MOTION_SENSOR_GetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ad26:	f06f 0304 	mvn.w	r3, #4
 800ad2a:	617b      	str	r3, [r7, #20]
 800ad2c:	e005      	b.n	800ad3a <IKS4A1_MOTION_SENSOR_GetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	617b      	str	r3, [r7, #20]
 800ad32:	e002      	b.n	800ad3a <IKS4A1_MOTION_SENSOR_GetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800ad34:	f06f 0301 	mvn.w	r3, #1
 800ad38:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800ad3a:	697b      	ldr	r3, [r7, #20]
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3718      	adds	r7, #24
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	20000620 	.word	0x20000620
 800ad48:	200001f0 	.word	0x200001f0
 800ad4c:	200005e0 	.word	0x200005e0
 800ad50:	200005d0 	.word	0x200005d0

0800ad54 <LIS2MDL_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b094      	sub	sp, #80	@ 0x50
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800ad60:	2300      	movs	r3, #0
 800ad62:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800ad64:	233d      	movs	r3, #61	@ 0x3d
 800ad66:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800ad6a:	4b40      	ldr	r3, [pc, #256]	@ (800ae6c <LIS2MDL_0_Probe+0x118>)
 800ad6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800ad6e:	4b40      	ldr	r3, [pc, #256]	@ (800ae70 <LIS2MDL_0_Probe+0x11c>)
 800ad70:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800ad72:	4b40      	ldr	r3, [pc, #256]	@ (800ae74 <LIS2MDL_0_Probe+0x120>)
 800ad74:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800ad76:	4b40      	ldr	r3, [pc, #256]	@ (800ae78 <LIS2MDL_0_Probe+0x124>)
 800ad78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800ad7a:	4b40      	ldr	r3, [pc, #256]	@ (800ae7c <LIS2MDL_0_Probe+0x128>)
 800ad7c:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800ad7e:	4b40      	ldr	r3, [pc, #256]	@ (800ae80 <LIS2MDL_0_Probe+0x12c>)
 800ad80:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800ad82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ad86:	4619      	mov	r1, r3
 800ad88:	483e      	ldr	r0, [pc, #248]	@ (800ae84 <LIS2MDL_0_Probe+0x130>)
 800ad8a:	f7f8 fcbb 	bl	8003704 <LIS2MDL_RegisterBusIO>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d003      	beq.n	800ad9c <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ad94:	f06f 0306 	mvn.w	r3, #6
 800ad98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad9a:	e061      	b.n	800ae60 <LIS2MDL_0_Probe+0x10c>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800ad9c:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800ada0:	4619      	mov	r1, r3
 800ada2:	4838      	ldr	r0, [pc, #224]	@ (800ae84 <LIS2MDL_0_Probe+0x130>)
 800ada4:	f7f8 fdca 	bl	800393c <LIS2MDL_ReadID>
 800ada8:	4603      	mov	r3, r0
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d003      	beq.n	800adb6 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800adae:	f06f 0306 	mvn.w	r3, #6
 800adb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800adb4:	e054      	b.n	800ae60 <LIS2MDL_0_Probe+0x10c>
  }
  else if (id != LIS2MDL_ID)
 800adb6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800adba:	2b40      	cmp	r3, #64	@ 0x40
 800adbc:	d003      	beq.n	800adc6 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800adbe:	f06f 0306 	mvn.w	r3, #6
 800adc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800adc4:	e04c      	b.n	800ae60 <LIS2MDL_0_Probe+0x10c>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 800adc6:	f107 030c 	add.w	r3, r7, #12
 800adca:	4619      	mov	r1, r3
 800adcc:	482d      	ldr	r0, [pc, #180]	@ (800ae84 <LIS2MDL_0_Probe+0x130>)
 800adce:	f7f8 fddb 	bl	8003988 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS4A1_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800add2:	7b7b      	ldrb	r3, [r7, #13]
 800add4:	461a      	mov	r2, r3
 800add6:	7b3b      	ldrb	r3, [r7, #12]
 800add8:	005b      	lsls	r3, r3, #1
 800adda:	431a      	orrs	r2, r3
 800addc:	7bbb      	ldrb	r3, [r7, #14]
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	4313      	orrs	r3, r2
 800ade2:	4a29      	ldr	r2, [pc, #164]	@ (800ae88 <LIS2MDL_0_Probe+0x134>)
 800ade4:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS4A1_LIS2MDL_0] = &lis2mdl_obj_0;
 800ade6:	4b29      	ldr	r3, [pc, #164]	@ (800ae8c <LIS2MDL_0_Probe+0x138>)
 800ade8:	4a26      	ldr	r2, [pc, #152]	@ (800ae84 <LIS2MDL_0_Probe+0x130>)
 800adea:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800adec:	4b28      	ldr	r3, [pc, #160]	@ (800ae90 <LIS2MDL_0_Probe+0x13c>)
 800adee:	4a29      	ldr	r2, [pc, #164]	@ (800ae94 <LIS2MDL_0_Probe+0x140>)
 800adf0:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800adf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d11d      	bne.n	800ae34 <LIS2MDL_0_Probe+0xe0>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f003 0304 	and.w	r3, r3, #4
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d018      	beq.n	800ae34 <LIS2MDL_0_Probe+0xe0>
 800ae02:	7bbb      	ldrb	r3, [r7, #14]
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d115      	bne.n	800ae34 <LIS2MDL_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800ae08:	4b23      	ldr	r3, [pc, #140]	@ (800ae98 <LIS2MDL_0_Probe+0x144>)
 800ae0a:	691b      	ldr	r3, [r3, #16]
 800ae0c:	4a23      	ldr	r2, [pc, #140]	@ (800ae9c <LIS2MDL_0_Probe+0x148>)
 800ae0e:	4924      	ldr	r1, [pc, #144]	@ (800aea0 <LIS2MDL_0_Probe+0x14c>)
 800ae10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                        void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS4A1_LIS2MDL_0]->Init(MotionCompObj[IKS4A1_LIS2MDL_0]) != LIS2MDL_OK)
 800ae14:	4b1e      	ldr	r3, [pc, #120]	@ (800ae90 <LIS2MDL_0_Probe+0x13c>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4a1c      	ldr	r2, [pc, #112]	@ (800ae8c <LIS2MDL_0_Probe+0x138>)
 800ae1c:	6812      	ldr	r2, [r2, #0]
 800ae1e:	4610      	mov	r0, r2
 800ae20:	4798      	blx	r3
 800ae22:	4603      	mov	r3, r0
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d003      	beq.n	800ae30 <LIS2MDL_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ae28:	f06f 0304 	mvn.w	r3, #4
 800ae2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae2e:	e001      	b.n	800ae34 <LIS2MDL_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ae30:	2300      	movs	r3, #0
 800ae32:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800ae34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d107      	bne.n	800ae4a <LIS2MDL_0_Probe+0xf6>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f003 0302 	and.w	r3, r3, #2
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d002      	beq.n	800ae4a <LIS2MDL_0_Probe+0xf6>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ae44:	f06f 0304 	mvn.w	r3, #4
 800ae48:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800ae4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d107      	bne.n	800ae60 <LIS2MDL_0_Probe+0x10c>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f003 0301 	and.w	r3, r3, #1
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d002      	beq.n	800ae60 <LIS2MDL_0_Probe+0x10c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ae5a:	f06f 0304 	mvn.w	r3, #4
 800ae5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800ae60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3750      	adds	r7, #80	@ 0x50
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	0800179d 	.word	0x0800179d
 800ae70:	08001819 	.word	0x08001819
 800ae74:	080018cd 	.word	0x080018cd
 800ae78:	08001869 	.word	0x08001869
 800ae7c:	080019d9 	.word	0x080019d9
 800ae80:	0800b8b5 	.word	0x0800b8b5
 800ae84:	20000630 	.word	0x20000630
 800ae88:	20000620 	.word	0x20000620
 800ae8c:	200005d0 	.word	0x200005d0
 800ae90:	20000610 	.word	0x20000610
 800ae94:	20000038 	.word	0x20000038
 800ae98:	200001f0 	.word	0x200001f0
 800ae9c:	200005e0 	.word	0x200005e0
 800aea0:	20000048 	.word	0x20000048

0800aea4 <LSM6DSV16X_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSV16X_0_Probe(uint32_t Functions)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b094      	sub	sp, #80	@ 0x50
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  LSM6DSV16X_IO_t            io_ctx;
  uint8_t                    id;
  static LSM6DSV16X_Object_t lsm6dsv16x_obj_0;
  LSM6DSV16X_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 800aeac:	2300      	movs	r3, #0
 800aeae:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSV16X_I2C_BUS; /* I2C */
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSV16X_I2C_ADD_H;
 800aeb4:	23d7      	movs	r3, #215	@ 0xd7
 800aeb6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800aeba:	4b51      	ldr	r3, [pc, #324]	@ (800b000 <LSM6DSV16X_0_Probe+0x15c>)
 800aebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800aebe:	4b51      	ldr	r3, [pc, #324]	@ (800b004 <LSM6DSV16X_0_Probe+0x160>)
 800aec0:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800aec2:	4b51      	ldr	r3, [pc, #324]	@ (800b008 <LSM6DSV16X_0_Probe+0x164>)
 800aec4:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800aec6:	4b51      	ldr	r3, [pc, #324]	@ (800b00c <LSM6DSV16X_0_Probe+0x168>)
 800aec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800aeca:	4b51      	ldr	r3, [pc, #324]	@ (800b010 <LSM6DSV16X_0_Probe+0x16c>)
 800aecc:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800aece:	4b51      	ldr	r3, [pc, #324]	@ (800b014 <LSM6DSV16X_0_Probe+0x170>)
 800aed0:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSV16X_RegisterBusIO(&lsm6dsv16x_obj_0, &io_ctx) != LSM6DSV16X_OK)
 800aed2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800aed6:	4619      	mov	r1, r3
 800aed8:	484f      	ldr	r0, [pc, #316]	@ (800b018 <LSM6DSV16X_0_Probe+0x174>)
 800aeda:	f7fc f983 	bl	80071e4 <LSM6DSV16X_RegisterBusIO>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d003      	beq.n	800aeec <LSM6DSV16X_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800aee4:	f06f 0306 	mvn.w	r3, #6
 800aee8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aeea:	e084      	b.n	800aff6 <LSM6DSV16X_0_Probe+0x152>
  }
  else if (LSM6DSV16X_Set_Mem_Bank(&lsm6dsv16x_obj_0, LSM6DSV16X_MAIN_MEM_BANK) != LSM6DSV16X_OK)
 800aeec:	2100      	movs	r1, #0
 800aeee:	484a      	ldr	r0, [pc, #296]	@ (800b018 <LSM6DSV16X_0_Probe+0x174>)
 800aef0:	f7fd f905 	bl	80080fe <LSM6DSV16X_Set_Mem_Bank>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d003      	beq.n	800af02 <LSM6DSV16X_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800aefa:	f06f 0306 	mvn.w	r3, #6
 800aefe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af00:	e079      	b.n	800aff6 <LSM6DSV16X_0_Probe+0x152>
  }
  else if (LSM6DSV16X_ReadID(&lsm6dsv16x_obj_0, &id) != LSM6DSV16X_OK)
 800af02:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800af06:	4619      	mov	r1, r3
 800af08:	4843      	ldr	r0, [pc, #268]	@ (800b018 <LSM6DSV16X_0_Probe+0x174>)
 800af0a:	f7fc fa9b 	bl	8007444 <LSM6DSV16X_ReadID>
 800af0e:	4603      	mov	r3, r0
 800af10:	2b00      	cmp	r3, #0
 800af12:	d003      	beq.n	800af1c <LSM6DSV16X_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800af14:	f06f 0306 	mvn.w	r3, #6
 800af18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af1a:	e06c      	b.n	800aff6 <LSM6DSV16X_0_Probe+0x152>
  }
  else if (id != LSM6DSV16X_ID)
 800af1c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800af20:	2b70      	cmp	r3, #112	@ 0x70
 800af22:	d003      	beq.n	800af2c <LSM6DSV16X_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800af24:	f06f 0306 	mvn.w	r3, #6
 800af28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af2a:	e064      	b.n	800aff6 <LSM6DSV16X_0_Probe+0x152>
  }
  else
  {
    (void)LSM6DSV16X_GetCapabilities(&lsm6dsv16x_obj_0, &cap);
 800af2c:	f107 030c 	add.w	r3, r7, #12
 800af30:	4619      	mov	r1, r3
 800af32:	4839      	ldr	r0, [pc, #228]	@ (800b018 <LSM6DSV16X_0_Probe+0x174>)
 800af34:	f7fc fa9c 	bl	8007470 <LSM6DSV16X_GetCapabilities>
    MotionCtx[IKS4A1_LSM6DSV16X_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800af38:	7b7b      	ldrb	r3, [r7, #13]
 800af3a:	461a      	mov	r2, r3
 800af3c:	7b3b      	ldrb	r3, [r7, #12]
 800af3e:	005b      	lsls	r3, r3, #1
 800af40:	431a      	orrs	r2, r3
 800af42:	7bbb      	ldrb	r3, [r7, #14]
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	4313      	orrs	r3, r2
 800af48:	4a34      	ldr	r2, [pc, #208]	@ (800b01c <LSM6DSV16X_0_Probe+0x178>)
 800af4a:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS4A1_LSM6DSV16X_0] = &lsm6dsv16x_obj_0;
 800af4c:	4b34      	ldr	r3, [pc, #208]	@ (800b020 <LSM6DSV16X_0_Probe+0x17c>)
 800af4e:	4a32      	ldr	r2, [pc, #200]	@ (800b018 <LSM6DSV16X_0_Probe+0x174>)
 800af50:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LSM6DSV16X_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSV16X_COMMON_Driver;
 800af52:	4b34      	ldr	r3, [pc, #208]	@ (800b024 <LSM6DSV16X_0_Probe+0x180>)
 800af54:	4a34      	ldr	r2, [pc, #208]	@ (800b028 <LSM6DSV16X_0_Probe+0x184>)
 800af56:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800af58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d11e      	bne.n	800af9c <LSM6DSV16X_0_Probe+0xf8>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f003 0301 	and.w	r3, r3, #1
 800af64:	2b00      	cmp	r3, #0
 800af66:	d019      	beq.n	800af9c <LSM6DSV16X_0_Probe+0xf8>
 800af68:	7b7b      	ldrb	r3, [r7, #13]
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d116      	bne.n	800af9c <LSM6DSV16X_0_Probe+0xf8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSV16X_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800af6e:	4b2f      	ldr	r3, [pc, #188]	@ (800b02c <LSM6DSV16X_0_Probe+0x188>)
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	4a2f      	ldr	r2, [pc, #188]	@ (800b030 <LSM6DSV16X_0_Probe+0x18c>)
 800af74:	3303      	adds	r3, #3
 800af76:	492f      	ldr	r1, [pc, #188]	@ (800b034 <LSM6DSV16X_0_Probe+0x190>)
 800af78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                        void *)&LSM6DSV16X_GYRO_Driver;

      if (MotionDrv[IKS4A1_LSM6DSV16X_0]->Init(MotionCompObj[IKS4A1_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 800af7c:	4b29      	ldr	r3, [pc, #164]	@ (800b024 <LSM6DSV16X_0_Probe+0x180>)
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4a27      	ldr	r2, [pc, #156]	@ (800b020 <LSM6DSV16X_0_Probe+0x17c>)
 800af84:	6852      	ldr	r2, [r2, #4]
 800af86:	4610      	mov	r0, r2
 800af88:	4798      	blx	r3
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d003      	beq.n	800af98 <LSM6DSV16X_0_Probe+0xf4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800af90:	f06f 0304 	mvn.w	r3, #4
 800af94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af96:	e001      	b.n	800af9c <LSM6DSV16X_0_Probe+0xf8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800af98:	2300      	movs	r3, #0
 800af9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800af9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d11e      	bne.n	800afe0 <LSM6DSV16X_0_Probe+0x13c>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f003 0302 	and.w	r3, r3, #2
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d019      	beq.n	800afe0 <LSM6DSV16X_0_Probe+0x13c>
 800afac:	7b3b      	ldrb	r3, [r7, #12]
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d116      	bne.n	800afe0 <LSM6DSV16X_0_Probe+0x13c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSV16X_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800afb2:	4b1e      	ldr	r3, [pc, #120]	@ (800b02c <LSM6DSV16X_0_Probe+0x188>)
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	4a1e      	ldr	r2, [pc, #120]	@ (800b030 <LSM6DSV16X_0_Probe+0x18c>)
 800afb8:	3303      	adds	r3, #3
 800afba:	491f      	ldr	r1, [pc, #124]	@ (800b038 <LSM6DSV16X_0_Probe+0x194>)
 800afbc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LSM6DSV16X_ACC_Driver;

      if (MotionDrv[IKS4A1_LSM6DSV16X_0]->Init(MotionCompObj[IKS4A1_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 800afc0:	4b18      	ldr	r3, [pc, #96]	@ (800b024 <LSM6DSV16X_0_Probe+0x180>)
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4a16      	ldr	r2, [pc, #88]	@ (800b020 <LSM6DSV16X_0_Probe+0x17c>)
 800afc8:	6852      	ldr	r2, [r2, #4]
 800afca:	4610      	mov	r0, r2
 800afcc:	4798      	blx	r3
 800afce:	4603      	mov	r3, r0
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d003      	beq.n	800afdc <LSM6DSV16X_0_Probe+0x138>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800afd4:	f06f 0304 	mvn.w	r3, #4
 800afd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800afda:	e001      	b.n	800afe0 <LSM6DSV16X_0_Probe+0x13c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800afdc:	2300      	movs	r3, #0
 800afde:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800afe0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d107      	bne.n	800aff6 <LSM6DSV16X_0_Probe+0x152>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f003 0304 	and.w	r3, r3, #4
 800afec:	2b00      	cmp	r3, #0
 800afee:	d002      	beq.n	800aff6 <LSM6DSV16X_0_Probe+0x152>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800aff0:	f06f 0304 	mvn.w	r3, #4
 800aff4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800aff6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3750      	adds	r7, #80	@ 0x50
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}
 800b000:	0800179d 	.word	0x0800179d
 800b004:	08001819 	.word	0x08001819
 800b008:	080018cd 	.word	0x080018cd
 800b00c:	08001869 	.word	0x08001869
 800b010:	080019d9 	.word	0x080019d9
 800b014:	0800b8b5 	.word	0x0800b8b5
 800b018:	20000664 	.word	0x20000664
 800b01c:	20000620 	.word	0x20000620
 800b020:	200005d0 	.word	0x200005d0
 800b024:	20000610 	.word	0x20000610
 800b028:	200000fc 	.word	0x200000fc
 800b02c:	200001f0 	.word	0x200001f0
 800b030:	200005e0 	.word	0x200005e0
 800b034:	20000130 	.word	0x20000130
 800b038:	2000010c 	.word	0x2000010c

0800b03c <LIS2DUXS12_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LIS2DUXS12_0_Probe(uint32_t Functions)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b094      	sub	sp, #80	@ 0x50
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  LIS2DUXS12_IO_t            io_ctx;
  uint8_t                    id;
  static LIS2DUXS12_Object_t lis2duxs12_obj_0;
  LIS2DUXS12_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 800b044:	2300      	movs	r3, #0
 800b046:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LIS2DUXS12_I2C_BUS; /* I2C */
 800b048:	2300      	movs	r3, #0
 800b04a:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2DUXS12_I2C_ADD_H;
 800b04c:	2333      	movs	r3, #51	@ 0x33
 800b04e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800b052:	4b47      	ldr	r3, [pc, #284]	@ (800b170 <LIS2DUXS12_0_Probe+0x134>)
 800b054:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800b056:	4b47      	ldr	r3, [pc, #284]	@ (800b174 <LIS2DUXS12_0_Probe+0x138>)
 800b058:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800b05a:	4b47      	ldr	r3, [pc, #284]	@ (800b178 <LIS2DUXS12_0_Probe+0x13c>)
 800b05c:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800b05e:	4b47      	ldr	r3, [pc, #284]	@ (800b17c <LIS2DUXS12_0_Probe+0x140>)
 800b060:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800b062:	4b47      	ldr	r3, [pc, #284]	@ (800b180 <LIS2DUXS12_0_Probe+0x144>)
 800b064:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800b066:	4b47      	ldr	r3, [pc, #284]	@ (800b184 <LIS2DUXS12_0_Probe+0x148>)
 800b068:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2DUXS12_RegisterBusIO(&lis2duxs12_obj_0, &io_ctx) != LIS2DUXS12_OK)
 800b06a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b06e:	4619      	mov	r1, r3
 800b070:	4845      	ldr	r0, [pc, #276]	@ (800b188 <LIS2DUXS12_0_Probe+0x14c>)
 800b072:	f7f6 fe67 	bl	8001d44 <LIS2DUXS12_RegisterBusIO>
 800b076:	4603      	mov	r3, r0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d003      	beq.n	800b084 <LIS2DUXS12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b07c:	f06f 0306 	mvn.w	r3, #6
 800b080:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b082:	e070      	b.n	800b166 <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (LIS2DUXS12_Set_Mem_Bank(&lis2duxs12_obj_0, LIS2DUXS12_MAIN_MEM_BANK) != LIS2DUXS12_OK)
 800b084:	2100      	movs	r1, #0
 800b086:	4840      	ldr	r0, [pc, #256]	@ (800b188 <LIS2DUXS12_0_Probe+0x14c>)
 800b088:	f7f7 fad2 	bl	8002630 <LIS2DUXS12_Set_Mem_Bank>
 800b08c:	4603      	mov	r3, r0
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d003      	beq.n	800b09a <LIS2DUXS12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b092:	f06f 0306 	mvn.w	r3, #6
 800b096:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b098:	e065      	b.n	800b166 <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (LIS2DUXS12_ReadID(&lis2duxs12_obj_0, &id) != LIS2DUXS12_OK)
 800b09a:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800b09e:	4619      	mov	r1, r3
 800b0a0:	4839      	ldr	r0, [pc, #228]	@ (800b188 <LIS2DUXS12_0_Probe+0x14c>)
 800b0a2:	f7f6 ffac 	bl	8001ffe <LIS2DUXS12_ReadID>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d003      	beq.n	800b0b4 <LIS2DUXS12_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b0ac:	f06f 0306 	mvn.w	r3, #6
 800b0b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b0b2:	e058      	b.n	800b166 <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (id != LIS2DUXS12_ID)
 800b0b4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b0b8:	2b47      	cmp	r3, #71	@ 0x47
 800b0ba:	d003      	beq.n	800b0c4 <LIS2DUXS12_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b0bc:	f06f 0306 	mvn.w	r3, #6
 800b0c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b0c2:	e050      	b.n	800b166 <LIS2DUXS12_0_Probe+0x12a>
  }
  else
  {
    (void)LIS2DUXS12_GetCapabilities(&lis2duxs12_obj_0, &cap);
 800b0c4:	f107 030c 	add.w	r3, r7, #12
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	482f      	ldr	r0, [pc, #188]	@ (800b188 <LIS2DUXS12_0_Probe+0x14c>)
 800b0cc:	f7f6 ffb2 	bl	8002034 <LIS2DUXS12_GetCapabilities>
    MotionCtx[IKS4A1_LIS2DUXS12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800b0d0:	7b7b      	ldrb	r3, [r7, #13]
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	7b3b      	ldrb	r3, [r7, #12]
 800b0d6:	005b      	lsls	r3, r3, #1
 800b0d8:	431a      	orrs	r2, r3
 800b0da:	7bbb      	ldrb	r3, [r7, #14]
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	4a2a      	ldr	r2, [pc, #168]	@ (800b18c <LIS2DUXS12_0_Probe+0x150>)
 800b0e2:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS4A1_LIS2DUXS12_0] = &lis2duxs12_obj_0;
 800b0e4:	4b2a      	ldr	r3, [pc, #168]	@ (800b190 <LIS2DUXS12_0_Probe+0x154>)
 800b0e6:	4a28      	ldr	r2, [pc, #160]	@ (800b188 <LIS2DUXS12_0_Probe+0x14c>)
 800b0e8:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LIS2DUXS12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DUXS12_COMMON_Driver;
 800b0ea:	4b2a      	ldr	r3, [pc, #168]	@ (800b194 <LIS2DUXS12_0_Probe+0x158>)
 800b0ec:	4a2a      	ldr	r2, [pc, #168]	@ (800b198 <LIS2DUXS12_0_Probe+0x15c>)
 800b0ee:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800b0f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d10a      	bne.n	800b10c <LIS2DUXS12_0_Probe+0xd0>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f003 0301 	and.w	r3, r3, #1
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d005      	beq.n	800b10c <LIS2DUXS12_0_Probe+0xd0>
 800b100:	7b7b      	ldrb	r3, [r7, #13]
 800b102:	2b01      	cmp	r3, #1
 800b104:	d102      	bne.n	800b10c <LIS2DUXS12_0_Probe+0xd0>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b106:	f06f 0304 	mvn.w	r3, #4
 800b10a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800b10c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d11e      	bne.n	800b150 <LIS2DUXS12_0_Probe+0x114>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f003 0302 	and.w	r3, r3, #2
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d019      	beq.n	800b150 <LIS2DUXS12_0_Probe+0x114>
 800b11c:	7b3b      	ldrb	r3, [r7, #12]
 800b11e:	2b01      	cmp	r3, #1
 800b120:	d116      	bne.n	800b150 <LIS2DUXS12_0_Probe+0x114>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LIS2DUXS12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800b122:	4b1e      	ldr	r3, [pc, #120]	@ (800b19c <LIS2DUXS12_0_Probe+0x160>)
 800b124:	689b      	ldr	r3, [r3, #8]
 800b126:	4a1e      	ldr	r2, [pc, #120]	@ (800b1a0 <LIS2DUXS12_0_Probe+0x164>)
 800b128:	3306      	adds	r3, #6
 800b12a:	491e      	ldr	r1, [pc, #120]	@ (800b1a4 <LIS2DUXS12_0_Probe+0x168>)
 800b12c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DUXS12_ACC_Driver;

      if (MotionDrv[IKS4A1_LIS2DUXS12_0]->Init(MotionCompObj[IKS4A1_LIS2DUXS12_0]) != LIS2DUXS12_OK)
 800b130:	4b18      	ldr	r3, [pc, #96]	@ (800b194 <LIS2DUXS12_0_Probe+0x158>)
 800b132:	689b      	ldr	r3, [r3, #8]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4a16      	ldr	r2, [pc, #88]	@ (800b190 <LIS2DUXS12_0_Probe+0x154>)
 800b138:	6892      	ldr	r2, [r2, #8]
 800b13a:	4610      	mov	r0, r2
 800b13c:	4798      	blx	r3
 800b13e:	4603      	mov	r3, r0
 800b140:	2b00      	cmp	r3, #0
 800b142:	d003      	beq.n	800b14c <LIS2DUXS12_0_Probe+0x110>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b144:	f06f 0304 	mvn.w	r3, #4
 800b148:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b14a:	e001      	b.n	800b150 <LIS2DUXS12_0_Probe+0x114>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b14c:	2300      	movs	r3, #0
 800b14e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800b150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b152:	2b00      	cmp	r3, #0
 800b154:	d107      	bne.n	800b166 <LIS2DUXS12_0_Probe+0x12a>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f003 0304 	and.w	r3, r3, #4
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d002      	beq.n	800b166 <LIS2DUXS12_0_Probe+0x12a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b160:	f06f 0304 	mvn.w	r3, #4
 800b164:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800b166:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3750      	adds	r7, #80	@ 0x50
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	0800179d 	.word	0x0800179d
 800b174:	08001819 	.word	0x08001819
 800b178:	080018cd 	.word	0x080018cd
 800b17c:	08001869 	.word	0x08001869
 800b180:	080019d9 	.word	0x080019d9
 800b184:	0800b8b5 	.word	0x0800b8b5
 800b188:	2000069c 	.word	0x2000069c
 800b18c:	20000620 	.word	0x20000620
 800b190:	200005d0 	.word	0x200005d0
 800b194:	20000610 	.word	0x20000610
 800b198:	20000004 	.word	0x20000004
 800b19c:	200001f0 	.word	0x200001f0
 800b1a0:	200005e0 	.word	0x200005e0
 800b1a4:	20000014 	.word	0x20000014

0800b1a8 <LSM6DSO16IS_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSO16IS_0_Probe(uint32_t Functions)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b094      	sub	sp, #80	@ 0x50
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  LSM6DSO16IS_IO_t            io_ctx;
  uint8_t                     id;
  static LSM6DSO16IS_Object_t lsm6dso16is_obj_0;
  LSM6DSO16IS_Capabilities_t  cap;
  int32_t                     ret = BSP_ERROR_NONE;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSO16IS_I2C_BUS; /* I2C */
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSO16IS_I2C_ADD_L;
 800b1b8:	23d5      	movs	r3, #213	@ 0xd5
 800b1ba:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800b1be:	4b51      	ldr	r3, [pc, #324]	@ (800b304 <LSM6DSO16IS_0_Probe+0x15c>)
 800b1c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800b1c2:	4b51      	ldr	r3, [pc, #324]	@ (800b308 <LSM6DSO16IS_0_Probe+0x160>)
 800b1c4:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800b1c6:	4b51      	ldr	r3, [pc, #324]	@ (800b30c <LSM6DSO16IS_0_Probe+0x164>)
 800b1c8:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800b1ca:	4b51      	ldr	r3, [pc, #324]	@ (800b310 <LSM6DSO16IS_0_Probe+0x168>)
 800b1cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800b1ce:	4b51      	ldr	r3, [pc, #324]	@ (800b314 <LSM6DSO16IS_0_Probe+0x16c>)
 800b1d0:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800b1d2:	4b51      	ldr	r3, [pc, #324]	@ (800b318 <LSM6DSO16IS_0_Probe+0x170>)
 800b1d4:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO16IS_RegisterBusIO(&lsm6dso16is_obj_0, &io_ctx) != LSM6DSO16IS_OK)
 800b1d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b1da:	4619      	mov	r1, r3
 800b1dc:	484f      	ldr	r0, [pc, #316]	@ (800b31c <LSM6DSO16IS_0_Probe+0x174>)
 800b1de:	f7fa facd 	bl	800577c <LSM6DSO16IS_RegisterBusIO>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d003      	beq.n	800b1f0 <LSM6DSO16IS_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b1e8:	f06f 0306 	mvn.w	r3, #6
 800b1ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b1ee:	e084      	b.n	800b2fa <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (LSM6DSO16IS_Set_Mem_Bank(&lsm6dso16is_obj_0, LSM6DSO16IS_MAIN_MEM_BANK) != LSM6DSO16IS_OK)
 800b1f0:	2100      	movs	r1, #0
 800b1f2:	484a      	ldr	r0, [pc, #296]	@ (800b31c <LSM6DSO16IS_0_Probe+0x174>)
 800b1f4:	f7fb f8f3 	bl	80063de <LSM6DSO16IS_Set_Mem_Bank>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d003      	beq.n	800b206 <LSM6DSO16IS_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b1fe:	f06f 0306 	mvn.w	r3, #6
 800b202:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b204:	e079      	b.n	800b2fa <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (LSM6DSO16IS_ReadID(&lsm6dso16is_obj_0, &id) != LSM6DSO16IS_OK)
 800b206:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800b20a:	4619      	mov	r1, r3
 800b20c:	4843      	ldr	r0, [pc, #268]	@ (800b31c <LSM6DSO16IS_0_Probe+0x174>)
 800b20e:	f7fa fbb3 	bl	8005978 <LSM6DSO16IS_ReadID>
 800b212:	4603      	mov	r3, r0
 800b214:	2b00      	cmp	r3, #0
 800b216:	d003      	beq.n	800b220 <LSM6DSO16IS_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b218:	f06f 0306 	mvn.w	r3, #6
 800b21c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b21e:	e06c      	b.n	800b2fa <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (id != LSM6DSO16IS_ID)
 800b220:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b224:	2b22      	cmp	r3, #34	@ 0x22
 800b226:	d003      	beq.n	800b230 <LSM6DSO16IS_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b228:	f06f 0306 	mvn.w	r3, #6
 800b22c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b22e:	e064      	b.n	800b2fa <LSM6DSO16IS_0_Probe+0x152>
  }
  else
  {
    (void)LSM6DSO16IS_GetCapabilities(&lsm6dso16is_obj_0, &cap);
 800b230:	f107 030c 	add.w	r3, r7, #12
 800b234:	4619      	mov	r1, r3
 800b236:	4839      	ldr	r0, [pc, #228]	@ (800b31c <LSM6DSO16IS_0_Probe+0x174>)
 800b238:	f7fa fbb6 	bl	80059a8 <LSM6DSO16IS_GetCapabilities>
    MotionCtx[IKS4A1_LSM6DSO16IS_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800b23c:	7b7b      	ldrb	r3, [r7, #13]
 800b23e:	461a      	mov	r2, r3
 800b240:	7b3b      	ldrb	r3, [r7, #12]
 800b242:	005b      	lsls	r3, r3, #1
 800b244:	431a      	orrs	r2, r3
 800b246:	7bbb      	ldrb	r3, [r7, #14]
 800b248:	009b      	lsls	r3, r3, #2
 800b24a:	4313      	orrs	r3, r2
 800b24c:	4a34      	ldr	r2, [pc, #208]	@ (800b320 <LSM6DSO16IS_0_Probe+0x178>)
 800b24e:	60d3      	str	r3, [r2, #12]

    MotionCompObj[IKS4A1_LSM6DSO16IS_0] = &lsm6dso16is_obj_0;
 800b250:	4b34      	ldr	r3, [pc, #208]	@ (800b324 <LSM6DSO16IS_0_Probe+0x17c>)
 800b252:	4a32      	ldr	r2, [pc, #200]	@ (800b31c <LSM6DSO16IS_0_Probe+0x174>)
 800b254:	60da      	str	r2, [r3, #12]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LSM6DSO16IS_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO16IS_COMMON_Driver;
 800b256:	4b34      	ldr	r3, [pc, #208]	@ (800b328 <LSM6DSO16IS_0_Probe+0x180>)
 800b258:	4a34      	ldr	r2, [pc, #208]	@ (800b32c <LSM6DSO16IS_0_Probe+0x184>)
 800b25a:	60da      	str	r2, [r3, #12]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800b25c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d11e      	bne.n	800b2a0 <LSM6DSO16IS_0_Probe+0xf8>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f003 0301 	and.w	r3, r3, #1
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d019      	beq.n	800b2a0 <LSM6DSO16IS_0_Probe+0xf8>
 800b26c:	7b7b      	ldrb	r3, [r7, #13]
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d116      	bne.n	800b2a0 <LSM6DSO16IS_0_Probe+0xf8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSO16IS_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800b272:	4b2f      	ldr	r3, [pc, #188]	@ (800b330 <LSM6DSO16IS_0_Probe+0x188>)
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	4a2f      	ldr	r2, [pc, #188]	@ (800b334 <LSM6DSO16IS_0_Probe+0x18c>)
 800b278:	3309      	adds	r3, #9
 800b27a:	492f      	ldr	r1, [pc, #188]	@ (800b338 <LSM6DSO16IS_0_Probe+0x190>)
 800b27c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                         void *)&LSM6DSO16IS_GYRO_Driver;

      if (MotionDrv[IKS4A1_LSM6DSO16IS_0]->Init(MotionCompObj[IKS4A1_LSM6DSO16IS_0]) != LSM6DSO16IS_OK)
 800b280:	4b29      	ldr	r3, [pc, #164]	@ (800b328 <LSM6DSO16IS_0_Probe+0x180>)
 800b282:	68db      	ldr	r3, [r3, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4a27      	ldr	r2, [pc, #156]	@ (800b324 <LSM6DSO16IS_0_Probe+0x17c>)
 800b288:	68d2      	ldr	r2, [r2, #12]
 800b28a:	4610      	mov	r0, r2
 800b28c:	4798      	blx	r3
 800b28e:	4603      	mov	r3, r0
 800b290:	2b00      	cmp	r3, #0
 800b292:	d003      	beq.n	800b29c <LSM6DSO16IS_0_Probe+0xf4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b294:	f06f 0304 	mvn.w	r3, #4
 800b298:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b29a:	e001      	b.n	800b2a0 <LSM6DSO16IS_0_Probe+0xf8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b29c:	2300      	movs	r3, #0
 800b29e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800b2a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d11e      	bne.n	800b2e4 <LSM6DSO16IS_0_Probe+0x13c>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f003 0302 	and.w	r3, r3, #2
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d019      	beq.n	800b2e4 <LSM6DSO16IS_0_Probe+0x13c>
 800b2b0:	7b3b      	ldrb	r3, [r7, #12]
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d116      	bne.n	800b2e4 <LSM6DSO16IS_0_Probe+0x13c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSO16IS_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800b2b6:	4b1e      	ldr	r3, [pc, #120]	@ (800b330 <LSM6DSO16IS_0_Probe+0x188>)
 800b2b8:	689b      	ldr	r3, [r3, #8]
 800b2ba:	4a1e      	ldr	r2, [pc, #120]	@ (800b334 <LSM6DSO16IS_0_Probe+0x18c>)
 800b2bc:	3309      	adds	r3, #9
 800b2be:	491f      	ldr	r1, [pc, #124]	@ (800b33c <LSM6DSO16IS_0_Probe+0x194>)
 800b2c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                             void *)&LSM6DSO16IS_ACC_Driver;

      if (MotionDrv[IKS4A1_LSM6DSO16IS_0]->Init(MotionCompObj[IKS4A1_LSM6DSO16IS_0]) != LSM6DSO16IS_OK)
 800b2c4:	4b18      	ldr	r3, [pc, #96]	@ (800b328 <LSM6DSO16IS_0_Probe+0x180>)
 800b2c6:	68db      	ldr	r3, [r3, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4a16      	ldr	r2, [pc, #88]	@ (800b324 <LSM6DSO16IS_0_Probe+0x17c>)
 800b2cc:	68d2      	ldr	r2, [r2, #12]
 800b2ce:	4610      	mov	r0, r2
 800b2d0:	4798      	blx	r3
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d003      	beq.n	800b2e0 <LSM6DSO16IS_0_Probe+0x138>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b2d8:	f06f 0304 	mvn.w	r3, #4
 800b2dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b2de:	e001      	b.n	800b2e4 <LSM6DSO16IS_0_Probe+0x13c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800b2e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d107      	bne.n	800b2fa <LSM6DSO16IS_0_Probe+0x152>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f003 0304 	and.w	r3, r3, #4
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d002      	beq.n	800b2fa <LSM6DSO16IS_0_Probe+0x152>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b2f4:	f06f 0304 	mvn.w	r3, #4
 800b2f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800b2fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3750      	adds	r7, #80	@ 0x50
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}
 800b304:	0800179d 	.word	0x0800179d
 800b308:	08001819 	.word	0x08001819
 800b30c:	080018cd 	.word	0x080018cd
 800b310:	08001869 	.word	0x08001869
 800b314:	080019d9 	.word	0x080019d9
 800b318:	0800b8b5 	.word	0x0800b8b5
 800b31c:	200006d8 	.word	0x200006d8
 800b320:	20000620 	.word	0x20000620
 800b324:	200005d0 	.word	0x200005d0
 800b328:	20000610 	.word	0x20000610
 800b32c:	200000a4 	.word	0x200000a4
 800b330:	200001f0 	.word	0x200001f0
 800b334:	200005e0 	.word	0x200005e0
 800b338:	200000d8 	.word	0x200000d8
 800b33c:	200000b4 	.word	0x200000b4

0800b340 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b082      	sub	sp, #8
 800b344:	af00      	add	r7, sp, #0
 800b346:	4603      	mov	r3, r0
 800b348:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800b34a:	79fb      	ldrb	r3, [r7, #7]
 800b34c:	4a04      	ldr	r2, [pc, #16]	@ (800b360 <BSP_LED_Init+0x20>)
 800b34e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b352:	4798      	blx	r3
  return BSP_ERROR_NONE;
 800b354:	2300      	movs	r3, #0
}
 800b356:	4618      	mov	r0, r3
 800b358:	3708      	adds	r7, #8
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	08014750 	.word	0x08014750

0800b364 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 800b364:	b580      	push	{r7, lr}
 800b366:	b088      	sub	sp, #32
 800b368:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b36a:	4b1c      	ldr	r3, [pc, #112]	@ (800b3dc <LED_USER_GPIO_Init+0x78>)
 800b36c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b36e:	4a1b      	ldr	r2, [pc, #108]	@ (800b3dc <LED_USER_GPIO_Init+0x78>)
 800b370:	f043 0301 	orr.w	r3, r3, #1
 800b374:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b376:	4b19      	ldr	r3, [pc, #100]	@ (800b3dc <LED_USER_GPIO_Init+0x78>)
 800b378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b37a:	f003 0301 	and.w	r3, r3, #1
 800b37e:	60bb      	str	r3, [r7, #8]
 800b380:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b382:	f107 030c 	add.w	r3, r7, #12
 800b386:	2200      	movs	r2, #0
 800b388:	601a      	str	r2, [r3, #0]
 800b38a:	605a      	str	r2, [r3, #4]
 800b38c:	609a      	str	r2, [r3, #8]
 800b38e:	60da      	str	r2, [r3, #12]
 800b390:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b392:	4b12      	ldr	r3, [pc, #72]	@ (800b3dc <LED_USER_GPIO_Init+0x78>)
 800b394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b396:	4a11      	ldr	r2, [pc, #68]	@ (800b3dc <LED_USER_GPIO_Init+0x78>)
 800b398:	f043 0301 	orr.w	r3, r3, #1
 800b39c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b39e:	4b0f      	ldr	r3, [pc, #60]	@ (800b3dc <LED_USER_GPIO_Init+0x78>)
 800b3a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b3a2:	f003 0301 	and.w	r3, r3, #1
 800b3a6:	607b      	str	r3, [r7, #4]
 800b3a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	2120      	movs	r1, #32
 800b3ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b3b2:	f001 f971 	bl	800c698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 800b3b6:	2320      	movs	r3, #32
 800b3b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 800b3c6:	f107 030c 	add.w	r3, r7, #12
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b3d0:	f000 feac 	bl	800c12c <HAL_GPIO_Init>

}
 800b3d4:	bf00      	nop
 800b3d6:	3720      	adds	r7, #32
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	40021000 	.word	0x40021000

0800b3e0 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	460a      	mov	r2, r1
 800b3ea:	71fb      	strb	r3, [r7, #7]
 800b3ec:	4613      	mov	r3, r2
 800b3ee:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 800b3f4:	79fb      	ldrb	r3, [r7, #7]
 800b3f6:	4a1f      	ldr	r2, [pc, #124]	@ (800b474 <BSP_PB_Init+0x94>)
 800b3f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3fc:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800b3fe:	79bb      	ldrb	r3, [r7, #6]
 800b400:	2b01      	cmp	r3, #1
 800b402:	d132      	bne.n	800b46a <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 800b404:	79fb      	ldrb	r3, [r7, #7]
 800b406:	00db      	lsls	r3, r3, #3
 800b408:	4a1b      	ldr	r2, [pc, #108]	@ (800b478 <BSP_PB_Init+0x98>)
 800b40a:	441a      	add	r2, r3
 800b40c:	79fb      	ldrb	r3, [r7, #7]
 800b40e:	491b      	ldr	r1, [pc, #108]	@ (800b47c <BSP_PB_Init+0x9c>)
 800b410:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b414:	4619      	mov	r1, r3
 800b416:	4610      	mov	r0, r2
 800b418:	f000 fe74 	bl	800c104 <HAL_EXTI_GetHandle>
 800b41c:	4603      	mov	r3, r0
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d003      	beq.n	800b42a <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800b422:	f06f 0303 	mvn.w	r3, #3
 800b426:	60fb      	str	r3, [r7, #12]
 800b428:	e01f      	b.n	800b46a <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 800b42a:	79fb      	ldrb	r3, [r7, #7]
 800b42c:	00db      	lsls	r3, r3, #3
 800b42e:	4a12      	ldr	r2, [pc, #72]	@ (800b478 <BSP_PB_Init+0x98>)
 800b430:	1898      	adds	r0, r3, r2
 800b432:	79fb      	ldrb	r3, [r7, #7]
 800b434:	4a12      	ldr	r2, [pc, #72]	@ (800b480 <BSP_PB_Init+0xa0>)
 800b436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b43a:	461a      	mov	r2, r3
 800b43c:	2100      	movs	r1, #0
 800b43e:	f000 fe47 	bl	800c0d0 <HAL_EXTI_RegisterCallback>
 800b442:	4603      	mov	r3, r0
 800b444:	2b00      	cmp	r3, #0
 800b446:	d003      	beq.n	800b450 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800b448:	f06f 0303 	mvn.w	r3, #3
 800b44c:	60fb      	str	r3, [r7, #12]
 800b44e:	e00c      	b.n	800b46a <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800b450:	2028      	movs	r0, #40	@ 0x28
 800b452:	79fb      	ldrb	r3, [r7, #7]
 800b454:	4a0b      	ldr	r2, [pc, #44]	@ (800b484 <BSP_PB_Init+0xa4>)
 800b456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b45a:	2200      	movs	r2, #0
 800b45c:	4619      	mov	r1, r3
 800b45e:	f000 fb28 	bl	800bab2 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800b462:	2328      	movs	r3, #40	@ 0x28
 800b464:	4618      	mov	r0, r3
 800b466:	f000 fb40 	bl	800baea <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 800b46a:	68fb      	ldr	r3, [r7, #12]
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3710      	adds	r7, #16
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}
 800b474:	08014754 	.word	0x08014754
 800b478:	20000214 	.word	0x20000214
 800b47c:	08014758 	.word	0x08014758
 800b480:	0801475c 	.word	0x0801475c
 800b484:	08014760 	.word	0x08014760

0800b488 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	4603      	mov	r3, r0
 800b490:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800b492:	79fb      	ldrb	r3, [r7, #7]
 800b494:	4a09      	ldr	r2, [pc, #36]	@ (800b4bc <BSP_PB_GetState+0x34>)
 800b496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b49a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800b49e:	4611      	mov	r1, r2
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f001 f8e1 	bl	800c668 <HAL_GPIO_ReadPin>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	bf0c      	ite	eq
 800b4ac:	2301      	moveq	r3, #1
 800b4ae:	2300      	movne	r3, #0
 800b4b0:	b2db      	uxtb	r3, r3
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3708      	adds	r7, #8
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	20000210 	.word	0x20000210

0800b4c0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800b4c4:	2000      	movs	r0, #0
 800b4c6:	f006 f8bd 	bl	8011644 <BSP_PB_Callback>
}
 800b4ca:	bf00      	nop
 800b4cc:	bd80      	pop	{r7, pc}
	...

0800b4d0 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b088      	sub	sp, #32
 800b4d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b4d6:	4b19      	ldr	r3, [pc, #100]	@ (800b53c <BUTTON_USER_GPIO_Init+0x6c>)
 800b4d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b4da:	4a18      	ldr	r2, [pc, #96]	@ (800b53c <BUTTON_USER_GPIO_Init+0x6c>)
 800b4dc:	f043 0304 	orr.w	r3, r3, #4
 800b4e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b4e2:	4b16      	ldr	r3, [pc, #88]	@ (800b53c <BUTTON_USER_GPIO_Init+0x6c>)
 800b4e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b4e6:	f003 0304 	and.w	r3, r3, #4
 800b4ea:	60bb      	str	r3, [r7, #8]
 800b4ec:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4ee:	f107 030c 	add.w	r3, r7, #12
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	601a      	str	r2, [r3, #0]
 800b4f6:	605a      	str	r2, [r3, #4]
 800b4f8:	609a      	str	r2, [r3, #8]
 800b4fa:	60da      	str	r2, [r3, #12]
 800b4fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b4fe:	4b0f      	ldr	r3, [pc, #60]	@ (800b53c <BUTTON_USER_GPIO_Init+0x6c>)
 800b500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b502:	4a0e      	ldr	r2, [pc, #56]	@ (800b53c <BUTTON_USER_GPIO_Init+0x6c>)
 800b504:	f043 0304 	orr.w	r3, r3, #4
 800b508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b50a:	4b0c      	ldr	r3, [pc, #48]	@ (800b53c <BUTTON_USER_GPIO_Init+0x6c>)
 800b50c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b50e:	f003 0304 	and.w	r3, r3, #4
 800b512:	607b      	str	r3, [r7, #4]
 800b514:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 800b516:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b51a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800b51c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800b520:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b522:	2300      	movs	r3, #0
 800b524:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800b526:	f107 030c 	add.w	r3, r7, #12
 800b52a:	4619      	mov	r1, r3
 800b52c:	4804      	ldr	r0, [pc, #16]	@ (800b540 <BUTTON_USER_GPIO_Init+0x70>)
 800b52e:	f000 fdfd 	bl	800c12c <HAL_GPIO_Init>

}
 800b532:	bf00      	nop
 800b534:	3720      	adds	r7, #32
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	40021000 	.word	0x40021000
 800b540:	48000800 	.word	0x48000800

0800b544 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
 800b54a:	4603      	mov	r3, r0
 800b54c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800b54e:	2300      	movs	r3, #0
 800b550:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800b552:	79fb      	ldrb	r3, [r7, #7]
 800b554:	2b01      	cmp	r3, #1
 800b556:	d903      	bls.n	800b560 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b558:	f06f 0301 	mvn.w	r3, #1
 800b55c:	60fb      	str	r3, [r7, #12]
 800b55e:	e025      	b.n	800b5ac <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 800b560:	79fb      	ldrb	r3, [r7, #7]
 800b562:	79fa      	ldrb	r2, [r7, #7]
 800b564:	4914      	ldr	r1, [pc, #80]	@ (800b5b8 <BSP_COM_Init+0x74>)
 800b566:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b56a:	4814      	ldr	r0, [pc, #80]	@ (800b5bc <BSP_COM_Init+0x78>)
 800b56c:	4613      	mov	r3, r2
 800b56e:	011b      	lsls	r3, r3, #4
 800b570:	4413      	add	r3, r2
 800b572:	00db      	lsls	r3, r3, #3
 800b574:	4403      	add	r3, r0
 800b576:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800b578:	79fa      	ldrb	r2, [r7, #7]
 800b57a:	4613      	mov	r3, r2
 800b57c:	011b      	lsls	r3, r3, #4
 800b57e:	4413      	add	r3, r2
 800b580:	00db      	lsls	r3, r3, #3
 800b582:	4a0e      	ldr	r2, [pc, #56]	@ (800b5bc <BSP_COM_Init+0x78>)
 800b584:	4413      	add	r3, r2
 800b586:	4618      	mov	r0, r3
 800b588:	f000 f86a 	bl	800b660 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 800b58c:	79fa      	ldrb	r2, [r7, #7]
 800b58e:	4613      	mov	r3, r2
 800b590:	011b      	lsls	r3, r3, #4
 800b592:	4413      	add	r3, r2
 800b594:	00db      	lsls	r3, r3, #3
 800b596:	4a09      	ldr	r2, [pc, #36]	@ (800b5bc <BSP_COM_Init+0x78>)
 800b598:	4413      	add	r3, r2
 800b59a:	4618      	mov	r0, r3
 800b59c:	f000 f810 	bl	800b5c0 <MX_USART2_UART_Init>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d002      	beq.n	800b5ac <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800b5a6:	f06f 0303 	mvn.w	r3, #3
 800b5aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3710      	adds	r7, #16
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	2000021c 	.word	0x2000021c
 800b5bc:	20000710 	.word	0x20000710

0800b5c0 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	4a15      	ldr	r2, [pc, #84]	@ (800b624 <MX_USART2_UART_Init+0x64>)
 800b5d0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800b5d8:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	220c      	movs	r2, #12
 800b5f0:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2200      	movs	r2, #0
 800b602:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2200      	movs	r2, #0
 800b608:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f004 fcfa 	bl	8010004 <HAL_UART_Init>
 800b610:	4603      	mov	r3, r0
 800b612:	2b00      	cmp	r3, #0
 800b614:	d001      	beq.n	800b61a <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 800b616:	2301      	movs	r3, #1
 800b618:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b61a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3710      	adds	r7, #16
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}
 800b624:	40004400 	.word	0x40004400

0800b628 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 800b630:	4b09      	ldr	r3, [pc, #36]	@ (800b658 <__io_putchar+0x30>)
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	461a      	mov	r2, r3
 800b636:	4613      	mov	r3, r2
 800b638:	011b      	lsls	r3, r3, #4
 800b63a:	4413      	add	r3, r2
 800b63c:	00db      	lsls	r3, r3, #3
 800b63e:	4a07      	ldr	r2, [pc, #28]	@ (800b65c <__io_putchar+0x34>)
 800b640:	1898      	adds	r0, r3, r2
 800b642:	1d39      	adds	r1, r7, #4
 800b644:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b648:	2201      	movs	r2, #1
 800b64a:	f004 fd29 	bl	80100a0 <HAL_UART_Transmit>
  return ch;
 800b64e:	687b      	ldr	r3, [r7, #4]
}
 800b650:	4618      	mov	r0, r3
 800b652:	3708      	adds	r7, #8
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}
 800b658:	20000798 	.word	0x20000798
 800b65c:	20000710 	.word	0x20000710

0800b660 <USART2_MspInit>:
 */
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b0ac      	sub	sp, #176	@ 0xb0
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b668:	f107 0314 	add.w	r3, r7, #20
 800b66c:	2288      	movs	r2, #136	@ 0x88
 800b66e:	2100      	movs	r1, #0
 800b670:	4618      	mov	r0, r3
 800b672:	f006 fe9c 	bl	80123ae <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800b676:	2302      	movs	r3, #2
 800b678:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800b67a:	2300      	movs	r3, #0
 800b67c:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b67e:	f107 0314 	add.w	r3, r7, #20
 800b682:	4618      	mov	r0, r3
 800b684:	f002 ff9e 	bl	800e5c4 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800b688:	4b47      	ldr	r3, [pc, #284]	@ (800b7a8 <USART2_MspInit+0x148>)
 800b68a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b68c:	4a46      	ldr	r2, [pc, #280]	@ (800b7a8 <USART2_MspInit+0x148>)
 800b68e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b692:	6593      	str	r3, [r2, #88]	@ 0x58
 800b694:	4b44      	ldr	r3, [pc, #272]	@ (800b7a8 <USART2_MspInit+0x148>)
 800b696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b69c:	613b      	str	r3, [r7, #16]
 800b69e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b6a0:	4b41      	ldr	r3, [pc, #260]	@ (800b7a8 <USART2_MspInit+0x148>)
 800b6a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b6a4:	4a40      	ldr	r2, [pc, #256]	@ (800b7a8 <USART2_MspInit+0x148>)
 800b6a6:	f043 0301 	orr.w	r3, r3, #1
 800b6aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b6ac:	4b3e      	ldr	r3, [pc, #248]	@ (800b7a8 <USART2_MspInit+0x148>)
 800b6ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b6b0:	f003 0301 	and.w	r3, r3, #1
 800b6b4:	60fb      	str	r3, [r7, #12]
 800b6b6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800b6b8:	2304      	movs	r3, #4
 800b6ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6be:	2302      	movs	r3, #2
 800b6c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 800b6d0:	2307      	movs	r3, #7
 800b6d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800b6d6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800b6da:	4619      	mov	r1, r3
 800b6dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b6e0:	f000 fd24 	bl	800c12c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 800b6e4:	2308      	movs	r3, #8
 800b6e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6ea:	2302      	movs	r3, #2
 800b6ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 800b6fc:	2307      	movs	r3, #7
 800b6fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800b702:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800b706:	4619      	mov	r1, r3
 800b708:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b70c:	f000 fd0e 	bl	800c12c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_usart2_rx.Instance = DMA1_Channel6;
 800b710:	4b26      	ldr	r3, [pc, #152]	@ (800b7ac <USART2_MspInit+0x14c>)
 800b712:	4a27      	ldr	r2, [pc, #156]	@ (800b7b0 <USART2_MspInit+0x150>)
 800b714:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800b716:	4b25      	ldr	r3, [pc, #148]	@ (800b7ac <USART2_MspInit+0x14c>)
 800b718:	2202      	movs	r2, #2
 800b71a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b71c:	4b23      	ldr	r3, [pc, #140]	@ (800b7ac <USART2_MspInit+0x14c>)
 800b71e:	2200      	movs	r2, #0
 800b720:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b722:	4b22      	ldr	r3, [pc, #136]	@ (800b7ac <USART2_MspInit+0x14c>)
 800b724:	2200      	movs	r2, #0
 800b726:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b728:	4b20      	ldr	r3, [pc, #128]	@ (800b7ac <USART2_MspInit+0x14c>)
 800b72a:	2280      	movs	r2, #128	@ 0x80
 800b72c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b72e:	4b1f      	ldr	r3, [pc, #124]	@ (800b7ac <USART2_MspInit+0x14c>)
 800b730:	2200      	movs	r2, #0
 800b732:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b734:	4b1d      	ldr	r3, [pc, #116]	@ (800b7ac <USART2_MspInit+0x14c>)
 800b736:	2200      	movs	r2, #0
 800b738:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800b73a:	4b1c      	ldr	r3, [pc, #112]	@ (800b7ac <USART2_MspInit+0x14c>)
 800b73c:	2220      	movs	r2, #32
 800b73e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b740:	4b1a      	ldr	r3, [pc, #104]	@ (800b7ac <USART2_MspInit+0x14c>)
 800b742:	2200      	movs	r2, #0
 800b744:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_usart2_rx);
 800b746:	4819      	ldr	r0, [pc, #100]	@ (800b7ac <USART2_MspInit+0x14c>)
 800b748:	f000 fadc 	bl	800bd04 <HAL_DMA_Init>

  __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	4a17      	ldr	r2, [pc, #92]	@ (800b7ac <USART2_MspInit+0x14c>)
 800b750:	675a      	str	r2, [r3, #116]	@ 0x74
 800b752:	4a16      	ldr	r2, [pc, #88]	@ (800b7ac <USART2_MspInit+0x14c>)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6293      	str	r3, [r2, #40]	@ 0x28

    hdma_usart2_tx.Instance = DMA1_Channel7;
 800b758:	4b16      	ldr	r3, [pc, #88]	@ (800b7b4 <USART2_MspInit+0x154>)
 800b75a:	4a17      	ldr	r2, [pc, #92]	@ (800b7b8 <USART2_MspInit+0x158>)
 800b75c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 800b75e:	4b15      	ldr	r3, [pc, #84]	@ (800b7b4 <USART2_MspInit+0x154>)
 800b760:	2202      	movs	r2, #2
 800b762:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b764:	4b13      	ldr	r3, [pc, #76]	@ (800b7b4 <USART2_MspInit+0x154>)
 800b766:	2210      	movs	r2, #16
 800b768:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b76a:	4b12      	ldr	r3, [pc, #72]	@ (800b7b4 <USART2_MspInit+0x154>)
 800b76c:	2200      	movs	r2, #0
 800b76e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b770:	4b10      	ldr	r3, [pc, #64]	@ (800b7b4 <USART2_MspInit+0x154>)
 800b772:	2280      	movs	r2, #128	@ 0x80
 800b774:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b776:	4b0f      	ldr	r3, [pc, #60]	@ (800b7b4 <USART2_MspInit+0x154>)
 800b778:	2200      	movs	r2, #0
 800b77a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b77c:	4b0d      	ldr	r3, [pc, #52]	@ (800b7b4 <USART2_MspInit+0x154>)
 800b77e:	2200      	movs	r2, #0
 800b780:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 800b782:	4b0c      	ldr	r3, [pc, #48]	@ (800b7b4 <USART2_MspInit+0x154>)
 800b784:	2220      	movs	r2, #32
 800b786:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b788:	4b0a      	ldr	r3, [pc, #40]	@ (800b7b4 <USART2_MspInit+0x154>)
 800b78a:	2200      	movs	r2, #0
 800b78c:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_usart2_tx);
 800b78e:	4809      	ldr	r0, [pc, #36]	@ (800b7b4 <USART2_MspInit+0x154>)
 800b790:	f000 fab8 	bl	800bd04 <HAL_DMA_Init>

  __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	4a07      	ldr	r2, [pc, #28]	@ (800b7b4 <USART2_MspInit+0x154>)
 800b798:	671a      	str	r2, [r3, #112]	@ 0x70
 800b79a:	4a06      	ldr	r2, [pc, #24]	@ (800b7b4 <USART2_MspInit+0x154>)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 800b7a0:	bf00      	nop
 800b7a2:	37b0      	adds	r7, #176	@ 0xb0
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	40021000 	.word	0x40021000
 800b7ac:	2000079c 	.word	0x2000079c
 800b7b0:	4002006c 	.word	0x4002006c
 800b7b4:	200007e4 	.word	0x200007e4
 800b7b8:	40020080 	.word	0x40020080

0800b7bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b082      	sub	sp, #8
 800b7c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b7c6:	4b0c      	ldr	r3, [pc, #48]	@ (800b7f8 <HAL_Init+0x3c>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4a0b      	ldr	r2, [pc, #44]	@ (800b7f8 <HAL_Init+0x3c>)
 800b7cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b7d0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b7d2:	2003      	movs	r0, #3
 800b7d4:	f000 f962 	bl	800ba9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b7d8:	2000      	movs	r0, #0
 800b7da:	f000 f80f 	bl	800b7fc <HAL_InitTick>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d002      	beq.n	800b7ea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	71fb      	strb	r3, [r7, #7]
 800b7e8:	e001      	b.n	800b7ee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800b7ea:	f7f5 fe15 	bl	8001418 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800b7ee:	79fb      	ldrb	r3, [r7, #7]
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3708      	adds	r7, #8
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}
 800b7f8:	40022000 	.word	0x40022000

0800b7fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800b804:	2300      	movs	r3, #0
 800b806:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800b808:	4b17      	ldr	r3, [pc, #92]	@ (800b868 <HAL_InitTick+0x6c>)
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d023      	beq.n	800b858 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800b810:	4b16      	ldr	r3, [pc, #88]	@ (800b86c <HAL_InitTick+0x70>)
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	4b14      	ldr	r3, [pc, #80]	@ (800b868 <HAL_InitTick+0x6c>)
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	4619      	mov	r1, r3
 800b81a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b81e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b822:	fbb2 f3f3 	udiv	r3, r2, r3
 800b826:	4618      	mov	r0, r3
 800b828:	f000 f96d 	bl	800bb06 <HAL_SYSTICK_Config>
 800b82c:	4603      	mov	r3, r0
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d10f      	bne.n	800b852 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2b0f      	cmp	r3, #15
 800b836:	d809      	bhi.n	800b84c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b838:	2200      	movs	r2, #0
 800b83a:	6879      	ldr	r1, [r7, #4]
 800b83c:	f04f 30ff 	mov.w	r0, #4294967295
 800b840:	f000 f937 	bl	800bab2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800b844:	4a0a      	ldr	r2, [pc, #40]	@ (800b870 <HAL_InitTick+0x74>)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6013      	str	r3, [r2, #0]
 800b84a:	e007      	b.n	800b85c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800b84c:	2301      	movs	r3, #1
 800b84e:	73fb      	strb	r3, [r7, #15]
 800b850:	e004      	b.n	800b85c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800b852:	2301      	movs	r3, #1
 800b854:	73fb      	strb	r3, [r7, #15]
 800b856:	e001      	b.n	800b85c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800b858:	2301      	movs	r3, #1
 800b85a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800b85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3710      	adds	r7, #16
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	20000224 	.word	0x20000224
 800b86c:	20000000 	.word	0x20000000
 800b870:	20000220 	.word	0x20000220

0800b874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b874:	b480      	push	{r7}
 800b876:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800b878:	4b06      	ldr	r3, [pc, #24]	@ (800b894 <HAL_IncTick+0x20>)
 800b87a:	781b      	ldrb	r3, [r3, #0]
 800b87c:	461a      	mov	r2, r3
 800b87e:	4b06      	ldr	r3, [pc, #24]	@ (800b898 <HAL_IncTick+0x24>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	4413      	add	r3, r2
 800b884:	4a04      	ldr	r2, [pc, #16]	@ (800b898 <HAL_IncTick+0x24>)
 800b886:	6013      	str	r3, [r2, #0]
}
 800b888:	bf00      	nop
 800b88a:	46bd      	mov	sp, r7
 800b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b890:	4770      	bx	lr
 800b892:	bf00      	nop
 800b894:	20000224 	.word	0x20000224
 800b898:	2000082c 	.word	0x2000082c

0800b89c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b89c:	b480      	push	{r7}
 800b89e:	af00      	add	r7, sp, #0
  return uwTick;
 800b8a0:	4b03      	ldr	r3, [pc, #12]	@ (800b8b0 <HAL_GetTick+0x14>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ac:	4770      	bx	lr
 800b8ae:	bf00      	nop
 800b8b0:	2000082c 	.word	0x2000082c

0800b8b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b8bc:	f7ff ffee 	bl	800b89c <HAL_GetTick>
 800b8c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8cc:	d005      	beq.n	800b8da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800b8ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b8f8 <HAL_Delay+0x44>)
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	4413      	add	r3, r2
 800b8d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b8da:	bf00      	nop
 800b8dc:	f7ff ffde 	bl	800b89c <HAL_GetTick>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	1ad3      	subs	r3, r2, r3
 800b8e6:	68fa      	ldr	r2, [r7, #12]
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d8f7      	bhi.n	800b8dc <HAL_Delay+0x28>
  {
  }
}
 800b8ec:	bf00      	nop
 800b8ee:	bf00      	nop
 800b8f0:	3710      	adds	r7, #16
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	20000224 	.word	0x20000224

0800b8fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b085      	sub	sp, #20
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f003 0307 	and.w	r3, r3, #7
 800b90a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b90c:	4b0c      	ldr	r3, [pc, #48]	@ (800b940 <__NVIC_SetPriorityGrouping+0x44>)
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b912:	68ba      	ldr	r2, [r7, #8]
 800b914:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b918:	4013      	ands	r3, r2
 800b91a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b924:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800b928:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b92c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b92e:	4a04      	ldr	r2, [pc, #16]	@ (800b940 <__NVIC_SetPriorityGrouping+0x44>)
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	60d3      	str	r3, [r2, #12]
}
 800b934:	bf00      	nop
 800b936:	3714      	adds	r7, #20
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr
 800b940:	e000ed00 	.word	0xe000ed00

0800b944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b944:	b480      	push	{r7}
 800b946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b948:	4b04      	ldr	r3, [pc, #16]	@ (800b95c <__NVIC_GetPriorityGrouping+0x18>)
 800b94a:	68db      	ldr	r3, [r3, #12]
 800b94c:	0a1b      	lsrs	r3, r3, #8
 800b94e:	f003 0307 	and.w	r3, r3, #7
}
 800b952:	4618      	mov	r0, r3
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr
 800b95c:	e000ed00 	.word	0xe000ed00

0800b960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b960:	b480      	push	{r7}
 800b962:	b083      	sub	sp, #12
 800b964:	af00      	add	r7, sp, #0
 800b966:	4603      	mov	r3, r0
 800b968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b96a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	db0b      	blt.n	800b98a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b972:	79fb      	ldrb	r3, [r7, #7]
 800b974:	f003 021f 	and.w	r2, r3, #31
 800b978:	4907      	ldr	r1, [pc, #28]	@ (800b998 <__NVIC_EnableIRQ+0x38>)
 800b97a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b97e:	095b      	lsrs	r3, r3, #5
 800b980:	2001      	movs	r0, #1
 800b982:	fa00 f202 	lsl.w	r2, r0, r2
 800b986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800b98a:	bf00      	nop
 800b98c:	370c      	adds	r7, #12
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr
 800b996:	bf00      	nop
 800b998:	e000e100 	.word	0xe000e100

0800b99c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b083      	sub	sp, #12
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	6039      	str	r1, [r7, #0]
 800b9a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b9a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	db0a      	blt.n	800b9c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	b2da      	uxtb	r2, r3
 800b9b4:	490c      	ldr	r1, [pc, #48]	@ (800b9e8 <__NVIC_SetPriority+0x4c>)
 800b9b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9ba:	0112      	lsls	r2, r2, #4
 800b9bc:	b2d2      	uxtb	r2, r2
 800b9be:	440b      	add	r3, r1
 800b9c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b9c4:	e00a      	b.n	800b9dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	b2da      	uxtb	r2, r3
 800b9ca:	4908      	ldr	r1, [pc, #32]	@ (800b9ec <__NVIC_SetPriority+0x50>)
 800b9cc:	79fb      	ldrb	r3, [r7, #7]
 800b9ce:	f003 030f 	and.w	r3, r3, #15
 800b9d2:	3b04      	subs	r3, #4
 800b9d4:	0112      	lsls	r2, r2, #4
 800b9d6:	b2d2      	uxtb	r2, r2
 800b9d8:	440b      	add	r3, r1
 800b9da:	761a      	strb	r2, [r3, #24]
}
 800b9dc:	bf00      	nop
 800b9de:	370c      	adds	r7, #12
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr
 800b9e8:	e000e100 	.word	0xe000e100
 800b9ec:	e000ed00 	.word	0xe000ed00

0800b9f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b089      	sub	sp, #36	@ 0x24
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	60f8      	str	r0, [r7, #12]
 800b9f8:	60b9      	str	r1, [r7, #8]
 800b9fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f003 0307 	and.w	r3, r3, #7
 800ba02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ba04:	69fb      	ldr	r3, [r7, #28]
 800ba06:	f1c3 0307 	rsb	r3, r3, #7
 800ba0a:	2b04      	cmp	r3, #4
 800ba0c:	bf28      	it	cs
 800ba0e:	2304      	movcs	r3, #4
 800ba10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ba12:	69fb      	ldr	r3, [r7, #28]
 800ba14:	3304      	adds	r3, #4
 800ba16:	2b06      	cmp	r3, #6
 800ba18:	d902      	bls.n	800ba20 <NVIC_EncodePriority+0x30>
 800ba1a:	69fb      	ldr	r3, [r7, #28]
 800ba1c:	3b03      	subs	r3, #3
 800ba1e:	e000      	b.n	800ba22 <NVIC_EncodePriority+0x32>
 800ba20:	2300      	movs	r3, #0
 800ba22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ba24:	f04f 32ff 	mov.w	r2, #4294967295
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ba2e:	43da      	mvns	r2, r3
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	401a      	ands	r2, r3
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ba38:	f04f 31ff 	mov.w	r1, #4294967295
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	fa01 f303 	lsl.w	r3, r1, r3
 800ba42:	43d9      	mvns	r1, r3
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ba48:	4313      	orrs	r3, r2
         );
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3724      	adds	r7, #36	@ 0x24
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba54:	4770      	bx	lr
	...

0800ba58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b082      	sub	sp, #8
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	3b01      	subs	r3, #1
 800ba64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba68:	d301      	bcc.n	800ba6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	e00f      	b.n	800ba8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ba6e:	4a0a      	ldr	r2, [pc, #40]	@ (800ba98 <SysTick_Config+0x40>)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	3b01      	subs	r3, #1
 800ba74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ba76:	210f      	movs	r1, #15
 800ba78:	f04f 30ff 	mov.w	r0, #4294967295
 800ba7c:	f7ff ff8e 	bl	800b99c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ba80:	4b05      	ldr	r3, [pc, #20]	@ (800ba98 <SysTick_Config+0x40>)
 800ba82:	2200      	movs	r2, #0
 800ba84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ba86:	4b04      	ldr	r3, [pc, #16]	@ (800ba98 <SysTick_Config+0x40>)
 800ba88:	2207      	movs	r2, #7
 800ba8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ba8c:	2300      	movs	r3, #0
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3708      	adds	r7, #8
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop
 800ba98:	e000e010 	.word	0xe000e010

0800ba9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f7ff ff29 	bl	800b8fc <__NVIC_SetPriorityGrouping>
}
 800baaa:	bf00      	nop
 800baac:	3708      	adds	r7, #8
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}

0800bab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b086      	sub	sp, #24
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	4603      	mov	r3, r0
 800baba:	60b9      	str	r1, [r7, #8]
 800babc:	607a      	str	r2, [r7, #4]
 800babe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800bac0:	2300      	movs	r3, #0
 800bac2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800bac4:	f7ff ff3e 	bl	800b944 <__NVIC_GetPriorityGrouping>
 800bac8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	68b9      	ldr	r1, [r7, #8]
 800bace:	6978      	ldr	r0, [r7, #20]
 800bad0:	f7ff ff8e 	bl	800b9f0 <NVIC_EncodePriority>
 800bad4:	4602      	mov	r2, r0
 800bad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bada:	4611      	mov	r1, r2
 800badc:	4618      	mov	r0, r3
 800bade:	f7ff ff5d 	bl	800b99c <__NVIC_SetPriority>
}
 800bae2:	bf00      	nop
 800bae4:	3718      	adds	r7, #24
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}

0800baea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800baea:	b580      	push	{r7, lr}
 800baec:	b082      	sub	sp, #8
 800baee:	af00      	add	r7, sp, #0
 800baf0:	4603      	mov	r3, r0
 800baf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800baf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800baf8:	4618      	mov	r0, r3
 800bafa:	f7ff ff31 	bl	800b960 <__NVIC_EnableIRQ>
}
 800bafe:	bf00      	nop
 800bb00:	3708      	adds	r7, #8
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}

0800bb06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800bb06:	b580      	push	{r7, lr}
 800bb08:	b082      	sub	sp, #8
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f7ff ffa2 	bl	800ba58 <SysTick_Config>
 800bb14:	4603      	mov	r3, r0
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3708      	adds	r7, #8
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
	...

0800bb20 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b082      	sub	sp, #8
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d101      	bne.n	800bb32 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	e054      	b.n	800bbdc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	7f5b      	ldrb	r3, [r3, #29]
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d105      	bne.n	800bb48 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f7f5 fc8c 	bl	8001460 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2202      	movs	r2, #2
 800bb4c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	791b      	ldrb	r3, [r3, #4]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d10c      	bne.n	800bb70 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a22      	ldr	r2, [pc, #136]	@ (800bbe4 <HAL_CRC_Init+0xc4>)
 800bb5c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	689a      	ldr	r2, [r3, #8]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f022 0218 	bic.w	r2, r2, #24
 800bb6c:	609a      	str	r2, [r3, #8]
 800bb6e:	e00c      	b.n	800bb8a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6899      	ldr	r1, [r3, #8]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	461a      	mov	r2, r3
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 f834 	bl	800bbe8 <HAL_CRCEx_Polynomial_Set>
 800bb80:	4603      	mov	r3, r0
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d001      	beq.n	800bb8a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800bb86:	2301      	movs	r3, #1
 800bb88:	e028      	b.n	800bbdc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	795b      	ldrb	r3, [r3, #5]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d105      	bne.n	800bb9e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f04f 32ff 	mov.w	r2, #4294967295
 800bb9a:	611a      	str	r2, [r3, #16]
 800bb9c:	e004      	b.n	800bba8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	6912      	ldr	r2, [r2, #16]
 800bba6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	695a      	ldr	r2, [r3, #20]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	430a      	orrs	r2, r1
 800bbbc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	689b      	ldr	r3, [r3, #8]
 800bbc4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	699a      	ldr	r2, [r3, #24]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	430a      	orrs	r2, r1
 800bbd2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800bbda:	2300      	movs	r3, #0
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3708      	adds	r7, #8
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}
 800bbe4:	04c11db7 	.word	0x04c11db7

0800bbe8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b087      	sub	sp, #28
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	60f8      	str	r0, [r7, #12]
 800bbf0:	60b9      	str	r1, [r7, #8]
 800bbf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800bbf8:	231f      	movs	r3, #31
 800bbfa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	f003 0301 	and.w	r3, r3, #1
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d102      	bne.n	800bc0c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800bc06:	2301      	movs	r3, #1
 800bc08:	75fb      	strb	r3, [r7, #23]
 800bc0a:	e063      	b.n	800bcd4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800bc0c:	bf00      	nop
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	1e5a      	subs	r2, r3, #1
 800bc12:	613a      	str	r2, [r7, #16]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d009      	beq.n	800bc2c <HAL_CRCEx_Polynomial_Set+0x44>
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	f003 031f 	and.w	r3, r3, #31
 800bc1e:	68ba      	ldr	r2, [r7, #8]
 800bc20:	fa22 f303 	lsr.w	r3, r2, r3
 800bc24:	f003 0301 	and.w	r3, r3, #1
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d0f0      	beq.n	800bc0e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2b18      	cmp	r3, #24
 800bc30:	d846      	bhi.n	800bcc0 <HAL_CRCEx_Polynomial_Set+0xd8>
 800bc32:	a201      	add	r2, pc, #4	@ (adr r2, 800bc38 <HAL_CRCEx_Polynomial_Set+0x50>)
 800bc34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc38:	0800bcc7 	.word	0x0800bcc7
 800bc3c:	0800bcc1 	.word	0x0800bcc1
 800bc40:	0800bcc1 	.word	0x0800bcc1
 800bc44:	0800bcc1 	.word	0x0800bcc1
 800bc48:	0800bcc1 	.word	0x0800bcc1
 800bc4c:	0800bcc1 	.word	0x0800bcc1
 800bc50:	0800bcc1 	.word	0x0800bcc1
 800bc54:	0800bcc1 	.word	0x0800bcc1
 800bc58:	0800bcb5 	.word	0x0800bcb5
 800bc5c:	0800bcc1 	.word	0x0800bcc1
 800bc60:	0800bcc1 	.word	0x0800bcc1
 800bc64:	0800bcc1 	.word	0x0800bcc1
 800bc68:	0800bcc1 	.word	0x0800bcc1
 800bc6c:	0800bcc1 	.word	0x0800bcc1
 800bc70:	0800bcc1 	.word	0x0800bcc1
 800bc74:	0800bcc1 	.word	0x0800bcc1
 800bc78:	0800bca9 	.word	0x0800bca9
 800bc7c:	0800bcc1 	.word	0x0800bcc1
 800bc80:	0800bcc1 	.word	0x0800bcc1
 800bc84:	0800bcc1 	.word	0x0800bcc1
 800bc88:	0800bcc1 	.word	0x0800bcc1
 800bc8c:	0800bcc1 	.word	0x0800bcc1
 800bc90:	0800bcc1 	.word	0x0800bcc1
 800bc94:	0800bcc1 	.word	0x0800bcc1
 800bc98:	0800bc9d 	.word	0x0800bc9d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	2b06      	cmp	r3, #6
 800bca0:	d913      	bls.n	800bcca <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800bca2:	2301      	movs	r3, #1
 800bca4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800bca6:	e010      	b.n	800bcca <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	2b07      	cmp	r3, #7
 800bcac:	d90f      	bls.n	800bcce <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800bcae:	2301      	movs	r3, #1
 800bcb0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800bcb2:	e00c      	b.n	800bcce <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	2b0f      	cmp	r3, #15
 800bcb8:	d90b      	bls.n	800bcd2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800bcba:	2301      	movs	r3, #1
 800bcbc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800bcbe:	e008      	b.n	800bcd2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	75fb      	strb	r3, [r7, #23]
        break;
 800bcc4:	e006      	b.n	800bcd4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800bcc6:	bf00      	nop
 800bcc8:	e004      	b.n	800bcd4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800bcca:	bf00      	nop
 800bccc:	e002      	b.n	800bcd4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800bcce:	bf00      	nop
 800bcd0:	e000      	b.n	800bcd4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800bcd2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800bcd4:	7dfb      	ldrb	r3, [r7, #23]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d10d      	bne.n	800bcf6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	68ba      	ldr	r2, [r7, #8]
 800bce0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	f023 0118 	bic.w	r1, r3, #24
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	430a      	orrs	r2, r1
 800bcf4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800bcf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	371c      	adds	r7, #28
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b085      	sub	sp, #20
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d101      	bne.n	800bd16 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800bd12:	2301      	movs	r3, #1
 800bd14:	e098      	b.n	800be48 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	4b4d      	ldr	r3, [pc, #308]	@ (800be54 <HAL_DMA_Init+0x150>)
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d80f      	bhi.n	800bd42 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	461a      	mov	r2, r3
 800bd28:	4b4b      	ldr	r3, [pc, #300]	@ (800be58 <HAL_DMA_Init+0x154>)
 800bd2a:	4413      	add	r3, r2
 800bd2c:	4a4b      	ldr	r2, [pc, #300]	@ (800be5c <HAL_DMA_Init+0x158>)
 800bd2e:	fba2 2303 	umull	r2, r3, r2, r3
 800bd32:	091b      	lsrs	r3, r3, #4
 800bd34:	009a      	lsls	r2, r3, #2
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	4a48      	ldr	r2, [pc, #288]	@ (800be60 <HAL_DMA_Init+0x15c>)
 800bd3e:	641a      	str	r2, [r3, #64]	@ 0x40
 800bd40:	e00e      	b.n	800bd60 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	461a      	mov	r2, r3
 800bd48:	4b46      	ldr	r3, [pc, #280]	@ (800be64 <HAL_DMA_Init+0x160>)
 800bd4a:	4413      	add	r3, r2
 800bd4c:	4a43      	ldr	r2, [pc, #268]	@ (800be5c <HAL_DMA_Init+0x158>)
 800bd4e:	fba2 2303 	umull	r2, r3, r2, r3
 800bd52:	091b      	lsrs	r3, r3, #4
 800bd54:	009a      	lsls	r2, r3, #2
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	4a42      	ldr	r2, [pc, #264]	@ (800be68 <HAL_DMA_Init+0x164>)
 800bd5e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2202      	movs	r2, #2
 800bd64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800bd76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800bd84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	691b      	ldr	r3, [r3, #16]
 800bd8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bd90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	699b      	ldr	r3, [r3, #24]
 800bd96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bd9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6a1b      	ldr	r3, [r3, #32]
 800bda2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800bda4:	68fa      	ldr	r2, [r7, #12]
 800bda6:	4313      	orrs	r3, r2
 800bda8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	68fa      	ldr	r2, [r7, #12]
 800bdb0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	689b      	ldr	r3, [r3, #8]
 800bdb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bdba:	d039      	beq.n	800be30 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdc0:	4a27      	ldr	r2, [pc, #156]	@ (800be60 <HAL_DMA_Init+0x15c>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d11a      	bne.n	800bdfc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800bdc6:	4b29      	ldr	r3, [pc, #164]	@ (800be6c <HAL_DMA_Init+0x168>)
 800bdc8:	681a      	ldr	r2, [r3, #0]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdce:	f003 031c 	and.w	r3, r3, #28
 800bdd2:	210f      	movs	r1, #15
 800bdd4:	fa01 f303 	lsl.w	r3, r1, r3
 800bdd8:	43db      	mvns	r3, r3
 800bdda:	4924      	ldr	r1, [pc, #144]	@ (800be6c <HAL_DMA_Init+0x168>)
 800bddc:	4013      	ands	r3, r2
 800bdde:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800bde0:	4b22      	ldr	r3, [pc, #136]	@ (800be6c <HAL_DMA_Init+0x168>)
 800bde2:	681a      	ldr	r2, [r3, #0]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6859      	ldr	r1, [r3, #4]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdec:	f003 031c 	and.w	r3, r3, #28
 800bdf0:	fa01 f303 	lsl.w	r3, r1, r3
 800bdf4:	491d      	ldr	r1, [pc, #116]	@ (800be6c <HAL_DMA_Init+0x168>)
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	600b      	str	r3, [r1, #0]
 800bdfa:	e019      	b.n	800be30 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800bdfc:	4b1c      	ldr	r3, [pc, #112]	@ (800be70 <HAL_DMA_Init+0x16c>)
 800bdfe:	681a      	ldr	r2, [r3, #0]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be04:	f003 031c 	and.w	r3, r3, #28
 800be08:	210f      	movs	r1, #15
 800be0a:	fa01 f303 	lsl.w	r3, r1, r3
 800be0e:	43db      	mvns	r3, r3
 800be10:	4917      	ldr	r1, [pc, #92]	@ (800be70 <HAL_DMA_Init+0x16c>)
 800be12:	4013      	ands	r3, r2
 800be14:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800be16:	4b16      	ldr	r3, [pc, #88]	@ (800be70 <HAL_DMA_Init+0x16c>)
 800be18:	681a      	ldr	r2, [r3, #0]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6859      	ldr	r1, [r3, #4]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be22:	f003 031c 	and.w	r3, r3, #28
 800be26:	fa01 f303 	lsl.w	r3, r1, r3
 800be2a:	4911      	ldr	r1, [pc, #68]	@ (800be70 <HAL_DMA_Init+0x16c>)
 800be2c:	4313      	orrs	r3, r2
 800be2e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2200      	movs	r2, #0
 800be34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2201      	movs	r2, #1
 800be3a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2200      	movs	r2, #0
 800be42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800be46:	2300      	movs	r3, #0
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3714      	adds	r7, #20
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr
 800be54:	40020407 	.word	0x40020407
 800be58:	bffdfff8 	.word	0xbffdfff8
 800be5c:	cccccccd 	.word	0xcccccccd
 800be60:	40020000 	.word	0x40020000
 800be64:	bffdfbf8 	.word	0xbffdfbf8
 800be68:	40020400 	.word	0x40020400
 800be6c:	400200a8 	.word	0x400200a8
 800be70:	400204a8 	.word	0x400204a8

0800be74 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800be74:	b480      	push	{r7}
 800be76:	b085      	sub	sp, #20
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800be7c:	2300      	movs	r3, #0
 800be7e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800be86:	b2db      	uxtb	r3, r3
 800be88:	2b02      	cmp	r3, #2
 800be8a:	d008      	beq.n	800be9e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2204      	movs	r2, #4
 800be90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2200      	movs	r2, #0
 800be96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800be9a:	2301      	movs	r3, #1
 800be9c:	e022      	b.n	800bee4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	681a      	ldr	r2, [r3, #0]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f022 020e 	bic.w	r2, r2, #14
 800beac:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	681a      	ldr	r2, [r3, #0]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f022 0201 	bic.w	r2, r2, #1
 800bebc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bec2:	f003 021c 	and.w	r2, r3, #28
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800beca:	2101      	movs	r1, #1
 800becc:	fa01 f202 	lsl.w	r2, r1, r2
 800bed0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2201      	movs	r2, #1
 800bed6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2200      	movs	r2, #0
 800bede:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800bee2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3714      	adds	r7, #20
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bef8:	2300      	movs	r3, #0
 800befa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	2b02      	cmp	r3, #2
 800bf06:	d005      	beq.n	800bf14 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2204      	movs	r2, #4
 800bf0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	73fb      	strb	r3, [r7, #15]
 800bf12:	e029      	b.n	800bf68 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f022 020e 	bic.w	r2, r2, #14
 800bf22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f022 0201 	bic.w	r2, r2, #1
 800bf32:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf38:	f003 021c 	and.w	r2, r3, #28
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf40:	2101      	movs	r1, #1
 800bf42:	fa01 f202 	lsl.w	r2, r1, r2
 800bf46:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2201      	movs	r2, #1
 800bf4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d003      	beq.n	800bf68 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	4798      	blx	r3
    }
  }
  return status;
 800bf68:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3710      	adds	r7, #16
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b084      	sub	sp, #16
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf8e:	f003 031c 	and.w	r3, r3, #28
 800bf92:	2204      	movs	r2, #4
 800bf94:	409a      	lsls	r2, r3
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	4013      	ands	r3, r2
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d026      	beq.n	800bfec <HAL_DMA_IRQHandler+0x7a>
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	f003 0304 	and.w	r3, r3, #4
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d021      	beq.n	800bfec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f003 0320 	and.w	r3, r3, #32
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d107      	bne.n	800bfc6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f022 0204 	bic.w	r2, r2, #4
 800bfc4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfca:	f003 021c 	and.w	r2, r3, #28
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfd2:	2104      	movs	r1, #4
 800bfd4:	fa01 f202 	lsl.w	r2, r1, r2
 800bfd8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d071      	beq.n	800c0c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800bfea:	e06c      	b.n	800c0c6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bff0:	f003 031c 	and.w	r3, r3, #28
 800bff4:	2202      	movs	r2, #2
 800bff6:	409a      	lsls	r2, r3
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	4013      	ands	r3, r2
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d02e      	beq.n	800c05e <HAL_DMA_IRQHandler+0xec>
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	f003 0302 	and.w	r3, r3, #2
 800c006:	2b00      	cmp	r3, #0
 800c008:	d029      	beq.n	800c05e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f003 0320 	and.w	r3, r3, #32
 800c014:	2b00      	cmp	r3, #0
 800c016:	d10b      	bne.n	800c030 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	681a      	ldr	r2, [r3, #0]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f022 020a 	bic.w	r2, r2, #10
 800c026:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c034:	f003 021c 	and.w	r2, r3, #28
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c03c:	2102      	movs	r1, #2
 800c03e:	fa01 f202 	lsl.w	r2, r1, r2
 800c042:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2200      	movs	r2, #0
 800c048:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c050:	2b00      	cmp	r3, #0
 800c052:	d038      	beq.n	800c0c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800c05c:	e033      	b.n	800c0c6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c062:	f003 031c 	and.w	r3, r3, #28
 800c066:	2208      	movs	r2, #8
 800c068:	409a      	lsls	r2, r3
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	4013      	ands	r3, r2
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d02a      	beq.n	800c0c8 <HAL_DMA_IRQHandler+0x156>
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	f003 0308 	and.w	r3, r3, #8
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d025      	beq.n	800c0c8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	681a      	ldr	r2, [r3, #0]
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f022 020e 	bic.w	r2, r2, #14
 800c08a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c090:	f003 021c 	and.w	r2, r3, #28
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c098:	2101      	movs	r1, #1
 800c09a:	fa01 f202 	lsl.w	r2, r1, r2
 800c09e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d004      	beq.n	800c0c8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800c0c6:	bf00      	nop
 800c0c8:	bf00      	nop
}
 800c0ca:	3710      	adds	r7, #16
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b087      	sub	sp, #28
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	60f8      	str	r0, [r7, #12]
 800c0d8:	460b      	mov	r3, r1
 800c0da:	607a      	str	r2, [r7, #4]
 800c0dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800c0e2:	7afb      	ldrb	r3, [r7, #11]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d103      	bne.n	800c0f0 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	687a      	ldr	r2, [r7, #4]
 800c0ec:	605a      	str	r2, [r3, #4]
      break;
 800c0ee:	e002      	b.n	800c0f6 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	75fb      	strb	r3, [r7, #23]
      break;
 800c0f4:	bf00      	nop
  }

  return status;
 800c0f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	371c      	adds	r7, #28
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr

0800c104 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800c104:	b480      	push	{r7}
 800c106:	b083      	sub	sp, #12
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d101      	bne.n	800c118 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800c114:	2301      	movs	r3, #1
 800c116:	e003      	b.n	800c120 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	683a      	ldr	r2, [r7, #0]
 800c11c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800c11e:	2300      	movs	r3, #0
  }
}
 800c120:	4618      	mov	r0, r3
 800c122:	370c      	adds	r7, #12
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr

0800c12c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b087      	sub	sp, #28
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800c136:	2300      	movs	r3, #0
 800c138:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c13a:	e17f      	b.n	800c43c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	681a      	ldr	r2, [r3, #0]
 800c140:	2101      	movs	r1, #1
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	fa01 f303 	lsl.w	r3, r1, r3
 800c148:	4013      	ands	r3, r2
 800c14a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	f000 8171 	beq.w	800c436 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	f003 0303 	and.w	r3, r3, #3
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d005      	beq.n	800c16c <HAL_GPIO_Init+0x40>
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	f003 0303 	and.w	r3, r3, #3
 800c168:	2b02      	cmp	r3, #2
 800c16a:	d130      	bne.n	800c1ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	005b      	lsls	r3, r3, #1
 800c176:	2203      	movs	r2, #3
 800c178:	fa02 f303 	lsl.w	r3, r2, r3
 800c17c:	43db      	mvns	r3, r3
 800c17e:	693a      	ldr	r2, [r7, #16]
 800c180:	4013      	ands	r3, r2
 800c182:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	68da      	ldr	r2, [r3, #12]
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	005b      	lsls	r3, r3, #1
 800c18c:	fa02 f303 	lsl.w	r3, r2, r3
 800c190:	693a      	ldr	r2, [r7, #16]
 800c192:	4313      	orrs	r3, r2
 800c194:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	693a      	ldr	r2, [r7, #16]
 800c19a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	fa02 f303 	lsl.w	r3, r2, r3
 800c1aa:	43db      	mvns	r3, r3
 800c1ac:	693a      	ldr	r2, [r7, #16]
 800c1ae:	4013      	ands	r3, r2
 800c1b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	091b      	lsrs	r3, r3, #4
 800c1b8:	f003 0201 	and.w	r2, r3, #1
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	fa02 f303 	lsl.w	r3, r2, r3
 800c1c2:	693a      	ldr	r2, [r7, #16]
 800c1c4:	4313      	orrs	r3, r2
 800c1c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	693a      	ldr	r2, [r7, #16]
 800c1cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	f003 0303 	and.w	r3, r3, #3
 800c1d6:	2b03      	cmp	r3, #3
 800c1d8:	d118      	bne.n	800c20c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	fa02 f303 	lsl.w	r3, r2, r3
 800c1e8:	43db      	mvns	r3, r3
 800c1ea:	693a      	ldr	r2, [r7, #16]
 800c1ec:	4013      	ands	r3, r2
 800c1ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	685b      	ldr	r3, [r3, #4]
 800c1f4:	08db      	lsrs	r3, r3, #3
 800c1f6:	f003 0201 	and.w	r2, r3, #1
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	fa02 f303 	lsl.w	r3, r2, r3
 800c200:	693a      	ldr	r2, [r7, #16]
 800c202:	4313      	orrs	r3, r2
 800c204:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	693a      	ldr	r2, [r7, #16]
 800c20a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	f003 0303 	and.w	r3, r3, #3
 800c214:	2b03      	cmp	r3, #3
 800c216:	d017      	beq.n	800c248 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	68db      	ldr	r3, [r3, #12]
 800c21c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	005b      	lsls	r3, r3, #1
 800c222:	2203      	movs	r2, #3
 800c224:	fa02 f303 	lsl.w	r3, r2, r3
 800c228:	43db      	mvns	r3, r3
 800c22a:	693a      	ldr	r2, [r7, #16]
 800c22c:	4013      	ands	r3, r2
 800c22e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	689a      	ldr	r2, [r3, #8]
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	005b      	lsls	r3, r3, #1
 800c238:	fa02 f303 	lsl.w	r3, r2, r3
 800c23c:	693a      	ldr	r2, [r7, #16]
 800c23e:	4313      	orrs	r3, r2
 800c240:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	693a      	ldr	r2, [r7, #16]
 800c246:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	f003 0303 	and.w	r3, r3, #3
 800c250:	2b02      	cmp	r3, #2
 800c252:	d123      	bne.n	800c29c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	08da      	lsrs	r2, r3, #3
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	3208      	adds	r2, #8
 800c25c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c260:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	f003 0307 	and.w	r3, r3, #7
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	220f      	movs	r2, #15
 800c26c:	fa02 f303 	lsl.w	r3, r2, r3
 800c270:	43db      	mvns	r3, r3
 800c272:	693a      	ldr	r2, [r7, #16]
 800c274:	4013      	ands	r3, r2
 800c276:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	691a      	ldr	r2, [r3, #16]
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	f003 0307 	and.w	r3, r3, #7
 800c282:	009b      	lsls	r3, r3, #2
 800c284:	fa02 f303 	lsl.w	r3, r2, r3
 800c288:	693a      	ldr	r2, [r7, #16]
 800c28a:	4313      	orrs	r3, r2
 800c28c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	08da      	lsrs	r2, r3, #3
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	3208      	adds	r2, #8
 800c296:	6939      	ldr	r1, [r7, #16]
 800c298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	005b      	lsls	r3, r3, #1
 800c2a6:	2203      	movs	r2, #3
 800c2a8:	fa02 f303 	lsl.w	r3, r2, r3
 800c2ac:	43db      	mvns	r3, r3
 800c2ae:	693a      	ldr	r2, [r7, #16]
 800c2b0:	4013      	ands	r3, r2
 800c2b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	f003 0203 	and.w	r2, r3, #3
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	005b      	lsls	r3, r3, #1
 800c2c0:	fa02 f303 	lsl.w	r3, r2, r3
 800c2c4:	693a      	ldr	r2, [r7, #16]
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	693a      	ldr	r2, [r7, #16]
 800c2ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	f000 80ac 	beq.w	800c436 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c2de:	4b5f      	ldr	r3, [pc, #380]	@ (800c45c <HAL_GPIO_Init+0x330>)
 800c2e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c2e2:	4a5e      	ldr	r2, [pc, #376]	@ (800c45c <HAL_GPIO_Init+0x330>)
 800c2e4:	f043 0301 	orr.w	r3, r3, #1
 800c2e8:	6613      	str	r3, [r2, #96]	@ 0x60
 800c2ea:	4b5c      	ldr	r3, [pc, #368]	@ (800c45c <HAL_GPIO_Init+0x330>)
 800c2ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c2ee:	f003 0301 	and.w	r3, r3, #1
 800c2f2:	60bb      	str	r3, [r7, #8]
 800c2f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800c2f6:	4a5a      	ldr	r2, [pc, #360]	@ (800c460 <HAL_GPIO_Init+0x334>)
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	089b      	lsrs	r3, r3, #2
 800c2fc:	3302      	adds	r3, #2
 800c2fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c302:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	f003 0303 	and.w	r3, r3, #3
 800c30a:	009b      	lsls	r3, r3, #2
 800c30c:	220f      	movs	r2, #15
 800c30e:	fa02 f303 	lsl.w	r3, r2, r3
 800c312:	43db      	mvns	r3, r3
 800c314:	693a      	ldr	r2, [r7, #16]
 800c316:	4013      	ands	r3, r2
 800c318:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800c320:	d025      	beq.n	800c36e <HAL_GPIO_Init+0x242>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	4a4f      	ldr	r2, [pc, #316]	@ (800c464 <HAL_GPIO_Init+0x338>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d01f      	beq.n	800c36a <HAL_GPIO_Init+0x23e>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	4a4e      	ldr	r2, [pc, #312]	@ (800c468 <HAL_GPIO_Init+0x33c>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d019      	beq.n	800c366 <HAL_GPIO_Init+0x23a>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	4a4d      	ldr	r2, [pc, #308]	@ (800c46c <HAL_GPIO_Init+0x340>)
 800c336:	4293      	cmp	r3, r2
 800c338:	d013      	beq.n	800c362 <HAL_GPIO_Init+0x236>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	4a4c      	ldr	r2, [pc, #304]	@ (800c470 <HAL_GPIO_Init+0x344>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d00d      	beq.n	800c35e <HAL_GPIO_Init+0x232>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	4a4b      	ldr	r2, [pc, #300]	@ (800c474 <HAL_GPIO_Init+0x348>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d007      	beq.n	800c35a <HAL_GPIO_Init+0x22e>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	4a4a      	ldr	r2, [pc, #296]	@ (800c478 <HAL_GPIO_Init+0x34c>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	d101      	bne.n	800c356 <HAL_GPIO_Init+0x22a>
 800c352:	2306      	movs	r3, #6
 800c354:	e00c      	b.n	800c370 <HAL_GPIO_Init+0x244>
 800c356:	2307      	movs	r3, #7
 800c358:	e00a      	b.n	800c370 <HAL_GPIO_Init+0x244>
 800c35a:	2305      	movs	r3, #5
 800c35c:	e008      	b.n	800c370 <HAL_GPIO_Init+0x244>
 800c35e:	2304      	movs	r3, #4
 800c360:	e006      	b.n	800c370 <HAL_GPIO_Init+0x244>
 800c362:	2303      	movs	r3, #3
 800c364:	e004      	b.n	800c370 <HAL_GPIO_Init+0x244>
 800c366:	2302      	movs	r3, #2
 800c368:	e002      	b.n	800c370 <HAL_GPIO_Init+0x244>
 800c36a:	2301      	movs	r3, #1
 800c36c:	e000      	b.n	800c370 <HAL_GPIO_Init+0x244>
 800c36e:	2300      	movs	r3, #0
 800c370:	697a      	ldr	r2, [r7, #20]
 800c372:	f002 0203 	and.w	r2, r2, #3
 800c376:	0092      	lsls	r2, r2, #2
 800c378:	4093      	lsls	r3, r2
 800c37a:	693a      	ldr	r2, [r7, #16]
 800c37c:	4313      	orrs	r3, r2
 800c37e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800c380:	4937      	ldr	r1, [pc, #220]	@ (800c460 <HAL_GPIO_Init+0x334>)
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	089b      	lsrs	r3, r3, #2
 800c386:	3302      	adds	r3, #2
 800c388:	693a      	ldr	r2, [r7, #16]
 800c38a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c38e:	4b3b      	ldr	r3, [pc, #236]	@ (800c47c <HAL_GPIO_Init+0x350>)
 800c390:	689b      	ldr	r3, [r3, #8]
 800c392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	43db      	mvns	r3, r3
 800c398:	693a      	ldr	r2, [r7, #16]
 800c39a:	4013      	ands	r3, r2
 800c39c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d003      	beq.n	800c3b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800c3aa:	693a      	ldr	r2, [r7, #16]
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800c3b2:	4a32      	ldr	r2, [pc, #200]	@ (800c47c <HAL_GPIO_Init+0x350>)
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800c3b8:	4b30      	ldr	r3, [pc, #192]	@ (800c47c <HAL_GPIO_Init+0x350>)
 800c3ba:	68db      	ldr	r3, [r3, #12]
 800c3bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	43db      	mvns	r3, r3
 800c3c2:	693a      	ldr	r2, [r7, #16]
 800c3c4:	4013      	ands	r3, r2
 800c3c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d003      	beq.n	800c3dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800c3d4:	693a      	ldr	r2, [r7, #16]
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	4313      	orrs	r3, r2
 800c3da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c3dc:	4a27      	ldr	r2, [pc, #156]	@ (800c47c <HAL_GPIO_Init+0x350>)
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800c3e2:	4b26      	ldr	r3, [pc, #152]	@ (800c47c <HAL_GPIO_Init+0x350>)
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	43db      	mvns	r3, r3
 800c3ec:	693a      	ldr	r2, [r7, #16]
 800c3ee:	4013      	ands	r3, r2
 800c3f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	685b      	ldr	r3, [r3, #4]
 800c3f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d003      	beq.n	800c406 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800c3fe:	693a      	ldr	r2, [r7, #16]
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	4313      	orrs	r3, r2
 800c404:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c406:	4a1d      	ldr	r2, [pc, #116]	@ (800c47c <HAL_GPIO_Init+0x350>)
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800c40c:	4b1b      	ldr	r3, [pc, #108]	@ (800c47c <HAL_GPIO_Init+0x350>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	43db      	mvns	r3, r3
 800c416:	693a      	ldr	r2, [r7, #16]
 800c418:	4013      	ands	r3, r2
 800c41a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c424:	2b00      	cmp	r3, #0
 800c426:	d003      	beq.n	800c430 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800c428:	693a      	ldr	r2, [r7, #16]
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	4313      	orrs	r3, r2
 800c42e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c430:	4a12      	ldr	r2, [pc, #72]	@ (800c47c <HAL_GPIO_Init+0x350>)
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	3301      	adds	r3, #1
 800c43a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	681a      	ldr	r2, [r3, #0]
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	fa22 f303 	lsr.w	r3, r2, r3
 800c446:	2b00      	cmp	r3, #0
 800c448:	f47f ae78 	bne.w	800c13c <HAL_GPIO_Init+0x10>
  }
}
 800c44c:	bf00      	nop
 800c44e:	bf00      	nop
 800c450:	371c      	adds	r7, #28
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr
 800c45a:	bf00      	nop
 800c45c:	40021000 	.word	0x40021000
 800c460:	40010000 	.word	0x40010000
 800c464:	48000400 	.word	0x48000400
 800c468:	48000800 	.word	0x48000800
 800c46c:	48000c00 	.word	0x48000c00
 800c470:	48001000 	.word	0x48001000
 800c474:	48001400 	.word	0x48001400
 800c478:	48001800 	.word	0x48001800
 800c47c:	40010400 	.word	0x40010400

0800c480 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c480:	b480      	push	{r7}
 800c482:	b087      	sub	sp, #28
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800c48a:	2300      	movs	r3, #0
 800c48c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800c48e:	e0cd      	b.n	800c62c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800c490:	2201      	movs	r2, #1
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	fa02 f303 	lsl.w	r3, r2, r3
 800c498:	683a      	ldr	r2, [r7, #0]
 800c49a:	4013      	ands	r3, r2
 800c49c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	f000 80c0 	beq.w	800c626 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800c4a6:	4a68      	ldr	r2, [pc, #416]	@ (800c648 <HAL_GPIO_DeInit+0x1c8>)
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	089b      	lsrs	r3, r3, #2
 800c4ac:	3302      	adds	r3, #2
 800c4ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4b2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	f003 0303 	and.w	r3, r3, #3
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	220f      	movs	r2, #15
 800c4be:	fa02 f303 	lsl.w	r3, r2, r3
 800c4c2:	68fa      	ldr	r2, [r7, #12]
 800c4c4:	4013      	ands	r3, r2
 800c4c6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800c4ce:	d025      	beq.n	800c51c <HAL_GPIO_DeInit+0x9c>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	4a5e      	ldr	r2, [pc, #376]	@ (800c64c <HAL_GPIO_DeInit+0x1cc>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d01f      	beq.n	800c518 <HAL_GPIO_DeInit+0x98>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	4a5d      	ldr	r2, [pc, #372]	@ (800c650 <HAL_GPIO_DeInit+0x1d0>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d019      	beq.n	800c514 <HAL_GPIO_DeInit+0x94>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	4a5c      	ldr	r2, [pc, #368]	@ (800c654 <HAL_GPIO_DeInit+0x1d4>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d013      	beq.n	800c510 <HAL_GPIO_DeInit+0x90>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	4a5b      	ldr	r2, [pc, #364]	@ (800c658 <HAL_GPIO_DeInit+0x1d8>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d00d      	beq.n	800c50c <HAL_GPIO_DeInit+0x8c>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	4a5a      	ldr	r2, [pc, #360]	@ (800c65c <HAL_GPIO_DeInit+0x1dc>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d007      	beq.n	800c508 <HAL_GPIO_DeInit+0x88>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	4a59      	ldr	r2, [pc, #356]	@ (800c660 <HAL_GPIO_DeInit+0x1e0>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d101      	bne.n	800c504 <HAL_GPIO_DeInit+0x84>
 800c500:	2306      	movs	r3, #6
 800c502:	e00c      	b.n	800c51e <HAL_GPIO_DeInit+0x9e>
 800c504:	2307      	movs	r3, #7
 800c506:	e00a      	b.n	800c51e <HAL_GPIO_DeInit+0x9e>
 800c508:	2305      	movs	r3, #5
 800c50a:	e008      	b.n	800c51e <HAL_GPIO_DeInit+0x9e>
 800c50c:	2304      	movs	r3, #4
 800c50e:	e006      	b.n	800c51e <HAL_GPIO_DeInit+0x9e>
 800c510:	2303      	movs	r3, #3
 800c512:	e004      	b.n	800c51e <HAL_GPIO_DeInit+0x9e>
 800c514:	2302      	movs	r3, #2
 800c516:	e002      	b.n	800c51e <HAL_GPIO_DeInit+0x9e>
 800c518:	2301      	movs	r3, #1
 800c51a:	e000      	b.n	800c51e <HAL_GPIO_DeInit+0x9e>
 800c51c:	2300      	movs	r3, #0
 800c51e:	697a      	ldr	r2, [r7, #20]
 800c520:	f002 0203 	and.w	r2, r2, #3
 800c524:	0092      	lsls	r2, r2, #2
 800c526:	4093      	lsls	r3, r2
 800c528:	68fa      	ldr	r2, [r7, #12]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d132      	bne.n	800c594 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800c52e:	4b4d      	ldr	r3, [pc, #308]	@ (800c664 <HAL_GPIO_DeInit+0x1e4>)
 800c530:	681a      	ldr	r2, [r3, #0]
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	43db      	mvns	r3, r3
 800c536:	494b      	ldr	r1, [pc, #300]	@ (800c664 <HAL_GPIO_DeInit+0x1e4>)
 800c538:	4013      	ands	r3, r2
 800c53a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800c53c:	4b49      	ldr	r3, [pc, #292]	@ (800c664 <HAL_GPIO_DeInit+0x1e4>)
 800c53e:	685a      	ldr	r2, [r3, #4]
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	43db      	mvns	r3, r3
 800c544:	4947      	ldr	r1, [pc, #284]	@ (800c664 <HAL_GPIO_DeInit+0x1e4>)
 800c546:	4013      	ands	r3, r2
 800c548:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800c54a:	4b46      	ldr	r3, [pc, #280]	@ (800c664 <HAL_GPIO_DeInit+0x1e4>)
 800c54c:	68da      	ldr	r2, [r3, #12]
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	43db      	mvns	r3, r3
 800c552:	4944      	ldr	r1, [pc, #272]	@ (800c664 <HAL_GPIO_DeInit+0x1e4>)
 800c554:	4013      	ands	r3, r2
 800c556:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800c558:	4b42      	ldr	r3, [pc, #264]	@ (800c664 <HAL_GPIO_DeInit+0x1e4>)
 800c55a:	689a      	ldr	r2, [r3, #8]
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	43db      	mvns	r3, r3
 800c560:	4940      	ldr	r1, [pc, #256]	@ (800c664 <HAL_GPIO_DeInit+0x1e4>)
 800c562:	4013      	ands	r3, r2
 800c564:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	f003 0303 	and.w	r3, r3, #3
 800c56c:	009b      	lsls	r3, r3, #2
 800c56e:	220f      	movs	r2, #15
 800c570:	fa02 f303 	lsl.w	r3, r2, r3
 800c574:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800c576:	4a34      	ldr	r2, [pc, #208]	@ (800c648 <HAL_GPIO_DeInit+0x1c8>)
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	089b      	lsrs	r3, r3, #2
 800c57c:	3302      	adds	r3, #2
 800c57e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	43da      	mvns	r2, r3
 800c586:	4830      	ldr	r0, [pc, #192]	@ (800c648 <HAL_GPIO_DeInit+0x1c8>)
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	089b      	lsrs	r3, r3, #2
 800c58c:	400a      	ands	r2, r1
 800c58e:	3302      	adds	r3, #2
 800c590:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681a      	ldr	r2, [r3, #0]
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	005b      	lsls	r3, r3, #1
 800c59c:	2103      	movs	r1, #3
 800c59e:	fa01 f303 	lsl.w	r3, r1, r3
 800c5a2:	431a      	orrs	r2, r3
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	08da      	lsrs	r2, r3, #3
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	3208      	adds	r2, #8
 800c5b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	f003 0307 	and.w	r3, r3, #7
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	220f      	movs	r2, #15
 800c5be:	fa02 f303 	lsl.w	r3, r2, r3
 800c5c2:	43db      	mvns	r3, r3
 800c5c4:	697a      	ldr	r2, [r7, #20]
 800c5c6:	08d2      	lsrs	r2, r2, #3
 800c5c8:	4019      	ands	r1, r3
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	3208      	adds	r2, #8
 800c5ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	689a      	ldr	r2, [r3, #8]
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	005b      	lsls	r3, r3, #1
 800c5da:	2103      	movs	r1, #3
 800c5dc:	fa01 f303 	lsl.w	r3, r1, r3
 800c5e0:	43db      	mvns	r3, r3
 800c5e2:	401a      	ands	r2, r3
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	685a      	ldr	r2, [r3, #4]
 800c5ec:	2101      	movs	r1, #1
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	fa01 f303 	lsl.w	r3, r1, r3
 800c5f4:	43db      	mvns	r3, r3
 800c5f6:	401a      	ands	r2, r3
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	68da      	ldr	r2, [r3, #12]
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	005b      	lsls	r3, r3, #1
 800c604:	2103      	movs	r1, #3
 800c606:	fa01 f303 	lsl.w	r3, r1, r3
 800c60a:	43db      	mvns	r3, r3
 800c60c:	401a      	ands	r2, r3
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c616:	2101      	movs	r1, #1
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	fa01 f303 	lsl.w	r3, r1, r3
 800c61e:	43db      	mvns	r3, r3
 800c620:	401a      	ands	r2, r3
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	3301      	adds	r3, #1
 800c62a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800c62c:	683a      	ldr	r2, [r7, #0]
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	fa22 f303 	lsr.w	r3, r2, r3
 800c634:	2b00      	cmp	r3, #0
 800c636:	f47f af2b 	bne.w	800c490 <HAL_GPIO_DeInit+0x10>
  }
}
 800c63a:	bf00      	nop
 800c63c:	bf00      	nop
 800c63e:	371c      	adds	r7, #28
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr
 800c648:	40010000 	.word	0x40010000
 800c64c:	48000400 	.word	0x48000400
 800c650:	48000800 	.word	0x48000800
 800c654:	48000c00 	.word	0x48000c00
 800c658:	48001000 	.word	0x48001000
 800c65c:	48001400 	.word	0x48001400
 800c660:	48001800 	.word	0x48001800
 800c664:	40010400 	.word	0x40010400

0800c668 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c668:	b480      	push	{r7}
 800c66a:	b085      	sub	sp, #20
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	460b      	mov	r3, r1
 800c672:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	691a      	ldr	r2, [r3, #16]
 800c678:	887b      	ldrh	r3, [r7, #2]
 800c67a:	4013      	ands	r3, r2
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d002      	beq.n	800c686 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c680:	2301      	movs	r3, #1
 800c682:	73fb      	strb	r3, [r7, #15]
 800c684:	e001      	b.n	800c68a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c686:	2300      	movs	r3, #0
 800c688:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3714      	adds	r7, #20
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr

0800c698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c698:	b480      	push	{r7}
 800c69a:	b083      	sub	sp, #12
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	807b      	strh	r3, [r7, #2]
 800c6a4:	4613      	mov	r3, r2
 800c6a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c6a8:	787b      	ldrb	r3, [r7, #1]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d003      	beq.n	800c6b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c6ae:	887a      	ldrh	r2, [r7, #2]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c6b4:	e002      	b.n	800c6bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c6b6:	887a      	ldrh	r2, [r7, #2]
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800c6bc:	bf00      	nop
 800c6be:	370c      	adds	r7, #12
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr

0800c6c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b082      	sub	sp, #8
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d101      	bne.n	800c6da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	e08d      	b.n	800c7f6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c6e0:	b2db      	uxtb	r3, r3
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d106      	bne.n	800c6f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f000 f8b4 	bl	800c85c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2224      	movs	r2, #36	@ 0x24
 800c6f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	681a      	ldr	r2, [r3, #0]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	f022 0201 	bic.w	r2, r2, #1
 800c70a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	685a      	ldr	r2, [r3, #4]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800c718:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	689a      	ldr	r2, [r3, #8]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c728:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	68db      	ldr	r3, [r3, #12]
 800c72e:	2b01      	cmp	r3, #1
 800c730:	d107      	bne.n	800c742 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	689a      	ldr	r2, [r3, #8]
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c73e:	609a      	str	r2, [r3, #8]
 800c740:	e006      	b.n	800c750 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	689a      	ldr	r2, [r3, #8]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800c74e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	68db      	ldr	r3, [r3, #12]
 800c754:	2b02      	cmp	r3, #2
 800c756:	d108      	bne.n	800c76a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	685a      	ldr	r2, [r3, #4]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c766:	605a      	str	r2, [r3, #4]
 800c768:	e007      	b.n	800c77a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	685a      	ldr	r2, [r3, #4]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c778:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	687a      	ldr	r2, [r7, #4]
 800c782:	6812      	ldr	r2, [r2, #0]
 800c784:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c788:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c78c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	68da      	ldr	r2, [r3, #12]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c79c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	691a      	ldr	r2, [r3, #16]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	695b      	ldr	r3, [r3, #20]
 800c7a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	699b      	ldr	r3, [r3, #24]
 800c7ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	430a      	orrs	r2, r1
 800c7b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	69d9      	ldr	r1, [r3, #28]
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6a1a      	ldr	r2, [r3, #32]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	430a      	orrs	r2, r1
 800c7c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	681a      	ldr	r2, [r3, #0]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f042 0201 	orr.w	r2, r2, #1
 800c7d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2220      	movs	r2, #32
 800c7e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800c7f4:	2300      	movs	r3, #0
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3708      	adds	r7, #8
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}

0800c7fe <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800c7fe:	b580      	push	{r7, lr}
 800c800:	b082      	sub	sp, #8
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d101      	bne.n	800c810 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800c80c:	2301      	movs	r3, #1
 800c80e:	e021      	b.n	800c854 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2224      	movs	r2, #36	@ 0x24
 800c814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	681a      	ldr	r2, [r3, #0]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f022 0201 	bic.w	r2, r2, #1
 800c826:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f000 f821 	bl	800c870 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2200      	movs	r2, #0
 800c832:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2200      	movs	r2, #0
 800c838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2200      	movs	r2, #0
 800c840:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2200      	movs	r2, #0
 800c846:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2200      	movs	r2, #0
 800c84e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c852:	2300      	movs	r3, #0
}
 800c854:	4618      	mov	r0, r3
 800c856:	3708      	adds	r7, #8
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b083      	sub	sp, #12
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800c864:	bf00      	nop
 800c866:	370c      	adds	r7, #12
 800c868:	46bd      	mov	sp, r7
 800c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86e:	4770      	bx	lr

0800c870 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800c870:	b480      	push	{r7}
 800c872:	b083      	sub	sp, #12
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800c878:	bf00      	nop
 800c87a:	370c      	adds	r7, #12
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr

0800c884 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b088      	sub	sp, #32
 800c888:	af02      	add	r7, sp, #8
 800c88a:	60f8      	str	r0, [r7, #12]
 800c88c:	607a      	str	r2, [r7, #4]
 800c88e:	461a      	mov	r2, r3
 800c890:	460b      	mov	r3, r1
 800c892:	817b      	strh	r3, [r7, #10]
 800c894:	4613      	mov	r3, r2
 800c896:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	2b20      	cmp	r3, #32
 800c8a2:	f040 80fd 	bne.w	800caa0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	d101      	bne.n	800c8b4 <HAL_I2C_Master_Transmit+0x30>
 800c8b0:	2302      	movs	r3, #2
 800c8b2:	e0f6      	b.n	800caa2 <HAL_I2C_Master_Transmit+0x21e>
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c8bc:	f7fe ffee 	bl	800b89c <HAL_GetTick>
 800c8c0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	9300      	str	r3, [sp, #0]
 800c8c6:	2319      	movs	r3, #25
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800c8ce:	68f8      	ldr	r0, [r7, #12]
 800c8d0:	f000 fcfa 	bl	800d2c8 <I2C_WaitOnFlagUntilTimeout>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d001      	beq.n	800c8de <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800c8da:	2301      	movs	r3, #1
 800c8dc:	e0e1      	b.n	800caa2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	2221      	movs	r2, #33	@ 0x21
 800c8e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	2210      	movs	r2, #16
 800c8ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	687a      	ldr	r2, [r7, #4]
 800c8f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	893a      	ldrh	r2, [r7, #8]
 800c8fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	2200      	movs	r2, #0
 800c904:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c90a:	b29b      	uxth	r3, r3
 800c90c:	2bff      	cmp	r3, #255	@ 0xff
 800c90e:	d906      	bls.n	800c91e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	22ff      	movs	r2, #255	@ 0xff
 800c914:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800c916:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800c91a:	617b      	str	r3, [r7, #20]
 800c91c:	e007      	b.n	800c92e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c922:	b29a      	uxth	r2, r3
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800c928:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c92c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c932:	2b00      	cmp	r3, #0
 800c934:	d024      	beq.n	800c980 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c93a:	781a      	ldrb	r2, [r3, #0]
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c946:	1c5a      	adds	r2, r3, #1
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c950:	b29b      	uxth	r3, r3
 800c952:	3b01      	subs	r3, #1
 800c954:	b29a      	uxth	r2, r3
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c95e:	3b01      	subs	r3, #1
 800c960:	b29a      	uxth	r2, r3
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	3301      	adds	r3, #1
 800c96e:	b2da      	uxtb	r2, r3
 800c970:	8979      	ldrh	r1, [r7, #10]
 800c972:	4b4e      	ldr	r3, [pc, #312]	@ (800caac <HAL_I2C_Master_Transmit+0x228>)
 800c974:	9300      	str	r3, [sp, #0]
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	68f8      	ldr	r0, [r7, #12]
 800c97a:	f000 fef5 	bl	800d768 <I2C_TransferConfig>
 800c97e:	e066      	b.n	800ca4e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c984:	b2da      	uxtb	r2, r3
 800c986:	8979      	ldrh	r1, [r7, #10]
 800c988:	4b48      	ldr	r3, [pc, #288]	@ (800caac <HAL_I2C_Master_Transmit+0x228>)
 800c98a:	9300      	str	r3, [sp, #0]
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	68f8      	ldr	r0, [r7, #12]
 800c990:	f000 feea 	bl	800d768 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800c994:	e05b      	b.n	800ca4e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c996:	693a      	ldr	r2, [r7, #16]
 800c998:	6a39      	ldr	r1, [r7, #32]
 800c99a:	68f8      	ldr	r0, [r7, #12]
 800c99c:	f000 fced 	bl	800d37a <I2C_WaitOnTXISFlagUntilTimeout>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d001      	beq.n	800c9aa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	e07b      	b.n	800caa2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9ae:	781a      	ldrb	r2, [r3, #0]
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9ba:	1c5a      	adds	r2, r3, #1
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c9c4:	b29b      	uxth	r3, r3
 800c9c6:	3b01      	subs	r3, #1
 800c9c8:	b29a      	uxth	r2, r3
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c9d2:	3b01      	subs	r3, #1
 800c9d4:	b29a      	uxth	r2, r3
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c9de:	b29b      	uxth	r3, r3
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d034      	beq.n	800ca4e <HAL_I2C_Master_Transmit+0x1ca>
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d130      	bne.n	800ca4e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	9300      	str	r3, [sp, #0]
 800c9f0:	6a3b      	ldr	r3, [r7, #32]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	2180      	movs	r1, #128	@ 0x80
 800c9f6:	68f8      	ldr	r0, [r7, #12]
 800c9f8:	f000 fc66 	bl	800d2c8 <I2C_WaitOnFlagUntilTimeout>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d001      	beq.n	800ca06 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800ca02:	2301      	movs	r3, #1
 800ca04:	e04d      	b.n	800caa2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ca0a:	b29b      	uxth	r3, r3
 800ca0c:	2bff      	cmp	r3, #255	@ 0xff
 800ca0e:	d90e      	bls.n	800ca2e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	22ff      	movs	r2, #255	@ 0xff
 800ca14:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ca1a:	b2da      	uxtb	r2, r3
 800ca1c:	8979      	ldrh	r1, [r7, #10]
 800ca1e:	2300      	movs	r3, #0
 800ca20:	9300      	str	r3, [sp, #0]
 800ca22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ca26:	68f8      	ldr	r0, [r7, #12]
 800ca28:	f000 fe9e 	bl	800d768 <I2C_TransferConfig>
 800ca2c:	e00f      	b.n	800ca4e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ca32:	b29a      	uxth	r2, r3
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ca3c:	b2da      	uxtb	r2, r3
 800ca3e:	8979      	ldrh	r1, [r7, #10]
 800ca40:	2300      	movs	r3, #0
 800ca42:	9300      	str	r3, [sp, #0]
 800ca44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ca48:	68f8      	ldr	r0, [r7, #12]
 800ca4a:	f000 fe8d 	bl	800d768 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ca52:	b29b      	uxth	r3, r3
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d19e      	bne.n	800c996 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ca58:	693a      	ldr	r2, [r7, #16]
 800ca5a:	6a39      	ldr	r1, [r7, #32]
 800ca5c:	68f8      	ldr	r0, [r7, #12]
 800ca5e:	f000 fcd3 	bl	800d408 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ca62:	4603      	mov	r3, r0
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d001      	beq.n	800ca6c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	e01a      	b.n	800caa2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	2220      	movs	r2, #32
 800ca72:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	6859      	ldr	r1, [r3, #4]
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681a      	ldr	r2, [r3, #0]
 800ca7e:	4b0c      	ldr	r3, [pc, #48]	@ (800cab0 <HAL_I2C_Master_Transmit+0x22c>)
 800ca80:	400b      	ands	r3, r1
 800ca82:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2220      	movs	r2, #32
 800ca88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2200      	movs	r2, #0
 800ca98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	e000      	b.n	800caa2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800caa0:	2302      	movs	r3, #2
  }
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3718      	adds	r7, #24
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	80002000 	.word	0x80002000
 800cab0:	fe00e800 	.word	0xfe00e800

0800cab4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b088      	sub	sp, #32
 800cab8:	af02      	add	r7, sp, #8
 800caba:	60f8      	str	r0, [r7, #12]
 800cabc:	607a      	str	r2, [r7, #4]
 800cabe:	461a      	mov	r2, r3
 800cac0:	460b      	mov	r3, r1
 800cac2:	817b      	strh	r3, [r7, #10]
 800cac4:	4613      	mov	r3, r2
 800cac6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cace:	b2db      	uxtb	r3, r3
 800cad0:	2b20      	cmp	r3, #32
 800cad2:	f040 80db 	bne.w	800cc8c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cadc:	2b01      	cmp	r3, #1
 800cade:	d101      	bne.n	800cae4 <HAL_I2C_Master_Receive+0x30>
 800cae0:	2302      	movs	r3, #2
 800cae2:	e0d4      	b.n	800cc8e <HAL_I2C_Master_Receive+0x1da>
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2201      	movs	r2, #1
 800cae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800caec:	f7fe fed6 	bl	800b89c <HAL_GetTick>
 800caf0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	9300      	str	r3, [sp, #0]
 800caf6:	2319      	movs	r3, #25
 800caf8:	2201      	movs	r2, #1
 800cafa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800cafe:	68f8      	ldr	r0, [r7, #12]
 800cb00:	f000 fbe2 	bl	800d2c8 <I2C_WaitOnFlagUntilTimeout>
 800cb04:	4603      	mov	r3, r0
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d001      	beq.n	800cb0e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	e0bf      	b.n	800cc8e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	2222      	movs	r2, #34	@ 0x22
 800cb12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2210      	movs	r2, #16
 800cb1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2200      	movs	r2, #0
 800cb22:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	687a      	ldr	r2, [r7, #4]
 800cb28:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	893a      	ldrh	r2, [r7, #8]
 800cb2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	2200      	movs	r2, #0
 800cb34:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cb3a:	b29b      	uxth	r3, r3
 800cb3c:	2bff      	cmp	r3, #255	@ 0xff
 800cb3e:	d90e      	bls.n	800cb5e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	2201      	movs	r2, #1
 800cb44:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cb4a:	b2da      	uxtb	r2, r3
 800cb4c:	8979      	ldrh	r1, [r7, #10]
 800cb4e:	4b52      	ldr	r3, [pc, #328]	@ (800cc98 <HAL_I2C_Master_Receive+0x1e4>)
 800cb50:	9300      	str	r3, [sp, #0]
 800cb52:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800cb56:	68f8      	ldr	r0, [r7, #12]
 800cb58:	f000 fe06 	bl	800d768 <I2C_TransferConfig>
 800cb5c:	e06d      	b.n	800cc3a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cb62:	b29a      	uxth	r2, r3
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cb6c:	b2da      	uxtb	r2, r3
 800cb6e:	8979      	ldrh	r1, [r7, #10]
 800cb70:	4b49      	ldr	r3, [pc, #292]	@ (800cc98 <HAL_I2C_Master_Receive+0x1e4>)
 800cb72:	9300      	str	r3, [sp, #0]
 800cb74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800cb78:	68f8      	ldr	r0, [r7, #12]
 800cb7a:	f000 fdf5 	bl	800d768 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800cb7e:	e05c      	b.n	800cc3a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cb80:	697a      	ldr	r2, [r7, #20]
 800cb82:	6a39      	ldr	r1, [r7, #32]
 800cb84:	68f8      	ldr	r0, [r7, #12]
 800cb86:	f000 fc83 	bl	800d490 <I2C_WaitOnRXNEFlagUntilTimeout>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d001      	beq.n	800cb94 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800cb90:	2301      	movs	r3, #1
 800cb92:	e07c      	b.n	800cc8e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb9e:	b2d2      	uxtb	r2, r2
 800cba0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cba6:	1c5a      	adds	r2, r3, #1
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cbb0:	3b01      	subs	r3, #1
 800cbb2:	b29a      	uxth	r2, r3
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cbbc:	b29b      	uxth	r3, r3
 800cbbe:	3b01      	subs	r3, #1
 800cbc0:	b29a      	uxth	r2, r3
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cbca:	b29b      	uxth	r3, r3
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d034      	beq.n	800cc3a <HAL_I2C_Master_Receive+0x186>
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d130      	bne.n	800cc3a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	9300      	str	r3, [sp, #0]
 800cbdc:	6a3b      	ldr	r3, [r7, #32]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	2180      	movs	r1, #128	@ 0x80
 800cbe2:	68f8      	ldr	r0, [r7, #12]
 800cbe4:	f000 fb70 	bl	800d2c8 <I2C_WaitOnFlagUntilTimeout>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d001      	beq.n	800cbf2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	e04d      	b.n	800cc8e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cbf6:	b29b      	uxth	r3, r3
 800cbf8:	2bff      	cmp	r3, #255	@ 0xff
 800cbfa:	d90e      	bls.n	800cc1a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	22ff      	movs	r2, #255	@ 0xff
 800cc00:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cc06:	b2da      	uxtb	r2, r3
 800cc08:	8979      	ldrh	r1, [r7, #10]
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	9300      	str	r3, [sp, #0]
 800cc0e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800cc12:	68f8      	ldr	r0, [r7, #12]
 800cc14:	f000 fda8 	bl	800d768 <I2C_TransferConfig>
 800cc18:	e00f      	b.n	800cc3a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cc1e:	b29a      	uxth	r2, r3
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cc28:	b2da      	uxtb	r2, r3
 800cc2a:	8979      	ldrh	r1, [r7, #10]
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	9300      	str	r3, [sp, #0]
 800cc30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800cc34:	68f8      	ldr	r0, [r7, #12]
 800cc36:	f000 fd97 	bl	800d768 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cc3e:	b29b      	uxth	r3, r3
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d19d      	bne.n	800cb80 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cc44:	697a      	ldr	r2, [r7, #20]
 800cc46:	6a39      	ldr	r1, [r7, #32]
 800cc48:	68f8      	ldr	r0, [r7, #12]
 800cc4a:	f000 fbdd 	bl	800d408 <I2C_WaitOnSTOPFlagUntilTimeout>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d001      	beq.n	800cc58 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800cc54:	2301      	movs	r3, #1
 800cc56:	e01a      	b.n	800cc8e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	2220      	movs	r2, #32
 800cc5e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	6859      	ldr	r1, [r3, #4]
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681a      	ldr	r2, [r3, #0]
 800cc6a:	4b0c      	ldr	r3, [pc, #48]	@ (800cc9c <HAL_I2C_Master_Receive+0x1e8>)
 800cc6c:	400b      	ands	r3, r1
 800cc6e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	2220      	movs	r2, #32
 800cc74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	2200      	movs	r2, #0
 800cc84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	e000      	b.n	800cc8e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800cc8c:	2302      	movs	r3, #2
  }
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3718      	adds	r7, #24
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}
 800cc96:	bf00      	nop
 800cc98:	80002400 	.word	0x80002400
 800cc9c:	fe00e800 	.word	0xfe00e800

0800cca0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b088      	sub	sp, #32
 800cca4:	af02      	add	r7, sp, #8
 800cca6:	60f8      	str	r0, [r7, #12]
 800cca8:	4608      	mov	r0, r1
 800ccaa:	4611      	mov	r1, r2
 800ccac:	461a      	mov	r2, r3
 800ccae:	4603      	mov	r3, r0
 800ccb0:	817b      	strh	r3, [r7, #10]
 800ccb2:	460b      	mov	r3, r1
 800ccb4:	813b      	strh	r3, [r7, #8]
 800ccb6:	4613      	mov	r3, r2
 800ccb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ccc0:	b2db      	uxtb	r3, r3
 800ccc2:	2b20      	cmp	r3, #32
 800ccc4:	f040 80f9 	bne.w	800ceba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ccc8:	6a3b      	ldr	r3, [r7, #32]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d002      	beq.n	800ccd4 <HAL_I2C_Mem_Write+0x34>
 800ccce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d105      	bne.n	800cce0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ccda:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ccdc:	2301      	movs	r3, #1
 800ccde:	e0ed      	b.n	800cebc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cce6:	2b01      	cmp	r3, #1
 800cce8:	d101      	bne.n	800ccee <HAL_I2C_Mem_Write+0x4e>
 800ccea:	2302      	movs	r3, #2
 800ccec:	e0e6      	b.n	800cebc <HAL_I2C_Mem_Write+0x21c>
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	2201      	movs	r2, #1
 800ccf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ccf6:	f7fe fdd1 	bl	800b89c <HAL_GetTick>
 800ccfa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	9300      	str	r3, [sp, #0]
 800cd00:	2319      	movs	r3, #25
 800cd02:	2201      	movs	r2, #1
 800cd04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800cd08:	68f8      	ldr	r0, [r7, #12]
 800cd0a:	f000 fadd 	bl	800d2c8 <I2C_WaitOnFlagUntilTimeout>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d001      	beq.n	800cd18 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800cd14:	2301      	movs	r3, #1
 800cd16:	e0d1      	b.n	800cebc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2221      	movs	r2, #33	@ 0x21
 800cd1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	2240      	movs	r2, #64	@ 0x40
 800cd24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	6a3a      	ldr	r2, [r7, #32]
 800cd32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800cd38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cd40:	88f8      	ldrh	r0, [r7, #6]
 800cd42:	893a      	ldrh	r2, [r7, #8]
 800cd44:	8979      	ldrh	r1, [r7, #10]
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	9301      	str	r3, [sp, #4]
 800cd4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd4c:	9300      	str	r3, [sp, #0]
 800cd4e:	4603      	mov	r3, r0
 800cd50:	68f8      	ldr	r0, [r7, #12]
 800cd52:	f000 f9ed 	bl	800d130 <I2C_RequestMemoryWrite>
 800cd56:	4603      	mov	r3, r0
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d005      	beq.n	800cd68 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800cd64:	2301      	movs	r3, #1
 800cd66:	e0a9      	b.n	800cebc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cd6c:	b29b      	uxth	r3, r3
 800cd6e:	2bff      	cmp	r3, #255	@ 0xff
 800cd70:	d90e      	bls.n	800cd90 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	22ff      	movs	r2, #255	@ 0xff
 800cd76:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cd7c:	b2da      	uxtb	r2, r3
 800cd7e:	8979      	ldrh	r1, [r7, #10]
 800cd80:	2300      	movs	r3, #0
 800cd82:	9300      	str	r3, [sp, #0]
 800cd84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800cd88:	68f8      	ldr	r0, [r7, #12]
 800cd8a:	f000 fced 	bl	800d768 <I2C_TransferConfig>
 800cd8e:	e00f      	b.n	800cdb0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cd94:	b29a      	uxth	r2, r3
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cd9e:	b2da      	uxtb	r2, r3
 800cda0:	8979      	ldrh	r1, [r7, #10]
 800cda2:	2300      	movs	r3, #0
 800cda4:	9300      	str	r3, [sp, #0]
 800cda6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800cdaa:	68f8      	ldr	r0, [r7, #12]
 800cdac:	f000 fcdc 	bl	800d768 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cdb0:	697a      	ldr	r2, [r7, #20]
 800cdb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cdb4:	68f8      	ldr	r0, [r7, #12]
 800cdb6:	f000 fae0 	bl	800d37a <I2C_WaitOnTXISFlagUntilTimeout>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d001      	beq.n	800cdc4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	e07b      	b.n	800cebc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdc8:	781a      	ldrb	r2, [r3, #0]
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdd4:	1c5a      	adds	r2, r3, #1
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cdde:	b29b      	uxth	r3, r3
 800cde0:	3b01      	subs	r3, #1
 800cde2:	b29a      	uxth	r2, r3
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cdec:	3b01      	subs	r3, #1
 800cdee:	b29a      	uxth	r2, r3
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cdf8:	b29b      	uxth	r3, r3
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d034      	beq.n	800ce68 <HAL_I2C_Mem_Write+0x1c8>
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d130      	bne.n	800ce68 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	9300      	str	r3, [sp, #0]
 800ce0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	2180      	movs	r1, #128	@ 0x80
 800ce10:	68f8      	ldr	r0, [r7, #12]
 800ce12:	f000 fa59 	bl	800d2c8 <I2C_WaitOnFlagUntilTimeout>
 800ce16:	4603      	mov	r3, r0
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d001      	beq.n	800ce20 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	e04d      	b.n	800cebc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce24:	b29b      	uxth	r3, r3
 800ce26:	2bff      	cmp	r3, #255	@ 0xff
 800ce28:	d90e      	bls.n	800ce48 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	22ff      	movs	r2, #255	@ 0xff
 800ce2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce34:	b2da      	uxtb	r2, r3
 800ce36:	8979      	ldrh	r1, [r7, #10]
 800ce38:	2300      	movs	r3, #0
 800ce3a:	9300      	str	r3, [sp, #0]
 800ce3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ce40:	68f8      	ldr	r0, [r7, #12]
 800ce42:	f000 fc91 	bl	800d768 <I2C_TransferConfig>
 800ce46:	e00f      	b.n	800ce68 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce4c:	b29a      	uxth	r2, r3
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce56:	b2da      	uxtb	r2, r3
 800ce58:	8979      	ldrh	r1, [r7, #10]
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	9300      	str	r3, [sp, #0]
 800ce5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ce62:	68f8      	ldr	r0, [r7, #12]
 800ce64:	f000 fc80 	bl	800d768 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ce6c:	b29b      	uxth	r3, r3
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d19e      	bne.n	800cdb0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ce72:	697a      	ldr	r2, [r7, #20]
 800ce74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ce76:	68f8      	ldr	r0, [r7, #12]
 800ce78:	f000 fac6 	bl	800d408 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d001      	beq.n	800ce86 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800ce82:	2301      	movs	r3, #1
 800ce84:	e01a      	b.n	800cebc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	2220      	movs	r2, #32
 800ce8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	6859      	ldr	r1, [r3, #4]
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	681a      	ldr	r2, [r3, #0]
 800ce98:	4b0a      	ldr	r3, [pc, #40]	@ (800cec4 <HAL_I2C_Mem_Write+0x224>)
 800ce9a:	400b      	ands	r3, r1
 800ce9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	2220      	movs	r2, #32
 800cea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	e000      	b.n	800cebc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800ceba:	2302      	movs	r3, #2
  }
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3718      	adds	r7, #24
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	fe00e800 	.word	0xfe00e800

0800cec8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b088      	sub	sp, #32
 800cecc:	af02      	add	r7, sp, #8
 800cece:	60f8      	str	r0, [r7, #12]
 800ced0:	4608      	mov	r0, r1
 800ced2:	4611      	mov	r1, r2
 800ced4:	461a      	mov	r2, r3
 800ced6:	4603      	mov	r3, r0
 800ced8:	817b      	strh	r3, [r7, #10]
 800ceda:	460b      	mov	r3, r1
 800cedc:	813b      	strh	r3, [r7, #8]
 800cede:	4613      	mov	r3, r2
 800cee0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cee8:	b2db      	uxtb	r3, r3
 800ceea:	2b20      	cmp	r3, #32
 800ceec:	f040 80fd 	bne.w	800d0ea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800cef0:	6a3b      	ldr	r3, [r7, #32]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d002      	beq.n	800cefc <HAL_I2C_Mem_Read+0x34>
 800cef6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d105      	bne.n	800cf08 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf02:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800cf04:	2301      	movs	r3, #1
 800cf06:	e0f1      	b.n	800d0ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d101      	bne.n	800cf16 <HAL_I2C_Mem_Read+0x4e>
 800cf12:	2302      	movs	r3, #2
 800cf14:	e0ea      	b.n	800d0ec <HAL_I2C_Mem_Read+0x224>
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	2201      	movs	r2, #1
 800cf1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800cf1e:	f7fe fcbd 	bl	800b89c <HAL_GetTick>
 800cf22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	9300      	str	r3, [sp, #0]
 800cf28:	2319      	movs	r3, #25
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800cf30:	68f8      	ldr	r0, [r7, #12]
 800cf32:	f000 f9c9 	bl	800d2c8 <I2C_WaitOnFlagUntilTimeout>
 800cf36:	4603      	mov	r3, r0
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d001      	beq.n	800cf40 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	e0d5      	b.n	800d0ec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	2222      	movs	r2, #34	@ 0x22
 800cf44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	2240      	movs	r2, #64	@ 0x40
 800cf4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	2200      	movs	r2, #0
 800cf54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	6a3a      	ldr	r2, [r7, #32]
 800cf5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800cf60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	2200      	movs	r2, #0
 800cf66:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cf68:	88f8      	ldrh	r0, [r7, #6]
 800cf6a:	893a      	ldrh	r2, [r7, #8]
 800cf6c:	8979      	ldrh	r1, [r7, #10]
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	9301      	str	r3, [sp, #4]
 800cf72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf74:	9300      	str	r3, [sp, #0]
 800cf76:	4603      	mov	r3, r0
 800cf78:	68f8      	ldr	r0, [r7, #12]
 800cf7a:	f000 f92d 	bl	800d1d8 <I2C_RequestMemoryRead>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d005      	beq.n	800cf90 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	2200      	movs	r2, #0
 800cf88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	e0ad      	b.n	800d0ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cf94:	b29b      	uxth	r3, r3
 800cf96:	2bff      	cmp	r3, #255	@ 0xff
 800cf98:	d90e      	bls.n	800cfb8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	2201      	movs	r2, #1
 800cf9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cfa4:	b2da      	uxtb	r2, r3
 800cfa6:	8979      	ldrh	r1, [r7, #10]
 800cfa8:	4b52      	ldr	r3, [pc, #328]	@ (800d0f4 <HAL_I2C_Mem_Read+0x22c>)
 800cfaa:	9300      	str	r3, [sp, #0]
 800cfac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800cfb0:	68f8      	ldr	r0, [r7, #12]
 800cfb2:	f000 fbd9 	bl	800d768 <I2C_TransferConfig>
 800cfb6:	e00f      	b.n	800cfd8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cfbc:	b29a      	uxth	r2, r3
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cfc6:	b2da      	uxtb	r2, r3
 800cfc8:	8979      	ldrh	r1, [r7, #10]
 800cfca:	4b4a      	ldr	r3, [pc, #296]	@ (800d0f4 <HAL_I2C_Mem_Read+0x22c>)
 800cfcc:	9300      	str	r3, [sp, #0]
 800cfce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800cfd2:	68f8      	ldr	r0, [r7, #12]
 800cfd4:	f000 fbc8 	bl	800d768 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	9300      	str	r3, [sp, #0]
 800cfdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfde:	2200      	movs	r2, #0
 800cfe0:	2104      	movs	r1, #4
 800cfe2:	68f8      	ldr	r0, [r7, #12]
 800cfe4:	f000 f970 	bl	800d2c8 <I2C_WaitOnFlagUntilTimeout>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d001      	beq.n	800cff2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800cfee:	2301      	movs	r3, #1
 800cff0:	e07c      	b.n	800d0ec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cffc:	b2d2      	uxtb	r2, r2
 800cffe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d004:	1c5a      	adds	r2, r3, #1
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d00e:	3b01      	subs	r3, #1
 800d010:	b29a      	uxth	r2, r3
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d01a:	b29b      	uxth	r3, r3
 800d01c:	3b01      	subs	r3, #1
 800d01e:	b29a      	uxth	r2, r3
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d028:	b29b      	uxth	r3, r3
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d034      	beq.n	800d098 <HAL_I2C_Mem_Read+0x1d0>
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d032:	2b00      	cmp	r3, #0
 800d034:	d130      	bne.n	800d098 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	9300      	str	r3, [sp, #0]
 800d03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d03c:	2200      	movs	r2, #0
 800d03e:	2180      	movs	r1, #128	@ 0x80
 800d040:	68f8      	ldr	r0, [r7, #12]
 800d042:	f000 f941 	bl	800d2c8 <I2C_WaitOnFlagUntilTimeout>
 800d046:	4603      	mov	r3, r0
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d001      	beq.n	800d050 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800d04c:	2301      	movs	r3, #1
 800d04e:	e04d      	b.n	800d0ec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d054:	b29b      	uxth	r3, r3
 800d056:	2bff      	cmp	r3, #255	@ 0xff
 800d058:	d90e      	bls.n	800d078 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2201      	movs	r2, #1
 800d05e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d064:	b2da      	uxtb	r2, r3
 800d066:	8979      	ldrh	r1, [r7, #10]
 800d068:	2300      	movs	r3, #0
 800d06a:	9300      	str	r3, [sp, #0]
 800d06c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d070:	68f8      	ldr	r0, [r7, #12]
 800d072:	f000 fb79 	bl	800d768 <I2C_TransferConfig>
 800d076:	e00f      	b.n	800d098 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d07c:	b29a      	uxth	r2, r3
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d086:	b2da      	uxtb	r2, r3
 800d088:	8979      	ldrh	r1, [r7, #10]
 800d08a:	2300      	movs	r3, #0
 800d08c:	9300      	str	r3, [sp, #0]
 800d08e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d092:	68f8      	ldr	r0, [r7, #12]
 800d094:	f000 fb68 	bl	800d768 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d09c:	b29b      	uxth	r3, r3
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d19a      	bne.n	800cfd8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d0a2:	697a      	ldr	r2, [r7, #20]
 800d0a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d0a6:	68f8      	ldr	r0, [r7, #12]
 800d0a8:	f000 f9ae 	bl	800d408 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d001      	beq.n	800d0b6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	e01a      	b.n	800d0ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	2220      	movs	r2, #32
 800d0bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	6859      	ldr	r1, [r3, #4]
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681a      	ldr	r2, [r3, #0]
 800d0c8:	4b0b      	ldr	r3, [pc, #44]	@ (800d0f8 <HAL_I2C_Mem_Read+0x230>)
 800d0ca:	400b      	ands	r3, r1
 800d0cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	2220      	movs	r2, #32
 800d0d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	e000      	b.n	800d0ec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800d0ea:	2302      	movs	r3, #2
  }
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	3718      	adds	r7, #24
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}
 800d0f4:	80002400 	.word	0x80002400
 800d0f8:	fe00e800 	.word	0xfe00e800

0800d0fc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b083      	sub	sp, #12
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d10a:	b2db      	uxtb	r3, r3
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	370c      	adds	r7, #12
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr

0800d118 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800d118:	b480      	push	{r7}
 800d11a:	b083      	sub	sp, #12
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 800d124:	4618      	mov	r0, r3
 800d126:	370c      	adds	r7, #12
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr

0800d130 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b086      	sub	sp, #24
 800d134:	af02      	add	r7, sp, #8
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	4608      	mov	r0, r1
 800d13a:	4611      	mov	r1, r2
 800d13c:	461a      	mov	r2, r3
 800d13e:	4603      	mov	r3, r0
 800d140:	817b      	strh	r3, [r7, #10]
 800d142:	460b      	mov	r3, r1
 800d144:	813b      	strh	r3, [r7, #8]
 800d146:	4613      	mov	r3, r2
 800d148:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d14a:	88fb      	ldrh	r3, [r7, #6]
 800d14c:	b2da      	uxtb	r2, r3
 800d14e:	8979      	ldrh	r1, [r7, #10]
 800d150:	4b20      	ldr	r3, [pc, #128]	@ (800d1d4 <I2C_RequestMemoryWrite+0xa4>)
 800d152:	9300      	str	r3, [sp, #0]
 800d154:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d158:	68f8      	ldr	r0, [r7, #12]
 800d15a:	f000 fb05 	bl	800d768 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d15e:	69fa      	ldr	r2, [r7, #28]
 800d160:	69b9      	ldr	r1, [r7, #24]
 800d162:	68f8      	ldr	r0, [r7, #12]
 800d164:	f000 f909 	bl	800d37a <I2C_WaitOnTXISFlagUntilTimeout>
 800d168:	4603      	mov	r3, r0
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d001      	beq.n	800d172 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800d16e:	2301      	movs	r3, #1
 800d170:	e02c      	b.n	800d1cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d172:	88fb      	ldrh	r3, [r7, #6]
 800d174:	2b01      	cmp	r3, #1
 800d176:	d105      	bne.n	800d184 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d178:	893b      	ldrh	r3, [r7, #8]
 800d17a:	b2da      	uxtb	r2, r3
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	629a      	str	r2, [r3, #40]	@ 0x28
 800d182:	e015      	b.n	800d1b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d184:	893b      	ldrh	r3, [r7, #8]
 800d186:	0a1b      	lsrs	r3, r3, #8
 800d188:	b29b      	uxth	r3, r3
 800d18a:	b2da      	uxtb	r2, r3
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d192:	69fa      	ldr	r2, [r7, #28]
 800d194:	69b9      	ldr	r1, [r7, #24]
 800d196:	68f8      	ldr	r0, [r7, #12]
 800d198:	f000 f8ef 	bl	800d37a <I2C_WaitOnTXISFlagUntilTimeout>
 800d19c:	4603      	mov	r3, r0
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d001      	beq.n	800d1a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	e012      	b.n	800d1cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d1a6:	893b      	ldrh	r3, [r7, #8]
 800d1a8:	b2da      	uxtb	r2, r3
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800d1b0:	69fb      	ldr	r3, [r7, #28]
 800d1b2:	9300      	str	r3, [sp, #0]
 800d1b4:	69bb      	ldr	r3, [r7, #24]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	2180      	movs	r1, #128	@ 0x80
 800d1ba:	68f8      	ldr	r0, [r7, #12]
 800d1bc:	f000 f884 	bl	800d2c8 <I2C_WaitOnFlagUntilTimeout>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d001      	beq.n	800d1ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	e000      	b.n	800d1cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800d1ca:	2300      	movs	r3, #0
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	3710      	adds	r7, #16
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}
 800d1d4:	80002000 	.word	0x80002000

0800d1d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b086      	sub	sp, #24
 800d1dc:	af02      	add	r7, sp, #8
 800d1de:	60f8      	str	r0, [r7, #12]
 800d1e0:	4608      	mov	r0, r1
 800d1e2:	4611      	mov	r1, r2
 800d1e4:	461a      	mov	r2, r3
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	817b      	strh	r3, [r7, #10]
 800d1ea:	460b      	mov	r3, r1
 800d1ec:	813b      	strh	r3, [r7, #8]
 800d1ee:	4613      	mov	r3, r2
 800d1f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d1f2:	88fb      	ldrh	r3, [r7, #6]
 800d1f4:	b2da      	uxtb	r2, r3
 800d1f6:	8979      	ldrh	r1, [r7, #10]
 800d1f8:	4b20      	ldr	r3, [pc, #128]	@ (800d27c <I2C_RequestMemoryRead+0xa4>)
 800d1fa:	9300      	str	r3, [sp, #0]
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	68f8      	ldr	r0, [r7, #12]
 800d200:	f000 fab2 	bl	800d768 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d204:	69fa      	ldr	r2, [r7, #28]
 800d206:	69b9      	ldr	r1, [r7, #24]
 800d208:	68f8      	ldr	r0, [r7, #12]
 800d20a:	f000 f8b6 	bl	800d37a <I2C_WaitOnTXISFlagUntilTimeout>
 800d20e:	4603      	mov	r3, r0
 800d210:	2b00      	cmp	r3, #0
 800d212:	d001      	beq.n	800d218 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800d214:	2301      	movs	r3, #1
 800d216:	e02c      	b.n	800d272 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d218:	88fb      	ldrh	r3, [r7, #6]
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	d105      	bne.n	800d22a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d21e:	893b      	ldrh	r3, [r7, #8]
 800d220:	b2da      	uxtb	r2, r3
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	629a      	str	r2, [r3, #40]	@ 0x28
 800d228:	e015      	b.n	800d256 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d22a:	893b      	ldrh	r3, [r7, #8]
 800d22c:	0a1b      	lsrs	r3, r3, #8
 800d22e:	b29b      	uxth	r3, r3
 800d230:	b2da      	uxtb	r2, r3
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d238:	69fa      	ldr	r2, [r7, #28]
 800d23a:	69b9      	ldr	r1, [r7, #24]
 800d23c:	68f8      	ldr	r0, [r7, #12]
 800d23e:	f000 f89c 	bl	800d37a <I2C_WaitOnTXISFlagUntilTimeout>
 800d242:	4603      	mov	r3, r0
 800d244:	2b00      	cmp	r3, #0
 800d246:	d001      	beq.n	800d24c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800d248:	2301      	movs	r3, #1
 800d24a:	e012      	b.n	800d272 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d24c:	893b      	ldrh	r3, [r7, #8]
 800d24e:	b2da      	uxtb	r2, r3
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800d256:	69fb      	ldr	r3, [r7, #28]
 800d258:	9300      	str	r3, [sp, #0]
 800d25a:	69bb      	ldr	r3, [r7, #24]
 800d25c:	2200      	movs	r2, #0
 800d25e:	2140      	movs	r1, #64	@ 0x40
 800d260:	68f8      	ldr	r0, [r7, #12]
 800d262:	f000 f831 	bl	800d2c8 <I2C_WaitOnFlagUntilTimeout>
 800d266:	4603      	mov	r3, r0
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d001      	beq.n	800d270 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800d26c:	2301      	movs	r3, #1
 800d26e:	e000      	b.n	800d272 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800d270:	2300      	movs	r3, #0
}
 800d272:	4618      	mov	r0, r3
 800d274:	3710      	adds	r7, #16
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
 800d27a:	bf00      	nop
 800d27c:	80002000 	.word	0x80002000

0800d280 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d280:	b480      	push	{r7}
 800d282:	b083      	sub	sp, #12
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	699b      	ldr	r3, [r3, #24]
 800d28e:	f003 0302 	and.w	r3, r3, #2
 800d292:	2b02      	cmp	r3, #2
 800d294:	d103      	bne.n	800d29e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	2200      	movs	r2, #0
 800d29c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	699b      	ldr	r3, [r3, #24]
 800d2a4:	f003 0301 	and.w	r3, r3, #1
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d007      	beq.n	800d2bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	699a      	ldr	r2, [r3, #24]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f042 0201 	orr.w	r2, r2, #1
 800d2ba:	619a      	str	r2, [r3, #24]
  }
}
 800d2bc:	bf00      	nop
 800d2be:	370c      	adds	r7, #12
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c6:	4770      	bx	lr

0800d2c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b084      	sub	sp, #16
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	60f8      	str	r0, [r7, #12]
 800d2d0:	60b9      	str	r1, [r7, #8]
 800d2d2:	603b      	str	r3, [r7, #0]
 800d2d4:	4613      	mov	r3, r2
 800d2d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d2d8:	e03b      	b.n	800d352 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d2da:	69ba      	ldr	r2, [r7, #24]
 800d2dc:	6839      	ldr	r1, [r7, #0]
 800d2de:	68f8      	ldr	r0, [r7, #12]
 800d2e0:	f000 f962 	bl	800d5a8 <I2C_IsErrorOccurred>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d001      	beq.n	800d2ee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	e041      	b.n	800d372 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2f4:	d02d      	beq.n	800d352 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d2f6:	f7fe fad1 	bl	800b89c <HAL_GetTick>
 800d2fa:	4602      	mov	r2, r0
 800d2fc:	69bb      	ldr	r3, [r7, #24]
 800d2fe:	1ad3      	subs	r3, r2, r3
 800d300:	683a      	ldr	r2, [r7, #0]
 800d302:	429a      	cmp	r2, r3
 800d304:	d302      	bcc.n	800d30c <I2C_WaitOnFlagUntilTimeout+0x44>
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d122      	bne.n	800d352 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	699a      	ldr	r2, [r3, #24]
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	4013      	ands	r3, r2
 800d316:	68ba      	ldr	r2, [r7, #8]
 800d318:	429a      	cmp	r2, r3
 800d31a:	bf0c      	ite	eq
 800d31c:	2301      	moveq	r3, #1
 800d31e:	2300      	movne	r3, #0
 800d320:	b2db      	uxtb	r3, r3
 800d322:	461a      	mov	r2, r3
 800d324:	79fb      	ldrb	r3, [r7, #7]
 800d326:	429a      	cmp	r2, r3
 800d328:	d113      	bne.n	800d352 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d32e:	f043 0220 	orr.w	r2, r3, #32
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2220      	movs	r2, #32
 800d33a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	2200      	movs	r2, #0
 800d342:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	2200      	movs	r2, #0
 800d34a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800d34e:	2301      	movs	r3, #1
 800d350:	e00f      	b.n	800d372 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	699a      	ldr	r2, [r3, #24]
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	4013      	ands	r3, r2
 800d35c:	68ba      	ldr	r2, [r7, #8]
 800d35e:	429a      	cmp	r2, r3
 800d360:	bf0c      	ite	eq
 800d362:	2301      	moveq	r3, #1
 800d364:	2300      	movne	r3, #0
 800d366:	b2db      	uxtb	r3, r3
 800d368:	461a      	mov	r2, r3
 800d36a:	79fb      	ldrb	r3, [r7, #7]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d0b4      	beq.n	800d2da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d370:	2300      	movs	r3, #0
}
 800d372:	4618      	mov	r0, r3
 800d374:	3710      	adds	r7, #16
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}

0800d37a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d37a:	b580      	push	{r7, lr}
 800d37c:	b084      	sub	sp, #16
 800d37e:	af00      	add	r7, sp, #0
 800d380:	60f8      	str	r0, [r7, #12]
 800d382:	60b9      	str	r1, [r7, #8]
 800d384:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d386:	e033      	b.n	800d3f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d388:	687a      	ldr	r2, [r7, #4]
 800d38a:	68b9      	ldr	r1, [r7, #8]
 800d38c:	68f8      	ldr	r0, [r7, #12]
 800d38e:	f000 f90b 	bl	800d5a8 <I2C_IsErrorOccurred>
 800d392:	4603      	mov	r3, r0
 800d394:	2b00      	cmp	r3, #0
 800d396:	d001      	beq.n	800d39c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d398:	2301      	movs	r3, #1
 800d39a:	e031      	b.n	800d400 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3a2:	d025      	beq.n	800d3f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3a4:	f7fe fa7a 	bl	800b89c <HAL_GetTick>
 800d3a8:	4602      	mov	r2, r0
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	1ad3      	subs	r3, r2, r3
 800d3ae:	68ba      	ldr	r2, [r7, #8]
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	d302      	bcc.n	800d3ba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d11a      	bne.n	800d3f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	699b      	ldr	r3, [r3, #24]
 800d3c0:	f003 0302 	and.w	r3, r3, #2
 800d3c4:	2b02      	cmp	r3, #2
 800d3c6:	d013      	beq.n	800d3f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3cc:	f043 0220 	orr.w	r2, r3, #32
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2220      	movs	r2, #32
 800d3d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	e007      	b.n	800d400 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	699b      	ldr	r3, [r3, #24]
 800d3f6:	f003 0302 	and.w	r3, r3, #2
 800d3fa:	2b02      	cmp	r3, #2
 800d3fc:	d1c4      	bne.n	800d388 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800d3fe:	2300      	movs	r3, #0
}
 800d400:	4618      	mov	r0, r3
 800d402:	3710      	adds	r7, #16
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}

0800d408 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b084      	sub	sp, #16
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	60b9      	str	r1, [r7, #8]
 800d412:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d414:	e02f      	b.n	800d476 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	68b9      	ldr	r1, [r7, #8]
 800d41a:	68f8      	ldr	r0, [r7, #12]
 800d41c:	f000 f8c4 	bl	800d5a8 <I2C_IsErrorOccurred>
 800d420:	4603      	mov	r3, r0
 800d422:	2b00      	cmp	r3, #0
 800d424:	d001      	beq.n	800d42a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d426:	2301      	movs	r3, #1
 800d428:	e02d      	b.n	800d486 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d42a:	f7fe fa37 	bl	800b89c <HAL_GetTick>
 800d42e:	4602      	mov	r2, r0
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	1ad3      	subs	r3, r2, r3
 800d434:	68ba      	ldr	r2, [r7, #8]
 800d436:	429a      	cmp	r2, r3
 800d438:	d302      	bcc.n	800d440 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d11a      	bne.n	800d476 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	699b      	ldr	r3, [r3, #24]
 800d446:	f003 0320 	and.w	r3, r3, #32
 800d44a:	2b20      	cmp	r3, #32
 800d44c:	d013      	beq.n	800d476 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d452:	f043 0220 	orr.w	r2, r3, #32
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	2220      	movs	r2, #32
 800d45e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	2200      	movs	r2, #0
 800d466:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	2200      	movs	r2, #0
 800d46e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800d472:	2301      	movs	r3, #1
 800d474:	e007      	b.n	800d486 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	699b      	ldr	r3, [r3, #24]
 800d47c:	f003 0320 	and.w	r3, r3, #32
 800d480:	2b20      	cmp	r3, #32
 800d482:	d1c8      	bne.n	800d416 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d484:	2300      	movs	r3, #0
}
 800d486:	4618      	mov	r0, r3
 800d488:	3710      	adds	r7, #16
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}
	...

0800d490 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b086      	sub	sp, #24
 800d494:	af00      	add	r7, sp, #0
 800d496:	60f8      	str	r0, [r7, #12]
 800d498:	60b9      	str	r1, [r7, #8]
 800d49a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d49c:	2300      	movs	r3, #0
 800d49e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800d4a0:	e071      	b.n	800d586 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	68b9      	ldr	r1, [r7, #8]
 800d4a6:	68f8      	ldr	r0, [r7, #12]
 800d4a8:	f000 f87e 	bl	800d5a8 <I2C_IsErrorOccurred>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d001      	beq.n	800d4b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	699b      	ldr	r3, [r3, #24]
 800d4bc:	f003 0320 	and.w	r3, r3, #32
 800d4c0:	2b20      	cmp	r3, #32
 800d4c2:	d13b      	bne.n	800d53c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800d4c4:	7dfb      	ldrb	r3, [r7, #23]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d138      	bne.n	800d53c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	699b      	ldr	r3, [r3, #24]
 800d4d0:	f003 0304 	and.w	r3, r3, #4
 800d4d4:	2b04      	cmp	r3, #4
 800d4d6:	d105      	bne.n	800d4e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d001      	beq.n	800d4e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	699b      	ldr	r3, [r3, #24]
 800d4ea:	f003 0310 	and.w	r3, r3, #16
 800d4ee:	2b10      	cmp	r3, #16
 800d4f0:	d121      	bne.n	800d536 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	2210      	movs	r2, #16
 800d4f8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	2204      	movs	r2, #4
 800d4fe:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	2220      	movs	r2, #32
 800d506:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	6859      	ldr	r1, [r3, #4]
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681a      	ldr	r2, [r3, #0]
 800d512:	4b24      	ldr	r3, [pc, #144]	@ (800d5a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800d514:	400b      	ands	r3, r1
 800d516:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2220      	movs	r2, #32
 800d51c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	2200      	movs	r2, #0
 800d524:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	2200      	movs	r2, #0
 800d52c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800d530:	2301      	movs	r3, #1
 800d532:	75fb      	strb	r3, [r7, #23]
 800d534:	e002      	b.n	800d53c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	2200      	movs	r2, #0
 800d53a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800d53c:	f7fe f9ae 	bl	800b89c <HAL_GetTick>
 800d540:	4602      	mov	r2, r0
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	1ad3      	subs	r3, r2, r3
 800d546:	68ba      	ldr	r2, [r7, #8]
 800d548:	429a      	cmp	r2, r3
 800d54a:	d302      	bcc.n	800d552 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d119      	bne.n	800d586 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800d552:	7dfb      	ldrb	r3, [r7, #23]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d116      	bne.n	800d586 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	699b      	ldr	r3, [r3, #24]
 800d55e:	f003 0304 	and.w	r3, r3, #4
 800d562:	2b04      	cmp	r3, #4
 800d564:	d00f      	beq.n	800d586 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d56a:	f043 0220 	orr.w	r2, r3, #32
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	2220      	movs	r2, #32
 800d576:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	2200      	movs	r2, #0
 800d57e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800d582:	2301      	movs	r3, #1
 800d584:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	699b      	ldr	r3, [r3, #24]
 800d58c:	f003 0304 	and.w	r3, r3, #4
 800d590:	2b04      	cmp	r3, #4
 800d592:	d002      	beq.n	800d59a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800d594:	7dfb      	ldrb	r3, [r7, #23]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d083      	beq.n	800d4a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800d59a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3718      	adds	r7, #24
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}
 800d5a4:	fe00e800 	.word	0xfe00e800

0800d5a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b08a      	sub	sp, #40	@ 0x28
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	60f8      	str	r0, [r7, #12]
 800d5b0:	60b9      	str	r1, [r7, #8]
 800d5b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	699b      	ldr	r3, [r3, #24]
 800d5c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800d5ca:	69bb      	ldr	r3, [r7, #24]
 800d5cc:	f003 0310 	and.w	r3, r3, #16
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d068      	beq.n	800d6a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	2210      	movs	r2, #16
 800d5da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d5dc:	e049      	b.n	800d672 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5e4:	d045      	beq.n	800d672 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d5e6:	f7fe f959 	bl	800b89c <HAL_GetTick>
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	69fb      	ldr	r3, [r7, #28]
 800d5ee:	1ad3      	subs	r3, r2, r3
 800d5f0:	68ba      	ldr	r2, [r7, #8]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d302      	bcc.n	800d5fc <I2C_IsErrorOccurred+0x54>
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d13a      	bne.n	800d672 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	685b      	ldr	r3, [r3, #4]
 800d602:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d606:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d60e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	699b      	ldr	r3, [r3, #24]
 800d616:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d61a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d61e:	d121      	bne.n	800d664 <I2C_IsErrorOccurred+0xbc>
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d626:	d01d      	beq.n	800d664 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800d628:	7cfb      	ldrb	r3, [r7, #19]
 800d62a:	2b20      	cmp	r3, #32
 800d62c:	d01a      	beq.n	800d664 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	685a      	ldr	r2, [r3, #4]
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d63c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800d63e:	f7fe f92d 	bl	800b89c <HAL_GetTick>
 800d642:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d644:	e00e      	b.n	800d664 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800d646:	f7fe f929 	bl	800b89c <HAL_GetTick>
 800d64a:	4602      	mov	r2, r0
 800d64c:	69fb      	ldr	r3, [r7, #28]
 800d64e:	1ad3      	subs	r3, r2, r3
 800d650:	2b19      	cmp	r3, #25
 800d652:	d907      	bls.n	800d664 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800d654:	6a3b      	ldr	r3, [r7, #32]
 800d656:	f043 0320 	orr.w	r3, r3, #32
 800d65a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800d65c:	2301      	movs	r3, #1
 800d65e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800d662:	e006      	b.n	800d672 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	699b      	ldr	r3, [r3, #24]
 800d66a:	f003 0320 	and.w	r3, r3, #32
 800d66e:	2b20      	cmp	r3, #32
 800d670:	d1e9      	bne.n	800d646 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	699b      	ldr	r3, [r3, #24]
 800d678:	f003 0320 	and.w	r3, r3, #32
 800d67c:	2b20      	cmp	r3, #32
 800d67e:	d003      	beq.n	800d688 <I2C_IsErrorOccurred+0xe0>
 800d680:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d684:	2b00      	cmp	r3, #0
 800d686:	d0aa      	beq.n	800d5de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800d688:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d103      	bne.n	800d698 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	2220      	movs	r2, #32
 800d696:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800d698:	6a3b      	ldr	r3, [r7, #32]
 800d69a:	f043 0304 	orr.w	r3, r3, #4
 800d69e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	699b      	ldr	r3, [r3, #24]
 800d6ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800d6ae:	69bb      	ldr	r3, [r7, #24]
 800d6b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d00b      	beq.n	800d6d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800d6b8:	6a3b      	ldr	r3, [r7, #32]
 800d6ba:	f043 0301 	orr.w	r3, r3, #1
 800d6be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d6c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800d6d0:	69bb      	ldr	r3, [r7, #24]
 800d6d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d00b      	beq.n	800d6f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800d6da:	6a3b      	ldr	r3, [r7, #32]
 800d6dc:	f043 0308 	orr.w	r3, r3, #8
 800d6e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d6ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d6f2:	69bb      	ldr	r3, [r7, #24]
 800d6f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d00b      	beq.n	800d714 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800d6fc:	6a3b      	ldr	r3, [r7, #32]
 800d6fe:	f043 0302 	orr.w	r3, r3, #2
 800d702:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d70c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d70e:	2301      	movs	r3, #1
 800d710:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800d714:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d01c      	beq.n	800d756 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d71c:	68f8      	ldr	r0, [r7, #12]
 800d71e:	f7ff fdaf 	bl	800d280 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	6859      	ldr	r1, [r3, #4]
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	4b0d      	ldr	r3, [pc, #52]	@ (800d764 <I2C_IsErrorOccurred+0x1bc>)
 800d72e:	400b      	ands	r3, r1
 800d730:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d736:	6a3b      	ldr	r3, [r7, #32]
 800d738:	431a      	orrs	r2, r3
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	2220      	movs	r2, #32
 800d742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	2200      	movs	r2, #0
 800d74a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2200      	movs	r2, #0
 800d752:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800d756:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3728      	adds	r7, #40	@ 0x28
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
 800d762:	bf00      	nop
 800d764:	fe00e800 	.word	0xfe00e800

0800d768 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d768:	b480      	push	{r7}
 800d76a:	b087      	sub	sp, #28
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	60f8      	str	r0, [r7, #12]
 800d770:	607b      	str	r3, [r7, #4]
 800d772:	460b      	mov	r3, r1
 800d774:	817b      	strh	r3, [r7, #10]
 800d776:	4613      	mov	r3, r2
 800d778:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d77a:	897b      	ldrh	r3, [r7, #10]
 800d77c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d780:	7a7b      	ldrb	r3, [r7, #9]
 800d782:	041b      	lsls	r3, r3, #16
 800d784:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d788:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d78e:	6a3b      	ldr	r3, [r7, #32]
 800d790:	4313      	orrs	r3, r2
 800d792:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d796:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	685a      	ldr	r2, [r3, #4]
 800d79e:	6a3b      	ldr	r3, [r7, #32]
 800d7a0:	0d5b      	lsrs	r3, r3, #21
 800d7a2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800d7a6:	4b08      	ldr	r3, [pc, #32]	@ (800d7c8 <I2C_TransferConfig+0x60>)
 800d7a8:	430b      	orrs	r3, r1
 800d7aa:	43db      	mvns	r3, r3
 800d7ac:	ea02 0103 	and.w	r1, r2, r3
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	697a      	ldr	r2, [r7, #20]
 800d7b6:	430a      	orrs	r2, r1
 800d7b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d7ba:	bf00      	nop
 800d7bc:	371c      	adds	r7, #28
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c4:	4770      	bx	lr
 800d7c6:	bf00      	nop
 800d7c8:	03ff63ff 	.word	0x03ff63ff

0800d7cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b083      	sub	sp, #12
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d7dc:	b2db      	uxtb	r3, r3
 800d7de:	2b20      	cmp	r3, #32
 800d7e0:	d138      	bne.n	800d854 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d7e8:	2b01      	cmp	r3, #1
 800d7ea:	d101      	bne.n	800d7f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d7ec:	2302      	movs	r3, #2
 800d7ee:	e032      	b.n	800d856 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2224      	movs	r2, #36	@ 0x24
 800d7fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	681a      	ldr	r2, [r3, #0]
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	f022 0201 	bic.w	r2, r2, #1
 800d80e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	681a      	ldr	r2, [r3, #0]
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d81e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	6819      	ldr	r1, [r3, #0]
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	683a      	ldr	r2, [r7, #0]
 800d82c:	430a      	orrs	r2, r1
 800d82e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	681a      	ldr	r2, [r3, #0]
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	f042 0201 	orr.w	r2, r2, #1
 800d83e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2220      	movs	r2, #32
 800d844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2200      	movs	r2, #0
 800d84c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800d850:	2300      	movs	r3, #0
 800d852:	e000      	b.n	800d856 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d854:	2302      	movs	r3, #2
  }
}
 800d856:	4618      	mov	r0, r3
 800d858:	370c      	adds	r7, #12
 800d85a:	46bd      	mov	sp, r7
 800d85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d860:	4770      	bx	lr

0800d862 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d862:	b480      	push	{r7}
 800d864:	b085      	sub	sp, #20
 800d866:	af00      	add	r7, sp, #0
 800d868:	6078      	str	r0, [r7, #4]
 800d86a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d872:	b2db      	uxtb	r3, r3
 800d874:	2b20      	cmp	r3, #32
 800d876:	d139      	bne.n	800d8ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d87e:	2b01      	cmp	r3, #1
 800d880:	d101      	bne.n	800d886 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d882:	2302      	movs	r3, #2
 800d884:	e033      	b.n	800d8ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2201      	movs	r2, #1
 800d88a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2224      	movs	r2, #36	@ 0x24
 800d892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f022 0201 	bic.w	r2, r2, #1
 800d8a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800d8b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	021b      	lsls	r3, r3, #8
 800d8ba:	68fa      	ldr	r2, [r7, #12]
 800d8bc:	4313      	orrs	r3, r2
 800d8be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	68fa      	ldr	r2, [r7, #12]
 800d8c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	681a      	ldr	r2, [r3, #0]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f042 0201 	orr.w	r2, r2, #1
 800d8d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2220      	movs	r2, #32
 800d8dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	e000      	b.n	800d8ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d8ec:	2302      	movs	r3, #2
  }
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3714      	adds	r7, #20
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f8:	4770      	bx	lr
	...

0800d8fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800d900:	4b04      	ldr	r3, [pc, #16]	@ (800d914 <HAL_PWREx_GetVoltageRange+0x18>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800d908:	4618      	mov	r0, r3
 800d90a:	46bd      	mov	sp, r7
 800d90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d910:	4770      	bx	lr
 800d912:	bf00      	nop
 800d914:	40007000 	.word	0x40007000

0800d918 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800d918:	b480      	push	{r7}
 800d91a:	b085      	sub	sp, #20
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d926:	d130      	bne.n	800d98a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800d928:	4b23      	ldr	r3, [pc, #140]	@ (800d9b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d934:	d038      	beq.n	800d9a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d936:	4b20      	ldr	r3, [pc, #128]	@ (800d9b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d93e:	4a1e      	ldr	r2, [pc, #120]	@ (800d9b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800d940:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d944:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d946:	4b1d      	ldr	r3, [pc, #116]	@ (800d9bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	2232      	movs	r2, #50	@ 0x32
 800d94c:	fb02 f303 	mul.w	r3, r2, r3
 800d950:	4a1b      	ldr	r2, [pc, #108]	@ (800d9c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800d952:	fba2 2303 	umull	r2, r3, r2, r3
 800d956:	0c9b      	lsrs	r3, r3, #18
 800d958:	3301      	adds	r3, #1
 800d95a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d95c:	e002      	b.n	800d964 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	3b01      	subs	r3, #1
 800d962:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d964:	4b14      	ldr	r3, [pc, #80]	@ (800d9b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800d966:	695b      	ldr	r3, [r3, #20]
 800d968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d96c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d970:	d102      	bne.n	800d978 <HAL_PWREx_ControlVoltageScaling+0x60>
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d1f2      	bne.n	800d95e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d978:	4b0f      	ldr	r3, [pc, #60]	@ (800d9b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800d97a:	695b      	ldr	r3, [r3, #20]
 800d97c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d980:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d984:	d110      	bne.n	800d9a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800d986:	2303      	movs	r3, #3
 800d988:	e00f      	b.n	800d9aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800d98a:	4b0b      	ldr	r3, [pc, #44]	@ (800d9b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d992:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d996:	d007      	beq.n	800d9a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800d998:	4b07      	ldr	r3, [pc, #28]	@ (800d9b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d9a0:	4a05      	ldr	r2, [pc, #20]	@ (800d9b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800d9a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d9a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800d9a8:	2300      	movs	r3, #0
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3714      	adds	r7, #20
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b4:	4770      	bx	lr
 800d9b6:	bf00      	nop
 800d9b8:	40007000 	.word	0x40007000
 800d9bc:	20000000 	.word	0x20000000
 800d9c0:	431bde83 	.word	0x431bde83

0800d9c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b088      	sub	sp, #32
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d101      	bne.n	800d9d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	e3ca      	b.n	800e16c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d9d6:	4b97      	ldr	r3, [pc, #604]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800d9d8:	689b      	ldr	r3, [r3, #8]
 800d9da:	f003 030c 	and.w	r3, r3, #12
 800d9de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d9e0:	4b94      	ldr	r3, [pc, #592]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800d9e2:	68db      	ldr	r3, [r3, #12]
 800d9e4:	f003 0303 	and.w	r3, r3, #3
 800d9e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	f003 0310 	and.w	r3, r3, #16
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	f000 80e4 	beq.w	800dbc0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800d9f8:	69bb      	ldr	r3, [r7, #24]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d007      	beq.n	800da0e <HAL_RCC_OscConfig+0x4a>
 800d9fe:	69bb      	ldr	r3, [r7, #24]
 800da00:	2b0c      	cmp	r3, #12
 800da02:	f040 808b 	bne.w	800db1c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	2b01      	cmp	r3, #1
 800da0a:	f040 8087 	bne.w	800db1c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800da0e:	4b89      	ldr	r3, [pc, #548]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	f003 0302 	and.w	r3, r3, #2
 800da16:	2b00      	cmp	r3, #0
 800da18:	d005      	beq.n	800da26 <HAL_RCC_OscConfig+0x62>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	699b      	ldr	r3, [r3, #24]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d101      	bne.n	800da26 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800da22:	2301      	movs	r3, #1
 800da24:	e3a2      	b.n	800e16c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6a1a      	ldr	r2, [r3, #32]
 800da2a:	4b82      	ldr	r3, [pc, #520]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	f003 0308 	and.w	r3, r3, #8
 800da32:	2b00      	cmp	r3, #0
 800da34:	d004      	beq.n	800da40 <HAL_RCC_OscConfig+0x7c>
 800da36:	4b7f      	ldr	r3, [pc, #508]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800da3e:	e005      	b.n	800da4c <HAL_RCC_OscConfig+0x88>
 800da40:	4b7c      	ldr	r3, [pc, #496]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800da42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800da46:	091b      	lsrs	r3, r3, #4
 800da48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800da4c:	4293      	cmp	r3, r2
 800da4e:	d223      	bcs.n	800da98 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	6a1b      	ldr	r3, [r3, #32]
 800da54:	4618      	mov	r0, r3
 800da56:	f000 fd55 	bl	800e504 <RCC_SetFlashLatencyFromMSIRange>
 800da5a:	4603      	mov	r3, r0
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d001      	beq.n	800da64 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800da60:	2301      	movs	r3, #1
 800da62:	e383      	b.n	800e16c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800da64:	4b73      	ldr	r3, [pc, #460]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	4a72      	ldr	r2, [pc, #456]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800da6a:	f043 0308 	orr.w	r3, r3, #8
 800da6e:	6013      	str	r3, [r2, #0]
 800da70:	4b70      	ldr	r3, [pc, #448]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6a1b      	ldr	r3, [r3, #32]
 800da7c:	496d      	ldr	r1, [pc, #436]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800da7e:	4313      	orrs	r3, r2
 800da80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800da82:	4b6c      	ldr	r3, [pc, #432]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800da84:	685b      	ldr	r3, [r3, #4]
 800da86:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	69db      	ldr	r3, [r3, #28]
 800da8e:	021b      	lsls	r3, r3, #8
 800da90:	4968      	ldr	r1, [pc, #416]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800da92:	4313      	orrs	r3, r2
 800da94:	604b      	str	r3, [r1, #4]
 800da96:	e025      	b.n	800dae4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800da98:	4b66      	ldr	r3, [pc, #408]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4a65      	ldr	r2, [pc, #404]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800da9e:	f043 0308 	orr.w	r3, r3, #8
 800daa2:	6013      	str	r3, [r2, #0]
 800daa4:	4b63      	ldr	r3, [pc, #396]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6a1b      	ldr	r3, [r3, #32]
 800dab0:	4960      	ldr	r1, [pc, #384]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800dab2:	4313      	orrs	r3, r2
 800dab4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800dab6:	4b5f      	ldr	r3, [pc, #380]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800dab8:	685b      	ldr	r3, [r3, #4]
 800daba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	69db      	ldr	r3, [r3, #28]
 800dac2:	021b      	lsls	r3, r3, #8
 800dac4:	495b      	ldr	r1, [pc, #364]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800dac6:	4313      	orrs	r3, r2
 800dac8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800daca:	69bb      	ldr	r3, [r7, #24]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d109      	bne.n	800dae4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6a1b      	ldr	r3, [r3, #32]
 800dad4:	4618      	mov	r0, r3
 800dad6:	f000 fd15 	bl	800e504 <RCC_SetFlashLatencyFromMSIRange>
 800dada:	4603      	mov	r3, r0
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d001      	beq.n	800dae4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800dae0:	2301      	movs	r3, #1
 800dae2:	e343      	b.n	800e16c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800dae4:	f000 fc4a 	bl	800e37c <HAL_RCC_GetSysClockFreq>
 800dae8:	4602      	mov	r2, r0
 800daea:	4b52      	ldr	r3, [pc, #328]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800daec:	689b      	ldr	r3, [r3, #8]
 800daee:	091b      	lsrs	r3, r3, #4
 800daf0:	f003 030f 	and.w	r3, r3, #15
 800daf4:	4950      	ldr	r1, [pc, #320]	@ (800dc38 <HAL_RCC_OscConfig+0x274>)
 800daf6:	5ccb      	ldrb	r3, [r1, r3]
 800daf8:	f003 031f 	and.w	r3, r3, #31
 800dafc:	fa22 f303 	lsr.w	r3, r2, r3
 800db00:	4a4e      	ldr	r2, [pc, #312]	@ (800dc3c <HAL_RCC_OscConfig+0x278>)
 800db02:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800db04:	4b4e      	ldr	r3, [pc, #312]	@ (800dc40 <HAL_RCC_OscConfig+0x27c>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	4618      	mov	r0, r3
 800db0a:	f7fd fe77 	bl	800b7fc <HAL_InitTick>
 800db0e:	4603      	mov	r3, r0
 800db10:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800db12:	7bfb      	ldrb	r3, [r7, #15]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d052      	beq.n	800dbbe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800db18:	7bfb      	ldrb	r3, [r7, #15]
 800db1a:	e327      	b.n	800e16c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	699b      	ldr	r3, [r3, #24]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d032      	beq.n	800db8a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800db24:	4b43      	ldr	r3, [pc, #268]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	4a42      	ldr	r2, [pc, #264]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800db2a:	f043 0301 	orr.w	r3, r3, #1
 800db2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800db30:	f7fd feb4 	bl	800b89c <HAL_GetTick>
 800db34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800db36:	e008      	b.n	800db4a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800db38:	f7fd feb0 	bl	800b89c <HAL_GetTick>
 800db3c:	4602      	mov	r2, r0
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	1ad3      	subs	r3, r2, r3
 800db42:	2b02      	cmp	r3, #2
 800db44:	d901      	bls.n	800db4a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800db46:	2303      	movs	r3, #3
 800db48:	e310      	b.n	800e16c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800db4a:	4b3a      	ldr	r3, [pc, #232]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	f003 0302 	and.w	r3, r3, #2
 800db52:	2b00      	cmp	r3, #0
 800db54:	d0f0      	beq.n	800db38 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800db56:	4b37      	ldr	r3, [pc, #220]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	4a36      	ldr	r2, [pc, #216]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800db5c:	f043 0308 	orr.w	r3, r3, #8
 800db60:	6013      	str	r3, [r2, #0]
 800db62:	4b34      	ldr	r3, [pc, #208]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6a1b      	ldr	r3, [r3, #32]
 800db6e:	4931      	ldr	r1, [pc, #196]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800db70:	4313      	orrs	r3, r2
 800db72:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800db74:	4b2f      	ldr	r3, [pc, #188]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800db76:	685b      	ldr	r3, [r3, #4]
 800db78:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	69db      	ldr	r3, [r3, #28]
 800db80:	021b      	lsls	r3, r3, #8
 800db82:	492c      	ldr	r1, [pc, #176]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800db84:	4313      	orrs	r3, r2
 800db86:	604b      	str	r3, [r1, #4]
 800db88:	e01a      	b.n	800dbc0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800db8a:	4b2a      	ldr	r3, [pc, #168]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	4a29      	ldr	r2, [pc, #164]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800db90:	f023 0301 	bic.w	r3, r3, #1
 800db94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800db96:	f7fd fe81 	bl	800b89c <HAL_GetTick>
 800db9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800db9c:	e008      	b.n	800dbb0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800db9e:	f7fd fe7d 	bl	800b89c <HAL_GetTick>
 800dba2:	4602      	mov	r2, r0
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	1ad3      	subs	r3, r2, r3
 800dba8:	2b02      	cmp	r3, #2
 800dbaa:	d901      	bls.n	800dbb0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800dbac:	2303      	movs	r3, #3
 800dbae:	e2dd      	b.n	800e16c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800dbb0:	4b20      	ldr	r3, [pc, #128]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f003 0302 	and.w	r3, r3, #2
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d1f0      	bne.n	800db9e <HAL_RCC_OscConfig+0x1da>
 800dbbc:	e000      	b.n	800dbc0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800dbbe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	f003 0301 	and.w	r3, r3, #1
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d074      	beq.n	800dcb6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800dbcc:	69bb      	ldr	r3, [r7, #24]
 800dbce:	2b08      	cmp	r3, #8
 800dbd0:	d005      	beq.n	800dbde <HAL_RCC_OscConfig+0x21a>
 800dbd2:	69bb      	ldr	r3, [r7, #24]
 800dbd4:	2b0c      	cmp	r3, #12
 800dbd6:	d10e      	bne.n	800dbf6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	2b03      	cmp	r3, #3
 800dbdc:	d10b      	bne.n	800dbf6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dbde:	4b15      	ldr	r3, [pc, #84]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d064      	beq.n	800dcb4 <HAL_RCC_OscConfig+0x2f0>
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	685b      	ldr	r3, [r3, #4]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d160      	bne.n	800dcb4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	e2ba      	b.n	800e16c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	685b      	ldr	r3, [r3, #4]
 800dbfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dbfe:	d106      	bne.n	800dc0e <HAL_RCC_OscConfig+0x24a>
 800dc00:	4b0c      	ldr	r3, [pc, #48]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	4a0b      	ldr	r2, [pc, #44]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800dc06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dc0a:	6013      	str	r3, [r2, #0]
 800dc0c:	e026      	b.n	800dc5c <HAL_RCC_OscConfig+0x298>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	685b      	ldr	r3, [r3, #4]
 800dc12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800dc16:	d115      	bne.n	800dc44 <HAL_RCC_OscConfig+0x280>
 800dc18:	4b06      	ldr	r3, [pc, #24]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	4a05      	ldr	r2, [pc, #20]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800dc1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800dc22:	6013      	str	r3, [r2, #0]
 800dc24:	4b03      	ldr	r3, [pc, #12]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	4a02      	ldr	r2, [pc, #8]	@ (800dc34 <HAL_RCC_OscConfig+0x270>)
 800dc2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dc2e:	6013      	str	r3, [r2, #0]
 800dc30:	e014      	b.n	800dc5c <HAL_RCC_OscConfig+0x298>
 800dc32:	bf00      	nop
 800dc34:	40021000 	.word	0x40021000
 800dc38:	08014708 	.word	0x08014708
 800dc3c:	20000000 	.word	0x20000000
 800dc40:	20000220 	.word	0x20000220
 800dc44:	4ba0      	ldr	r3, [pc, #640]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	4a9f      	ldr	r2, [pc, #636]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800dc4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dc4e:	6013      	str	r3, [r2, #0]
 800dc50:	4b9d      	ldr	r3, [pc, #628]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	4a9c      	ldr	r2, [pc, #624]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800dc56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800dc5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	685b      	ldr	r3, [r3, #4]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d013      	beq.n	800dc8c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc64:	f7fd fe1a 	bl	800b89c <HAL_GetTick>
 800dc68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800dc6a:	e008      	b.n	800dc7e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dc6c:	f7fd fe16 	bl	800b89c <HAL_GetTick>
 800dc70:	4602      	mov	r2, r0
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	1ad3      	subs	r3, r2, r3
 800dc76:	2b64      	cmp	r3, #100	@ 0x64
 800dc78:	d901      	bls.n	800dc7e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800dc7a:	2303      	movs	r3, #3
 800dc7c:	e276      	b.n	800e16c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800dc7e:	4b92      	ldr	r3, [pc, #584]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d0f0      	beq.n	800dc6c <HAL_RCC_OscConfig+0x2a8>
 800dc8a:	e014      	b.n	800dcb6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc8c:	f7fd fe06 	bl	800b89c <HAL_GetTick>
 800dc90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800dc92:	e008      	b.n	800dca6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dc94:	f7fd fe02 	bl	800b89c <HAL_GetTick>
 800dc98:	4602      	mov	r2, r0
 800dc9a:	693b      	ldr	r3, [r7, #16]
 800dc9c:	1ad3      	subs	r3, r2, r3
 800dc9e:	2b64      	cmp	r3, #100	@ 0x64
 800dca0:	d901      	bls.n	800dca6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800dca2:	2303      	movs	r3, #3
 800dca4:	e262      	b.n	800e16c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800dca6:	4b88      	ldr	r3, [pc, #544]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d1f0      	bne.n	800dc94 <HAL_RCC_OscConfig+0x2d0>
 800dcb2:	e000      	b.n	800dcb6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dcb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	f003 0302 	and.w	r3, r3, #2
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d060      	beq.n	800dd84 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800dcc2:	69bb      	ldr	r3, [r7, #24]
 800dcc4:	2b04      	cmp	r3, #4
 800dcc6:	d005      	beq.n	800dcd4 <HAL_RCC_OscConfig+0x310>
 800dcc8:	69bb      	ldr	r3, [r7, #24]
 800dcca:	2b0c      	cmp	r3, #12
 800dccc:	d119      	bne.n	800dd02 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	2b02      	cmp	r3, #2
 800dcd2:	d116      	bne.n	800dd02 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dcd4:	4b7c      	ldr	r3, [pc, #496]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d005      	beq.n	800dcec <HAL_RCC_OscConfig+0x328>
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	68db      	ldr	r3, [r3, #12]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d101      	bne.n	800dcec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800dce8:	2301      	movs	r3, #1
 800dcea:	e23f      	b.n	800e16c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dcec:	4b76      	ldr	r3, [pc, #472]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800dcee:	685b      	ldr	r3, [r3, #4]
 800dcf0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	691b      	ldr	r3, [r3, #16]
 800dcf8:	061b      	lsls	r3, r3, #24
 800dcfa:	4973      	ldr	r1, [pc, #460]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800dcfc:	4313      	orrs	r3, r2
 800dcfe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dd00:	e040      	b.n	800dd84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	68db      	ldr	r3, [r3, #12]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d023      	beq.n	800dd52 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800dd0a:	4b6f      	ldr	r3, [pc, #444]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	4a6e      	ldr	r2, [pc, #440]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800dd10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dd14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd16:	f7fd fdc1 	bl	800b89c <HAL_GetTick>
 800dd1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800dd1c:	e008      	b.n	800dd30 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dd1e:	f7fd fdbd 	bl	800b89c <HAL_GetTick>
 800dd22:	4602      	mov	r2, r0
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	1ad3      	subs	r3, r2, r3
 800dd28:	2b02      	cmp	r3, #2
 800dd2a:	d901      	bls.n	800dd30 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800dd2c:	2303      	movs	r3, #3
 800dd2e:	e21d      	b.n	800e16c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800dd30:	4b65      	ldr	r3, [pc, #404]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d0f0      	beq.n	800dd1e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dd3c:	4b62      	ldr	r3, [pc, #392]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800dd3e:	685b      	ldr	r3, [r3, #4]
 800dd40:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	691b      	ldr	r3, [r3, #16]
 800dd48:	061b      	lsls	r3, r3, #24
 800dd4a:	495f      	ldr	r1, [pc, #380]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800dd4c:	4313      	orrs	r3, r2
 800dd4e:	604b      	str	r3, [r1, #4]
 800dd50:	e018      	b.n	800dd84 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800dd52:	4b5d      	ldr	r3, [pc, #372]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	4a5c      	ldr	r2, [pc, #368]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800dd58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dd5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd5e:	f7fd fd9d 	bl	800b89c <HAL_GetTick>
 800dd62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800dd64:	e008      	b.n	800dd78 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dd66:	f7fd fd99 	bl	800b89c <HAL_GetTick>
 800dd6a:	4602      	mov	r2, r0
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	1ad3      	subs	r3, r2, r3
 800dd70:	2b02      	cmp	r3, #2
 800dd72:	d901      	bls.n	800dd78 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800dd74:	2303      	movs	r3, #3
 800dd76:	e1f9      	b.n	800e16c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800dd78:	4b53      	ldr	r3, [pc, #332]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d1f0      	bne.n	800dd66 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	f003 0308 	and.w	r3, r3, #8
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d03c      	beq.n	800de0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	695b      	ldr	r3, [r3, #20]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d01c      	beq.n	800ddd2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800dd98:	4b4b      	ldr	r3, [pc, #300]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800dd9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dd9e:	4a4a      	ldr	r2, [pc, #296]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800dda0:	f043 0301 	orr.w	r3, r3, #1
 800dda4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dda8:	f7fd fd78 	bl	800b89c <HAL_GetTick>
 800ddac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ddae:	e008      	b.n	800ddc2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ddb0:	f7fd fd74 	bl	800b89c <HAL_GetTick>
 800ddb4:	4602      	mov	r2, r0
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	1ad3      	subs	r3, r2, r3
 800ddba:	2b02      	cmp	r3, #2
 800ddbc:	d901      	bls.n	800ddc2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800ddbe:	2303      	movs	r3, #3
 800ddc0:	e1d4      	b.n	800e16c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ddc2:	4b41      	ldr	r3, [pc, #260]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800ddc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ddc8:	f003 0302 	and.w	r3, r3, #2
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d0ef      	beq.n	800ddb0 <HAL_RCC_OscConfig+0x3ec>
 800ddd0:	e01b      	b.n	800de0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ddd2:	4b3d      	ldr	r3, [pc, #244]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800ddd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ddd8:	4a3b      	ldr	r2, [pc, #236]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800ddda:	f023 0301 	bic.w	r3, r3, #1
 800ddde:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dde2:	f7fd fd5b 	bl	800b89c <HAL_GetTick>
 800dde6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800dde8:	e008      	b.n	800ddfc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ddea:	f7fd fd57 	bl	800b89c <HAL_GetTick>
 800ddee:	4602      	mov	r2, r0
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	1ad3      	subs	r3, r2, r3
 800ddf4:	2b02      	cmp	r3, #2
 800ddf6:	d901      	bls.n	800ddfc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800ddf8:	2303      	movs	r3, #3
 800ddfa:	e1b7      	b.n	800e16c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ddfc:	4b32      	ldr	r3, [pc, #200]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800ddfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800de02:	f003 0302 	and.w	r3, r3, #2
 800de06:	2b00      	cmp	r3, #0
 800de08:	d1ef      	bne.n	800ddea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	f003 0304 	and.w	r3, r3, #4
 800de12:	2b00      	cmp	r3, #0
 800de14:	f000 80a6 	beq.w	800df64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800de18:	2300      	movs	r3, #0
 800de1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800de1c:	4b2a      	ldr	r3, [pc, #168]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800de1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800de24:	2b00      	cmp	r3, #0
 800de26:	d10d      	bne.n	800de44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800de28:	4b27      	ldr	r3, [pc, #156]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800de2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de2c:	4a26      	ldr	r2, [pc, #152]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800de2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800de32:	6593      	str	r3, [r2, #88]	@ 0x58
 800de34:	4b24      	ldr	r3, [pc, #144]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800de36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800de3c:	60bb      	str	r3, [r7, #8]
 800de3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800de40:	2301      	movs	r3, #1
 800de42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800de44:	4b21      	ldr	r3, [pc, #132]	@ (800decc <HAL_RCC_OscConfig+0x508>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d118      	bne.n	800de82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800de50:	4b1e      	ldr	r3, [pc, #120]	@ (800decc <HAL_RCC_OscConfig+0x508>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	4a1d      	ldr	r2, [pc, #116]	@ (800decc <HAL_RCC_OscConfig+0x508>)
 800de56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800de5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800de5c:	f7fd fd1e 	bl	800b89c <HAL_GetTick>
 800de60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800de62:	e008      	b.n	800de76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800de64:	f7fd fd1a 	bl	800b89c <HAL_GetTick>
 800de68:	4602      	mov	r2, r0
 800de6a:	693b      	ldr	r3, [r7, #16]
 800de6c:	1ad3      	subs	r3, r2, r3
 800de6e:	2b02      	cmp	r3, #2
 800de70:	d901      	bls.n	800de76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800de72:	2303      	movs	r3, #3
 800de74:	e17a      	b.n	800e16c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800de76:	4b15      	ldr	r3, [pc, #84]	@ (800decc <HAL_RCC_OscConfig+0x508>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d0f0      	beq.n	800de64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	689b      	ldr	r3, [r3, #8]
 800de86:	2b01      	cmp	r3, #1
 800de88:	d108      	bne.n	800de9c <HAL_RCC_OscConfig+0x4d8>
 800de8a:	4b0f      	ldr	r3, [pc, #60]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800de8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800de90:	4a0d      	ldr	r2, [pc, #52]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800de92:	f043 0301 	orr.w	r3, r3, #1
 800de96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800de9a:	e029      	b.n	800def0 <HAL_RCC_OscConfig+0x52c>
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	689b      	ldr	r3, [r3, #8]
 800dea0:	2b05      	cmp	r3, #5
 800dea2:	d115      	bne.n	800ded0 <HAL_RCC_OscConfig+0x50c>
 800dea4:	4b08      	ldr	r3, [pc, #32]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800dea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800deaa:	4a07      	ldr	r2, [pc, #28]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800deac:	f043 0304 	orr.w	r3, r3, #4
 800deb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800deb4:	4b04      	ldr	r3, [pc, #16]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800deb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800deba:	4a03      	ldr	r2, [pc, #12]	@ (800dec8 <HAL_RCC_OscConfig+0x504>)
 800debc:	f043 0301 	orr.w	r3, r3, #1
 800dec0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800dec4:	e014      	b.n	800def0 <HAL_RCC_OscConfig+0x52c>
 800dec6:	bf00      	nop
 800dec8:	40021000 	.word	0x40021000
 800decc:	40007000 	.word	0x40007000
 800ded0:	4b9c      	ldr	r3, [pc, #624]	@ (800e144 <HAL_RCC_OscConfig+0x780>)
 800ded2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ded6:	4a9b      	ldr	r2, [pc, #620]	@ (800e144 <HAL_RCC_OscConfig+0x780>)
 800ded8:	f023 0301 	bic.w	r3, r3, #1
 800dedc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800dee0:	4b98      	ldr	r3, [pc, #608]	@ (800e144 <HAL_RCC_OscConfig+0x780>)
 800dee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dee6:	4a97      	ldr	r2, [pc, #604]	@ (800e144 <HAL_RCC_OscConfig+0x780>)
 800dee8:	f023 0304 	bic.w	r3, r3, #4
 800deec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	689b      	ldr	r3, [r3, #8]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d016      	beq.n	800df26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800def8:	f7fd fcd0 	bl	800b89c <HAL_GetTick>
 800defc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800defe:	e00a      	b.n	800df16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800df00:	f7fd fccc 	bl	800b89c <HAL_GetTick>
 800df04:	4602      	mov	r2, r0
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	1ad3      	subs	r3, r2, r3
 800df0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800df0e:	4293      	cmp	r3, r2
 800df10:	d901      	bls.n	800df16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800df12:	2303      	movs	r3, #3
 800df14:	e12a      	b.n	800e16c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800df16:	4b8b      	ldr	r3, [pc, #556]	@ (800e144 <HAL_RCC_OscConfig+0x780>)
 800df18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df1c:	f003 0302 	and.w	r3, r3, #2
 800df20:	2b00      	cmp	r3, #0
 800df22:	d0ed      	beq.n	800df00 <HAL_RCC_OscConfig+0x53c>
 800df24:	e015      	b.n	800df52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800df26:	f7fd fcb9 	bl	800b89c <HAL_GetTick>
 800df2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800df2c:	e00a      	b.n	800df44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800df2e:	f7fd fcb5 	bl	800b89c <HAL_GetTick>
 800df32:	4602      	mov	r2, r0
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	1ad3      	subs	r3, r2, r3
 800df38:	f241 3288 	movw	r2, #5000	@ 0x1388
 800df3c:	4293      	cmp	r3, r2
 800df3e:	d901      	bls.n	800df44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800df40:	2303      	movs	r3, #3
 800df42:	e113      	b.n	800e16c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800df44:	4b7f      	ldr	r3, [pc, #508]	@ (800e144 <HAL_RCC_OscConfig+0x780>)
 800df46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df4a:	f003 0302 	and.w	r3, r3, #2
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d1ed      	bne.n	800df2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800df52:	7ffb      	ldrb	r3, [r7, #31]
 800df54:	2b01      	cmp	r3, #1
 800df56:	d105      	bne.n	800df64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800df58:	4b7a      	ldr	r3, [pc, #488]	@ (800e144 <HAL_RCC_OscConfig+0x780>)
 800df5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df5c:	4a79      	ldr	r2, [pc, #484]	@ (800e144 <HAL_RCC_OscConfig+0x780>)
 800df5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800df62:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df68:	2b00      	cmp	r3, #0
 800df6a:	f000 80fe 	beq.w	800e16a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df72:	2b02      	cmp	r3, #2
 800df74:	f040 80d0 	bne.w	800e118 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800df78:	4b72      	ldr	r3, [pc, #456]	@ (800e144 <HAL_RCC_OscConfig+0x780>)
 800df7a:	68db      	ldr	r3, [r3, #12]
 800df7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	f003 0203 	and.w	r2, r3, #3
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df88:	429a      	cmp	r2, r3
 800df8a:	d130      	bne.n	800dfee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df96:	3b01      	subs	r3, #1
 800df98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d127      	bne.n	800dfee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dfa8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800dfaa:	429a      	cmp	r2, r3
 800dfac:	d11f      	bne.n	800dfee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dfb4:	687a      	ldr	r2, [r7, #4]
 800dfb6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800dfb8:	2a07      	cmp	r2, #7
 800dfba:	bf14      	ite	ne
 800dfbc:	2201      	movne	r2, #1
 800dfbe:	2200      	moveq	r2, #0
 800dfc0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d113      	bne.n	800dfee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800dfc6:	697b      	ldr	r3, [r7, #20]
 800dfc8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dfd0:	085b      	lsrs	r3, r3, #1
 800dfd2:	3b01      	subs	r3, #1
 800dfd4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800dfd6:	429a      	cmp	r2, r3
 800dfd8:	d109      	bne.n	800dfee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfe4:	085b      	lsrs	r3, r3, #1
 800dfe6:	3b01      	subs	r3, #1
 800dfe8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800dfea:	429a      	cmp	r2, r3
 800dfec:	d06e      	beq.n	800e0cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800dfee:	69bb      	ldr	r3, [r7, #24]
 800dff0:	2b0c      	cmp	r3, #12
 800dff2:	d069      	beq.n	800e0c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800dff4:	4b53      	ldr	r3, [pc, #332]	@ (800e144 <HAL_RCC_OscConfig+0x780>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d105      	bne.n	800e00c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800e000:	4b50      	ldr	r3, [pc, #320]	@ (800e144 <HAL_RCC_OscConfig+0x780>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d001      	beq.n	800e010 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800e00c:	2301      	movs	r3, #1
 800e00e:	e0ad      	b.n	800e16c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800e010:	4b4c      	ldr	r3, [pc, #304]	@ (800e144 <HAL_RCC_OscConfig+0x780>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	4a4b      	ldr	r2, [pc, #300]	@ (800e144 <HAL_RCC_OscConfig+0x780>)
 800e016:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e01a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800e01c:	f7fd fc3e 	bl	800b89c <HAL_GetTick>
 800e020:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e022:	e008      	b.n	800e036 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e024:	f7fd fc3a 	bl	800b89c <HAL_GetTick>
 800e028:	4602      	mov	r2, r0
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	1ad3      	subs	r3, r2, r3
 800e02e:	2b02      	cmp	r3, #2
 800e030:	d901      	bls.n	800e036 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800e032:	2303      	movs	r3, #3
 800e034:	e09a      	b.n	800e16c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e036:	4b43      	ldr	r3, [pc, #268]	@ (800e144 <HAL_RCC_OscConfig+0x780>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d1f0      	bne.n	800e024 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e042:	4b40      	ldr	r3, [pc, #256]	@ (800e144 <HAL_RCC_OscConfig+0x780>)
 800e044:	68da      	ldr	r2, [r3, #12]
 800e046:	4b40      	ldr	r3, [pc, #256]	@ (800e148 <HAL_RCC_OscConfig+0x784>)
 800e048:	4013      	ands	r3, r2
 800e04a:	687a      	ldr	r2, [r7, #4]
 800e04c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800e04e:	687a      	ldr	r2, [r7, #4]
 800e050:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e052:	3a01      	subs	r2, #1
 800e054:	0112      	lsls	r2, r2, #4
 800e056:	4311      	orrs	r1, r2
 800e058:	687a      	ldr	r2, [r7, #4]
 800e05a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800e05c:	0212      	lsls	r2, r2, #8
 800e05e:	4311      	orrs	r1, r2
 800e060:	687a      	ldr	r2, [r7, #4]
 800e062:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800e064:	0852      	lsrs	r2, r2, #1
 800e066:	3a01      	subs	r2, #1
 800e068:	0552      	lsls	r2, r2, #21
 800e06a:	4311      	orrs	r1, r2
 800e06c:	687a      	ldr	r2, [r7, #4]
 800e06e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800e070:	0852      	lsrs	r2, r2, #1
 800e072:	3a01      	subs	r2, #1
 800e074:	0652      	lsls	r2, r2, #25
 800e076:	4311      	orrs	r1, r2
 800e078:	687a      	ldr	r2, [r7, #4]
 800e07a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800e07c:	0912      	lsrs	r2, r2, #4
 800e07e:	0452      	lsls	r2, r2, #17
 800e080:	430a      	orrs	r2, r1
 800e082:	4930      	ldr	r1, [pc, #192]	@ (800e144 <HAL_RCC_OscConfig+0x780>)
 800e084:	4313      	orrs	r3, r2
 800e086:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800e088:	4b2e      	ldr	r3, [pc, #184]	@ (800e144 <HAL_RCC_OscConfig+0x780>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	4a2d      	ldr	r2, [pc, #180]	@ (800e144 <HAL_RCC_OscConfig+0x780>)
 800e08e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e092:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800e094:	4b2b      	ldr	r3, [pc, #172]	@ (800e144 <HAL_RCC_OscConfig+0x780>)
 800e096:	68db      	ldr	r3, [r3, #12]
 800e098:	4a2a      	ldr	r2, [pc, #168]	@ (800e144 <HAL_RCC_OscConfig+0x780>)
 800e09a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e09e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800e0a0:	f7fd fbfc 	bl	800b89c <HAL_GetTick>
 800e0a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e0a6:	e008      	b.n	800e0ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e0a8:	f7fd fbf8 	bl	800b89c <HAL_GetTick>
 800e0ac:	4602      	mov	r2, r0
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	1ad3      	subs	r3, r2, r3
 800e0b2:	2b02      	cmp	r3, #2
 800e0b4:	d901      	bls.n	800e0ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800e0b6:	2303      	movs	r3, #3
 800e0b8:	e058      	b.n	800e16c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e0ba:	4b22      	ldr	r3, [pc, #136]	@ (800e144 <HAL_RCC_OscConfig+0x780>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d0f0      	beq.n	800e0a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800e0c6:	e050      	b.n	800e16a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	e04f      	b.n	800e16c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e0cc:	4b1d      	ldr	r3, [pc, #116]	@ (800e144 <HAL_RCC_OscConfig+0x780>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d148      	bne.n	800e16a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800e0d8:	4b1a      	ldr	r3, [pc, #104]	@ (800e144 <HAL_RCC_OscConfig+0x780>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	4a19      	ldr	r2, [pc, #100]	@ (800e144 <HAL_RCC_OscConfig+0x780>)
 800e0de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e0e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800e0e4:	4b17      	ldr	r3, [pc, #92]	@ (800e144 <HAL_RCC_OscConfig+0x780>)
 800e0e6:	68db      	ldr	r3, [r3, #12]
 800e0e8:	4a16      	ldr	r2, [pc, #88]	@ (800e144 <HAL_RCC_OscConfig+0x780>)
 800e0ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e0ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e0f0:	f7fd fbd4 	bl	800b89c <HAL_GetTick>
 800e0f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e0f6:	e008      	b.n	800e10a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e0f8:	f7fd fbd0 	bl	800b89c <HAL_GetTick>
 800e0fc:	4602      	mov	r2, r0
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	1ad3      	subs	r3, r2, r3
 800e102:	2b02      	cmp	r3, #2
 800e104:	d901      	bls.n	800e10a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800e106:	2303      	movs	r3, #3
 800e108:	e030      	b.n	800e16c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e10a:	4b0e      	ldr	r3, [pc, #56]	@ (800e144 <HAL_RCC_OscConfig+0x780>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e112:	2b00      	cmp	r3, #0
 800e114:	d0f0      	beq.n	800e0f8 <HAL_RCC_OscConfig+0x734>
 800e116:	e028      	b.n	800e16a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800e118:	69bb      	ldr	r3, [r7, #24]
 800e11a:	2b0c      	cmp	r3, #12
 800e11c:	d023      	beq.n	800e166 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e11e:	4b09      	ldr	r3, [pc, #36]	@ (800e144 <HAL_RCC_OscConfig+0x780>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	4a08      	ldr	r2, [pc, #32]	@ (800e144 <HAL_RCC_OscConfig+0x780>)
 800e124:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e12a:	f7fd fbb7 	bl	800b89c <HAL_GetTick>
 800e12e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e130:	e00c      	b.n	800e14c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e132:	f7fd fbb3 	bl	800b89c <HAL_GetTick>
 800e136:	4602      	mov	r2, r0
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	1ad3      	subs	r3, r2, r3
 800e13c:	2b02      	cmp	r3, #2
 800e13e:	d905      	bls.n	800e14c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800e140:	2303      	movs	r3, #3
 800e142:	e013      	b.n	800e16c <HAL_RCC_OscConfig+0x7a8>
 800e144:	40021000 	.word	0x40021000
 800e148:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e14c:	4b09      	ldr	r3, [pc, #36]	@ (800e174 <HAL_RCC_OscConfig+0x7b0>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e154:	2b00      	cmp	r3, #0
 800e156:	d1ec      	bne.n	800e132 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800e158:	4b06      	ldr	r3, [pc, #24]	@ (800e174 <HAL_RCC_OscConfig+0x7b0>)
 800e15a:	68da      	ldr	r2, [r3, #12]
 800e15c:	4905      	ldr	r1, [pc, #20]	@ (800e174 <HAL_RCC_OscConfig+0x7b0>)
 800e15e:	4b06      	ldr	r3, [pc, #24]	@ (800e178 <HAL_RCC_OscConfig+0x7b4>)
 800e160:	4013      	ands	r3, r2
 800e162:	60cb      	str	r3, [r1, #12]
 800e164:	e001      	b.n	800e16a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800e166:	2301      	movs	r3, #1
 800e168:	e000      	b.n	800e16c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800e16a:	2300      	movs	r3, #0
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	3720      	adds	r7, #32
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}
 800e174:	40021000 	.word	0x40021000
 800e178:	feeefffc 	.word	0xfeeefffc

0800e17c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b084      	sub	sp, #16
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
 800e184:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d101      	bne.n	800e190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e18c:	2301      	movs	r3, #1
 800e18e:	e0e7      	b.n	800e360 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e190:	4b75      	ldr	r3, [pc, #468]	@ (800e368 <HAL_RCC_ClockConfig+0x1ec>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	f003 0307 	and.w	r3, r3, #7
 800e198:	683a      	ldr	r2, [r7, #0]
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d910      	bls.n	800e1c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e19e:	4b72      	ldr	r3, [pc, #456]	@ (800e368 <HAL_RCC_ClockConfig+0x1ec>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	f023 0207 	bic.w	r2, r3, #7
 800e1a6:	4970      	ldr	r1, [pc, #448]	@ (800e368 <HAL_RCC_ClockConfig+0x1ec>)
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	4313      	orrs	r3, r2
 800e1ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e1ae:	4b6e      	ldr	r3, [pc, #440]	@ (800e368 <HAL_RCC_ClockConfig+0x1ec>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	f003 0307 	and.w	r3, r3, #7
 800e1b6:	683a      	ldr	r2, [r7, #0]
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	d001      	beq.n	800e1c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800e1bc:	2301      	movs	r3, #1
 800e1be:	e0cf      	b.n	800e360 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	f003 0302 	and.w	r3, r3, #2
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d010      	beq.n	800e1ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	689a      	ldr	r2, [r3, #8]
 800e1d0:	4b66      	ldr	r3, [pc, #408]	@ (800e36c <HAL_RCC_ClockConfig+0x1f0>)
 800e1d2:	689b      	ldr	r3, [r3, #8]
 800e1d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d908      	bls.n	800e1ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e1dc:	4b63      	ldr	r3, [pc, #396]	@ (800e36c <HAL_RCC_ClockConfig+0x1f0>)
 800e1de:	689b      	ldr	r3, [r3, #8]
 800e1e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	689b      	ldr	r3, [r3, #8]
 800e1e8:	4960      	ldr	r1, [pc, #384]	@ (800e36c <HAL_RCC_ClockConfig+0x1f0>)
 800e1ea:	4313      	orrs	r3, r2
 800e1ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f003 0301 	and.w	r3, r3, #1
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d04c      	beq.n	800e294 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	685b      	ldr	r3, [r3, #4]
 800e1fe:	2b03      	cmp	r3, #3
 800e200:	d107      	bne.n	800e212 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e202:	4b5a      	ldr	r3, [pc, #360]	@ (800e36c <HAL_RCC_ClockConfig+0x1f0>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d121      	bne.n	800e252 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800e20e:	2301      	movs	r3, #1
 800e210:	e0a6      	b.n	800e360 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	685b      	ldr	r3, [r3, #4]
 800e216:	2b02      	cmp	r3, #2
 800e218:	d107      	bne.n	800e22a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800e21a:	4b54      	ldr	r3, [pc, #336]	@ (800e36c <HAL_RCC_ClockConfig+0x1f0>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e222:	2b00      	cmp	r3, #0
 800e224:	d115      	bne.n	800e252 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800e226:	2301      	movs	r3, #1
 800e228:	e09a      	b.n	800e360 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	685b      	ldr	r3, [r3, #4]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d107      	bne.n	800e242 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800e232:	4b4e      	ldr	r3, [pc, #312]	@ (800e36c <HAL_RCC_ClockConfig+0x1f0>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	f003 0302 	and.w	r3, r3, #2
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d109      	bne.n	800e252 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800e23e:	2301      	movs	r3, #1
 800e240:	e08e      	b.n	800e360 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e242:	4b4a      	ldr	r3, [pc, #296]	@ (800e36c <HAL_RCC_ClockConfig+0x1f0>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d101      	bne.n	800e252 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800e24e:	2301      	movs	r3, #1
 800e250:	e086      	b.n	800e360 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e252:	4b46      	ldr	r3, [pc, #280]	@ (800e36c <HAL_RCC_ClockConfig+0x1f0>)
 800e254:	689b      	ldr	r3, [r3, #8]
 800e256:	f023 0203 	bic.w	r2, r3, #3
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	4943      	ldr	r1, [pc, #268]	@ (800e36c <HAL_RCC_ClockConfig+0x1f0>)
 800e260:	4313      	orrs	r3, r2
 800e262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e264:	f7fd fb1a 	bl	800b89c <HAL_GetTick>
 800e268:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e26a:	e00a      	b.n	800e282 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e26c:	f7fd fb16 	bl	800b89c <HAL_GetTick>
 800e270:	4602      	mov	r2, r0
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	1ad3      	subs	r3, r2, r3
 800e276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e27a:	4293      	cmp	r3, r2
 800e27c:	d901      	bls.n	800e282 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800e27e:	2303      	movs	r3, #3
 800e280:	e06e      	b.n	800e360 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e282:	4b3a      	ldr	r3, [pc, #232]	@ (800e36c <HAL_RCC_ClockConfig+0x1f0>)
 800e284:	689b      	ldr	r3, [r3, #8]
 800e286:	f003 020c 	and.w	r2, r3, #12
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	009b      	lsls	r3, r3, #2
 800e290:	429a      	cmp	r2, r3
 800e292:	d1eb      	bne.n	800e26c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	f003 0302 	and.w	r3, r3, #2
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d010      	beq.n	800e2c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	689a      	ldr	r2, [r3, #8]
 800e2a4:	4b31      	ldr	r3, [pc, #196]	@ (800e36c <HAL_RCC_ClockConfig+0x1f0>)
 800e2a6:	689b      	ldr	r3, [r3, #8]
 800e2a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	d208      	bcs.n	800e2c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e2b0:	4b2e      	ldr	r3, [pc, #184]	@ (800e36c <HAL_RCC_ClockConfig+0x1f0>)
 800e2b2:	689b      	ldr	r3, [r3, #8]
 800e2b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	689b      	ldr	r3, [r3, #8]
 800e2bc:	492b      	ldr	r1, [pc, #172]	@ (800e36c <HAL_RCC_ClockConfig+0x1f0>)
 800e2be:	4313      	orrs	r3, r2
 800e2c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e2c2:	4b29      	ldr	r3, [pc, #164]	@ (800e368 <HAL_RCC_ClockConfig+0x1ec>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	f003 0307 	and.w	r3, r3, #7
 800e2ca:	683a      	ldr	r2, [r7, #0]
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d210      	bcs.n	800e2f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e2d0:	4b25      	ldr	r3, [pc, #148]	@ (800e368 <HAL_RCC_ClockConfig+0x1ec>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	f023 0207 	bic.w	r2, r3, #7
 800e2d8:	4923      	ldr	r1, [pc, #140]	@ (800e368 <HAL_RCC_ClockConfig+0x1ec>)
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	4313      	orrs	r3, r2
 800e2de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e2e0:	4b21      	ldr	r3, [pc, #132]	@ (800e368 <HAL_RCC_ClockConfig+0x1ec>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	f003 0307 	and.w	r3, r3, #7
 800e2e8:	683a      	ldr	r2, [r7, #0]
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d001      	beq.n	800e2f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	e036      	b.n	800e360 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	f003 0304 	and.w	r3, r3, #4
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d008      	beq.n	800e310 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e2fe:	4b1b      	ldr	r3, [pc, #108]	@ (800e36c <HAL_RCC_ClockConfig+0x1f0>)
 800e300:	689b      	ldr	r3, [r3, #8]
 800e302:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	68db      	ldr	r3, [r3, #12]
 800e30a:	4918      	ldr	r1, [pc, #96]	@ (800e36c <HAL_RCC_ClockConfig+0x1f0>)
 800e30c:	4313      	orrs	r3, r2
 800e30e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	f003 0308 	and.w	r3, r3, #8
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d009      	beq.n	800e330 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e31c:	4b13      	ldr	r3, [pc, #76]	@ (800e36c <HAL_RCC_ClockConfig+0x1f0>)
 800e31e:	689b      	ldr	r3, [r3, #8]
 800e320:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	691b      	ldr	r3, [r3, #16]
 800e328:	00db      	lsls	r3, r3, #3
 800e32a:	4910      	ldr	r1, [pc, #64]	@ (800e36c <HAL_RCC_ClockConfig+0x1f0>)
 800e32c:	4313      	orrs	r3, r2
 800e32e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800e330:	f000 f824 	bl	800e37c <HAL_RCC_GetSysClockFreq>
 800e334:	4602      	mov	r2, r0
 800e336:	4b0d      	ldr	r3, [pc, #52]	@ (800e36c <HAL_RCC_ClockConfig+0x1f0>)
 800e338:	689b      	ldr	r3, [r3, #8]
 800e33a:	091b      	lsrs	r3, r3, #4
 800e33c:	f003 030f 	and.w	r3, r3, #15
 800e340:	490b      	ldr	r1, [pc, #44]	@ (800e370 <HAL_RCC_ClockConfig+0x1f4>)
 800e342:	5ccb      	ldrb	r3, [r1, r3]
 800e344:	f003 031f 	and.w	r3, r3, #31
 800e348:	fa22 f303 	lsr.w	r3, r2, r3
 800e34c:	4a09      	ldr	r2, [pc, #36]	@ (800e374 <HAL_RCC_ClockConfig+0x1f8>)
 800e34e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800e350:	4b09      	ldr	r3, [pc, #36]	@ (800e378 <HAL_RCC_ClockConfig+0x1fc>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	4618      	mov	r0, r3
 800e356:	f7fd fa51 	bl	800b7fc <HAL_InitTick>
 800e35a:	4603      	mov	r3, r0
 800e35c:	72fb      	strb	r3, [r7, #11]

  return status;
 800e35e:	7afb      	ldrb	r3, [r7, #11]
}
 800e360:	4618      	mov	r0, r3
 800e362:	3710      	adds	r7, #16
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}
 800e368:	40022000 	.word	0x40022000
 800e36c:	40021000 	.word	0x40021000
 800e370:	08014708 	.word	0x08014708
 800e374:	20000000 	.word	0x20000000
 800e378:	20000220 	.word	0x20000220

0800e37c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e37c:	b480      	push	{r7}
 800e37e:	b089      	sub	sp, #36	@ 0x24
 800e380:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800e382:	2300      	movs	r3, #0
 800e384:	61fb      	str	r3, [r7, #28]
 800e386:	2300      	movs	r3, #0
 800e388:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e38a:	4b3e      	ldr	r3, [pc, #248]	@ (800e484 <HAL_RCC_GetSysClockFreq+0x108>)
 800e38c:	689b      	ldr	r3, [r3, #8]
 800e38e:	f003 030c 	and.w	r3, r3, #12
 800e392:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e394:	4b3b      	ldr	r3, [pc, #236]	@ (800e484 <HAL_RCC_GetSysClockFreq+0x108>)
 800e396:	68db      	ldr	r3, [r3, #12]
 800e398:	f003 0303 	and.w	r3, r3, #3
 800e39c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800e39e:	693b      	ldr	r3, [r7, #16]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d005      	beq.n	800e3b0 <HAL_RCC_GetSysClockFreq+0x34>
 800e3a4:	693b      	ldr	r3, [r7, #16]
 800e3a6:	2b0c      	cmp	r3, #12
 800e3a8:	d121      	bne.n	800e3ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	2b01      	cmp	r3, #1
 800e3ae:	d11e      	bne.n	800e3ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800e3b0:	4b34      	ldr	r3, [pc, #208]	@ (800e484 <HAL_RCC_GetSysClockFreq+0x108>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	f003 0308 	and.w	r3, r3, #8
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d107      	bne.n	800e3cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800e3bc:	4b31      	ldr	r3, [pc, #196]	@ (800e484 <HAL_RCC_GetSysClockFreq+0x108>)
 800e3be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e3c2:	0a1b      	lsrs	r3, r3, #8
 800e3c4:	f003 030f 	and.w	r3, r3, #15
 800e3c8:	61fb      	str	r3, [r7, #28]
 800e3ca:	e005      	b.n	800e3d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800e3cc:	4b2d      	ldr	r3, [pc, #180]	@ (800e484 <HAL_RCC_GetSysClockFreq+0x108>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	091b      	lsrs	r3, r3, #4
 800e3d2:	f003 030f 	and.w	r3, r3, #15
 800e3d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800e3d8:	4a2b      	ldr	r2, [pc, #172]	@ (800e488 <HAL_RCC_GetSysClockFreq+0x10c>)
 800e3da:	69fb      	ldr	r3, [r7, #28]
 800e3dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800e3e2:	693b      	ldr	r3, [r7, #16]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d10d      	bne.n	800e404 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800e3e8:	69fb      	ldr	r3, [r7, #28]
 800e3ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800e3ec:	e00a      	b.n	800e404 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800e3ee:	693b      	ldr	r3, [r7, #16]
 800e3f0:	2b04      	cmp	r3, #4
 800e3f2:	d102      	bne.n	800e3fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800e3f4:	4b25      	ldr	r3, [pc, #148]	@ (800e48c <HAL_RCC_GetSysClockFreq+0x110>)
 800e3f6:	61bb      	str	r3, [r7, #24]
 800e3f8:	e004      	b.n	800e404 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	2b08      	cmp	r3, #8
 800e3fe:	d101      	bne.n	800e404 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800e400:	4b23      	ldr	r3, [pc, #140]	@ (800e490 <HAL_RCC_GetSysClockFreq+0x114>)
 800e402:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800e404:	693b      	ldr	r3, [r7, #16]
 800e406:	2b0c      	cmp	r3, #12
 800e408:	d134      	bne.n	800e474 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800e40a:	4b1e      	ldr	r3, [pc, #120]	@ (800e484 <HAL_RCC_GetSysClockFreq+0x108>)
 800e40c:	68db      	ldr	r3, [r3, #12]
 800e40e:	f003 0303 	and.w	r3, r3, #3
 800e412:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	2b02      	cmp	r3, #2
 800e418:	d003      	beq.n	800e422 <HAL_RCC_GetSysClockFreq+0xa6>
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	2b03      	cmp	r3, #3
 800e41e:	d003      	beq.n	800e428 <HAL_RCC_GetSysClockFreq+0xac>
 800e420:	e005      	b.n	800e42e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800e422:	4b1a      	ldr	r3, [pc, #104]	@ (800e48c <HAL_RCC_GetSysClockFreq+0x110>)
 800e424:	617b      	str	r3, [r7, #20]
      break;
 800e426:	e005      	b.n	800e434 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800e428:	4b19      	ldr	r3, [pc, #100]	@ (800e490 <HAL_RCC_GetSysClockFreq+0x114>)
 800e42a:	617b      	str	r3, [r7, #20]
      break;
 800e42c:	e002      	b.n	800e434 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800e42e:	69fb      	ldr	r3, [r7, #28]
 800e430:	617b      	str	r3, [r7, #20]
      break;
 800e432:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800e434:	4b13      	ldr	r3, [pc, #76]	@ (800e484 <HAL_RCC_GetSysClockFreq+0x108>)
 800e436:	68db      	ldr	r3, [r3, #12]
 800e438:	091b      	lsrs	r3, r3, #4
 800e43a:	f003 0307 	and.w	r3, r3, #7
 800e43e:	3301      	adds	r3, #1
 800e440:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800e442:	4b10      	ldr	r3, [pc, #64]	@ (800e484 <HAL_RCC_GetSysClockFreq+0x108>)
 800e444:	68db      	ldr	r3, [r3, #12]
 800e446:	0a1b      	lsrs	r3, r3, #8
 800e448:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e44c:	697a      	ldr	r2, [r7, #20]
 800e44e:	fb03 f202 	mul.w	r2, r3, r2
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	fbb2 f3f3 	udiv	r3, r2, r3
 800e458:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800e45a:	4b0a      	ldr	r3, [pc, #40]	@ (800e484 <HAL_RCC_GetSysClockFreq+0x108>)
 800e45c:	68db      	ldr	r3, [r3, #12]
 800e45e:	0e5b      	lsrs	r3, r3, #25
 800e460:	f003 0303 	and.w	r3, r3, #3
 800e464:	3301      	adds	r3, #1
 800e466:	005b      	lsls	r3, r3, #1
 800e468:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800e46a:	697a      	ldr	r2, [r7, #20]
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e472:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800e474:	69bb      	ldr	r3, [r7, #24]
}
 800e476:	4618      	mov	r0, r3
 800e478:	3724      	adds	r7, #36	@ 0x24
 800e47a:	46bd      	mov	sp, r7
 800e47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e480:	4770      	bx	lr
 800e482:	bf00      	nop
 800e484:	40021000 	.word	0x40021000
 800e488:	08014720 	.word	0x08014720
 800e48c:	00f42400 	.word	0x00f42400
 800e490:	007a1200 	.word	0x007a1200

0800e494 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e494:	b480      	push	{r7}
 800e496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e498:	4b03      	ldr	r3, [pc, #12]	@ (800e4a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800e49a:	681b      	ldr	r3, [r3, #0]
}
 800e49c:	4618      	mov	r0, r3
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a4:	4770      	bx	lr
 800e4a6:	bf00      	nop
 800e4a8:	20000000 	.word	0x20000000

0800e4ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800e4b0:	f7ff fff0 	bl	800e494 <HAL_RCC_GetHCLKFreq>
 800e4b4:	4602      	mov	r2, r0
 800e4b6:	4b06      	ldr	r3, [pc, #24]	@ (800e4d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e4b8:	689b      	ldr	r3, [r3, #8]
 800e4ba:	0a1b      	lsrs	r3, r3, #8
 800e4bc:	f003 0307 	and.w	r3, r3, #7
 800e4c0:	4904      	ldr	r1, [pc, #16]	@ (800e4d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e4c2:	5ccb      	ldrb	r3, [r1, r3]
 800e4c4:	f003 031f 	and.w	r3, r3, #31
 800e4c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	bd80      	pop	{r7, pc}
 800e4d0:	40021000 	.word	0x40021000
 800e4d4:	08014718 	.word	0x08014718

0800e4d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800e4dc:	f7ff ffda 	bl	800e494 <HAL_RCC_GetHCLKFreq>
 800e4e0:	4602      	mov	r2, r0
 800e4e2:	4b06      	ldr	r3, [pc, #24]	@ (800e4fc <HAL_RCC_GetPCLK2Freq+0x24>)
 800e4e4:	689b      	ldr	r3, [r3, #8]
 800e4e6:	0adb      	lsrs	r3, r3, #11
 800e4e8:	f003 0307 	and.w	r3, r3, #7
 800e4ec:	4904      	ldr	r1, [pc, #16]	@ (800e500 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e4ee:	5ccb      	ldrb	r3, [r1, r3]
 800e4f0:	f003 031f 	and.w	r3, r3, #31
 800e4f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	bd80      	pop	{r7, pc}
 800e4fc:	40021000 	.word	0x40021000
 800e500:	08014718 	.word	0x08014718

0800e504 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b086      	sub	sp, #24
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800e50c:	2300      	movs	r3, #0
 800e50e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800e510:	4b2a      	ldr	r3, [pc, #168]	@ (800e5bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800e512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d003      	beq.n	800e524 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800e51c:	f7ff f9ee 	bl	800d8fc <HAL_PWREx_GetVoltageRange>
 800e520:	6178      	str	r0, [r7, #20]
 800e522:	e014      	b.n	800e54e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800e524:	4b25      	ldr	r3, [pc, #148]	@ (800e5bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800e526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e528:	4a24      	ldr	r2, [pc, #144]	@ (800e5bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800e52a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e52e:	6593      	str	r3, [r2, #88]	@ 0x58
 800e530:	4b22      	ldr	r3, [pc, #136]	@ (800e5bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800e532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e538:	60fb      	str	r3, [r7, #12]
 800e53a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800e53c:	f7ff f9de 	bl	800d8fc <HAL_PWREx_GetVoltageRange>
 800e540:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800e542:	4b1e      	ldr	r3, [pc, #120]	@ (800e5bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800e544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e546:	4a1d      	ldr	r2, [pc, #116]	@ (800e5bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800e548:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e54c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800e54e:	697b      	ldr	r3, [r7, #20]
 800e550:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e554:	d10b      	bne.n	800e56e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2b80      	cmp	r3, #128	@ 0x80
 800e55a:	d919      	bls.n	800e590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2ba0      	cmp	r3, #160	@ 0xa0
 800e560:	d902      	bls.n	800e568 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800e562:	2302      	movs	r3, #2
 800e564:	613b      	str	r3, [r7, #16]
 800e566:	e013      	b.n	800e590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800e568:	2301      	movs	r3, #1
 800e56a:	613b      	str	r3, [r7, #16]
 800e56c:	e010      	b.n	800e590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2b80      	cmp	r3, #128	@ 0x80
 800e572:	d902      	bls.n	800e57a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800e574:	2303      	movs	r3, #3
 800e576:	613b      	str	r3, [r7, #16]
 800e578:	e00a      	b.n	800e590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2b80      	cmp	r3, #128	@ 0x80
 800e57e:	d102      	bne.n	800e586 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800e580:	2302      	movs	r3, #2
 800e582:	613b      	str	r3, [r7, #16]
 800e584:	e004      	b.n	800e590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2b70      	cmp	r3, #112	@ 0x70
 800e58a:	d101      	bne.n	800e590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800e58c:	2301      	movs	r3, #1
 800e58e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800e590:	4b0b      	ldr	r3, [pc, #44]	@ (800e5c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	f023 0207 	bic.w	r2, r3, #7
 800e598:	4909      	ldr	r1, [pc, #36]	@ (800e5c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800e59a:	693b      	ldr	r3, [r7, #16]
 800e59c:	4313      	orrs	r3, r2
 800e59e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800e5a0:	4b07      	ldr	r3, [pc, #28]	@ (800e5c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	f003 0307 	and.w	r3, r3, #7
 800e5a8:	693a      	ldr	r2, [r7, #16]
 800e5aa:	429a      	cmp	r2, r3
 800e5ac:	d001      	beq.n	800e5b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	e000      	b.n	800e5b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800e5b2:	2300      	movs	r3, #0
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3718      	adds	r7, #24
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}
 800e5bc:	40021000 	.word	0x40021000
 800e5c0:	40022000 	.word	0x40022000

0800e5c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b086      	sub	sp, #24
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d041      	beq.n	800e664 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e5e4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e5e8:	d02a      	beq.n	800e640 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800e5ea:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e5ee:	d824      	bhi.n	800e63a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800e5f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e5f4:	d008      	beq.n	800e608 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800e5f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e5fa:	d81e      	bhi.n	800e63a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d00a      	beq.n	800e616 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800e600:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e604:	d010      	beq.n	800e628 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e606:	e018      	b.n	800e63a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800e608:	4b86      	ldr	r3, [pc, #536]	@ (800e824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800e60a:	68db      	ldr	r3, [r3, #12]
 800e60c:	4a85      	ldr	r2, [pc, #532]	@ (800e824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800e60e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e612:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800e614:	e015      	b.n	800e642 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	3304      	adds	r3, #4
 800e61a:	2100      	movs	r1, #0
 800e61c:	4618      	mov	r0, r3
 800e61e:	f000 fabb 	bl	800eb98 <RCCEx_PLLSAI1_Config>
 800e622:	4603      	mov	r3, r0
 800e624:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800e626:	e00c      	b.n	800e642 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	3320      	adds	r3, #32
 800e62c:	2100      	movs	r1, #0
 800e62e:	4618      	mov	r0, r3
 800e630:	f000 fba6 	bl	800ed80 <RCCEx_PLLSAI2_Config>
 800e634:	4603      	mov	r3, r0
 800e636:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800e638:	e003      	b.n	800e642 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e63a:	2301      	movs	r3, #1
 800e63c:	74fb      	strb	r3, [r7, #19]
      break;
 800e63e:	e000      	b.n	800e642 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800e640:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e642:	7cfb      	ldrb	r3, [r7, #19]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d10b      	bne.n	800e660 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e648:	4b76      	ldr	r3, [pc, #472]	@ (800e824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800e64a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e64e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e656:	4973      	ldr	r1, [pc, #460]	@ (800e824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800e658:	4313      	orrs	r3, r2
 800e65a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800e65e:	e001      	b.n	800e664 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e660:	7cfb      	ldrb	r3, [r7, #19]
 800e662:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d041      	beq.n	800e6f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e674:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e678:	d02a      	beq.n	800e6d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800e67a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e67e:	d824      	bhi.n	800e6ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800e680:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e684:	d008      	beq.n	800e698 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800e686:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e68a:	d81e      	bhi.n	800e6ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d00a      	beq.n	800e6a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800e690:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e694:	d010      	beq.n	800e6b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800e696:	e018      	b.n	800e6ca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800e698:	4b62      	ldr	r3, [pc, #392]	@ (800e824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800e69a:	68db      	ldr	r3, [r3, #12]
 800e69c:	4a61      	ldr	r2, [pc, #388]	@ (800e824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800e69e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e6a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800e6a4:	e015      	b.n	800e6d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	3304      	adds	r3, #4
 800e6aa:	2100      	movs	r1, #0
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f000 fa73 	bl	800eb98 <RCCEx_PLLSAI1_Config>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800e6b6:	e00c      	b.n	800e6d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	3320      	adds	r3, #32
 800e6bc:	2100      	movs	r1, #0
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f000 fb5e 	bl	800ed80 <RCCEx_PLLSAI2_Config>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800e6c8:	e003      	b.n	800e6d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	74fb      	strb	r3, [r7, #19]
      break;
 800e6ce:	e000      	b.n	800e6d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800e6d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e6d2:	7cfb      	ldrb	r3, [r7, #19]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d10b      	bne.n	800e6f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800e6d8:	4b52      	ldr	r3, [pc, #328]	@ (800e824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800e6da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e6de:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e6e6:	494f      	ldr	r1, [pc, #316]	@ (800e824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800e6e8:	4313      	orrs	r3, r2
 800e6ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800e6ee:	e001      	b.n	800e6f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e6f0:	7cfb      	ldrb	r3, [r7, #19]
 800e6f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	f000 80a0 	beq.w	800e842 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e702:	2300      	movs	r3, #0
 800e704:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800e706:	4b47      	ldr	r3, [pc, #284]	@ (800e824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800e708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e70a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d101      	bne.n	800e716 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800e712:	2301      	movs	r3, #1
 800e714:	e000      	b.n	800e718 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800e716:	2300      	movs	r3, #0
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d00d      	beq.n	800e738 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e71c:	4b41      	ldr	r3, [pc, #260]	@ (800e824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800e71e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e720:	4a40      	ldr	r2, [pc, #256]	@ (800e824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800e722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e726:	6593      	str	r3, [r2, #88]	@ 0x58
 800e728:	4b3e      	ldr	r3, [pc, #248]	@ (800e824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800e72a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e72c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e730:	60bb      	str	r3, [r7, #8]
 800e732:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e734:	2301      	movs	r3, #1
 800e736:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e738:	4b3b      	ldr	r3, [pc, #236]	@ (800e828 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	4a3a      	ldr	r2, [pc, #232]	@ (800e828 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800e73e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e742:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e744:	f7fd f8aa 	bl	800b89c <HAL_GetTick>
 800e748:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800e74a:	e009      	b.n	800e760 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e74c:	f7fd f8a6 	bl	800b89c <HAL_GetTick>
 800e750:	4602      	mov	r2, r0
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	1ad3      	subs	r3, r2, r3
 800e756:	2b02      	cmp	r3, #2
 800e758:	d902      	bls.n	800e760 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800e75a:	2303      	movs	r3, #3
 800e75c:	74fb      	strb	r3, [r7, #19]
        break;
 800e75e:	e005      	b.n	800e76c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800e760:	4b31      	ldr	r3, [pc, #196]	@ (800e828 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d0ef      	beq.n	800e74c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800e76c:	7cfb      	ldrb	r3, [r7, #19]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d15c      	bne.n	800e82c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800e772:	4b2c      	ldr	r3, [pc, #176]	@ (800e824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800e774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e778:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e77c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800e77e:	697b      	ldr	r3, [r7, #20]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d01f      	beq.n	800e7c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e78a:	697a      	ldr	r2, [r7, #20]
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d019      	beq.n	800e7c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800e790:	4b24      	ldr	r3, [pc, #144]	@ (800e824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800e792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e796:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e79a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e79c:	4b21      	ldr	r3, [pc, #132]	@ (800e824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800e79e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e7a2:	4a20      	ldr	r2, [pc, #128]	@ (800e824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800e7a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e7a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e7ac:	4b1d      	ldr	r3, [pc, #116]	@ (800e824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800e7ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e7b2:	4a1c      	ldr	r2, [pc, #112]	@ (800e824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800e7b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e7b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800e7bc:	4a19      	ldr	r2, [pc, #100]	@ (800e824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	f003 0301 	and.w	r3, r3, #1
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d016      	beq.n	800e7fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e7ce:	f7fd f865 	bl	800b89c <HAL_GetTick>
 800e7d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e7d4:	e00b      	b.n	800e7ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e7d6:	f7fd f861 	bl	800b89c <HAL_GetTick>
 800e7da:	4602      	mov	r2, r0
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	1ad3      	subs	r3, r2, r3
 800e7e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e7e4:	4293      	cmp	r3, r2
 800e7e6:	d902      	bls.n	800e7ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800e7e8:	2303      	movs	r3, #3
 800e7ea:	74fb      	strb	r3, [r7, #19]
            break;
 800e7ec:	e006      	b.n	800e7fc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e7ee:	4b0d      	ldr	r3, [pc, #52]	@ (800e824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800e7f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e7f4:	f003 0302 	and.w	r3, r3, #2
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d0ec      	beq.n	800e7d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800e7fc:	7cfb      	ldrb	r3, [r7, #19]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d10c      	bne.n	800e81c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e802:	4b08      	ldr	r3, [pc, #32]	@ (800e824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800e804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e808:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e812:	4904      	ldr	r1, [pc, #16]	@ (800e824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800e814:	4313      	orrs	r3, r2
 800e816:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800e81a:	e009      	b.n	800e830 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e81c:	7cfb      	ldrb	r3, [r7, #19]
 800e81e:	74bb      	strb	r3, [r7, #18]
 800e820:	e006      	b.n	800e830 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800e822:	bf00      	nop
 800e824:	40021000 	.word	0x40021000
 800e828:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e82c:	7cfb      	ldrb	r3, [r7, #19]
 800e82e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e830:	7c7b      	ldrb	r3, [r7, #17]
 800e832:	2b01      	cmp	r3, #1
 800e834:	d105      	bne.n	800e842 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e836:	4b9e      	ldr	r3, [pc, #632]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e83a:	4a9d      	ldr	r2, [pc, #628]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e83c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e840:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	f003 0301 	and.w	r3, r3, #1
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d00a      	beq.n	800e864 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e84e:	4b98      	ldr	r3, [pc, #608]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e854:	f023 0203 	bic.w	r2, r3, #3
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e85c:	4994      	ldr	r1, [pc, #592]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e85e:	4313      	orrs	r3, r2
 800e860:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	f003 0302 	and.w	r3, r3, #2
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d00a      	beq.n	800e886 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e870:	4b8f      	ldr	r3, [pc, #572]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e876:	f023 020c 	bic.w	r2, r3, #12
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e87e:	498c      	ldr	r1, [pc, #560]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e880:	4313      	orrs	r3, r2
 800e882:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	f003 0304 	and.w	r3, r3, #4
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d00a      	beq.n	800e8a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e892:	4b87      	ldr	r3, [pc, #540]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e898:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8a0:	4983      	ldr	r1, [pc, #524]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e8a2:	4313      	orrs	r3, r2
 800e8a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	f003 0308 	and.w	r3, r3, #8
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d00a      	beq.n	800e8ca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e8b4:	4b7e      	ldr	r3, [pc, #504]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e8b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e8ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e8c2:	497b      	ldr	r1, [pc, #492]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e8c4:	4313      	orrs	r3, r2
 800e8c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	f003 0310 	and.w	r3, r3, #16
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d00a      	beq.n	800e8ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e8d6:	4b76      	ldr	r3, [pc, #472]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e8d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e8dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e8e4:	4972      	ldr	r1, [pc, #456]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e8e6:	4313      	orrs	r3, r2
 800e8e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	f003 0320 	and.w	r3, r3, #32
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d00a      	beq.n	800e90e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e8f8:	4b6d      	ldr	r3, [pc, #436]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e8fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e8fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e906:	496a      	ldr	r1, [pc, #424]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e908:	4313      	orrs	r3, r2
 800e90a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e916:	2b00      	cmp	r3, #0
 800e918:	d00a      	beq.n	800e930 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e91a:	4b65      	ldr	r3, [pc, #404]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e91c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e920:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e928:	4961      	ldr	r1, [pc, #388]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e92a:	4313      	orrs	r3, r2
 800e92c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d00a      	beq.n	800e952 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e93c:	4b5c      	ldr	r3, [pc, #368]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e93e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e942:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e94a:	4959      	ldr	r1, [pc, #356]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e94c:	4313      	orrs	r3, r2
 800e94e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d00a      	beq.n	800e974 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e95e:	4b54      	ldr	r3, [pc, #336]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e964:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e96c:	4950      	ldr	r1, [pc, #320]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e96e:	4313      	orrs	r3, r2
 800e970:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d00a      	beq.n	800e996 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e980:	4b4b      	ldr	r3, [pc, #300]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e986:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e98e:	4948      	ldr	r1, [pc, #288]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e990:	4313      	orrs	r3, r2
 800e992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d00a      	beq.n	800e9b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e9a2:	4b43      	ldr	r3, [pc, #268]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e9a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e9a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e9b0:	493f      	ldr	r1, [pc, #252]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e9b2:	4313      	orrs	r3, r2
 800e9b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d028      	beq.n	800ea16 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e9c4:	4b3a      	ldr	r3, [pc, #232]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e9c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e9ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e9d2:	4937      	ldr	r1, [pc, #220]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e9d4:	4313      	orrs	r3, r2
 800e9d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e9de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e9e2:	d106      	bne.n	800e9f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e9e4:	4b32      	ldr	r3, [pc, #200]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e9e6:	68db      	ldr	r3, [r3, #12]
 800e9e8:	4a31      	ldr	r2, [pc, #196]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800e9ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e9ee:	60d3      	str	r3, [r2, #12]
 800e9f0:	e011      	b.n	800ea16 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e9f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e9fa:	d10c      	bne.n	800ea16 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	3304      	adds	r3, #4
 800ea00:	2101      	movs	r1, #1
 800ea02:	4618      	mov	r0, r3
 800ea04:	f000 f8c8 	bl	800eb98 <RCCEx_PLLSAI1_Config>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800ea0c:	7cfb      	ldrb	r3, [r7, #19]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d001      	beq.n	800ea16 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800ea12:	7cfb      	ldrb	r3, [r7, #19]
 800ea14:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d028      	beq.n	800ea74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ea22:	4b23      	ldr	r3, [pc, #140]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ea24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ea28:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea30:	491f      	ldr	r1, [pc, #124]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ea32:	4313      	orrs	r3, r2
 800ea34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ea40:	d106      	bne.n	800ea50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ea42:	4b1b      	ldr	r3, [pc, #108]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ea44:	68db      	ldr	r3, [r3, #12]
 800ea46:	4a1a      	ldr	r2, [pc, #104]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ea48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ea4c:	60d3      	str	r3, [r2, #12]
 800ea4e:	e011      	b.n	800ea74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ea58:	d10c      	bne.n	800ea74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	3304      	adds	r3, #4
 800ea5e:	2101      	movs	r1, #1
 800ea60:	4618      	mov	r0, r3
 800ea62:	f000 f899 	bl	800eb98 <RCCEx_PLLSAI1_Config>
 800ea66:	4603      	mov	r3, r0
 800ea68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ea6a:	7cfb      	ldrb	r3, [r7, #19]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d001      	beq.n	800ea74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800ea70:	7cfb      	ldrb	r3, [r7, #19]
 800ea72:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d02b      	beq.n	800ead8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ea80:	4b0b      	ldr	r3, [pc, #44]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ea82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ea86:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea8e:	4908      	ldr	r1, [pc, #32]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ea90:	4313      	orrs	r3, r2
 800ea92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ea9e:	d109      	bne.n	800eab4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800eaa0:	4b03      	ldr	r3, [pc, #12]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800eaa2:	68db      	ldr	r3, [r3, #12]
 800eaa4:	4a02      	ldr	r2, [pc, #8]	@ (800eab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800eaa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800eaaa:	60d3      	str	r3, [r2, #12]
 800eaac:	e014      	b.n	800ead8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800eaae:	bf00      	nop
 800eab0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eab8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800eabc:	d10c      	bne.n	800ead8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	3304      	adds	r3, #4
 800eac2:	2101      	movs	r1, #1
 800eac4:	4618      	mov	r0, r3
 800eac6:	f000 f867 	bl	800eb98 <RCCEx_PLLSAI1_Config>
 800eaca:	4603      	mov	r3, r0
 800eacc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800eace:	7cfb      	ldrb	r3, [r7, #19]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d001      	beq.n	800ead8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800ead4:	7cfb      	ldrb	r3, [r7, #19]
 800ead6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d02f      	beq.n	800eb44 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800eae4:	4b2b      	ldr	r3, [pc, #172]	@ (800eb94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800eae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eaea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eaf2:	4928      	ldr	r1, [pc, #160]	@ (800eb94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800eaf4:	4313      	orrs	r3, r2
 800eaf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eafe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eb02:	d10d      	bne.n	800eb20 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	3304      	adds	r3, #4
 800eb08:	2102      	movs	r1, #2
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f000 f844 	bl	800eb98 <RCCEx_PLLSAI1_Config>
 800eb10:	4603      	mov	r3, r0
 800eb12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800eb14:	7cfb      	ldrb	r3, [r7, #19]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d014      	beq.n	800eb44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800eb1a:	7cfb      	ldrb	r3, [r7, #19]
 800eb1c:	74bb      	strb	r3, [r7, #18]
 800eb1e:	e011      	b.n	800eb44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eb24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eb28:	d10c      	bne.n	800eb44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	3320      	adds	r3, #32
 800eb2e:	2102      	movs	r1, #2
 800eb30:	4618      	mov	r0, r3
 800eb32:	f000 f925 	bl	800ed80 <RCCEx_PLLSAI2_Config>
 800eb36:	4603      	mov	r3, r0
 800eb38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800eb3a:	7cfb      	ldrb	r3, [r7, #19]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d001      	beq.n	800eb44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800eb40:	7cfb      	ldrb	r3, [r7, #19]
 800eb42:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d00a      	beq.n	800eb66 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800eb50:	4b10      	ldr	r3, [pc, #64]	@ (800eb94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800eb52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eb56:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eb5e:	490d      	ldr	r1, [pc, #52]	@ (800eb94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800eb60:	4313      	orrs	r3, r2
 800eb62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d00b      	beq.n	800eb8a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800eb72:	4b08      	ldr	r3, [pc, #32]	@ (800eb94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800eb74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eb78:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eb82:	4904      	ldr	r1, [pc, #16]	@ (800eb94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800eb84:	4313      	orrs	r3, r2
 800eb86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800eb8a:	7cbb      	ldrb	r3, [r7, #18]
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3718      	adds	r7, #24
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}
 800eb94:	40021000 	.word	0x40021000

0800eb98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b084      	sub	sp, #16
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800eba2:	2300      	movs	r3, #0
 800eba4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800eba6:	4b75      	ldr	r3, [pc, #468]	@ (800ed7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800eba8:	68db      	ldr	r3, [r3, #12]
 800ebaa:	f003 0303 	and.w	r3, r3, #3
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d018      	beq.n	800ebe4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800ebb2:	4b72      	ldr	r3, [pc, #456]	@ (800ed7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ebb4:	68db      	ldr	r3, [r3, #12]
 800ebb6:	f003 0203 	and.w	r2, r3, #3
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d10d      	bne.n	800ebde <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
       ||
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d009      	beq.n	800ebde <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800ebca:	4b6c      	ldr	r3, [pc, #432]	@ (800ed7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ebcc:	68db      	ldr	r3, [r3, #12]
 800ebce:	091b      	lsrs	r3, r3, #4
 800ebd0:	f003 0307 	and.w	r3, r3, #7
 800ebd4:	1c5a      	adds	r2, r3, #1
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	685b      	ldr	r3, [r3, #4]
       ||
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d047      	beq.n	800ec6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800ebde:	2301      	movs	r3, #1
 800ebe0:	73fb      	strb	r3, [r7, #15]
 800ebe2:	e044      	b.n	800ec6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	2b03      	cmp	r3, #3
 800ebea:	d018      	beq.n	800ec1e <RCCEx_PLLSAI1_Config+0x86>
 800ebec:	2b03      	cmp	r3, #3
 800ebee:	d825      	bhi.n	800ec3c <RCCEx_PLLSAI1_Config+0xa4>
 800ebf0:	2b01      	cmp	r3, #1
 800ebf2:	d002      	beq.n	800ebfa <RCCEx_PLLSAI1_Config+0x62>
 800ebf4:	2b02      	cmp	r3, #2
 800ebf6:	d009      	beq.n	800ec0c <RCCEx_PLLSAI1_Config+0x74>
 800ebf8:	e020      	b.n	800ec3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ebfa:	4b60      	ldr	r3, [pc, #384]	@ (800ed7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	f003 0302 	and.w	r3, r3, #2
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d11d      	bne.n	800ec42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800ec06:	2301      	movs	r3, #1
 800ec08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ec0a:	e01a      	b.n	800ec42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ec0c:	4b5b      	ldr	r3, [pc, #364]	@ (800ed7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d116      	bne.n	800ec46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800ec18:	2301      	movs	r3, #1
 800ec1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ec1c:	e013      	b.n	800ec46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ec1e:	4b57      	ldr	r3, [pc, #348]	@ (800ed7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d10f      	bne.n	800ec4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ec2a:	4b54      	ldr	r3, [pc, #336]	@ (800ed7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d109      	bne.n	800ec4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800ec36:	2301      	movs	r3, #1
 800ec38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ec3a:	e006      	b.n	800ec4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800ec3c:	2301      	movs	r3, #1
 800ec3e:	73fb      	strb	r3, [r7, #15]
      break;
 800ec40:	e004      	b.n	800ec4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ec42:	bf00      	nop
 800ec44:	e002      	b.n	800ec4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ec46:	bf00      	nop
 800ec48:	e000      	b.n	800ec4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ec4a:	bf00      	nop
    }

    if(status == HAL_OK)
 800ec4c:	7bfb      	ldrb	r3, [r7, #15]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d10d      	bne.n	800ec6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800ec52:	4b4a      	ldr	r3, [pc, #296]	@ (800ed7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ec54:	68db      	ldr	r3, [r3, #12]
 800ec56:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6819      	ldr	r1, [r3, #0]
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	685b      	ldr	r3, [r3, #4]
 800ec62:	3b01      	subs	r3, #1
 800ec64:	011b      	lsls	r3, r3, #4
 800ec66:	430b      	orrs	r3, r1
 800ec68:	4944      	ldr	r1, [pc, #272]	@ (800ed7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ec6a:	4313      	orrs	r3, r2
 800ec6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800ec6e:	7bfb      	ldrb	r3, [r7, #15]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d17d      	bne.n	800ed70 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800ec74:	4b41      	ldr	r3, [pc, #260]	@ (800ed7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	4a40      	ldr	r2, [pc, #256]	@ (800ed7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ec7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ec7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ec80:	f7fc fe0c 	bl	800b89c <HAL_GetTick>
 800ec84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ec86:	e009      	b.n	800ec9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ec88:	f7fc fe08 	bl	800b89c <HAL_GetTick>
 800ec8c:	4602      	mov	r2, r0
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	1ad3      	subs	r3, r2, r3
 800ec92:	2b02      	cmp	r3, #2
 800ec94:	d902      	bls.n	800ec9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800ec96:	2303      	movs	r3, #3
 800ec98:	73fb      	strb	r3, [r7, #15]
        break;
 800ec9a:	e005      	b.n	800eca8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ec9c:	4b37      	ldr	r3, [pc, #220]	@ (800ed7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d1ef      	bne.n	800ec88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800eca8:	7bfb      	ldrb	r3, [r7, #15]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d160      	bne.n	800ed70 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d111      	bne.n	800ecd8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ecb4:	4b31      	ldr	r3, [pc, #196]	@ (800ed7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ecb6:	691b      	ldr	r3, [r3, #16]
 800ecb8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800ecbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ecc0:	687a      	ldr	r2, [r7, #4]
 800ecc2:	6892      	ldr	r2, [r2, #8]
 800ecc4:	0211      	lsls	r1, r2, #8
 800ecc6:	687a      	ldr	r2, [r7, #4]
 800ecc8:	68d2      	ldr	r2, [r2, #12]
 800ecca:	0912      	lsrs	r2, r2, #4
 800eccc:	0452      	lsls	r2, r2, #17
 800ecce:	430a      	orrs	r2, r1
 800ecd0:	492a      	ldr	r1, [pc, #168]	@ (800ed7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ecd2:	4313      	orrs	r3, r2
 800ecd4:	610b      	str	r3, [r1, #16]
 800ecd6:	e027      	b.n	800ed28 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	2b01      	cmp	r3, #1
 800ecdc:	d112      	bne.n	800ed04 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ecde:	4b27      	ldr	r3, [pc, #156]	@ (800ed7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ece0:	691b      	ldr	r3, [r3, #16]
 800ece2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800ece6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800ecea:	687a      	ldr	r2, [r7, #4]
 800ecec:	6892      	ldr	r2, [r2, #8]
 800ecee:	0211      	lsls	r1, r2, #8
 800ecf0:	687a      	ldr	r2, [r7, #4]
 800ecf2:	6912      	ldr	r2, [r2, #16]
 800ecf4:	0852      	lsrs	r2, r2, #1
 800ecf6:	3a01      	subs	r2, #1
 800ecf8:	0552      	lsls	r2, r2, #21
 800ecfa:	430a      	orrs	r2, r1
 800ecfc:	491f      	ldr	r1, [pc, #124]	@ (800ed7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ecfe:	4313      	orrs	r3, r2
 800ed00:	610b      	str	r3, [r1, #16]
 800ed02:	e011      	b.n	800ed28 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ed04:	4b1d      	ldr	r3, [pc, #116]	@ (800ed7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ed06:	691b      	ldr	r3, [r3, #16]
 800ed08:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800ed0c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800ed10:	687a      	ldr	r2, [r7, #4]
 800ed12:	6892      	ldr	r2, [r2, #8]
 800ed14:	0211      	lsls	r1, r2, #8
 800ed16:	687a      	ldr	r2, [r7, #4]
 800ed18:	6952      	ldr	r2, [r2, #20]
 800ed1a:	0852      	lsrs	r2, r2, #1
 800ed1c:	3a01      	subs	r2, #1
 800ed1e:	0652      	lsls	r2, r2, #25
 800ed20:	430a      	orrs	r2, r1
 800ed22:	4916      	ldr	r1, [pc, #88]	@ (800ed7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ed24:	4313      	orrs	r3, r2
 800ed26:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800ed28:	4b14      	ldr	r3, [pc, #80]	@ (800ed7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	4a13      	ldr	r2, [pc, #76]	@ (800ed7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ed2e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ed32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ed34:	f7fc fdb2 	bl	800b89c <HAL_GetTick>
 800ed38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800ed3a:	e009      	b.n	800ed50 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ed3c:	f7fc fdae 	bl	800b89c <HAL_GetTick>
 800ed40:	4602      	mov	r2, r0
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	1ad3      	subs	r3, r2, r3
 800ed46:	2b02      	cmp	r3, #2
 800ed48:	d902      	bls.n	800ed50 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800ed4a:	2303      	movs	r3, #3
 800ed4c:	73fb      	strb	r3, [r7, #15]
          break;
 800ed4e:	e005      	b.n	800ed5c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800ed50:	4b0a      	ldr	r3, [pc, #40]	@ (800ed7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d0ef      	beq.n	800ed3c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800ed5c:	7bfb      	ldrb	r3, [r7, #15]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d106      	bne.n	800ed70 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800ed62:	4b06      	ldr	r3, [pc, #24]	@ (800ed7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ed64:	691a      	ldr	r2, [r3, #16]
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	699b      	ldr	r3, [r3, #24]
 800ed6a:	4904      	ldr	r1, [pc, #16]	@ (800ed7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800ed6c:	4313      	orrs	r3, r2
 800ed6e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800ed70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	3710      	adds	r7, #16
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}
 800ed7a:	bf00      	nop
 800ed7c:	40021000 	.word	0x40021000

0800ed80 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b084      	sub	sp, #16
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
 800ed88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ed8e:	4b6a      	ldr	r3, [pc, #424]	@ (800ef38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ed90:	68db      	ldr	r3, [r3, #12]
 800ed92:	f003 0303 	and.w	r3, r3, #3
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d018      	beq.n	800edcc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800ed9a:	4b67      	ldr	r3, [pc, #412]	@ (800ef38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ed9c:	68db      	ldr	r3, [r3, #12]
 800ed9e:	f003 0203 	and.w	r2, r3, #3
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d10d      	bne.n	800edc6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
       ||
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d009      	beq.n	800edc6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800edb2:	4b61      	ldr	r3, [pc, #388]	@ (800ef38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800edb4:	68db      	ldr	r3, [r3, #12]
 800edb6:	091b      	lsrs	r3, r3, #4
 800edb8:	f003 0307 	and.w	r3, r3, #7
 800edbc:	1c5a      	adds	r2, r3, #1
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	685b      	ldr	r3, [r3, #4]
       ||
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d047      	beq.n	800ee56 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800edc6:	2301      	movs	r3, #1
 800edc8:	73fb      	strb	r3, [r7, #15]
 800edca:	e044      	b.n	800ee56 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	2b03      	cmp	r3, #3
 800edd2:	d018      	beq.n	800ee06 <RCCEx_PLLSAI2_Config+0x86>
 800edd4:	2b03      	cmp	r3, #3
 800edd6:	d825      	bhi.n	800ee24 <RCCEx_PLLSAI2_Config+0xa4>
 800edd8:	2b01      	cmp	r3, #1
 800edda:	d002      	beq.n	800ede2 <RCCEx_PLLSAI2_Config+0x62>
 800eddc:	2b02      	cmp	r3, #2
 800edde:	d009      	beq.n	800edf4 <RCCEx_PLLSAI2_Config+0x74>
 800ede0:	e020      	b.n	800ee24 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ede2:	4b55      	ldr	r3, [pc, #340]	@ (800ef38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	f003 0302 	and.w	r3, r3, #2
 800edea:	2b00      	cmp	r3, #0
 800edec:	d11d      	bne.n	800ee2a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800edee:	2301      	movs	r3, #1
 800edf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800edf2:	e01a      	b.n	800ee2a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800edf4:	4b50      	ldr	r3, [pc, #320]	@ (800ef38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d116      	bne.n	800ee2e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800ee00:	2301      	movs	r3, #1
 800ee02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ee04:	e013      	b.n	800ee2e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ee06:	4b4c      	ldr	r3, [pc, #304]	@ (800ef38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d10f      	bne.n	800ee32 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ee12:	4b49      	ldr	r3, [pc, #292]	@ (800ef38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d109      	bne.n	800ee32 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800ee1e:	2301      	movs	r3, #1
 800ee20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ee22:	e006      	b.n	800ee32 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800ee24:	2301      	movs	r3, #1
 800ee26:	73fb      	strb	r3, [r7, #15]
      break;
 800ee28:	e004      	b.n	800ee34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800ee2a:	bf00      	nop
 800ee2c:	e002      	b.n	800ee34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800ee2e:	bf00      	nop
 800ee30:	e000      	b.n	800ee34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800ee32:	bf00      	nop
    }

    if(status == HAL_OK)
 800ee34:	7bfb      	ldrb	r3, [r7, #15]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d10d      	bne.n	800ee56 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800ee3a:	4b3f      	ldr	r3, [pc, #252]	@ (800ef38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ee3c:	68db      	ldr	r3, [r3, #12]
 800ee3e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	6819      	ldr	r1, [r3, #0]
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	685b      	ldr	r3, [r3, #4]
 800ee4a:	3b01      	subs	r3, #1
 800ee4c:	011b      	lsls	r3, r3, #4
 800ee4e:	430b      	orrs	r3, r1
 800ee50:	4939      	ldr	r1, [pc, #228]	@ (800ef38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ee52:	4313      	orrs	r3, r2
 800ee54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800ee56:	7bfb      	ldrb	r3, [r7, #15]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d167      	bne.n	800ef2c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800ee5c:	4b36      	ldr	r3, [pc, #216]	@ (800ef38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	4a35      	ldr	r2, [pc, #212]	@ (800ef38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ee62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ee66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ee68:	f7fc fd18 	bl	800b89c <HAL_GetTick>
 800ee6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800ee6e:	e009      	b.n	800ee84 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800ee70:	f7fc fd14 	bl	800b89c <HAL_GetTick>
 800ee74:	4602      	mov	r2, r0
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	1ad3      	subs	r3, r2, r3
 800ee7a:	2b02      	cmp	r3, #2
 800ee7c:	d902      	bls.n	800ee84 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800ee7e:	2303      	movs	r3, #3
 800ee80:	73fb      	strb	r3, [r7, #15]
        break;
 800ee82:	e005      	b.n	800ee90 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800ee84:	4b2c      	ldr	r3, [pc, #176]	@ (800ef38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d1ef      	bne.n	800ee70 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800ee90:	7bfb      	ldrb	r3, [r7, #15]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d14a      	bne.n	800ef2c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d111      	bne.n	800eec0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800ee9c:	4b26      	ldr	r3, [pc, #152]	@ (800ef38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ee9e:	695b      	ldr	r3, [r3, #20]
 800eea0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800eea4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eea8:	687a      	ldr	r2, [r7, #4]
 800eeaa:	6892      	ldr	r2, [r2, #8]
 800eeac:	0211      	lsls	r1, r2, #8
 800eeae:	687a      	ldr	r2, [r7, #4]
 800eeb0:	68d2      	ldr	r2, [r2, #12]
 800eeb2:	0912      	lsrs	r2, r2, #4
 800eeb4:	0452      	lsls	r2, r2, #17
 800eeb6:	430a      	orrs	r2, r1
 800eeb8:	491f      	ldr	r1, [pc, #124]	@ (800ef38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800eeba:	4313      	orrs	r3, r2
 800eebc:	614b      	str	r3, [r1, #20]
 800eebe:	e011      	b.n	800eee4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800eec0:	4b1d      	ldr	r3, [pc, #116]	@ (800ef38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800eec2:	695b      	ldr	r3, [r3, #20]
 800eec4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800eec8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800eecc:	687a      	ldr	r2, [r7, #4]
 800eece:	6892      	ldr	r2, [r2, #8]
 800eed0:	0211      	lsls	r1, r2, #8
 800eed2:	687a      	ldr	r2, [r7, #4]
 800eed4:	6912      	ldr	r2, [r2, #16]
 800eed6:	0852      	lsrs	r2, r2, #1
 800eed8:	3a01      	subs	r2, #1
 800eeda:	0652      	lsls	r2, r2, #25
 800eedc:	430a      	orrs	r2, r1
 800eede:	4916      	ldr	r1, [pc, #88]	@ (800ef38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800eee0:	4313      	orrs	r3, r2
 800eee2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800eee4:	4b14      	ldr	r3, [pc, #80]	@ (800ef38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	4a13      	ldr	r2, [pc, #76]	@ (800ef38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800eeea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eeee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eef0:	f7fc fcd4 	bl	800b89c <HAL_GetTick>
 800eef4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800eef6:	e009      	b.n	800ef0c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800eef8:	f7fc fcd0 	bl	800b89c <HAL_GetTick>
 800eefc:	4602      	mov	r2, r0
 800eefe:	68bb      	ldr	r3, [r7, #8]
 800ef00:	1ad3      	subs	r3, r2, r3
 800ef02:	2b02      	cmp	r3, #2
 800ef04:	d902      	bls.n	800ef0c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800ef06:	2303      	movs	r3, #3
 800ef08:	73fb      	strb	r3, [r7, #15]
          break;
 800ef0a:	e005      	b.n	800ef18 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800ef0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ef38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d0ef      	beq.n	800eef8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800ef18:	7bfb      	ldrb	r3, [r7, #15]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d106      	bne.n	800ef2c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800ef1e:	4b06      	ldr	r3, [pc, #24]	@ (800ef38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ef20:	695a      	ldr	r2, [r3, #20]
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	695b      	ldr	r3, [r3, #20]
 800ef26:	4904      	ldr	r1, [pc, #16]	@ (800ef38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ef28:	4313      	orrs	r3, r2
 800ef2a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800ef2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef2e:	4618      	mov	r0, r3
 800ef30:	3710      	adds	r7, #16
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}
 800ef36:	bf00      	nop
 800ef38:	40021000 	.word	0x40021000

0800ef3c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b084      	sub	sp, #16
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ef44:	2301      	movs	r3, #1
 800ef46:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d079      	beq.n	800f042 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800ef54:	b2db      	uxtb	r3, r3
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d106      	bne.n	800ef68 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	f7f2 fa9c 	bl	80014a0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2202      	movs	r2, #2
 800ef6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	68db      	ldr	r3, [r3, #12]
 800ef76:	f003 0310 	and.w	r3, r3, #16
 800ef7a:	2b10      	cmp	r3, #16
 800ef7c:	d058      	beq.n	800f030 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	22ca      	movs	r2, #202	@ 0xca
 800ef84:	625a      	str	r2, [r3, #36]	@ 0x24
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	2253      	movs	r2, #83	@ 0x53
 800ef8c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f000 f9a4 	bl	800f2dc <RTC_EnterInitMode>
 800ef94:	4603      	mov	r3, r0
 800ef96:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800ef98:	7bfb      	ldrb	r3, [r7, #15]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d127      	bne.n	800efee <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	689b      	ldr	r3, [r3, #8]
 800efa4:	687a      	ldr	r2, [r7, #4]
 800efa6:	6812      	ldr	r2, [r2, #0]
 800efa8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800efac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800efb0:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	6899      	ldr	r1, [r3, #8]
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	685a      	ldr	r2, [r3, #4]
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	691b      	ldr	r3, [r3, #16]
 800efc0:	431a      	orrs	r2, r3
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	699b      	ldr	r3, [r3, #24]
 800efc6:	431a      	orrs	r2, r3
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	430a      	orrs	r2, r1
 800efce:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	687a      	ldr	r2, [r7, #4]
 800efd6:	68d2      	ldr	r2, [r2, #12]
 800efd8:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	6919      	ldr	r1, [r3, #16]
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	689b      	ldr	r3, [r3, #8]
 800efe4:	041a      	lsls	r2, r3, #16
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	430a      	orrs	r2, r1
 800efec:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f000 f9a8 	bl	800f344 <RTC_ExitInitMode>
 800eff4:	4603      	mov	r3, r0
 800eff6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800eff8:	7bfb      	ldrb	r3, [r7, #15]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d113      	bne.n	800f026 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	f022 0203 	bic.w	r2, r2, #3
 800f00c:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	69da      	ldr	r2, [r3, #28]
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	695b      	ldr	r3, [r3, #20]
 800f01c:	431a      	orrs	r2, r3
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	430a      	orrs	r2, r1
 800f024:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	22ff      	movs	r2, #255	@ 0xff
 800f02c:	625a      	str	r2, [r3, #36]	@ 0x24
 800f02e:	e001      	b.n	800f034 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800f030:	2300      	movs	r3, #0
 800f032:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800f034:	7bfb      	ldrb	r3, [r7, #15]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d103      	bne.n	800f042 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2201      	movs	r2, #1
 800f03e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 800f042:	7bfb      	ldrb	r3, [r7, #15]
}
 800f044:	4618      	mov	r0, r3
 800f046:	3710      	adds	r7, #16
 800f048:	46bd      	mov	sp, r7
 800f04a:	bd80      	pop	{r7, pc}

0800f04c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800f04c:	b590      	push	{r4, r7, lr}
 800f04e:	b087      	sub	sp, #28
 800f050:	af00      	add	r7, sp, #0
 800f052:	60f8      	str	r0, [r7, #12]
 800f054:	60b9      	str	r1, [r7, #8]
 800f056:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f05e:	2b01      	cmp	r3, #1
 800f060:	d101      	bne.n	800f066 <HAL_RTC_SetTime+0x1a>
 800f062:	2302      	movs	r3, #2
 800f064:	e08b      	b.n	800f17e <HAL_RTC_SetTime+0x132>
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	2201      	movs	r2, #1
 800f06a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	2202      	movs	r2, #2
 800f072:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	22ca      	movs	r2, #202	@ 0xca
 800f07c:	625a      	str	r2, [r3, #36]	@ 0x24
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	2253      	movs	r2, #83	@ 0x53
 800f084:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800f086:	68f8      	ldr	r0, [r7, #12]
 800f088:	f000 f928 	bl	800f2dc <RTC_EnterInitMode>
 800f08c:	4603      	mov	r3, r0
 800f08e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800f090:	7cfb      	ldrb	r3, [r7, #19]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d163      	bne.n	800f15e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d126      	bne.n	800f0ea <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	689b      	ldr	r3, [r3, #8]
 800f0a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d102      	bne.n	800f0b0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	781b      	ldrb	r3, [r3, #0]
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f000 f983 	bl	800f3c0 <RTC_ByteToBcd2>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	785b      	ldrb	r3, [r3, #1]
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f000 f97c 	bl	800f3c0 <RTC_ByteToBcd2>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800f0cc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	789b      	ldrb	r3, [r3, #2]
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f000 f974 	bl	800f3c0 <RTC_ByteToBcd2>
 800f0d8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f0da:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	78db      	ldrb	r3, [r3, #3]
 800f0e2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800f0e4:	4313      	orrs	r3, r2
 800f0e6:	617b      	str	r3, [r7, #20]
 800f0e8:	e018      	b.n	800f11c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	689b      	ldr	r3, [r3, #8]
 800f0f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d102      	bne.n	800f0fe <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800f0fe:	68bb      	ldr	r3, [r7, #8]
 800f100:	781b      	ldrb	r3, [r3, #0]
 800f102:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	785b      	ldrb	r3, [r3, #1]
 800f108:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800f10a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800f10c:	68ba      	ldr	r2, [r7, #8]
 800f10e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f110:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	78db      	ldrb	r3, [r3, #3]
 800f116:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800f118:	4313      	orrs	r3, r2
 800f11a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	681a      	ldr	r2, [r3, #0]
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800f126:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800f12a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	689a      	ldr	r2, [r3, #8]
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800f13a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	6899      	ldr	r1, [r3, #8]
 800f142:	68bb      	ldr	r3, [r7, #8]
 800f144:	68da      	ldr	r2, [r3, #12]
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	691b      	ldr	r3, [r3, #16]
 800f14a:	431a      	orrs	r2, r3
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	430a      	orrs	r2, r1
 800f152:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800f154:	68f8      	ldr	r0, [r7, #12]
 800f156:	f000 f8f5 	bl	800f344 <RTC_ExitInitMode>
 800f15a:	4603      	mov	r3, r0
 800f15c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	22ff      	movs	r2, #255	@ 0xff
 800f164:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800f166:	7cfb      	ldrb	r3, [r7, #19]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d103      	bne.n	800f174 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	2201      	movs	r2, #1
 800f170:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	2200      	movs	r2, #0
 800f178:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800f17c:	7cfb      	ldrb	r3, [r7, #19]
}
 800f17e:	4618      	mov	r0, r3
 800f180:	371c      	adds	r7, #28
 800f182:	46bd      	mov	sp, r7
 800f184:	bd90      	pop	{r4, r7, pc}

0800f186 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800f186:	b590      	push	{r4, r7, lr}
 800f188:	b087      	sub	sp, #28
 800f18a:	af00      	add	r7, sp, #0
 800f18c:	60f8      	str	r0, [r7, #12]
 800f18e:	60b9      	str	r1, [r7, #8]
 800f190:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f198:	2b01      	cmp	r3, #1
 800f19a:	d101      	bne.n	800f1a0 <HAL_RTC_SetDate+0x1a>
 800f19c:	2302      	movs	r3, #2
 800f19e:	e075      	b.n	800f28c <HAL_RTC_SetDate+0x106>
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	2201      	movs	r2, #1
 800f1a4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	2202      	movs	r2, #2
 800f1ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d10e      	bne.n	800f1d4 <HAL_RTC_SetDate+0x4e>
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	785b      	ldrb	r3, [r3, #1]
 800f1ba:	f003 0310 	and.w	r3, r3, #16
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d008      	beq.n	800f1d4 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800f1c2:	68bb      	ldr	r3, [r7, #8]
 800f1c4:	785b      	ldrb	r3, [r3, #1]
 800f1c6:	f023 0310 	bic.w	r3, r3, #16
 800f1ca:	b2db      	uxtb	r3, r3
 800f1cc:	330a      	adds	r3, #10
 800f1ce:	b2da      	uxtb	r2, r3
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d11c      	bne.n	800f214 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	78db      	ldrb	r3, [r3, #3]
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f000 f8ee 	bl	800f3c0 <RTC_ByteToBcd2>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	785b      	ldrb	r3, [r3, #1]
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f000 f8e7 	bl	800f3c0 <RTC_ByteToBcd2>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800f1f6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	789b      	ldrb	r3, [r3, #2]
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f000 f8df 	bl	800f3c0 <RTC_ByteToBcd2>
 800f202:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800f204:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	781b      	ldrb	r3, [r3, #0]
 800f20c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800f20e:	4313      	orrs	r3, r2
 800f210:	617b      	str	r3, [r7, #20]
 800f212:	e00e      	b.n	800f232 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	78db      	ldrb	r3, [r3, #3]
 800f218:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	785b      	ldrb	r3, [r3, #1]
 800f21e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800f220:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800f222:	68ba      	ldr	r2, [r7, #8]
 800f224:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800f226:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	781b      	ldrb	r3, [r3, #0]
 800f22c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800f22e:	4313      	orrs	r3, r2
 800f230:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	22ca      	movs	r2, #202	@ 0xca
 800f238:	625a      	str	r2, [r3, #36]	@ 0x24
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	2253      	movs	r2, #83	@ 0x53
 800f240:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800f242:	68f8      	ldr	r0, [r7, #12]
 800f244:	f000 f84a 	bl	800f2dc <RTC_EnterInitMode>
 800f248:	4603      	mov	r3, r0
 800f24a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800f24c:	7cfb      	ldrb	r3, [r7, #19]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d10c      	bne.n	800f26c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	681a      	ldr	r2, [r3, #0]
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f25c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800f260:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800f262:	68f8      	ldr	r0, [r7, #12]
 800f264:	f000 f86e 	bl	800f344 <RTC_ExitInitMode>
 800f268:	4603      	mov	r3, r0
 800f26a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	22ff      	movs	r2, #255	@ 0xff
 800f272:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800f274:	7cfb      	ldrb	r3, [r7, #19]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d103      	bne.n	800f282 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	2201      	movs	r2, #1
 800f27e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	2200      	movs	r2, #0
 800f286:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800f28a:	7cfb      	ldrb	r3, [r7, #19]
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	371c      	adds	r7, #28
 800f290:	46bd      	mov	sp, r7
 800f292:	bd90      	pop	{r4, r7, pc}

0800f294 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b084      	sub	sp, #16
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	4a0d      	ldr	r2, [pc, #52]	@ (800f2d8 <HAL_RTC_WaitForSynchro+0x44>)
 800f2a2:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800f2a4:	f7fc fafa 	bl	800b89c <HAL_GetTick>
 800f2a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800f2aa:	e009      	b.n	800f2c0 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800f2ac:	f7fc faf6 	bl	800b89c <HAL_GetTick>
 800f2b0:	4602      	mov	r2, r0
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	1ad3      	subs	r3, r2, r3
 800f2b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f2ba:	d901      	bls.n	800f2c0 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800f2bc:	2303      	movs	r3, #3
 800f2be:	e007      	b.n	800f2d0 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	68db      	ldr	r3, [r3, #12]
 800f2c6:	f003 0320 	and.w	r3, r3, #32
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d0ee      	beq.n	800f2ac <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800f2ce:	2300      	movs	r3, #0
}
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	3710      	adds	r7, #16
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}
 800f2d8:	0003ff5f 	.word	0x0003ff5f

0800f2dc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b084      	sub	sp, #16
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	68db      	ldr	r3, [r3, #12]
 800f2ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d120      	bne.n	800f338 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	f04f 32ff 	mov.w	r2, #4294967295
 800f2fe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800f300:	f7fc facc 	bl	800b89c <HAL_GetTick>
 800f304:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800f306:	e00d      	b.n	800f324 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800f308:	f7fc fac8 	bl	800b89c <HAL_GetTick>
 800f30c:	4602      	mov	r2, r0
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	1ad3      	subs	r3, r2, r3
 800f312:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f316:	d905      	bls.n	800f324 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800f318:	2303      	movs	r3, #3
 800f31a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2203      	movs	r2, #3
 800f320:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	68db      	ldr	r3, [r3, #12]
 800f32a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d102      	bne.n	800f338 <RTC_EnterInitMode+0x5c>
 800f332:	7bfb      	ldrb	r3, [r7, #15]
 800f334:	2b03      	cmp	r3, #3
 800f336:	d1e7      	bne.n	800f308 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800f338:	7bfb      	ldrb	r3, [r7, #15]
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3710      	adds	r7, #16
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}
	...

0800f344 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b084      	sub	sp, #16
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f34c:	2300      	movs	r3, #0
 800f34e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800f350:	4b1a      	ldr	r3, [pc, #104]	@ (800f3bc <RTC_ExitInitMode+0x78>)
 800f352:	68db      	ldr	r3, [r3, #12]
 800f354:	4a19      	ldr	r2, [pc, #100]	@ (800f3bc <RTC_ExitInitMode+0x78>)
 800f356:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f35a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800f35c:	4b17      	ldr	r3, [pc, #92]	@ (800f3bc <RTC_ExitInitMode+0x78>)
 800f35e:	689b      	ldr	r3, [r3, #8]
 800f360:	f003 0320 	and.w	r3, r3, #32
 800f364:	2b00      	cmp	r3, #0
 800f366:	d10c      	bne.n	800f382 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	f7ff ff93 	bl	800f294 <HAL_RTC_WaitForSynchro>
 800f36e:	4603      	mov	r3, r0
 800f370:	2b00      	cmp	r3, #0
 800f372:	d01e      	beq.n	800f3b2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2203      	movs	r2, #3
 800f378:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800f37c:	2303      	movs	r3, #3
 800f37e:	73fb      	strb	r3, [r7, #15]
 800f380:	e017      	b.n	800f3b2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800f382:	4b0e      	ldr	r3, [pc, #56]	@ (800f3bc <RTC_ExitInitMode+0x78>)
 800f384:	689b      	ldr	r3, [r3, #8]
 800f386:	4a0d      	ldr	r2, [pc, #52]	@ (800f3bc <RTC_ExitInitMode+0x78>)
 800f388:	f023 0320 	bic.w	r3, r3, #32
 800f38c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f7ff ff80 	bl	800f294 <HAL_RTC_WaitForSynchro>
 800f394:	4603      	mov	r3, r0
 800f396:	2b00      	cmp	r3, #0
 800f398:	d005      	beq.n	800f3a6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	2203      	movs	r2, #3
 800f39e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800f3a2:	2303      	movs	r3, #3
 800f3a4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800f3a6:	4b05      	ldr	r3, [pc, #20]	@ (800f3bc <RTC_ExitInitMode+0x78>)
 800f3a8:	689b      	ldr	r3, [r3, #8]
 800f3aa:	4a04      	ldr	r2, [pc, #16]	@ (800f3bc <RTC_ExitInitMode+0x78>)
 800f3ac:	f043 0320 	orr.w	r3, r3, #32
 800f3b0:	6093      	str	r3, [r2, #8]
  }

  return status;
 800f3b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3710      	adds	r7, #16
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}
 800f3bc:	40002800 	.word	0x40002800

0800f3c0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800f3c0:	b480      	push	{r7}
 800f3c2:	b085      	sub	sp, #20
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800f3ce:	79fb      	ldrb	r3, [r7, #7]
 800f3d0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800f3d2:	e005      	b.n	800f3e0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	3301      	adds	r3, #1
 800f3d8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800f3da:	7afb      	ldrb	r3, [r7, #11]
 800f3dc:	3b0a      	subs	r3, #10
 800f3de:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800f3e0:	7afb      	ldrb	r3, [r7, #11]
 800f3e2:	2b09      	cmp	r3, #9
 800f3e4:	d8f6      	bhi.n	800f3d4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	b2db      	uxtb	r3, r3
 800f3ea:	011b      	lsls	r3, r3, #4
 800f3ec:	b2da      	uxtb	r2, r3
 800f3ee:	7afb      	ldrb	r3, [r7, #11]
 800f3f0:	4313      	orrs	r3, r2
 800f3f2:	b2db      	uxtb	r3, r3
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	3714      	adds	r7, #20
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fe:	4770      	bx	lr

0800f400 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b084      	sub	sp, #16
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d101      	bne.n	800f412 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f40e:	2301      	movs	r3, #1
 800f410:	e095      	b.n	800f53e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f416:	2b00      	cmp	r3, #0
 800f418:	d108      	bne.n	800f42c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	685b      	ldr	r3, [r3, #4]
 800f41e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f422:	d009      	beq.n	800f438 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2200      	movs	r2, #0
 800f428:	61da      	str	r2, [r3, #28]
 800f42a:	e005      	b.n	800f438 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2200      	movs	r2, #0
 800f430:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2200      	movs	r2, #0
 800f436:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2200      	movs	r2, #0
 800f43c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f444:	b2db      	uxtb	r3, r3
 800f446:	2b00      	cmp	r3, #0
 800f448:	d106      	bne.n	800f458 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2200      	movs	r2, #0
 800f44e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f7f2 f856 	bl	8001504 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2202      	movs	r2, #2
 800f45c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	681a      	ldr	r2, [r3, #0]
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f46e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	68db      	ldr	r3, [r3, #12]
 800f474:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f478:	d902      	bls.n	800f480 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800f47a:	2300      	movs	r3, #0
 800f47c:	60fb      	str	r3, [r7, #12]
 800f47e:	e002      	b.n	800f486 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800f480:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f484:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	68db      	ldr	r3, [r3, #12]
 800f48a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800f48e:	d007      	beq.n	800f4a0 <HAL_SPI_Init+0xa0>
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	68db      	ldr	r3, [r3, #12]
 800f494:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f498:	d002      	beq.n	800f4a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2200      	movs	r2, #0
 800f49e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	685b      	ldr	r3, [r3, #4]
 800f4a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	689b      	ldr	r3, [r3, #8]
 800f4ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800f4b0:	431a      	orrs	r2, r3
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	691b      	ldr	r3, [r3, #16]
 800f4b6:	f003 0302 	and.w	r3, r3, #2
 800f4ba:	431a      	orrs	r2, r3
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	695b      	ldr	r3, [r3, #20]
 800f4c0:	f003 0301 	and.w	r3, r3, #1
 800f4c4:	431a      	orrs	r2, r3
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	699b      	ldr	r3, [r3, #24]
 800f4ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f4ce:	431a      	orrs	r2, r3
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	69db      	ldr	r3, [r3, #28]
 800f4d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f4d8:	431a      	orrs	r2, r3
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6a1b      	ldr	r3, [r3, #32]
 800f4de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f4e2:	ea42 0103 	orr.w	r1, r2, r3
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4ea:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	430a      	orrs	r2, r1
 800f4f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	699b      	ldr	r3, [r3, #24]
 800f4fa:	0c1b      	lsrs	r3, r3, #16
 800f4fc:	f003 0204 	and.w	r2, r3, #4
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f504:	f003 0310 	and.w	r3, r3, #16
 800f508:	431a      	orrs	r2, r3
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f50e:	f003 0308 	and.w	r3, r3, #8
 800f512:	431a      	orrs	r2, r3
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	68db      	ldr	r3, [r3, #12]
 800f518:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800f51c:	ea42 0103 	orr.w	r1, r2, r3
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	430a      	orrs	r2, r1
 800f52c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2200      	movs	r2, #0
 800f532:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2201      	movs	r2, #1
 800f538:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800f53c:	2300      	movs	r3, #0
}
 800f53e:	4618      	mov	r0, r3
 800f540:	3710      	adds	r7, #16
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}
	...

0800f548 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b088      	sub	sp, #32
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	685b      	ldr	r3, [r3, #4]
 800f556:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	689b      	ldr	r3, [r3, #8]
 800f55e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f560:	69bb      	ldr	r3, [r7, #24]
 800f562:	099b      	lsrs	r3, r3, #6
 800f564:	f003 0301 	and.w	r3, r3, #1
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d10f      	bne.n	800f58c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f56c:	69bb      	ldr	r3, [r7, #24]
 800f56e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f572:	2b00      	cmp	r3, #0
 800f574:	d00a      	beq.n	800f58c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f576:	69fb      	ldr	r3, [r7, #28]
 800f578:	099b      	lsrs	r3, r3, #6
 800f57a:	f003 0301 	and.w	r3, r3, #1
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d004      	beq.n	800f58c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	4798      	blx	r3
    return;
 800f58a:	e0d7      	b.n	800f73c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800f58c:	69bb      	ldr	r3, [r7, #24]
 800f58e:	085b      	lsrs	r3, r3, #1
 800f590:	f003 0301 	and.w	r3, r3, #1
 800f594:	2b00      	cmp	r3, #0
 800f596:	d00a      	beq.n	800f5ae <HAL_SPI_IRQHandler+0x66>
 800f598:	69fb      	ldr	r3, [r7, #28]
 800f59a:	09db      	lsrs	r3, r3, #7
 800f59c:	f003 0301 	and.w	r3, r3, #1
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d004      	beq.n	800f5ae <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f5a8:	6878      	ldr	r0, [r7, #4]
 800f5aa:	4798      	blx	r3
    return;
 800f5ac:	e0c6      	b.n	800f73c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f5ae:	69bb      	ldr	r3, [r7, #24]
 800f5b0:	095b      	lsrs	r3, r3, #5
 800f5b2:	f003 0301 	and.w	r3, r3, #1
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d10c      	bne.n	800f5d4 <HAL_SPI_IRQHandler+0x8c>
 800f5ba:	69bb      	ldr	r3, [r7, #24]
 800f5bc:	099b      	lsrs	r3, r3, #6
 800f5be:	f003 0301 	and.w	r3, r3, #1
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d106      	bne.n	800f5d4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800f5c6:	69bb      	ldr	r3, [r7, #24]
 800f5c8:	0a1b      	lsrs	r3, r3, #8
 800f5ca:	f003 0301 	and.w	r3, r3, #1
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	f000 80b4 	beq.w	800f73c <HAL_SPI_IRQHandler+0x1f4>
 800f5d4:	69fb      	ldr	r3, [r7, #28]
 800f5d6:	095b      	lsrs	r3, r3, #5
 800f5d8:	f003 0301 	and.w	r3, r3, #1
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	f000 80ad 	beq.w	800f73c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f5e2:	69bb      	ldr	r3, [r7, #24]
 800f5e4:	099b      	lsrs	r3, r3, #6
 800f5e6:	f003 0301 	and.w	r3, r3, #1
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d023      	beq.n	800f636 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f5f4:	b2db      	uxtb	r3, r3
 800f5f6:	2b03      	cmp	r3, #3
 800f5f8:	d011      	beq.n	800f61e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f5fe:	f043 0204 	orr.w	r2, r3, #4
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f606:	2300      	movs	r3, #0
 800f608:	617b      	str	r3, [r7, #20]
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	68db      	ldr	r3, [r3, #12]
 800f610:	617b      	str	r3, [r7, #20]
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	689b      	ldr	r3, [r3, #8]
 800f618:	617b      	str	r3, [r7, #20]
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	e00b      	b.n	800f636 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f61e:	2300      	movs	r3, #0
 800f620:	613b      	str	r3, [r7, #16]
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	68db      	ldr	r3, [r3, #12]
 800f628:	613b      	str	r3, [r7, #16]
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	689b      	ldr	r3, [r3, #8]
 800f630:	613b      	str	r3, [r7, #16]
 800f632:	693b      	ldr	r3, [r7, #16]
        return;
 800f634:	e082      	b.n	800f73c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800f636:	69bb      	ldr	r3, [r7, #24]
 800f638:	095b      	lsrs	r3, r3, #5
 800f63a:	f003 0301 	and.w	r3, r3, #1
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d014      	beq.n	800f66c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f646:	f043 0201 	orr.w	r2, r3, #1
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f64e:	2300      	movs	r3, #0
 800f650:	60fb      	str	r3, [r7, #12]
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	689b      	ldr	r3, [r3, #8]
 800f658:	60fb      	str	r3, [r7, #12]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	681a      	ldr	r2, [r3, #0]
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f668:	601a      	str	r2, [r3, #0]
 800f66a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800f66c:	69bb      	ldr	r3, [r7, #24]
 800f66e:	0a1b      	lsrs	r3, r3, #8
 800f670:	f003 0301 	and.w	r3, r3, #1
 800f674:	2b00      	cmp	r3, #0
 800f676:	d00c      	beq.n	800f692 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f67c:	f043 0208 	orr.w	r2, r3, #8
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f684:	2300      	movs	r3, #0
 800f686:	60bb      	str	r3, [r7, #8]
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	689b      	ldr	r3, [r3, #8]
 800f68e:	60bb      	str	r3, [r7, #8]
 800f690:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f696:	2b00      	cmp	r3, #0
 800f698:	d04f      	beq.n	800f73a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	685a      	ldr	r2, [r3, #4]
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f6a8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	2201      	movs	r2, #1
 800f6ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800f6b2:	69fb      	ldr	r3, [r7, #28]
 800f6b4:	f003 0302 	and.w	r3, r3, #2
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d104      	bne.n	800f6c6 <HAL_SPI_IRQHandler+0x17e>
 800f6bc:	69fb      	ldr	r3, [r7, #28]
 800f6be:	f003 0301 	and.w	r3, r3, #1
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d034      	beq.n	800f730 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	685a      	ldr	r2, [r3, #4]
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	f022 0203 	bic.w	r2, r2, #3
 800f6d4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d011      	beq.n	800f702 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f6e2:	4a18      	ldr	r2, [pc, #96]	@ (800f744 <HAL_SPI_IRQHandler+0x1fc>)
 800f6e4:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f7fc fc00 	bl	800bef0 <HAL_DMA_Abort_IT>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d005      	beq.n	800f702 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f6fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f706:	2b00      	cmp	r3, #0
 800f708:	d016      	beq.n	800f738 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f70e:	4a0d      	ldr	r2, [pc, #52]	@ (800f744 <HAL_SPI_IRQHandler+0x1fc>)
 800f710:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f716:	4618      	mov	r0, r3
 800f718:	f7fc fbea 	bl	800bef0 <HAL_DMA_Abort_IT>
 800f71c:	4603      	mov	r3, r0
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d00a      	beq.n	800f738 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f726:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800f72e:	e003      	b.n	800f738 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f000 f809 	bl	800f748 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800f736:	e000      	b.n	800f73a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800f738:	bf00      	nop
    return;
 800f73a:	bf00      	nop
  }
}
 800f73c:	3720      	adds	r7, #32
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}
 800f742:	bf00      	nop
 800f744:	0800f75d 	.word	0x0800f75d

0800f748 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800f748:	b480      	push	{r7}
 800f74a:	b083      	sub	sp, #12
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800f750:	bf00      	nop
 800f752:	370c      	adds	r7, #12
 800f754:	46bd      	mov	sp, r7
 800f756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75a:	4770      	bx	lr

0800f75c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b084      	sub	sp, #16
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f768:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	2200      	movs	r2, #0
 800f76e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	2200      	movs	r2, #0
 800f776:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f778:	68f8      	ldr	r0, [r7, #12]
 800f77a:	f7ff ffe5 	bl	800f748 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f77e:	bf00      	nop
 800f780:	3710      	adds	r7, #16
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}

0800f786 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f786:	b580      	push	{r7, lr}
 800f788:	b082      	sub	sp, #8
 800f78a:	af00      	add	r7, sp, #0
 800f78c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d101      	bne.n	800f798 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f794:	2301      	movs	r3, #1
 800f796:	e049      	b.n	800f82c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f79e:	b2db      	uxtb	r3, r3
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d106      	bne.n	800f7b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f7f1 fef5 	bl	800159c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2202      	movs	r2, #2
 800f7b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681a      	ldr	r2, [r3, #0]
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	3304      	adds	r3, #4
 800f7c2:	4619      	mov	r1, r3
 800f7c4:	4610      	mov	r0, r2
 800f7c6:	f000 fa37 	bl	800fc38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2201      	movs	r2, #1
 800f7ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	2201      	movs	r2, #1
 800f7d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	2201      	movs	r2, #1
 800f7de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	2201      	movs	r2, #1
 800f7e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	2201      	movs	r2, #1
 800f7ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2201      	movs	r2, #1
 800f7f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	2201      	movs	r2, #1
 800f7fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	2201      	movs	r2, #1
 800f806:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	2201      	movs	r2, #1
 800f80e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	2201      	movs	r2, #1
 800f816:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	2201      	movs	r2, #1
 800f81e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2201      	movs	r2, #1
 800f826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f82a:	2300      	movs	r3, #0
}
 800f82c:	4618      	mov	r0, r3
 800f82e:	3708      	adds	r7, #8
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}

0800f834 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b084      	sub	sp, #16
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	68db      	ldr	r3, [r3, #12]
 800f842:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	691b      	ldr	r3, [r3, #16]
 800f84a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	f003 0302 	and.w	r3, r3, #2
 800f852:	2b00      	cmp	r3, #0
 800f854:	d020      	beq.n	800f898 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	f003 0302 	and.w	r3, r3, #2
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d01b      	beq.n	800f898 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	f06f 0202 	mvn.w	r2, #2
 800f868:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	2201      	movs	r2, #1
 800f86e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	699b      	ldr	r3, [r3, #24]
 800f876:	f003 0303 	and.w	r3, r3, #3
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d003      	beq.n	800f886 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f000 f9bc 	bl	800fbfc <HAL_TIM_IC_CaptureCallback>
 800f884:	e005      	b.n	800f892 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f000 f9ae 	bl	800fbe8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f88c:	6878      	ldr	r0, [r7, #4]
 800f88e:	f000 f9bf 	bl	800fc10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2200      	movs	r2, #0
 800f896:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f898:	68bb      	ldr	r3, [r7, #8]
 800f89a:	f003 0304 	and.w	r3, r3, #4
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d020      	beq.n	800f8e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	f003 0304 	and.w	r3, r3, #4
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d01b      	beq.n	800f8e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	f06f 0204 	mvn.w	r2, #4
 800f8b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2202      	movs	r2, #2
 800f8ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	699b      	ldr	r3, [r3, #24]
 800f8c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d003      	beq.n	800f8d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f000 f996 	bl	800fbfc <HAL_TIM_IC_CaptureCallback>
 800f8d0:	e005      	b.n	800f8de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f8d2:	6878      	ldr	r0, [r7, #4]
 800f8d4:	f000 f988 	bl	800fbe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f000 f999 	bl	800fc10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f8e4:	68bb      	ldr	r3, [r7, #8]
 800f8e6:	f003 0308 	and.w	r3, r3, #8
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d020      	beq.n	800f930 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	f003 0308 	and.w	r3, r3, #8
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d01b      	beq.n	800f930 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	f06f 0208 	mvn.w	r2, #8
 800f900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2204      	movs	r2, #4
 800f906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	69db      	ldr	r3, [r3, #28]
 800f90e:	f003 0303 	and.w	r3, r3, #3
 800f912:	2b00      	cmp	r3, #0
 800f914:	d003      	beq.n	800f91e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f916:	6878      	ldr	r0, [r7, #4]
 800f918:	f000 f970 	bl	800fbfc <HAL_TIM_IC_CaptureCallback>
 800f91c:	e005      	b.n	800f92a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f000 f962 	bl	800fbe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f924:	6878      	ldr	r0, [r7, #4]
 800f926:	f000 f973 	bl	800fc10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	2200      	movs	r2, #0
 800f92e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	f003 0310 	and.w	r3, r3, #16
 800f936:	2b00      	cmp	r3, #0
 800f938:	d020      	beq.n	800f97c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	f003 0310 	and.w	r3, r3, #16
 800f940:	2b00      	cmp	r3, #0
 800f942:	d01b      	beq.n	800f97c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	f06f 0210 	mvn.w	r2, #16
 800f94c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	2208      	movs	r2, #8
 800f952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	69db      	ldr	r3, [r3, #28]
 800f95a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d003      	beq.n	800f96a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f962:	6878      	ldr	r0, [r7, #4]
 800f964:	f000 f94a 	bl	800fbfc <HAL_TIM_IC_CaptureCallback>
 800f968:	e005      	b.n	800f976 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f96a:	6878      	ldr	r0, [r7, #4]
 800f96c:	f000 f93c 	bl	800fbe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f000 f94d 	bl	800fc10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	2200      	movs	r2, #0
 800f97a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	f003 0301 	and.w	r3, r3, #1
 800f982:	2b00      	cmp	r3, #0
 800f984:	d00c      	beq.n	800f9a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	f003 0301 	and.w	r3, r3, #1
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d007      	beq.n	800f9a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	f06f 0201 	mvn.w	r2, #1
 800f998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f99a:	6878      	ldr	r0, [r7, #4]
 800f99c:	f000 f91a 	bl	800fbd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d104      	bne.n	800f9b4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f9aa:	68bb      	ldr	r3, [r7, #8]
 800f9ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d00c      	beq.n	800f9ce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d007      	beq.n	800f9ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800f9c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f9c8:	6878      	ldr	r0, [r7, #4]
 800f9ca:	f000 fb07 	bl	800ffdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f9ce:	68bb      	ldr	r3, [r7, #8]
 800f9d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d00c      	beq.n	800f9f2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d007      	beq.n	800f9f2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800f9ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f000 faff 	bl	800fff0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f9f2:	68bb      	ldr	r3, [r7, #8]
 800f9f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d00c      	beq.n	800fa16 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d007      	beq.n	800fa16 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800fa0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fa10:	6878      	ldr	r0, [r7, #4]
 800fa12:	f000 f907 	bl	800fc24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	f003 0320 	and.w	r3, r3, #32
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d00c      	beq.n	800fa3a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	f003 0320 	and.w	r3, r3, #32
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d007      	beq.n	800fa3a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	f06f 0220 	mvn.w	r2, #32
 800fa32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fa34:	6878      	ldr	r0, [r7, #4]
 800fa36:	f000 fac7 	bl	800ffc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fa3a:	bf00      	nop
 800fa3c:	3710      	adds	r7, #16
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd80      	pop	{r7, pc}

0800fa42 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fa42:	b580      	push	{r7, lr}
 800fa44:	b084      	sub	sp, #16
 800fa46:	af00      	add	r7, sp, #0
 800fa48:	6078      	str	r0, [r7, #4]
 800fa4a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fa56:	2b01      	cmp	r3, #1
 800fa58:	d101      	bne.n	800fa5e <HAL_TIM_ConfigClockSource+0x1c>
 800fa5a:	2302      	movs	r3, #2
 800fa5c:	e0b6      	b.n	800fbcc <HAL_TIM_ConfigClockSource+0x18a>
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2201      	movs	r2, #1
 800fa62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	2202      	movs	r2, #2
 800fa6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	689b      	ldr	r3, [r3, #8]
 800fa74:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fa76:	68bb      	ldr	r3, [r7, #8]
 800fa78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fa7c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800fa80:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fa88:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	68ba      	ldr	r2, [r7, #8]
 800fa90:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fa92:	683b      	ldr	r3, [r7, #0]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fa9a:	d03e      	beq.n	800fb1a <HAL_TIM_ConfigClockSource+0xd8>
 800fa9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800faa0:	f200 8087 	bhi.w	800fbb2 <HAL_TIM_ConfigClockSource+0x170>
 800faa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800faa8:	f000 8086 	beq.w	800fbb8 <HAL_TIM_ConfigClockSource+0x176>
 800faac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fab0:	d87f      	bhi.n	800fbb2 <HAL_TIM_ConfigClockSource+0x170>
 800fab2:	2b70      	cmp	r3, #112	@ 0x70
 800fab4:	d01a      	beq.n	800faec <HAL_TIM_ConfigClockSource+0xaa>
 800fab6:	2b70      	cmp	r3, #112	@ 0x70
 800fab8:	d87b      	bhi.n	800fbb2 <HAL_TIM_ConfigClockSource+0x170>
 800faba:	2b60      	cmp	r3, #96	@ 0x60
 800fabc:	d050      	beq.n	800fb60 <HAL_TIM_ConfigClockSource+0x11e>
 800fabe:	2b60      	cmp	r3, #96	@ 0x60
 800fac0:	d877      	bhi.n	800fbb2 <HAL_TIM_ConfigClockSource+0x170>
 800fac2:	2b50      	cmp	r3, #80	@ 0x50
 800fac4:	d03c      	beq.n	800fb40 <HAL_TIM_ConfigClockSource+0xfe>
 800fac6:	2b50      	cmp	r3, #80	@ 0x50
 800fac8:	d873      	bhi.n	800fbb2 <HAL_TIM_ConfigClockSource+0x170>
 800faca:	2b40      	cmp	r3, #64	@ 0x40
 800facc:	d058      	beq.n	800fb80 <HAL_TIM_ConfigClockSource+0x13e>
 800face:	2b40      	cmp	r3, #64	@ 0x40
 800fad0:	d86f      	bhi.n	800fbb2 <HAL_TIM_ConfigClockSource+0x170>
 800fad2:	2b30      	cmp	r3, #48	@ 0x30
 800fad4:	d064      	beq.n	800fba0 <HAL_TIM_ConfigClockSource+0x15e>
 800fad6:	2b30      	cmp	r3, #48	@ 0x30
 800fad8:	d86b      	bhi.n	800fbb2 <HAL_TIM_ConfigClockSource+0x170>
 800fada:	2b20      	cmp	r3, #32
 800fadc:	d060      	beq.n	800fba0 <HAL_TIM_ConfigClockSource+0x15e>
 800fade:	2b20      	cmp	r3, #32
 800fae0:	d867      	bhi.n	800fbb2 <HAL_TIM_ConfigClockSource+0x170>
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d05c      	beq.n	800fba0 <HAL_TIM_ConfigClockSource+0x15e>
 800fae6:	2b10      	cmp	r3, #16
 800fae8:	d05a      	beq.n	800fba0 <HAL_TIM_ConfigClockSource+0x15e>
 800faea:	e062      	b.n	800fbb2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fafc:	f000 f9bc 	bl	800fe78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	689b      	ldr	r3, [r3, #8]
 800fb06:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800fb0e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	68ba      	ldr	r2, [r7, #8]
 800fb16:	609a      	str	r2, [r3, #8]
      break;
 800fb18:	e04f      	b.n	800fbba <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fb2a:	f000 f9a5 	bl	800fe78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	689a      	ldr	r2, [r3, #8]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800fb3c:	609a      	str	r2, [r3, #8]
      break;
 800fb3e:	e03c      	b.n	800fbba <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fb4c:	461a      	mov	r2, r3
 800fb4e:	f000 f919 	bl	800fd84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	2150      	movs	r1, #80	@ 0x50
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f000 f972 	bl	800fe42 <TIM_ITRx_SetConfig>
      break;
 800fb5e:	e02c      	b.n	800fbba <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fb64:	683b      	ldr	r3, [r7, #0]
 800fb66:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fb68:	683b      	ldr	r3, [r7, #0]
 800fb6a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fb6c:	461a      	mov	r2, r3
 800fb6e:	f000 f938 	bl	800fde2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	2160      	movs	r1, #96	@ 0x60
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f000 f962 	bl	800fe42 <TIM_ITRx_SetConfig>
      break;
 800fb7e:	e01c      	b.n	800fbba <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fb84:	683b      	ldr	r3, [r7, #0]
 800fb86:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fb8c:	461a      	mov	r2, r3
 800fb8e:	f000 f8f9 	bl	800fd84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	2140      	movs	r1, #64	@ 0x40
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f000 f952 	bl	800fe42 <TIM_ITRx_SetConfig>
      break;
 800fb9e:	e00c      	b.n	800fbba <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681a      	ldr	r2, [r3, #0]
 800fba4:	683b      	ldr	r3, [r7, #0]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	4619      	mov	r1, r3
 800fbaa:	4610      	mov	r0, r2
 800fbac:	f000 f949 	bl	800fe42 <TIM_ITRx_SetConfig>
      break;
 800fbb0:	e003      	b.n	800fbba <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	73fb      	strb	r3, [r7, #15]
      break;
 800fbb6:	e000      	b.n	800fbba <HAL_TIM_ConfigClockSource+0x178>
      break;
 800fbb8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	2201      	movs	r2, #1
 800fbbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800fbca:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbcc:	4618      	mov	r0, r3
 800fbce:	3710      	adds	r7, #16
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	bd80      	pop	{r7, pc}

0800fbd4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fbd4:	b480      	push	{r7}
 800fbd6:	b083      	sub	sp, #12
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800fbdc:	bf00      	nop
 800fbde:	370c      	adds	r7, #12
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe6:	4770      	bx	lr

0800fbe8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fbe8:	b480      	push	{r7}
 800fbea:	b083      	sub	sp, #12
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fbf0:	bf00      	nop
 800fbf2:	370c      	adds	r7, #12
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfa:	4770      	bx	lr

0800fbfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fbfc:	b480      	push	{r7}
 800fbfe:	b083      	sub	sp, #12
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fc04:	bf00      	nop
 800fc06:	370c      	adds	r7, #12
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0e:	4770      	bx	lr

0800fc10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fc10:	b480      	push	{r7}
 800fc12:	b083      	sub	sp, #12
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fc18:	bf00      	nop
 800fc1a:	370c      	adds	r7, #12
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc22:	4770      	bx	lr

0800fc24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fc24:	b480      	push	{r7}
 800fc26:	b083      	sub	sp, #12
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fc2c:	bf00      	nop
 800fc2e:	370c      	adds	r7, #12
 800fc30:	46bd      	mov	sp, r7
 800fc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc36:	4770      	bx	lr

0800fc38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fc38:	b480      	push	{r7}
 800fc3a:	b085      	sub	sp, #20
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
 800fc40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	4a46      	ldr	r2, [pc, #280]	@ (800fd64 <TIM_Base_SetConfig+0x12c>)
 800fc4c:	4293      	cmp	r3, r2
 800fc4e:	d013      	beq.n	800fc78 <TIM_Base_SetConfig+0x40>
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc56:	d00f      	beq.n	800fc78 <TIM_Base_SetConfig+0x40>
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	4a43      	ldr	r2, [pc, #268]	@ (800fd68 <TIM_Base_SetConfig+0x130>)
 800fc5c:	4293      	cmp	r3, r2
 800fc5e:	d00b      	beq.n	800fc78 <TIM_Base_SetConfig+0x40>
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	4a42      	ldr	r2, [pc, #264]	@ (800fd6c <TIM_Base_SetConfig+0x134>)
 800fc64:	4293      	cmp	r3, r2
 800fc66:	d007      	beq.n	800fc78 <TIM_Base_SetConfig+0x40>
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	4a41      	ldr	r2, [pc, #260]	@ (800fd70 <TIM_Base_SetConfig+0x138>)
 800fc6c:	4293      	cmp	r3, r2
 800fc6e:	d003      	beq.n	800fc78 <TIM_Base_SetConfig+0x40>
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	4a40      	ldr	r2, [pc, #256]	@ (800fd74 <TIM_Base_SetConfig+0x13c>)
 800fc74:	4293      	cmp	r3, r2
 800fc76:	d108      	bne.n	800fc8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fc7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fc80:	683b      	ldr	r3, [r7, #0]
 800fc82:	685b      	ldr	r3, [r3, #4]
 800fc84:	68fa      	ldr	r2, [r7, #12]
 800fc86:	4313      	orrs	r3, r2
 800fc88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	4a35      	ldr	r2, [pc, #212]	@ (800fd64 <TIM_Base_SetConfig+0x12c>)
 800fc8e:	4293      	cmp	r3, r2
 800fc90:	d01f      	beq.n	800fcd2 <TIM_Base_SetConfig+0x9a>
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc98:	d01b      	beq.n	800fcd2 <TIM_Base_SetConfig+0x9a>
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	4a32      	ldr	r2, [pc, #200]	@ (800fd68 <TIM_Base_SetConfig+0x130>)
 800fc9e:	4293      	cmp	r3, r2
 800fca0:	d017      	beq.n	800fcd2 <TIM_Base_SetConfig+0x9a>
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	4a31      	ldr	r2, [pc, #196]	@ (800fd6c <TIM_Base_SetConfig+0x134>)
 800fca6:	4293      	cmp	r3, r2
 800fca8:	d013      	beq.n	800fcd2 <TIM_Base_SetConfig+0x9a>
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	4a30      	ldr	r2, [pc, #192]	@ (800fd70 <TIM_Base_SetConfig+0x138>)
 800fcae:	4293      	cmp	r3, r2
 800fcb0:	d00f      	beq.n	800fcd2 <TIM_Base_SetConfig+0x9a>
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	4a2f      	ldr	r2, [pc, #188]	@ (800fd74 <TIM_Base_SetConfig+0x13c>)
 800fcb6:	4293      	cmp	r3, r2
 800fcb8:	d00b      	beq.n	800fcd2 <TIM_Base_SetConfig+0x9a>
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	4a2e      	ldr	r2, [pc, #184]	@ (800fd78 <TIM_Base_SetConfig+0x140>)
 800fcbe:	4293      	cmp	r3, r2
 800fcc0:	d007      	beq.n	800fcd2 <TIM_Base_SetConfig+0x9a>
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	4a2d      	ldr	r2, [pc, #180]	@ (800fd7c <TIM_Base_SetConfig+0x144>)
 800fcc6:	4293      	cmp	r3, r2
 800fcc8:	d003      	beq.n	800fcd2 <TIM_Base_SetConfig+0x9a>
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	4a2c      	ldr	r2, [pc, #176]	@ (800fd80 <TIM_Base_SetConfig+0x148>)
 800fcce:	4293      	cmp	r3, r2
 800fcd0:	d108      	bne.n	800fce4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fcd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	68db      	ldr	r3, [r3, #12]
 800fcde:	68fa      	ldr	r2, [r7, #12]
 800fce0:	4313      	orrs	r3, r2
 800fce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	695b      	ldr	r3, [r3, #20]
 800fcee:	4313      	orrs	r3, r2
 800fcf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	68fa      	ldr	r2, [r7, #12]
 800fcf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	689a      	ldr	r2, [r3, #8]
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	681a      	ldr	r2, [r3, #0]
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	4a16      	ldr	r2, [pc, #88]	@ (800fd64 <TIM_Base_SetConfig+0x12c>)
 800fd0c:	4293      	cmp	r3, r2
 800fd0e:	d00f      	beq.n	800fd30 <TIM_Base_SetConfig+0xf8>
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	4a18      	ldr	r2, [pc, #96]	@ (800fd74 <TIM_Base_SetConfig+0x13c>)
 800fd14:	4293      	cmp	r3, r2
 800fd16:	d00b      	beq.n	800fd30 <TIM_Base_SetConfig+0xf8>
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	4a17      	ldr	r2, [pc, #92]	@ (800fd78 <TIM_Base_SetConfig+0x140>)
 800fd1c:	4293      	cmp	r3, r2
 800fd1e:	d007      	beq.n	800fd30 <TIM_Base_SetConfig+0xf8>
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	4a16      	ldr	r2, [pc, #88]	@ (800fd7c <TIM_Base_SetConfig+0x144>)
 800fd24:	4293      	cmp	r3, r2
 800fd26:	d003      	beq.n	800fd30 <TIM_Base_SetConfig+0xf8>
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	4a15      	ldr	r2, [pc, #84]	@ (800fd80 <TIM_Base_SetConfig+0x148>)
 800fd2c:	4293      	cmp	r3, r2
 800fd2e:	d103      	bne.n	800fd38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	691a      	ldr	r2, [r3, #16]
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2201      	movs	r2, #1
 800fd3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	691b      	ldr	r3, [r3, #16]
 800fd42:	f003 0301 	and.w	r3, r3, #1
 800fd46:	2b01      	cmp	r3, #1
 800fd48:	d105      	bne.n	800fd56 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	691b      	ldr	r3, [r3, #16]
 800fd4e:	f023 0201 	bic.w	r2, r3, #1
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	611a      	str	r2, [r3, #16]
  }
}
 800fd56:	bf00      	nop
 800fd58:	3714      	adds	r7, #20
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd60:	4770      	bx	lr
 800fd62:	bf00      	nop
 800fd64:	40012c00 	.word	0x40012c00
 800fd68:	40000400 	.word	0x40000400
 800fd6c:	40000800 	.word	0x40000800
 800fd70:	40000c00 	.word	0x40000c00
 800fd74:	40013400 	.word	0x40013400
 800fd78:	40014000 	.word	0x40014000
 800fd7c:	40014400 	.word	0x40014400
 800fd80:	40014800 	.word	0x40014800

0800fd84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fd84:	b480      	push	{r7}
 800fd86:	b087      	sub	sp, #28
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	60f8      	str	r0, [r7, #12]
 800fd8c:	60b9      	str	r1, [r7, #8]
 800fd8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	6a1b      	ldr	r3, [r3, #32]
 800fd94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	6a1b      	ldr	r3, [r3, #32]
 800fd9a:	f023 0201 	bic.w	r2, r3, #1
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	699b      	ldr	r3, [r3, #24]
 800fda6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fda8:	693b      	ldr	r3, [r7, #16]
 800fdaa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800fdae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	011b      	lsls	r3, r3, #4
 800fdb4:	693a      	ldr	r2, [r7, #16]
 800fdb6:	4313      	orrs	r3, r2
 800fdb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fdba:	697b      	ldr	r3, [r7, #20]
 800fdbc:	f023 030a 	bic.w	r3, r3, #10
 800fdc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fdc2:	697a      	ldr	r2, [r7, #20]
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	4313      	orrs	r3, r2
 800fdc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	693a      	ldr	r2, [r7, #16]
 800fdce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	697a      	ldr	r2, [r7, #20]
 800fdd4:	621a      	str	r2, [r3, #32]
}
 800fdd6:	bf00      	nop
 800fdd8:	371c      	adds	r7, #28
 800fdda:	46bd      	mov	sp, r7
 800fddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde0:	4770      	bx	lr

0800fde2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fde2:	b480      	push	{r7}
 800fde4:	b087      	sub	sp, #28
 800fde6:	af00      	add	r7, sp, #0
 800fde8:	60f8      	str	r0, [r7, #12]
 800fdea:	60b9      	str	r1, [r7, #8]
 800fdec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	6a1b      	ldr	r3, [r3, #32]
 800fdf2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	6a1b      	ldr	r3, [r3, #32]
 800fdf8:	f023 0210 	bic.w	r2, r3, #16
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	699b      	ldr	r3, [r3, #24]
 800fe04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fe06:	693b      	ldr	r3, [r7, #16]
 800fe08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800fe0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	031b      	lsls	r3, r3, #12
 800fe12:	693a      	ldr	r2, [r7, #16]
 800fe14:	4313      	orrs	r3, r2
 800fe16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800fe1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	011b      	lsls	r3, r3, #4
 800fe24:	697a      	ldr	r2, [r7, #20]
 800fe26:	4313      	orrs	r3, r2
 800fe28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	693a      	ldr	r2, [r7, #16]
 800fe2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	697a      	ldr	r2, [r7, #20]
 800fe34:	621a      	str	r2, [r3, #32]
}
 800fe36:	bf00      	nop
 800fe38:	371c      	adds	r7, #28
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe40:	4770      	bx	lr

0800fe42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fe42:	b480      	push	{r7}
 800fe44:	b085      	sub	sp, #20
 800fe46:	af00      	add	r7, sp, #0
 800fe48:	6078      	str	r0, [r7, #4]
 800fe4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	689b      	ldr	r3, [r3, #8]
 800fe50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fe58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fe5a:	683a      	ldr	r2, [r7, #0]
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	4313      	orrs	r3, r2
 800fe60:	f043 0307 	orr.w	r3, r3, #7
 800fe64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	68fa      	ldr	r2, [r7, #12]
 800fe6a:	609a      	str	r2, [r3, #8]
}
 800fe6c:	bf00      	nop
 800fe6e:	3714      	adds	r7, #20
 800fe70:	46bd      	mov	sp, r7
 800fe72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe76:	4770      	bx	lr

0800fe78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fe78:	b480      	push	{r7}
 800fe7a:	b087      	sub	sp, #28
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	60f8      	str	r0, [r7, #12]
 800fe80:	60b9      	str	r1, [r7, #8]
 800fe82:	607a      	str	r2, [r7, #4]
 800fe84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	689b      	ldr	r3, [r3, #8]
 800fe8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fe8c:	697b      	ldr	r3, [r7, #20]
 800fe8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fe92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fe94:	683b      	ldr	r3, [r7, #0]
 800fe96:	021a      	lsls	r2, r3, #8
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	431a      	orrs	r2, r3
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	4313      	orrs	r3, r2
 800fea0:	697a      	ldr	r2, [r7, #20]
 800fea2:	4313      	orrs	r3, r2
 800fea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	697a      	ldr	r2, [r7, #20]
 800feaa:	609a      	str	r2, [r3, #8]
}
 800feac:	bf00      	nop
 800feae:	371c      	adds	r7, #28
 800feb0:	46bd      	mov	sp, r7
 800feb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb6:	4770      	bx	lr

0800feb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800feb8:	b480      	push	{r7}
 800feba:	b085      	sub	sp, #20
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
 800fec0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fec8:	2b01      	cmp	r3, #1
 800feca:	d101      	bne.n	800fed0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fecc:	2302      	movs	r3, #2
 800fece:	e068      	b.n	800ffa2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2201      	movs	r2, #1
 800fed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2202      	movs	r2, #2
 800fedc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	685b      	ldr	r3, [r3, #4]
 800fee6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	689b      	ldr	r3, [r3, #8]
 800feee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	4a2e      	ldr	r2, [pc, #184]	@ (800ffb0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800fef6:	4293      	cmp	r3, r2
 800fef8:	d004      	beq.n	800ff04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	4a2d      	ldr	r2, [pc, #180]	@ (800ffb4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ff00:	4293      	cmp	r3, r2
 800ff02:	d108      	bne.n	800ff16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ff0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	685b      	ldr	r3, [r3, #4]
 800ff10:	68fa      	ldr	r2, [r7, #12]
 800ff12:	4313      	orrs	r3, r2
 800ff14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ff1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	68fa      	ldr	r2, [r7, #12]
 800ff24:	4313      	orrs	r3, r2
 800ff26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	68fa      	ldr	r2, [r7, #12]
 800ff2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	4a1e      	ldr	r2, [pc, #120]	@ (800ffb0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ff36:	4293      	cmp	r3, r2
 800ff38:	d01d      	beq.n	800ff76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ff42:	d018      	beq.n	800ff76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	4a1b      	ldr	r2, [pc, #108]	@ (800ffb8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ff4a:	4293      	cmp	r3, r2
 800ff4c:	d013      	beq.n	800ff76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	4a1a      	ldr	r2, [pc, #104]	@ (800ffbc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ff54:	4293      	cmp	r3, r2
 800ff56:	d00e      	beq.n	800ff76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	4a18      	ldr	r2, [pc, #96]	@ (800ffc0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ff5e:	4293      	cmp	r3, r2
 800ff60:	d009      	beq.n	800ff76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	4a13      	ldr	r2, [pc, #76]	@ (800ffb4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ff68:	4293      	cmp	r3, r2
 800ff6a:	d004      	beq.n	800ff76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	4a14      	ldr	r2, [pc, #80]	@ (800ffc4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ff72:	4293      	cmp	r3, r2
 800ff74:	d10c      	bne.n	800ff90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ff7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	689b      	ldr	r3, [r3, #8]
 800ff82:	68ba      	ldr	r2, [r7, #8]
 800ff84:	4313      	orrs	r3, r2
 800ff86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	68ba      	ldr	r2, [r7, #8]
 800ff8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2201      	movs	r2, #1
 800ff94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ffa0:	2300      	movs	r3, #0
}
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	3714      	adds	r7, #20
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffac:	4770      	bx	lr
 800ffae:	bf00      	nop
 800ffb0:	40012c00 	.word	0x40012c00
 800ffb4:	40013400 	.word	0x40013400
 800ffb8:	40000400 	.word	0x40000400
 800ffbc:	40000800 	.word	0x40000800
 800ffc0:	40000c00 	.word	0x40000c00
 800ffc4:	40014000 	.word	0x40014000

0800ffc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ffc8:	b480      	push	{r7}
 800ffca:	b083      	sub	sp, #12
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ffd0:	bf00      	nop
 800ffd2:	370c      	adds	r7, #12
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffda:	4770      	bx	lr

0800ffdc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ffdc:	b480      	push	{r7}
 800ffde:	b083      	sub	sp, #12
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ffe4:	bf00      	nop
 800ffe6:	370c      	adds	r7, #12
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffee:	4770      	bx	lr

0800fff0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fff0:	b480      	push	{r7}
 800fff2:	b083      	sub	sp, #12
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fff8:	bf00      	nop
 800fffa:	370c      	adds	r7, #12
 800fffc:	46bd      	mov	sp, r7
 800fffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010002:	4770      	bx	lr

08010004 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b082      	sub	sp, #8
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d101      	bne.n	8010016 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010012:	2301      	movs	r3, #1
 8010014:	e040      	b.n	8010098 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801001a:	2b00      	cmp	r3, #0
 801001c:	d106      	bne.n	801002c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2200      	movs	r2, #0
 8010022:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010026:	6878      	ldr	r0, [r7, #4]
 8010028:	f7f1 faf0 	bl	800160c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2224      	movs	r2, #36	@ 0x24
 8010030:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	681a      	ldr	r2, [r3, #0]
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	f022 0201 	bic.w	r2, r2, #1
 8010040:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010046:	2b00      	cmp	r3, #0
 8010048:	d002      	beq.n	8010050 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 801004a:	6878      	ldr	r0, [r7, #4]
 801004c:	f000 fe90 	bl	8010d70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010050:	6878      	ldr	r0, [r7, #4]
 8010052:	f000 fbd5 	bl	8010800 <UART_SetConfig>
 8010056:	4603      	mov	r3, r0
 8010058:	2b01      	cmp	r3, #1
 801005a:	d101      	bne.n	8010060 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 801005c:	2301      	movs	r3, #1
 801005e:	e01b      	b.n	8010098 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	685a      	ldr	r2, [r3, #4]
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801006e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	689a      	ldr	r2, [r3, #8]
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801007e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	681a      	ldr	r2, [r3, #0]
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	f042 0201 	orr.w	r2, r2, #1
 801008e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f000 ff0f 	bl	8010eb4 <UART_CheckIdleState>
 8010096:	4603      	mov	r3, r0
}
 8010098:	4618      	mov	r0, r3
 801009a:	3708      	adds	r7, #8
 801009c:	46bd      	mov	sp, r7
 801009e:	bd80      	pop	{r7, pc}

080100a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b08a      	sub	sp, #40	@ 0x28
 80100a4:	af02      	add	r7, sp, #8
 80100a6:	60f8      	str	r0, [r7, #12]
 80100a8:	60b9      	str	r1, [r7, #8]
 80100aa:	603b      	str	r3, [r7, #0]
 80100ac:	4613      	mov	r3, r2
 80100ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80100b4:	2b20      	cmp	r3, #32
 80100b6:	d177      	bne.n	80101a8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d002      	beq.n	80100c4 <HAL_UART_Transmit+0x24>
 80100be:	88fb      	ldrh	r3, [r7, #6]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d101      	bne.n	80100c8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80100c4:	2301      	movs	r3, #1
 80100c6:	e070      	b.n	80101aa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	2200      	movs	r2, #0
 80100cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	2221      	movs	r2, #33	@ 0x21
 80100d4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80100d6:	f7fb fbe1 	bl	800b89c <HAL_GetTick>
 80100da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	88fa      	ldrh	r2, [r7, #6]
 80100e0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	88fa      	ldrh	r2, [r7, #6]
 80100e8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	689b      	ldr	r3, [r3, #8]
 80100f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80100f4:	d108      	bne.n	8010108 <HAL_UART_Transmit+0x68>
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	691b      	ldr	r3, [r3, #16]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d104      	bne.n	8010108 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80100fe:	2300      	movs	r3, #0
 8010100:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010102:	68bb      	ldr	r3, [r7, #8]
 8010104:	61bb      	str	r3, [r7, #24]
 8010106:	e003      	b.n	8010110 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801010c:	2300      	movs	r3, #0
 801010e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010110:	e02f      	b.n	8010172 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010112:	683b      	ldr	r3, [r7, #0]
 8010114:	9300      	str	r3, [sp, #0]
 8010116:	697b      	ldr	r3, [r7, #20]
 8010118:	2200      	movs	r2, #0
 801011a:	2180      	movs	r1, #128	@ 0x80
 801011c:	68f8      	ldr	r0, [r7, #12]
 801011e:	f000 ff71 	bl	8011004 <UART_WaitOnFlagUntilTimeout>
 8010122:	4603      	mov	r3, r0
 8010124:	2b00      	cmp	r3, #0
 8010126:	d004      	beq.n	8010132 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	2220      	movs	r2, #32
 801012c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801012e:	2303      	movs	r3, #3
 8010130:	e03b      	b.n	80101aa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8010132:	69fb      	ldr	r3, [r7, #28]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d10b      	bne.n	8010150 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010138:	69bb      	ldr	r3, [r7, #24]
 801013a:	881a      	ldrh	r2, [r3, #0]
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010144:	b292      	uxth	r2, r2
 8010146:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8010148:	69bb      	ldr	r3, [r7, #24]
 801014a:	3302      	adds	r3, #2
 801014c:	61bb      	str	r3, [r7, #24]
 801014e:	e007      	b.n	8010160 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010150:	69fb      	ldr	r3, [r7, #28]
 8010152:	781a      	ldrb	r2, [r3, #0]
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801015a:	69fb      	ldr	r3, [r7, #28]
 801015c:	3301      	adds	r3, #1
 801015e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8010166:	b29b      	uxth	r3, r3
 8010168:	3b01      	subs	r3, #1
 801016a:	b29a      	uxth	r2, r3
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8010178:	b29b      	uxth	r3, r3
 801017a:	2b00      	cmp	r3, #0
 801017c:	d1c9      	bne.n	8010112 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	9300      	str	r3, [sp, #0]
 8010182:	697b      	ldr	r3, [r7, #20]
 8010184:	2200      	movs	r2, #0
 8010186:	2140      	movs	r1, #64	@ 0x40
 8010188:	68f8      	ldr	r0, [r7, #12]
 801018a:	f000 ff3b 	bl	8011004 <UART_WaitOnFlagUntilTimeout>
 801018e:	4603      	mov	r3, r0
 8010190:	2b00      	cmp	r3, #0
 8010192:	d004      	beq.n	801019e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	2220      	movs	r2, #32
 8010198:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801019a:	2303      	movs	r3, #3
 801019c:	e005      	b.n	80101aa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	2220      	movs	r2, #32
 80101a2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80101a4:	2300      	movs	r3, #0
 80101a6:	e000      	b.n	80101aa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80101a8:	2302      	movs	r3, #2
  }
}
 80101aa:	4618      	mov	r0, r3
 80101ac:	3720      	adds	r7, #32
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}
	...

080101b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b0ba      	sub	sp, #232	@ 0xe8
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	69db      	ldr	r3, [r3, #28]
 80101c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	689b      	ldr	r3, [r3, #8]
 80101d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80101da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80101de:	f640 030f 	movw	r3, #2063	@ 0x80f
 80101e2:	4013      	ands	r3, r2
 80101e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80101e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d115      	bne.n	801021c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80101f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80101f4:	f003 0320 	and.w	r3, r3, #32
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d00f      	beq.n	801021c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80101fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010200:	f003 0320 	and.w	r3, r3, #32
 8010204:	2b00      	cmp	r3, #0
 8010206:	d009      	beq.n	801021c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801020c:	2b00      	cmp	r3, #0
 801020e:	f000 82ca 	beq.w	80107a6 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010216:	6878      	ldr	r0, [r7, #4]
 8010218:	4798      	blx	r3
      }
      return;
 801021a:	e2c4      	b.n	80107a6 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 801021c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010220:	2b00      	cmp	r3, #0
 8010222:	f000 8117 	beq.w	8010454 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8010226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801022a:	f003 0301 	and.w	r3, r3, #1
 801022e:	2b00      	cmp	r3, #0
 8010230:	d106      	bne.n	8010240 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8010232:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8010236:	4b85      	ldr	r3, [pc, #532]	@ (801044c <HAL_UART_IRQHandler+0x298>)
 8010238:	4013      	ands	r3, r2
 801023a:	2b00      	cmp	r3, #0
 801023c:	f000 810a 	beq.w	8010454 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010244:	f003 0301 	and.w	r3, r3, #1
 8010248:	2b00      	cmp	r3, #0
 801024a:	d011      	beq.n	8010270 <HAL_UART_IRQHandler+0xbc>
 801024c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010254:	2b00      	cmp	r3, #0
 8010256:	d00b      	beq.n	8010270 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	2201      	movs	r2, #1
 801025e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010266:	f043 0201 	orr.w	r2, r3, #1
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010274:	f003 0302 	and.w	r3, r3, #2
 8010278:	2b00      	cmp	r3, #0
 801027a:	d011      	beq.n	80102a0 <HAL_UART_IRQHandler+0xec>
 801027c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010280:	f003 0301 	and.w	r3, r3, #1
 8010284:	2b00      	cmp	r3, #0
 8010286:	d00b      	beq.n	80102a0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	2202      	movs	r2, #2
 801028e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010296:	f043 0204 	orr.w	r2, r3, #4
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80102a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80102a4:	f003 0304 	and.w	r3, r3, #4
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d011      	beq.n	80102d0 <HAL_UART_IRQHandler+0x11c>
 80102ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80102b0:	f003 0301 	and.w	r3, r3, #1
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d00b      	beq.n	80102d0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	2204      	movs	r2, #4
 80102be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80102c6:	f043 0202 	orr.w	r2, r3, #2
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80102d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80102d4:	f003 0308 	and.w	r3, r3, #8
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d017      	beq.n	801030c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80102dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80102e0:	f003 0320 	and.w	r3, r3, #32
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d105      	bne.n	80102f4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80102e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80102ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d00b      	beq.n	801030c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	2208      	movs	r2, #8
 80102fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010302:	f043 0208 	orr.w	r2, r3, #8
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801030c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010310:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010314:	2b00      	cmp	r3, #0
 8010316:	d012      	beq.n	801033e <HAL_UART_IRQHandler+0x18a>
 8010318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801031c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010320:	2b00      	cmp	r3, #0
 8010322:	d00c      	beq.n	801033e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801032c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010334:	f043 0220 	orr.w	r2, r3, #32
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010344:	2b00      	cmp	r3, #0
 8010346:	f000 8230 	beq.w	80107aa <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801034a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801034e:	f003 0320 	and.w	r3, r3, #32
 8010352:	2b00      	cmp	r3, #0
 8010354:	d00d      	beq.n	8010372 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8010356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801035a:	f003 0320 	and.w	r3, r3, #32
 801035e:	2b00      	cmp	r3, #0
 8010360:	d007      	beq.n	8010372 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010366:	2b00      	cmp	r3, #0
 8010368:	d003      	beq.n	8010372 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010378:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	689b      	ldr	r3, [r3, #8]
 8010382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010386:	2b40      	cmp	r3, #64	@ 0x40
 8010388:	d005      	beq.n	8010396 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801038a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801038e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010392:	2b00      	cmp	r3, #0
 8010394:	d04f      	beq.n	8010436 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f000 fea1 	bl	80110de <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	689b      	ldr	r3, [r3, #8]
 80103a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80103a6:	2b40      	cmp	r3, #64	@ 0x40
 80103a8:	d141      	bne.n	801042e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	3308      	adds	r3, #8
 80103b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80103b8:	e853 3f00 	ldrex	r3, [r3]
 80103bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80103c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80103c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80103c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	3308      	adds	r3, #8
 80103d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80103d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80103da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80103e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80103e6:	e841 2300 	strex	r3, r2, [r1]
 80103ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80103ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d1d9      	bne.n	80103aa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d013      	beq.n	8010426 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010402:	4a13      	ldr	r2, [pc, #76]	@ (8010450 <HAL_UART_IRQHandler+0x29c>)
 8010404:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801040a:	4618      	mov	r0, r3
 801040c:	f7fb fd70 	bl	800bef0 <HAL_DMA_Abort_IT>
 8010410:	4603      	mov	r3, r0
 8010412:	2b00      	cmp	r3, #0
 8010414:	d017      	beq.n	8010446 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801041a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801041c:	687a      	ldr	r2, [r7, #4]
 801041e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8010420:	4610      	mov	r0, r2
 8010422:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010424:	e00f      	b.n	8010446 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010426:	6878      	ldr	r0, [r7, #4]
 8010428:	f000 f9d4 	bl	80107d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801042c:	e00b      	b.n	8010446 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801042e:	6878      	ldr	r0, [r7, #4]
 8010430:	f000 f9d0 	bl	80107d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010434:	e007      	b.n	8010446 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f000 f9cc 	bl	80107d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2200      	movs	r2, #0
 8010440:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8010444:	e1b1      	b.n	80107aa <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010446:	bf00      	nop
    return;
 8010448:	e1af      	b.n	80107aa <HAL_UART_IRQHandler+0x5f6>
 801044a:	bf00      	nop
 801044c:	04000120 	.word	0x04000120
 8010450:	080111a7 	.word	0x080111a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010458:	2b01      	cmp	r3, #1
 801045a:	f040 816a 	bne.w	8010732 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801045e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010462:	f003 0310 	and.w	r3, r3, #16
 8010466:	2b00      	cmp	r3, #0
 8010468:	f000 8163 	beq.w	8010732 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801046c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010470:	f003 0310 	and.w	r3, r3, #16
 8010474:	2b00      	cmp	r3, #0
 8010476:	f000 815c 	beq.w	8010732 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	2210      	movs	r2, #16
 8010480:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	689b      	ldr	r3, [r3, #8]
 8010488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801048c:	2b40      	cmp	r3, #64	@ 0x40
 801048e:	f040 80d4 	bne.w	801063a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	685b      	ldr	r3, [r3, #4]
 801049a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 801049e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	f000 80ad 	beq.w	8010602 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80104ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80104b2:	429a      	cmp	r2, r3
 80104b4:	f080 80a5 	bcs.w	8010602 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80104be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	f003 0320 	and.w	r3, r3, #32
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	f040 8086 	bne.w	80105e0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80104e0:	e853 3f00 	ldrex	r3, [r3]
 80104e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80104e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80104ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80104f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	461a      	mov	r2, r3
 80104fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80104fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010502:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010506:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801050a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801050e:	e841 2300 	strex	r3, r2, [r1]
 8010512:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8010516:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801051a:	2b00      	cmp	r3, #0
 801051c:	d1da      	bne.n	80104d4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	3308      	adds	r3, #8
 8010524:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010526:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010528:	e853 3f00 	ldrex	r3, [r3]
 801052c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801052e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010530:	f023 0301 	bic.w	r3, r3, #1
 8010534:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	3308      	adds	r3, #8
 801053e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010542:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010546:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010548:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801054a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801054e:	e841 2300 	strex	r3, r2, [r1]
 8010552:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010554:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010556:	2b00      	cmp	r3, #0
 8010558:	d1e1      	bne.n	801051e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	3308      	adds	r3, #8
 8010560:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010562:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010564:	e853 3f00 	ldrex	r3, [r3]
 8010568:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801056a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801056c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010570:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	3308      	adds	r3, #8
 801057a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801057e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010580:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010582:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010584:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010586:	e841 2300 	strex	r3, r2, [r1]
 801058a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801058c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801058e:	2b00      	cmp	r3, #0
 8010590:	d1e3      	bne.n	801055a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	2220      	movs	r2, #32
 8010596:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	2200      	movs	r2, #0
 801059e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80105a8:	e853 3f00 	ldrex	r3, [r3]
 80105ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80105ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80105b0:	f023 0310 	bic.w	r3, r3, #16
 80105b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	461a      	mov	r2, r3
 80105be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80105c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80105c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80105c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80105ca:	e841 2300 	strex	r3, r2, [r1]
 80105ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80105d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d1e4      	bne.n	80105a0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80105da:	4618      	mov	r0, r3
 80105dc:	f7fb fc4a 	bl	800be74 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2202      	movs	r2, #2
 80105e4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80105f2:	b29b      	uxth	r3, r3
 80105f4:	1ad3      	subs	r3, r2, r3
 80105f6:	b29b      	uxth	r3, r3
 80105f8:	4619      	mov	r1, r3
 80105fa:	6878      	ldr	r0, [r7, #4]
 80105fc:	f000 f8f4 	bl	80107e8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8010600:	e0d5      	b.n	80107ae <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8010608:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801060c:	429a      	cmp	r2, r3
 801060e:	f040 80ce 	bne.w	80107ae <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	f003 0320 	and.w	r3, r3, #32
 801061e:	2b20      	cmp	r3, #32
 8010620:	f040 80c5 	bne.w	80107ae <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2202      	movs	r2, #2
 8010628:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8010630:	4619      	mov	r1, r3
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	f000 f8d8 	bl	80107e8 <HAL_UARTEx_RxEventCallback>
      return;
 8010638:	e0b9      	b.n	80107ae <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8010646:	b29b      	uxth	r3, r3
 8010648:	1ad3      	subs	r3, r2, r3
 801064a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8010654:	b29b      	uxth	r3, r3
 8010656:	2b00      	cmp	r3, #0
 8010658:	f000 80ab 	beq.w	80107b2 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 801065c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010660:	2b00      	cmp	r3, #0
 8010662:	f000 80a6 	beq.w	80107b2 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801066c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801066e:	e853 3f00 	ldrex	r3, [r3]
 8010672:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010676:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801067a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	461a      	mov	r2, r3
 8010684:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010688:	647b      	str	r3, [r7, #68]	@ 0x44
 801068a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801068c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801068e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010690:	e841 2300 	strex	r3, r2, [r1]
 8010694:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010698:	2b00      	cmp	r3, #0
 801069a:	d1e4      	bne.n	8010666 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	3308      	adds	r3, #8
 80106a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106a6:	e853 3f00 	ldrex	r3, [r3]
 80106aa:	623b      	str	r3, [r7, #32]
   return(result);
 80106ac:	6a3b      	ldr	r3, [r7, #32]
 80106ae:	f023 0301 	bic.w	r3, r3, #1
 80106b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	3308      	adds	r3, #8
 80106bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80106c0:	633a      	str	r2, [r7, #48]	@ 0x30
 80106c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80106c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80106c8:	e841 2300 	strex	r3, r2, [r1]
 80106cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80106ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d1e3      	bne.n	801069c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	2220      	movs	r2, #32
 80106d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2200      	movs	r2, #0
 80106e0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	2200      	movs	r2, #0
 80106e6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106ee:	693b      	ldr	r3, [r7, #16]
 80106f0:	e853 3f00 	ldrex	r3, [r3]
 80106f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	f023 0310 	bic.w	r3, r3, #16
 80106fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	461a      	mov	r2, r3
 8010706:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801070a:	61fb      	str	r3, [r7, #28]
 801070c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801070e:	69b9      	ldr	r1, [r7, #24]
 8010710:	69fa      	ldr	r2, [r7, #28]
 8010712:	e841 2300 	strex	r3, r2, [r1]
 8010716:	617b      	str	r3, [r7, #20]
   return(result);
 8010718:	697b      	ldr	r3, [r7, #20]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d1e4      	bne.n	80106e8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	2202      	movs	r2, #2
 8010722:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010724:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010728:	4619      	mov	r1, r3
 801072a:	6878      	ldr	r0, [r7, #4]
 801072c:	f000 f85c 	bl	80107e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010730:	e03f      	b.n	80107b2 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010736:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801073a:	2b00      	cmp	r3, #0
 801073c:	d00e      	beq.n	801075c <HAL_UART_IRQHandler+0x5a8>
 801073e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010742:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010746:	2b00      	cmp	r3, #0
 8010748:	d008      	beq.n	801075c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8010752:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	f000 fd66 	bl	8011226 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801075a:	e02d      	b.n	80107b8 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 801075c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010764:	2b00      	cmp	r3, #0
 8010766:	d00e      	beq.n	8010786 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8010768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801076c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010770:	2b00      	cmp	r3, #0
 8010772:	d008      	beq.n	8010786 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010778:	2b00      	cmp	r3, #0
 801077a:	d01c      	beq.n	80107b6 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010780:	6878      	ldr	r0, [r7, #4]
 8010782:	4798      	blx	r3
    }
    return;
 8010784:	e017      	b.n	80107b6 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801078a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801078e:	2b00      	cmp	r3, #0
 8010790:	d012      	beq.n	80107b8 <HAL_UART_IRQHandler+0x604>
 8010792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801079a:	2b00      	cmp	r3, #0
 801079c:	d00c      	beq.n	80107b8 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 801079e:	6878      	ldr	r0, [r7, #4]
 80107a0:	f000 fd17 	bl	80111d2 <UART_EndTransmit_IT>
    return;
 80107a4:	e008      	b.n	80107b8 <HAL_UART_IRQHandler+0x604>
      return;
 80107a6:	bf00      	nop
 80107a8:	e006      	b.n	80107b8 <HAL_UART_IRQHandler+0x604>
    return;
 80107aa:	bf00      	nop
 80107ac:	e004      	b.n	80107b8 <HAL_UART_IRQHandler+0x604>
      return;
 80107ae:	bf00      	nop
 80107b0:	e002      	b.n	80107b8 <HAL_UART_IRQHandler+0x604>
      return;
 80107b2:	bf00      	nop
 80107b4:	e000      	b.n	80107b8 <HAL_UART_IRQHandler+0x604>
    return;
 80107b6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80107b8:	37e8      	adds	r7, #232	@ 0xe8
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd80      	pop	{r7, pc}
 80107be:	bf00      	nop

080107c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80107c0:	b480      	push	{r7}
 80107c2:	b083      	sub	sp, #12
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80107c8:	bf00      	nop
 80107ca:	370c      	adds	r7, #12
 80107cc:	46bd      	mov	sp, r7
 80107ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d2:	4770      	bx	lr

080107d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80107d4:	b480      	push	{r7}
 80107d6:	b083      	sub	sp, #12
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80107dc:	bf00      	nop
 80107de:	370c      	adds	r7, #12
 80107e0:	46bd      	mov	sp, r7
 80107e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e6:	4770      	bx	lr

080107e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80107e8:	b480      	push	{r7}
 80107ea:	b083      	sub	sp, #12
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
 80107f0:	460b      	mov	r3, r1
 80107f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80107f4:	bf00      	nop
 80107f6:	370c      	adds	r7, #12
 80107f8:	46bd      	mov	sp, r7
 80107fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fe:	4770      	bx	lr

08010800 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010804:	b08a      	sub	sp, #40	@ 0x28
 8010806:	af00      	add	r7, sp, #0
 8010808:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801080a:	2300      	movs	r3, #0
 801080c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	689a      	ldr	r2, [r3, #8]
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	691b      	ldr	r3, [r3, #16]
 8010818:	431a      	orrs	r2, r3
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	695b      	ldr	r3, [r3, #20]
 801081e:	431a      	orrs	r2, r3
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	69db      	ldr	r3, [r3, #28]
 8010824:	4313      	orrs	r3, r2
 8010826:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	681a      	ldr	r2, [r3, #0]
 801082e:	4ba4      	ldr	r3, [pc, #656]	@ (8010ac0 <UART_SetConfig+0x2c0>)
 8010830:	4013      	ands	r3, r2
 8010832:	68fa      	ldr	r2, [r7, #12]
 8010834:	6812      	ldr	r2, [r2, #0]
 8010836:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010838:	430b      	orrs	r3, r1
 801083a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	685b      	ldr	r3, [r3, #4]
 8010842:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	68da      	ldr	r2, [r3, #12]
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	430a      	orrs	r2, r1
 8010850:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	699b      	ldr	r3, [r3, #24]
 8010856:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	4a99      	ldr	r2, [pc, #612]	@ (8010ac4 <UART_SetConfig+0x2c4>)
 801085e:	4293      	cmp	r3, r2
 8010860:	d004      	beq.n	801086c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	6a1b      	ldr	r3, [r3, #32]
 8010866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010868:	4313      	orrs	r3, r2
 801086a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	689b      	ldr	r3, [r3, #8]
 8010872:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801087c:	430a      	orrs	r2, r1
 801087e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	4a90      	ldr	r2, [pc, #576]	@ (8010ac8 <UART_SetConfig+0x2c8>)
 8010886:	4293      	cmp	r3, r2
 8010888:	d126      	bne.n	80108d8 <UART_SetConfig+0xd8>
 801088a:	4b90      	ldr	r3, [pc, #576]	@ (8010acc <UART_SetConfig+0x2cc>)
 801088c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010890:	f003 0303 	and.w	r3, r3, #3
 8010894:	2b03      	cmp	r3, #3
 8010896:	d81b      	bhi.n	80108d0 <UART_SetConfig+0xd0>
 8010898:	a201      	add	r2, pc, #4	@ (adr r2, 80108a0 <UART_SetConfig+0xa0>)
 801089a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801089e:	bf00      	nop
 80108a0:	080108b1 	.word	0x080108b1
 80108a4:	080108c1 	.word	0x080108c1
 80108a8:	080108b9 	.word	0x080108b9
 80108ac:	080108c9 	.word	0x080108c9
 80108b0:	2301      	movs	r3, #1
 80108b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80108b6:	e116      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 80108b8:	2302      	movs	r3, #2
 80108ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80108be:	e112      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 80108c0:	2304      	movs	r3, #4
 80108c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80108c6:	e10e      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 80108c8:	2308      	movs	r3, #8
 80108ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80108ce:	e10a      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 80108d0:	2310      	movs	r3, #16
 80108d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80108d6:	e106      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	4a7c      	ldr	r2, [pc, #496]	@ (8010ad0 <UART_SetConfig+0x2d0>)
 80108de:	4293      	cmp	r3, r2
 80108e0:	d138      	bne.n	8010954 <UART_SetConfig+0x154>
 80108e2:	4b7a      	ldr	r3, [pc, #488]	@ (8010acc <UART_SetConfig+0x2cc>)
 80108e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80108e8:	f003 030c 	and.w	r3, r3, #12
 80108ec:	2b0c      	cmp	r3, #12
 80108ee:	d82d      	bhi.n	801094c <UART_SetConfig+0x14c>
 80108f0:	a201      	add	r2, pc, #4	@ (adr r2, 80108f8 <UART_SetConfig+0xf8>)
 80108f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108f6:	bf00      	nop
 80108f8:	0801092d 	.word	0x0801092d
 80108fc:	0801094d 	.word	0x0801094d
 8010900:	0801094d 	.word	0x0801094d
 8010904:	0801094d 	.word	0x0801094d
 8010908:	0801093d 	.word	0x0801093d
 801090c:	0801094d 	.word	0x0801094d
 8010910:	0801094d 	.word	0x0801094d
 8010914:	0801094d 	.word	0x0801094d
 8010918:	08010935 	.word	0x08010935
 801091c:	0801094d 	.word	0x0801094d
 8010920:	0801094d 	.word	0x0801094d
 8010924:	0801094d 	.word	0x0801094d
 8010928:	08010945 	.word	0x08010945
 801092c:	2300      	movs	r3, #0
 801092e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010932:	e0d8      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 8010934:	2302      	movs	r3, #2
 8010936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801093a:	e0d4      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 801093c:	2304      	movs	r3, #4
 801093e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010942:	e0d0      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 8010944:	2308      	movs	r3, #8
 8010946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801094a:	e0cc      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 801094c:	2310      	movs	r3, #16
 801094e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010952:	e0c8      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	4a5e      	ldr	r2, [pc, #376]	@ (8010ad4 <UART_SetConfig+0x2d4>)
 801095a:	4293      	cmp	r3, r2
 801095c:	d125      	bne.n	80109aa <UART_SetConfig+0x1aa>
 801095e:	4b5b      	ldr	r3, [pc, #364]	@ (8010acc <UART_SetConfig+0x2cc>)
 8010960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010964:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8010968:	2b30      	cmp	r3, #48	@ 0x30
 801096a:	d016      	beq.n	801099a <UART_SetConfig+0x19a>
 801096c:	2b30      	cmp	r3, #48	@ 0x30
 801096e:	d818      	bhi.n	80109a2 <UART_SetConfig+0x1a2>
 8010970:	2b20      	cmp	r3, #32
 8010972:	d00a      	beq.n	801098a <UART_SetConfig+0x18a>
 8010974:	2b20      	cmp	r3, #32
 8010976:	d814      	bhi.n	80109a2 <UART_SetConfig+0x1a2>
 8010978:	2b00      	cmp	r3, #0
 801097a:	d002      	beq.n	8010982 <UART_SetConfig+0x182>
 801097c:	2b10      	cmp	r3, #16
 801097e:	d008      	beq.n	8010992 <UART_SetConfig+0x192>
 8010980:	e00f      	b.n	80109a2 <UART_SetConfig+0x1a2>
 8010982:	2300      	movs	r3, #0
 8010984:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010988:	e0ad      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 801098a:	2302      	movs	r3, #2
 801098c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010990:	e0a9      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 8010992:	2304      	movs	r3, #4
 8010994:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010998:	e0a5      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 801099a:	2308      	movs	r3, #8
 801099c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80109a0:	e0a1      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 80109a2:	2310      	movs	r3, #16
 80109a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80109a8:	e09d      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	4a4a      	ldr	r2, [pc, #296]	@ (8010ad8 <UART_SetConfig+0x2d8>)
 80109b0:	4293      	cmp	r3, r2
 80109b2:	d125      	bne.n	8010a00 <UART_SetConfig+0x200>
 80109b4:	4b45      	ldr	r3, [pc, #276]	@ (8010acc <UART_SetConfig+0x2cc>)
 80109b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80109ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80109be:	2bc0      	cmp	r3, #192	@ 0xc0
 80109c0:	d016      	beq.n	80109f0 <UART_SetConfig+0x1f0>
 80109c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80109c4:	d818      	bhi.n	80109f8 <UART_SetConfig+0x1f8>
 80109c6:	2b80      	cmp	r3, #128	@ 0x80
 80109c8:	d00a      	beq.n	80109e0 <UART_SetConfig+0x1e0>
 80109ca:	2b80      	cmp	r3, #128	@ 0x80
 80109cc:	d814      	bhi.n	80109f8 <UART_SetConfig+0x1f8>
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d002      	beq.n	80109d8 <UART_SetConfig+0x1d8>
 80109d2:	2b40      	cmp	r3, #64	@ 0x40
 80109d4:	d008      	beq.n	80109e8 <UART_SetConfig+0x1e8>
 80109d6:	e00f      	b.n	80109f8 <UART_SetConfig+0x1f8>
 80109d8:	2300      	movs	r3, #0
 80109da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80109de:	e082      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 80109e0:	2302      	movs	r3, #2
 80109e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80109e6:	e07e      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 80109e8:	2304      	movs	r3, #4
 80109ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80109ee:	e07a      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 80109f0:	2308      	movs	r3, #8
 80109f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80109f6:	e076      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 80109f8:	2310      	movs	r3, #16
 80109fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80109fe:	e072      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	4a35      	ldr	r2, [pc, #212]	@ (8010adc <UART_SetConfig+0x2dc>)
 8010a06:	4293      	cmp	r3, r2
 8010a08:	d12a      	bne.n	8010a60 <UART_SetConfig+0x260>
 8010a0a:	4b30      	ldr	r3, [pc, #192]	@ (8010acc <UART_SetConfig+0x2cc>)
 8010a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010a10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010a14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010a18:	d01a      	beq.n	8010a50 <UART_SetConfig+0x250>
 8010a1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010a1e:	d81b      	bhi.n	8010a58 <UART_SetConfig+0x258>
 8010a20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010a24:	d00c      	beq.n	8010a40 <UART_SetConfig+0x240>
 8010a26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010a2a:	d815      	bhi.n	8010a58 <UART_SetConfig+0x258>
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d003      	beq.n	8010a38 <UART_SetConfig+0x238>
 8010a30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010a34:	d008      	beq.n	8010a48 <UART_SetConfig+0x248>
 8010a36:	e00f      	b.n	8010a58 <UART_SetConfig+0x258>
 8010a38:	2300      	movs	r3, #0
 8010a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010a3e:	e052      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 8010a40:	2302      	movs	r3, #2
 8010a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010a46:	e04e      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 8010a48:	2304      	movs	r3, #4
 8010a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010a4e:	e04a      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 8010a50:	2308      	movs	r3, #8
 8010a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010a56:	e046      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 8010a58:	2310      	movs	r3, #16
 8010a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010a5e:	e042      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	4a17      	ldr	r2, [pc, #92]	@ (8010ac4 <UART_SetConfig+0x2c4>)
 8010a66:	4293      	cmp	r3, r2
 8010a68:	d13a      	bne.n	8010ae0 <UART_SetConfig+0x2e0>
 8010a6a:	4b18      	ldr	r3, [pc, #96]	@ (8010acc <UART_SetConfig+0x2cc>)
 8010a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010a70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8010a74:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010a78:	d01a      	beq.n	8010ab0 <UART_SetConfig+0x2b0>
 8010a7a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010a7e:	d81b      	bhi.n	8010ab8 <UART_SetConfig+0x2b8>
 8010a80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010a84:	d00c      	beq.n	8010aa0 <UART_SetConfig+0x2a0>
 8010a86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010a8a:	d815      	bhi.n	8010ab8 <UART_SetConfig+0x2b8>
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d003      	beq.n	8010a98 <UART_SetConfig+0x298>
 8010a90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010a94:	d008      	beq.n	8010aa8 <UART_SetConfig+0x2a8>
 8010a96:	e00f      	b.n	8010ab8 <UART_SetConfig+0x2b8>
 8010a98:	2300      	movs	r3, #0
 8010a9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010a9e:	e022      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 8010aa0:	2302      	movs	r3, #2
 8010aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010aa6:	e01e      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 8010aa8:	2304      	movs	r3, #4
 8010aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010aae:	e01a      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 8010ab0:	2308      	movs	r3, #8
 8010ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010ab6:	e016      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 8010ab8:	2310      	movs	r3, #16
 8010aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010abe:	e012      	b.n	8010ae6 <UART_SetConfig+0x2e6>
 8010ac0:	efff69f3 	.word	0xefff69f3
 8010ac4:	40008000 	.word	0x40008000
 8010ac8:	40013800 	.word	0x40013800
 8010acc:	40021000 	.word	0x40021000
 8010ad0:	40004400 	.word	0x40004400
 8010ad4:	40004800 	.word	0x40004800
 8010ad8:	40004c00 	.word	0x40004c00
 8010adc:	40005000 	.word	0x40005000
 8010ae0:	2310      	movs	r3, #16
 8010ae2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	4a9f      	ldr	r2, [pc, #636]	@ (8010d68 <UART_SetConfig+0x568>)
 8010aec:	4293      	cmp	r3, r2
 8010aee:	d17a      	bne.n	8010be6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010af0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010af4:	2b08      	cmp	r3, #8
 8010af6:	d824      	bhi.n	8010b42 <UART_SetConfig+0x342>
 8010af8:	a201      	add	r2, pc, #4	@ (adr r2, 8010b00 <UART_SetConfig+0x300>)
 8010afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010afe:	bf00      	nop
 8010b00:	08010b25 	.word	0x08010b25
 8010b04:	08010b43 	.word	0x08010b43
 8010b08:	08010b2d 	.word	0x08010b2d
 8010b0c:	08010b43 	.word	0x08010b43
 8010b10:	08010b33 	.word	0x08010b33
 8010b14:	08010b43 	.word	0x08010b43
 8010b18:	08010b43 	.word	0x08010b43
 8010b1c:	08010b43 	.word	0x08010b43
 8010b20:	08010b3b 	.word	0x08010b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010b24:	f7fd fcc2 	bl	800e4ac <HAL_RCC_GetPCLK1Freq>
 8010b28:	61f8      	str	r0, [r7, #28]
        break;
 8010b2a:	e010      	b.n	8010b4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010b2c:	4b8f      	ldr	r3, [pc, #572]	@ (8010d6c <UART_SetConfig+0x56c>)
 8010b2e:	61fb      	str	r3, [r7, #28]
        break;
 8010b30:	e00d      	b.n	8010b4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010b32:	f7fd fc23 	bl	800e37c <HAL_RCC_GetSysClockFreq>
 8010b36:	61f8      	str	r0, [r7, #28]
        break;
 8010b38:	e009      	b.n	8010b4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010b3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010b3e:	61fb      	str	r3, [r7, #28]
        break;
 8010b40:	e005      	b.n	8010b4e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8010b42:	2300      	movs	r3, #0
 8010b44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8010b46:	2301      	movs	r3, #1
 8010b48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8010b4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010b4e:	69fb      	ldr	r3, [r7, #28]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	f000 80fb 	beq.w	8010d4c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	685a      	ldr	r2, [r3, #4]
 8010b5a:	4613      	mov	r3, r2
 8010b5c:	005b      	lsls	r3, r3, #1
 8010b5e:	4413      	add	r3, r2
 8010b60:	69fa      	ldr	r2, [r7, #28]
 8010b62:	429a      	cmp	r2, r3
 8010b64:	d305      	bcc.n	8010b72 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	685b      	ldr	r3, [r3, #4]
 8010b6a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8010b6c:	69fa      	ldr	r2, [r7, #28]
 8010b6e:	429a      	cmp	r2, r3
 8010b70:	d903      	bls.n	8010b7a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8010b72:	2301      	movs	r3, #1
 8010b74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8010b78:	e0e8      	b.n	8010d4c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8010b7a:	69fb      	ldr	r3, [r7, #28]
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	461c      	mov	r4, r3
 8010b80:	4615      	mov	r5, r2
 8010b82:	f04f 0200 	mov.w	r2, #0
 8010b86:	f04f 0300 	mov.w	r3, #0
 8010b8a:	022b      	lsls	r3, r5, #8
 8010b8c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8010b90:	0222      	lsls	r2, r4, #8
 8010b92:	68f9      	ldr	r1, [r7, #12]
 8010b94:	6849      	ldr	r1, [r1, #4]
 8010b96:	0849      	lsrs	r1, r1, #1
 8010b98:	2000      	movs	r0, #0
 8010b9a:	4688      	mov	r8, r1
 8010b9c:	4681      	mov	r9, r0
 8010b9e:	eb12 0a08 	adds.w	sl, r2, r8
 8010ba2:	eb43 0b09 	adc.w	fp, r3, r9
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	685b      	ldr	r3, [r3, #4]
 8010baa:	2200      	movs	r2, #0
 8010bac:	603b      	str	r3, [r7, #0]
 8010bae:	607a      	str	r2, [r7, #4]
 8010bb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010bb4:	4650      	mov	r0, sl
 8010bb6:	4659      	mov	r1, fp
 8010bb8:	f7f0 f83e 	bl	8000c38 <__aeabi_uldivmod>
 8010bbc:	4602      	mov	r2, r0
 8010bbe:	460b      	mov	r3, r1
 8010bc0:	4613      	mov	r3, r2
 8010bc2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010bc4:	69bb      	ldr	r3, [r7, #24]
 8010bc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010bca:	d308      	bcc.n	8010bde <UART_SetConfig+0x3de>
 8010bcc:	69bb      	ldr	r3, [r7, #24]
 8010bce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010bd2:	d204      	bcs.n	8010bde <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	69ba      	ldr	r2, [r7, #24]
 8010bda:	60da      	str	r2, [r3, #12]
 8010bdc:	e0b6      	b.n	8010d4c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8010bde:	2301      	movs	r3, #1
 8010be0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8010be4:	e0b2      	b.n	8010d4c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	69db      	ldr	r3, [r3, #28]
 8010bea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010bee:	d15e      	bne.n	8010cae <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8010bf0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010bf4:	2b08      	cmp	r3, #8
 8010bf6:	d828      	bhi.n	8010c4a <UART_SetConfig+0x44a>
 8010bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8010c00 <UART_SetConfig+0x400>)
 8010bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bfe:	bf00      	nop
 8010c00:	08010c25 	.word	0x08010c25
 8010c04:	08010c2d 	.word	0x08010c2d
 8010c08:	08010c35 	.word	0x08010c35
 8010c0c:	08010c4b 	.word	0x08010c4b
 8010c10:	08010c3b 	.word	0x08010c3b
 8010c14:	08010c4b 	.word	0x08010c4b
 8010c18:	08010c4b 	.word	0x08010c4b
 8010c1c:	08010c4b 	.word	0x08010c4b
 8010c20:	08010c43 	.word	0x08010c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010c24:	f7fd fc42 	bl	800e4ac <HAL_RCC_GetPCLK1Freq>
 8010c28:	61f8      	str	r0, [r7, #28]
        break;
 8010c2a:	e014      	b.n	8010c56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010c2c:	f7fd fc54 	bl	800e4d8 <HAL_RCC_GetPCLK2Freq>
 8010c30:	61f8      	str	r0, [r7, #28]
        break;
 8010c32:	e010      	b.n	8010c56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010c34:	4b4d      	ldr	r3, [pc, #308]	@ (8010d6c <UART_SetConfig+0x56c>)
 8010c36:	61fb      	str	r3, [r7, #28]
        break;
 8010c38:	e00d      	b.n	8010c56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010c3a:	f7fd fb9f 	bl	800e37c <HAL_RCC_GetSysClockFreq>
 8010c3e:	61f8      	str	r0, [r7, #28]
        break;
 8010c40:	e009      	b.n	8010c56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010c42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010c46:	61fb      	str	r3, [r7, #28]
        break;
 8010c48:	e005      	b.n	8010c56 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8010c4e:	2301      	movs	r3, #1
 8010c50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8010c54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010c56:	69fb      	ldr	r3, [r7, #28]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d077      	beq.n	8010d4c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8010c5c:	69fb      	ldr	r3, [r7, #28]
 8010c5e:	005a      	lsls	r2, r3, #1
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	685b      	ldr	r3, [r3, #4]
 8010c64:	085b      	lsrs	r3, r3, #1
 8010c66:	441a      	add	r2, r3
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	685b      	ldr	r3, [r3, #4]
 8010c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c70:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010c72:	69bb      	ldr	r3, [r7, #24]
 8010c74:	2b0f      	cmp	r3, #15
 8010c76:	d916      	bls.n	8010ca6 <UART_SetConfig+0x4a6>
 8010c78:	69bb      	ldr	r3, [r7, #24]
 8010c7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010c7e:	d212      	bcs.n	8010ca6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010c80:	69bb      	ldr	r3, [r7, #24]
 8010c82:	b29b      	uxth	r3, r3
 8010c84:	f023 030f 	bic.w	r3, r3, #15
 8010c88:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010c8a:	69bb      	ldr	r3, [r7, #24]
 8010c8c:	085b      	lsrs	r3, r3, #1
 8010c8e:	b29b      	uxth	r3, r3
 8010c90:	f003 0307 	and.w	r3, r3, #7
 8010c94:	b29a      	uxth	r2, r3
 8010c96:	8afb      	ldrh	r3, [r7, #22]
 8010c98:	4313      	orrs	r3, r2
 8010c9a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	8afa      	ldrh	r2, [r7, #22]
 8010ca2:	60da      	str	r2, [r3, #12]
 8010ca4:	e052      	b.n	8010d4c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8010ca6:	2301      	movs	r3, #1
 8010ca8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8010cac:	e04e      	b.n	8010d4c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010cae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010cb2:	2b08      	cmp	r3, #8
 8010cb4:	d827      	bhi.n	8010d06 <UART_SetConfig+0x506>
 8010cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8010cbc <UART_SetConfig+0x4bc>)
 8010cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cbc:	08010ce1 	.word	0x08010ce1
 8010cc0:	08010ce9 	.word	0x08010ce9
 8010cc4:	08010cf1 	.word	0x08010cf1
 8010cc8:	08010d07 	.word	0x08010d07
 8010ccc:	08010cf7 	.word	0x08010cf7
 8010cd0:	08010d07 	.word	0x08010d07
 8010cd4:	08010d07 	.word	0x08010d07
 8010cd8:	08010d07 	.word	0x08010d07
 8010cdc:	08010cff 	.word	0x08010cff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010ce0:	f7fd fbe4 	bl	800e4ac <HAL_RCC_GetPCLK1Freq>
 8010ce4:	61f8      	str	r0, [r7, #28]
        break;
 8010ce6:	e014      	b.n	8010d12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010ce8:	f7fd fbf6 	bl	800e4d8 <HAL_RCC_GetPCLK2Freq>
 8010cec:	61f8      	str	r0, [r7, #28]
        break;
 8010cee:	e010      	b.n	8010d12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010cf0:	4b1e      	ldr	r3, [pc, #120]	@ (8010d6c <UART_SetConfig+0x56c>)
 8010cf2:	61fb      	str	r3, [r7, #28]
        break;
 8010cf4:	e00d      	b.n	8010d12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010cf6:	f7fd fb41 	bl	800e37c <HAL_RCC_GetSysClockFreq>
 8010cfa:	61f8      	str	r0, [r7, #28]
        break;
 8010cfc:	e009      	b.n	8010d12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010cfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010d02:	61fb      	str	r3, [r7, #28]
        break;
 8010d04:	e005      	b.n	8010d12 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8010d06:	2300      	movs	r3, #0
 8010d08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8010d0a:	2301      	movs	r3, #1
 8010d0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8010d10:	bf00      	nop
    }

    if (pclk != 0U)
 8010d12:	69fb      	ldr	r3, [r7, #28]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d019      	beq.n	8010d4c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	685b      	ldr	r3, [r3, #4]
 8010d1c:	085a      	lsrs	r2, r3, #1
 8010d1e:	69fb      	ldr	r3, [r7, #28]
 8010d20:	441a      	add	r2, r3
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	685b      	ldr	r3, [r3, #4]
 8010d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8010d2a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010d2c:	69bb      	ldr	r3, [r7, #24]
 8010d2e:	2b0f      	cmp	r3, #15
 8010d30:	d909      	bls.n	8010d46 <UART_SetConfig+0x546>
 8010d32:	69bb      	ldr	r3, [r7, #24]
 8010d34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010d38:	d205      	bcs.n	8010d46 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010d3a:	69bb      	ldr	r3, [r7, #24]
 8010d3c:	b29a      	uxth	r2, r3
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	60da      	str	r2, [r3, #12]
 8010d44:	e002      	b.n	8010d4c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8010d46:	2301      	movs	r3, #1
 8010d48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	2200      	movs	r2, #0
 8010d50:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	2200      	movs	r2, #0
 8010d56:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8010d58:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	3728      	adds	r7, #40	@ 0x28
 8010d60:	46bd      	mov	sp, r7
 8010d62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010d66:	bf00      	nop
 8010d68:	40008000 	.word	0x40008000
 8010d6c:	00f42400 	.word	0x00f42400

08010d70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010d70:	b480      	push	{r7}
 8010d72:	b083      	sub	sp, #12
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d7c:	f003 0308 	and.w	r3, r3, #8
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d00a      	beq.n	8010d9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	685b      	ldr	r3, [r3, #4]
 8010d8a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	430a      	orrs	r2, r1
 8010d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d9e:	f003 0301 	and.w	r3, r3, #1
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d00a      	beq.n	8010dbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	685b      	ldr	r3, [r3, #4]
 8010dac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	430a      	orrs	r2, r1
 8010dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010dc0:	f003 0302 	and.w	r3, r3, #2
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d00a      	beq.n	8010dde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	685b      	ldr	r3, [r3, #4]
 8010dce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	430a      	orrs	r2, r1
 8010ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010de2:	f003 0304 	and.w	r3, r3, #4
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d00a      	beq.n	8010e00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	685b      	ldr	r3, [r3, #4]
 8010df0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	430a      	orrs	r2, r1
 8010dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e04:	f003 0310 	and.w	r3, r3, #16
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d00a      	beq.n	8010e22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	689b      	ldr	r3, [r3, #8]
 8010e12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	430a      	orrs	r2, r1
 8010e20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e26:	f003 0320 	and.w	r3, r3, #32
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d00a      	beq.n	8010e44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	689b      	ldr	r3, [r3, #8]
 8010e34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	430a      	orrs	r2, r1
 8010e42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d01a      	beq.n	8010e86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	685b      	ldr	r3, [r3, #4]
 8010e56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	430a      	orrs	r2, r1
 8010e64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010e6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010e6e:	d10a      	bne.n	8010e86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	685b      	ldr	r3, [r3, #4]
 8010e76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	430a      	orrs	r2, r1
 8010e84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d00a      	beq.n	8010ea8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	685b      	ldr	r3, [r3, #4]
 8010e98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	430a      	orrs	r2, r1
 8010ea6:	605a      	str	r2, [r3, #4]
  }
}
 8010ea8:	bf00      	nop
 8010eaa:	370c      	adds	r7, #12
 8010eac:	46bd      	mov	sp, r7
 8010eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb2:	4770      	bx	lr

08010eb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b098      	sub	sp, #96	@ 0x60
 8010eb8:	af02      	add	r7, sp, #8
 8010eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010ec4:	f7fa fcea 	bl	800b89c <HAL_GetTick>
 8010ec8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	f003 0308 	and.w	r3, r3, #8
 8010ed4:	2b08      	cmp	r3, #8
 8010ed6:	d12e      	bne.n	8010f36 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010ed8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010edc:	9300      	str	r3, [sp, #0]
 8010ede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010ee6:	6878      	ldr	r0, [r7, #4]
 8010ee8:	f000 f88c 	bl	8011004 <UART_WaitOnFlagUntilTimeout>
 8010eec:	4603      	mov	r3, r0
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d021      	beq.n	8010f36 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010efa:	e853 3f00 	ldrex	r3, [r3]
 8010efe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010f06:	653b      	str	r3, [r7, #80]	@ 0x50
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	461a      	mov	r2, r3
 8010f0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f10:	647b      	str	r3, [r7, #68]	@ 0x44
 8010f12:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010f16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010f18:	e841 2300 	strex	r3, r2, [r1]
 8010f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d1e6      	bne.n	8010ef2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2220      	movs	r2, #32
 8010f28:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010f32:	2303      	movs	r3, #3
 8010f34:	e062      	b.n	8010ffc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	f003 0304 	and.w	r3, r3, #4
 8010f40:	2b04      	cmp	r3, #4
 8010f42:	d149      	bne.n	8010fd8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010f44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010f48:	9300      	str	r3, [sp, #0]
 8010f4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f000 f856 	bl	8011004 <UART_WaitOnFlagUntilTimeout>
 8010f58:	4603      	mov	r3, r0
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d03c      	beq.n	8010fd8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f66:	e853 3f00 	ldrex	r3, [r3]
 8010f6a:	623b      	str	r3, [r7, #32]
   return(result);
 8010f6c:	6a3b      	ldr	r3, [r7, #32]
 8010f6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	461a      	mov	r2, r3
 8010f7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8010f7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010f82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f84:	e841 2300 	strex	r3, r2, [r1]
 8010f88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d1e6      	bne.n	8010f5e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	3308      	adds	r3, #8
 8010f96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f98:	693b      	ldr	r3, [r7, #16]
 8010f9a:	e853 3f00 	ldrex	r3, [r3]
 8010f9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	f023 0301 	bic.w	r3, r3, #1
 8010fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	3308      	adds	r3, #8
 8010fae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010fb0:	61fa      	str	r2, [r7, #28]
 8010fb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fb4:	69b9      	ldr	r1, [r7, #24]
 8010fb6:	69fa      	ldr	r2, [r7, #28]
 8010fb8:	e841 2300 	strex	r3, r2, [r1]
 8010fbc:	617b      	str	r3, [r7, #20]
   return(result);
 8010fbe:	697b      	ldr	r3, [r7, #20]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d1e5      	bne.n	8010f90 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	2220      	movs	r2, #32
 8010fc8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	2200      	movs	r2, #0
 8010fd0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010fd4:	2303      	movs	r3, #3
 8010fd6:	e011      	b.n	8010ffc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	2220      	movs	r2, #32
 8010fdc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	2220      	movs	r2, #32
 8010fe2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	2200      	movs	r2, #0
 8010fea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	2200      	movs	r2, #0
 8010ff0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8010ffa:	2300      	movs	r3, #0
}
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	3758      	adds	r7, #88	@ 0x58
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}

08011004 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b084      	sub	sp, #16
 8011008:	af00      	add	r7, sp, #0
 801100a:	60f8      	str	r0, [r7, #12]
 801100c:	60b9      	str	r1, [r7, #8]
 801100e:	603b      	str	r3, [r7, #0]
 8011010:	4613      	mov	r3, r2
 8011012:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011014:	e04f      	b.n	80110b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011016:	69bb      	ldr	r3, [r7, #24]
 8011018:	f1b3 3fff 	cmp.w	r3, #4294967295
 801101c:	d04b      	beq.n	80110b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801101e:	f7fa fc3d 	bl	800b89c <HAL_GetTick>
 8011022:	4602      	mov	r2, r0
 8011024:	683b      	ldr	r3, [r7, #0]
 8011026:	1ad3      	subs	r3, r2, r3
 8011028:	69ba      	ldr	r2, [r7, #24]
 801102a:	429a      	cmp	r2, r3
 801102c:	d302      	bcc.n	8011034 <UART_WaitOnFlagUntilTimeout+0x30>
 801102e:	69bb      	ldr	r3, [r7, #24]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d101      	bne.n	8011038 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011034:	2303      	movs	r3, #3
 8011036:	e04e      	b.n	80110d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	f003 0304 	and.w	r3, r3, #4
 8011042:	2b00      	cmp	r3, #0
 8011044:	d037      	beq.n	80110b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011046:	68bb      	ldr	r3, [r7, #8]
 8011048:	2b80      	cmp	r3, #128	@ 0x80
 801104a:	d034      	beq.n	80110b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 801104c:	68bb      	ldr	r3, [r7, #8]
 801104e:	2b40      	cmp	r3, #64	@ 0x40
 8011050:	d031      	beq.n	80110b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	69db      	ldr	r3, [r3, #28]
 8011058:	f003 0308 	and.w	r3, r3, #8
 801105c:	2b08      	cmp	r3, #8
 801105e:	d110      	bne.n	8011082 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	2208      	movs	r2, #8
 8011066:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011068:	68f8      	ldr	r0, [r7, #12]
 801106a:	f000 f838 	bl	80110de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	2208      	movs	r2, #8
 8011072:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	2200      	movs	r2, #0
 801107a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 801107e:	2301      	movs	r3, #1
 8011080:	e029      	b.n	80110d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	69db      	ldr	r3, [r3, #28]
 8011088:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801108c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011090:	d111      	bne.n	80110b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801109a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801109c:	68f8      	ldr	r0, [r7, #12]
 801109e:	f000 f81e 	bl	80110de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	2220      	movs	r2, #32
 80110a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	2200      	movs	r2, #0
 80110ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80110b2:	2303      	movs	r3, #3
 80110b4:	e00f      	b.n	80110d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	69da      	ldr	r2, [r3, #28]
 80110bc:	68bb      	ldr	r3, [r7, #8]
 80110be:	4013      	ands	r3, r2
 80110c0:	68ba      	ldr	r2, [r7, #8]
 80110c2:	429a      	cmp	r2, r3
 80110c4:	bf0c      	ite	eq
 80110c6:	2301      	moveq	r3, #1
 80110c8:	2300      	movne	r3, #0
 80110ca:	b2db      	uxtb	r3, r3
 80110cc:	461a      	mov	r2, r3
 80110ce:	79fb      	ldrb	r3, [r7, #7]
 80110d0:	429a      	cmp	r2, r3
 80110d2:	d0a0      	beq.n	8011016 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80110d4:	2300      	movs	r3, #0
}
 80110d6:	4618      	mov	r0, r3
 80110d8:	3710      	adds	r7, #16
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}

080110de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80110de:	b480      	push	{r7}
 80110e0:	b095      	sub	sp, #84	@ 0x54
 80110e2:	af00      	add	r7, sp, #0
 80110e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110ee:	e853 3f00 	ldrex	r3, [r3]
 80110f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80110f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80110fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	461a      	mov	r2, r3
 8011102:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011104:	643b      	str	r3, [r7, #64]	@ 0x40
 8011106:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011108:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801110a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801110c:	e841 2300 	strex	r3, r2, [r1]
 8011110:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011114:	2b00      	cmp	r3, #0
 8011116:	d1e6      	bne.n	80110e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	3308      	adds	r3, #8
 801111e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011120:	6a3b      	ldr	r3, [r7, #32]
 8011122:	e853 3f00 	ldrex	r3, [r3]
 8011126:	61fb      	str	r3, [r7, #28]
   return(result);
 8011128:	69fb      	ldr	r3, [r7, #28]
 801112a:	f023 0301 	bic.w	r3, r3, #1
 801112e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	3308      	adds	r3, #8
 8011136:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011138:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801113a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801113c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801113e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011140:	e841 2300 	strex	r3, r2, [r1]
 8011144:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011148:	2b00      	cmp	r3, #0
 801114a:	d1e5      	bne.n	8011118 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011150:	2b01      	cmp	r3, #1
 8011152:	d118      	bne.n	8011186 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	e853 3f00 	ldrex	r3, [r3]
 8011160:	60bb      	str	r3, [r7, #8]
   return(result);
 8011162:	68bb      	ldr	r3, [r7, #8]
 8011164:	f023 0310 	bic.w	r3, r3, #16
 8011168:	647b      	str	r3, [r7, #68]	@ 0x44
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	461a      	mov	r2, r3
 8011170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011172:	61bb      	str	r3, [r7, #24]
 8011174:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011176:	6979      	ldr	r1, [r7, #20]
 8011178:	69ba      	ldr	r2, [r7, #24]
 801117a:	e841 2300 	strex	r3, r2, [r1]
 801117e:	613b      	str	r3, [r7, #16]
   return(result);
 8011180:	693b      	ldr	r3, [r7, #16]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d1e6      	bne.n	8011154 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	2220      	movs	r2, #32
 801118a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	2200      	movs	r2, #0
 8011192:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	2200      	movs	r2, #0
 8011198:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801119a:	bf00      	nop
 801119c:	3754      	adds	r7, #84	@ 0x54
 801119e:	46bd      	mov	sp, r7
 80111a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a4:	4770      	bx	lr

080111a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80111a6:	b580      	push	{r7, lr}
 80111a8:	b084      	sub	sp, #16
 80111aa:	af00      	add	r7, sp, #0
 80111ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80111b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	2200      	movs	r2, #0
 80111b8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	2200      	movs	r2, #0
 80111c0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80111c4:	68f8      	ldr	r0, [r7, #12]
 80111c6:	f7ff fb05 	bl	80107d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80111ca:	bf00      	nop
 80111cc:	3710      	adds	r7, #16
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd80      	pop	{r7, pc}

080111d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80111d2:	b580      	push	{r7, lr}
 80111d4:	b088      	sub	sp, #32
 80111d6:	af00      	add	r7, sp, #0
 80111d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	e853 3f00 	ldrex	r3, [r3]
 80111e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80111e8:	68bb      	ldr	r3, [r7, #8]
 80111ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80111ee:	61fb      	str	r3, [r7, #28]
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	461a      	mov	r2, r3
 80111f6:	69fb      	ldr	r3, [r7, #28]
 80111f8:	61bb      	str	r3, [r7, #24]
 80111fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111fc:	6979      	ldr	r1, [r7, #20]
 80111fe:	69ba      	ldr	r2, [r7, #24]
 8011200:	e841 2300 	strex	r3, r2, [r1]
 8011204:	613b      	str	r3, [r7, #16]
   return(result);
 8011206:	693b      	ldr	r3, [r7, #16]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d1e6      	bne.n	80111da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	2220      	movs	r2, #32
 8011210:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	2200      	movs	r2, #0
 8011216:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011218:	6878      	ldr	r0, [r7, #4]
 801121a:	f7ff fad1 	bl	80107c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801121e:	bf00      	nop
 8011220:	3720      	adds	r7, #32
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}

08011226 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011226:	b480      	push	{r7}
 8011228:	b083      	sub	sp, #12
 801122a:	af00      	add	r7, sp, #0
 801122c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801122e:	bf00      	nop
 8011230:	370c      	adds	r7, #12
 8011232:	46bd      	mov	sp, r7
 8011234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011238:	4770      	bx	lr

0801123a <MX_MEMS_Init>:
static void Press_Sensor_Handler(uint32_t Instance);
static void MX_IKS4A1_DataLogTerminal_Init(void);
static void MX_IKS4A1_DataLogTerminal_Process(void);

void MX_MEMS_Init(void)
{
 801123a:	b580      	push	{r7, lr}
 801123c:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_IKS4A1_DataLogTerminal_Init();
 801123e:	f000 f809 	bl	8011254 <MX_IKS4A1_DataLogTerminal_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 8011242:	bf00      	nop
 8011244:	bd80      	pop	{r7, pc}

08011246 <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 8011246:	b580      	push	{r7, lr}
 8011248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_IKS4A1_DataLogTerminal_Process();
 801124a:	f000 fa0b 	bl	8011664 <MX_IKS4A1_DataLogTerminal_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 801124e:	bf00      	nop
 8011250:	bd80      	pop	{r7, pc}
	...

08011254 <MX_IKS4A1_DataLogTerminal_Init>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_IKS4A1_DataLogTerminal_Init(void)
{
 8011254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011256:	b089      	sub	sp, #36	@ 0x24
 8011258:	af04      	add	r7, sp, #16
  displayFloatToInt_t out_value_odr;
  int16_t i;

  /* Initialize LED */
  BSP_LED_Init(LED2);
 801125a:	2000      	movs	r0, #0
 801125c:	f7fa f870 	bl	800b340 <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8011260:	2101      	movs	r1, #1
 8011262:	2000      	movs	r0, #0
 8011264:	f7fa f8bc 	bl	800b3e0 <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 8011268:	2000      	movs	r0, #0
 801126a:	f7fa f90d 	bl	800b488 <BSP_PB_GetState>
 801126e:	4603      	mov	r3, r0
 8011270:	2b00      	cmp	r3, #0
 8011272:	bf0c      	ite	eq
 8011274:	2301      	moveq	r3, #1
 8011276:	2300      	movne	r3, #0
 8011278:	b2db      	uxtb	r3, r3
 801127a:	461a      	mov	r2, r3
 801127c:	4b84      	ldr	r3, [pc, #528]	@ (8011490 <MX_IKS4A1_DataLogTerminal_Init+0x23c>)
 801127e:	601a      	str	r2, [r3, #0]

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8011280:	2000      	movs	r0, #0
 8011282:	f7fa f95f 	bl	800b544 <BSP_COM_Init>

  snprintf(dataOut, MAX_BUF_SIZE, "\r\n__________________________________________________________________________\r\n");
 8011286:	4a83      	ldr	r2, [pc, #524]	@ (8011494 <MX_IKS4A1_DataLogTerminal_Init+0x240>)
 8011288:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801128c:	4882      	ldr	r0, [pc, #520]	@ (8011498 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 801128e:	f001 f815 	bl	80122bc <sniprintf>
  printf("%s", dataOut);
 8011292:	4981      	ldr	r1, [pc, #516]	@ (8011498 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8011294:	4881      	ldr	r0, [pc, #516]	@ (801149c <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 8011296:	f000 ffff 	bl	8012298 <iprintf>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LSM6DSV16X_0, MOTION_ACCELERO | MOTION_GYRO);
 801129a:	2103      	movs	r1, #3
 801129c:	2001      	movs	r0, #1
 801129e:	f7f9 fb07 	bl	800a8b0 <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LSM6DSO16IS_0, MOTION_ACCELERO | MOTION_GYRO);
 80112a2:	2103      	movs	r1, #3
 80112a4:	2003      	movs	r0, #3
 80112a6:	f7f9 fb03 	bl	800a8b0 <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LIS2DUXS12_0, MOTION_ACCELERO);
 80112aa:	2102      	movs	r1, #2
 80112ac:	2002      	movs	r0, #2
 80112ae:	f7f9 faff 	bl	800a8b0 <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LIS2MDL_0, MOTION_MAGNETO);
 80112b2:	2104      	movs	r1, #4
 80112b4:	2000      	movs	r0, #0
 80112b6:	f7f9 fafb 	bl	800a8b0 <IKS4A1_MOTION_SENSOR_Init>

  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 80112ba:	2300      	movs	r3, #0
 80112bc:	81fb      	strh	r3, [r7, #14]
 80112be:	e0d4      	b.n	801146a <MX_IKS4A1_DataLogTerminal_Init+0x216>
  {
    IKS4A1_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 80112c0:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80112c4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80112c8:	4613      	mov	r3, r2
 80112ca:	00db      	lsls	r3, r3, #3
 80112cc:	1a9b      	subs	r3, r3, r2
 80112ce:	009b      	lsls	r3, r3, #2
 80112d0:	4a73      	ldr	r2, [pc, #460]	@ (80114a0 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80112d2:	4413      	add	r3, r2
 80112d4:	4619      	mov	r1, r3
 80112d6:	f7f9 fc1d 	bl	800ab14 <IKS4A1_MOTION_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
 80112da:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
             "\r\nMotion Sensor Instance %d capabilities: \r\n ACCELEROMETER: %d\r\n GYROSCOPE: %d\r\n MAGNETOMETER: %d\r\n LOW POWER: %d\r\n",
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 80112de:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80112e2:	486f      	ldr	r0, [pc, #444]	@ (80114a0 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80112e4:	4613      	mov	r3, r2
 80112e6:	00db      	lsls	r3, r3, #3
 80112e8:	1a9b      	subs	r3, r3, r2
 80112ea:	009b      	lsls	r3, r3, #2
 80112ec:	4403      	add	r3, r0
 80112ee:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80112f0:	461c      	mov	r4, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 80112f2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80112f6:	486a      	ldr	r0, [pc, #424]	@ (80114a0 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80112f8:	4613      	mov	r3, r2
 80112fa:	00db      	lsls	r3, r3, #3
 80112fc:	1a9b      	subs	r3, r3, r2
 80112fe:	009b      	lsls	r3, r3, #2
 8011300:	4403      	add	r3, r0
 8011302:	3301      	adds	r3, #1
 8011304:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8011306:	461d      	mov	r5, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8011308:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801130c:	4864      	ldr	r0, [pc, #400]	@ (80114a0 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 801130e:	4613      	mov	r3, r2
 8011310:	00db      	lsls	r3, r3, #3
 8011312:	1a9b      	subs	r3, r3, r2
 8011314:	009b      	lsls	r3, r3, #2
 8011316:	4403      	add	r3, r0
 8011318:	3302      	adds	r3, #2
 801131a:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 801131c:	461e      	mov	r6, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 801131e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011322:	485f      	ldr	r0, [pc, #380]	@ (80114a0 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8011324:	4613      	mov	r3, r2
 8011326:	00db      	lsls	r3, r3, #3
 8011328:	1a9b      	subs	r3, r3, r2
 801132a:	009b      	lsls	r3, r3, #2
 801132c:	4403      	add	r3, r0
 801132e:	3303      	adds	r3, #3
 8011330:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8011332:	9303      	str	r3, [sp, #12]
 8011334:	9602      	str	r6, [sp, #8]
 8011336:	9501      	str	r5, [sp, #4]
 8011338:	9400      	str	r4, [sp, #0]
 801133a:	460b      	mov	r3, r1
 801133c:	4a59      	ldr	r2, [pc, #356]	@ (80114a4 <MX_IKS4A1_DataLogTerminal_Init+0x250>)
 801133e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011342:	4855      	ldr	r0, [pc, #340]	@ (8011498 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8011344:	f000 ffba 	bl	80122bc <sniprintf>
    printf("%s", dataOut);
 8011348:	4953      	ldr	r1, [pc, #332]	@ (8011498 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 801134a:	4854      	ldr	r0, [pc, #336]	@ (801149c <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 801134c:	f000 ffa4 	bl	8012298 <iprintf>
    floatToInt(MotionCapabilities[i].AccMaxOdr, &out_value_odr, 3);
 8011350:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011354:	4952      	ldr	r1, [pc, #328]	@ (80114a0 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8011356:	4613      	mov	r3, r2
 8011358:	00db      	lsls	r3, r3, #3
 801135a:	1a9b      	subs	r3, r3, r2
 801135c:	009b      	lsls	r3, r3, #2
 801135e:	440b      	add	r3, r1
 8011360:	3314      	adds	r3, #20
 8011362:	edd3 7a00 	vldr	s15, [r3]
 8011366:	463b      	mov	r3, r7
 8011368:	2103      	movs	r1, #3
 801136a:	4618      	mov	r0, r3
 801136c:	eeb0 0a67 	vmov.f32	s0, s15
 8011370:	f000 fa1e 	bl	80117b0 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 8011378:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 801137a:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 801137c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011380:	4947      	ldr	r1, [pc, #284]	@ (80114a0 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8011382:	4613      	mov	r3, r2
 8011384:	00db      	lsls	r3, r3, #3
 8011386:	1a9b      	subs	r3, r3, r2
 8011388:	009b      	lsls	r3, r3, #2
 801138a:	440b      	add	r3, r1
 801138c:	3308      	adds	r3, #8
 801138e:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 8011390:	9301      	str	r3, [sp, #4]
 8011392:	9000      	str	r0, [sp, #0]
 8011394:	4623      	mov	r3, r4
 8011396:	4a44      	ldr	r2, [pc, #272]	@ (80114a8 <MX_IKS4A1_DataLogTerminal_Init+0x254>)
 8011398:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801139c:	483e      	ldr	r0, [pc, #248]	@ (8011498 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 801139e:	f000 ff8d 	bl	80122bc <sniprintf>
    printf("%s", dataOut);
 80113a2:	493d      	ldr	r1, [pc, #244]	@ (8011498 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 80113a4:	483d      	ldr	r0, [pc, #244]	@ (801149c <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 80113a6:	f000 ff77 	bl	8012298 <iprintf>
    floatToInt(MotionCapabilities[i].GyroMaxOdr, &out_value_odr, 3);
 80113aa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80113ae:	493c      	ldr	r1, [pc, #240]	@ (80114a0 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80113b0:	4613      	mov	r3, r2
 80113b2:	00db      	lsls	r3, r3, #3
 80113b4:	1a9b      	subs	r3, r3, r2
 80113b6:	009b      	lsls	r3, r3, #2
 80113b8:	440b      	add	r3, r1
 80113ba:	3310      	adds	r3, #16
 80113bc:	edd3 7a00 	vldr	s15, [r3]
 80113c0:	463b      	mov	r3, r7
 80113c2:	2103      	movs	r1, #3
 80113c4:	4618      	mov	r0, r3
 80113c6:	eeb0 0a67 	vmov.f32	s0, s15
 80113ca:	f000 f9f1 	bl	80117b0 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 80113d2:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 80113d4:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 80113d6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80113da:	4931      	ldr	r1, [pc, #196]	@ (80114a0 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80113dc:	4613      	mov	r3, r2
 80113de:	00db      	lsls	r3, r3, #3
 80113e0:	1a9b      	subs	r3, r3, r2
 80113e2:	009b      	lsls	r3, r3, #2
 80113e4:	440b      	add	r3, r1
 80113e6:	3304      	adds	r3, #4
 80113e8:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 80113ea:	9301      	str	r3, [sp, #4]
 80113ec:	9000      	str	r0, [sp, #0]
 80113ee:	4623      	mov	r3, r4
 80113f0:	4a2e      	ldr	r2, [pc, #184]	@ (80114ac <MX_IKS4A1_DataLogTerminal_Init+0x258>)
 80113f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80113f6:	4828      	ldr	r0, [pc, #160]	@ (8011498 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 80113f8:	f000 ff60 	bl	80122bc <sniprintf>
    printf("%s", dataOut);
 80113fc:	4926      	ldr	r1, [pc, #152]	@ (8011498 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 80113fe:	4827      	ldr	r0, [pc, #156]	@ (801149c <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 8011400:	f000 ff4a 	bl	8012298 <iprintf>
    floatToInt(MotionCapabilities[i].MagMaxOdr, &out_value_odr, 3);
 8011404:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011408:	4925      	ldr	r1, [pc, #148]	@ (80114a0 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 801140a:	4613      	mov	r3, r2
 801140c:	00db      	lsls	r3, r3, #3
 801140e:	1a9b      	subs	r3, r3, r2
 8011410:	009b      	lsls	r3, r3, #2
 8011412:	440b      	add	r3, r1
 8011414:	3318      	adds	r3, #24
 8011416:	edd3 7a00 	vldr	s15, [r3]
 801141a:	463b      	mov	r3, r7
 801141c:	2103      	movs	r1, #3
 801141e:	4618      	mov	r0, r3
 8011420:	eeb0 0a67 	vmov.f32	s0, s15
 8011424:	f000 f9c4 	bl	80117b0 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 801142c:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 801142e:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 8011430:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011434:	491a      	ldr	r1, [pc, #104]	@ (80114a0 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8011436:	4613      	mov	r3, r2
 8011438:	00db      	lsls	r3, r3, #3
 801143a:	1a9b      	subs	r3, r3, r2
 801143c:	009b      	lsls	r3, r3, #2
 801143e:	440b      	add	r3, r1
 8011440:	330c      	adds	r3, #12
 8011442:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8011444:	9301      	str	r3, [sp, #4]
 8011446:	9000      	str	r0, [sp, #0]
 8011448:	4623      	mov	r3, r4
 801144a:	4a19      	ldr	r2, [pc, #100]	@ (80114b0 <MX_IKS4A1_DataLogTerminal_Init+0x25c>)
 801144c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011450:	4811      	ldr	r0, [pc, #68]	@ (8011498 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8011452:	f000 ff33 	bl	80122bc <sniprintf>
    printf("%s", dataOut);
 8011456:	4910      	ldr	r1, [pc, #64]	@ (8011498 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8011458:	4810      	ldr	r0, [pc, #64]	@ (801149c <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 801145a:	f000 ff1d 	bl	8012298 <iprintf>
  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 801145e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011462:	b29b      	uxth	r3, r3
 8011464:	3301      	adds	r3, #1
 8011466:	b29b      	uxth	r3, r3
 8011468:	81fb      	strh	r3, [r7, #14]
 801146a:	89fb      	ldrh	r3, [r7, #14]
 801146c:	2b03      	cmp	r3, #3
 801146e:	f67f af27 	bls.w	80112c0 <MX_IKS4A1_DataLogTerminal_Init+0x6c>
  }

  IKS4A1_ENV_SENSOR_Init(IKS4A1_SHT40AD1B_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 8011472:	2105      	movs	r1, #5
 8011474:	2002      	movs	r0, #2
 8011476:	f7f8 fddf 	bl	800a038 <IKS4A1_ENV_SENSOR_Init>

  IKS4A1_ENV_SENSOR_Init(IKS4A1_LPS22DF_0, ENV_TEMPERATURE | ENV_PRESSURE);
 801147a:	2103      	movs	r1, #3
 801147c:	2001      	movs	r0, #1
 801147e:	f7f8 fddb 	bl	800a038 <IKS4A1_ENV_SENSOR_Init>

  IKS4A1_ENV_SENSOR_Init(IKS4A1_STTS22H_0, ENV_TEMPERATURE);
 8011482:	2101      	movs	r1, #1
 8011484:	2000      	movs	r0, #0
 8011486:	f7f8 fdd7 	bl	800a038 <IKS4A1_ENV_SENSOR_Init>

  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 801148a:	2300      	movs	r3, #0
 801148c:	81fb      	strh	r3, [r7, #14]
 801148e:	e0c2      	b.n	8011616 <MX_IKS4A1_DataLogTerminal_Init+0x3c2>
 8011490:	200009ec 	.word	0x200009ec
 8011494:	08014298 	.word	0x08014298
 8011498:	200008ec 	.word	0x200008ec
 801149c:	080142e8 	.word	0x080142e8
 80114a0:	20000834 	.word	0x20000834
 80114a4:	080142ec 	.word	0x080142ec
 80114a8:	08014360 	.word	0x08014360
 80114ac:	0801438c 	.word	0x0801438c
 80114b0:	080143bc 	.word	0x080143bc
  {
    IKS4A1_ENV_SENSOR_GetCapabilities(i, &EnvCapabilities[i]);
 80114b4:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80114b8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80114bc:	4613      	mov	r3, r2
 80114be:	005b      	lsls	r3, r3, #1
 80114c0:	4413      	add	r3, r2
 80114c2:	00db      	lsls	r3, r3, #3
 80114c4:	4a58      	ldr	r2, [pc, #352]	@ (8011628 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 80114c6:	4413      	add	r3, r2
 80114c8:	4619      	mov	r1, r3
 80114ca:	f7f8 fec3 	bl	800a254 <IKS4A1_ENV_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
 80114ce:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
             "\r\nEnvironmental Sensor Instance %d capabilities: \r\n TEMPERATURE: %d\r\n PRESSURE: %d\r\n HUMIDITY: %d\r\n LOW POWER: %d\r\n",
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 80114d2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80114d6:	4854      	ldr	r0, [pc, #336]	@ (8011628 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 80114d8:	4613      	mov	r3, r2
 80114da:	005b      	lsls	r3, r3, #1
 80114dc:	4413      	add	r3, r2
 80114de:	00db      	lsls	r3, r3, #3
 80114e0:	4403      	add	r3, r0
 80114e2:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80114e4:	461c      	mov	r4, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 80114e6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80114ea:	484f      	ldr	r0, [pc, #316]	@ (8011628 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 80114ec:	4613      	mov	r3, r2
 80114ee:	005b      	lsls	r3, r3, #1
 80114f0:	4413      	add	r3, r2
 80114f2:	00db      	lsls	r3, r3, #3
 80114f4:	4403      	add	r3, r0
 80114f6:	3301      	adds	r3, #1
 80114f8:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80114fa:	461d      	mov	r5, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 80114fc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011500:	4849      	ldr	r0, [pc, #292]	@ (8011628 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8011502:	4613      	mov	r3, r2
 8011504:	005b      	lsls	r3, r3, #1
 8011506:	4413      	add	r3, r2
 8011508:	00db      	lsls	r3, r3, #3
 801150a:	4403      	add	r3, r0
 801150c:	3302      	adds	r3, #2
 801150e:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8011510:	461e      	mov	r6, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 8011512:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011516:	4844      	ldr	r0, [pc, #272]	@ (8011628 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8011518:	4613      	mov	r3, r2
 801151a:	005b      	lsls	r3, r3, #1
 801151c:	4413      	add	r3, r2
 801151e:	00db      	lsls	r3, r3, #3
 8011520:	4403      	add	r3, r0
 8011522:	3304      	adds	r3, #4
 8011524:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8011526:	9303      	str	r3, [sp, #12]
 8011528:	9602      	str	r6, [sp, #8]
 801152a:	9501      	str	r5, [sp, #4]
 801152c:	9400      	str	r4, [sp, #0]
 801152e:	460b      	mov	r3, r1
 8011530:	4a3e      	ldr	r2, [pc, #248]	@ (801162c <MX_IKS4A1_DataLogTerminal_Init+0x3d8>)
 8011532:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011536:	483e      	ldr	r0, [pc, #248]	@ (8011630 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8011538:	f000 fec0 	bl	80122bc <sniprintf>
    printf("%s", dataOut);
 801153c:	493c      	ldr	r1, [pc, #240]	@ (8011630 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 801153e:	483d      	ldr	r0, [pc, #244]	@ (8011634 <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 8011540:	f000 feaa 	bl	8012298 <iprintf>
    floatToInt(EnvCapabilities[i].TempMaxOdr, &out_value_odr, 3);
 8011544:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011548:	4937      	ldr	r1, [pc, #220]	@ (8011628 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 801154a:	4613      	mov	r3, r2
 801154c:	005b      	lsls	r3, r3, #1
 801154e:	4413      	add	r3, r2
 8011550:	00db      	lsls	r3, r3, #3
 8011552:	440b      	add	r3, r1
 8011554:	330c      	adds	r3, #12
 8011556:	edd3 7a00 	vldr	s15, [r3]
 801155a:	463b      	mov	r3, r7
 801155c:	2103      	movs	r1, #3
 801155e:	4618      	mov	r0, r3
 8011560:	eeb0 0a67 	vmov.f32	s0, s15
 8011564:	f000 f924 	bl	80117b0 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 801156c:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 801156e:	9300      	str	r3, [sp, #0]
 8011570:	4613      	mov	r3, r2
 8011572:	4a31      	ldr	r2, [pc, #196]	@ (8011638 <MX_IKS4A1_DataLogTerminal_Init+0x3e4>)
 8011574:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011578:	482d      	ldr	r0, [pc, #180]	@ (8011630 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 801157a:	f000 fe9f 	bl	80122bc <sniprintf>
    printf("%s", dataOut);
 801157e:	492c      	ldr	r1, [pc, #176]	@ (8011630 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8011580:	482c      	ldr	r0, [pc, #176]	@ (8011634 <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 8011582:	f000 fe89 	bl	8012298 <iprintf>
    floatToInt(EnvCapabilities[i].PressMaxOdr, &out_value_odr, 3);
 8011586:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801158a:	4927      	ldr	r1, [pc, #156]	@ (8011628 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 801158c:	4613      	mov	r3, r2
 801158e:	005b      	lsls	r3, r3, #1
 8011590:	4413      	add	r3, r2
 8011592:	00db      	lsls	r3, r3, #3
 8011594:	440b      	add	r3, r1
 8011596:	3310      	adds	r3, #16
 8011598:	edd3 7a00 	vldr	s15, [r3]
 801159c:	463b      	mov	r3, r7
 801159e:	2103      	movs	r1, #3
 80115a0:	4618      	mov	r0, r3
 80115a2:	eeb0 0a67 	vmov.f32	s0, s15
 80115a6:	f000 f903 	bl	80117b0 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 80115ae:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 80115b0:	9300      	str	r3, [sp, #0]
 80115b2:	4613      	mov	r3, r2
 80115b4:	4a21      	ldr	r2, [pc, #132]	@ (801163c <MX_IKS4A1_DataLogTerminal_Init+0x3e8>)
 80115b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80115ba:	481d      	ldr	r0, [pc, #116]	@ (8011630 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 80115bc:	f000 fe7e 	bl	80122bc <sniprintf>
    printf("%s", dataOut);
 80115c0:	491b      	ldr	r1, [pc, #108]	@ (8011630 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 80115c2:	481c      	ldr	r0, [pc, #112]	@ (8011634 <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 80115c4:	f000 fe68 	bl	8012298 <iprintf>
    floatToInt(EnvCapabilities[i].HumMaxOdr, &out_value_odr, 3);
 80115c8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80115cc:	4916      	ldr	r1, [pc, #88]	@ (8011628 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 80115ce:	4613      	mov	r3, r2
 80115d0:	005b      	lsls	r3, r3, #1
 80115d2:	4413      	add	r3, r2
 80115d4:	00db      	lsls	r3, r3, #3
 80115d6:	440b      	add	r3, r1
 80115d8:	3308      	adds	r3, #8
 80115da:	edd3 7a00 	vldr	s15, [r3]
 80115de:	463b      	mov	r3, r7
 80115e0:	2103      	movs	r1, #3
 80115e2:	4618      	mov	r0, r3
 80115e4:	eeb0 0a67 	vmov.f32	s0, s15
 80115e8:	f000 f8e2 	bl	80117b0 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int, (int)out_value_odr.out_dec);
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	461a      	mov	r2, r3
 80115f0:	68bb      	ldr	r3, [r7, #8]
 80115f2:	9300      	str	r3, [sp, #0]
 80115f4:	4613      	mov	r3, r2
 80115f6:	4a12      	ldr	r2, [pc, #72]	@ (8011640 <MX_IKS4A1_DataLogTerminal_Init+0x3ec>)
 80115f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80115fc:	480c      	ldr	r0, [pc, #48]	@ (8011630 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 80115fe:	f000 fe5d 	bl	80122bc <sniprintf>
    printf("%s", dataOut);
 8011602:	490b      	ldr	r1, [pc, #44]	@ (8011630 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8011604:	480b      	ldr	r0, [pc, #44]	@ (8011634 <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 8011606:	f000 fe47 	bl	8012298 <iprintf>
  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 801160a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801160e:	b29b      	uxth	r3, r3
 8011610:	3301      	adds	r3, #1
 8011612:	b29b      	uxth	r3, r3
 8011614:	81fb      	strh	r3, [r7, #14]
 8011616:	89fb      	ldrh	r3, [r7, #14]
 8011618:	2b02      	cmp	r3, #2
 801161a:	f67f af4b 	bls.w	80114b4 <MX_IKS4A1_DataLogTerminal_Init+0x260>
  }
}
 801161e:	bf00      	nop
 8011620:	bf00      	nop
 8011622:	3714      	adds	r7, #20
 8011624:	46bd      	mov	sp, r7
 8011626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011628:	200008a4 	.word	0x200008a4
 801162c:	080143e8 	.word	0x080143e8
 8011630:	200008ec 	.word	0x200008ec
 8011634:	080142e8 	.word	0x080142e8
 8011638:	0801445c 	.word	0x0801445c
 801163c:	08014478 	.word	0x08014478
 8011640:	08014498 	.word	0x08014498

08011644 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8011644:	b480      	push	{r7}
 8011646:	b083      	sub	sp, #12
 8011648:	af00      	add	r7, sp, #0
 801164a:	4603      	mov	r3, r0
 801164c:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 801164e:	4b04      	ldr	r3, [pc, #16]	@ (8011660 <BSP_PB_Callback+0x1c>)
 8011650:	2201      	movs	r2, #1
 8011652:	701a      	strb	r2, [r3, #0]
}
 8011654:	bf00      	nop
 8011656:	370c      	adds	r7, #12
 8011658:	46bd      	mov	sp, r7
 801165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165e:	4770      	bx	lr
 8011660:	20000830 	.word	0x20000830

08011664 <MX_IKS4A1_DataLogTerminal_Process>:
/**
  * @brief  Process of the DataLogTerminal application
  * @retval None
  */
void MX_IKS4A1_DataLogTerminal_Process(void)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b082      	sub	sp, #8
 8011668:	af00      	add	r7, sp, #0
  int32_t i;

  if (PushButtonDetected != 0U)
 801166a:	4b4a      	ldr	r3, [pc, #296]	@ (8011794 <MX_IKS4A1_DataLogTerminal_Process+0x130>)
 801166c:	781b      	ldrb	r3, [r3, #0]
 801166e:	b2db      	uxtb	r3, r3
 8011670:	2b00      	cmp	r3, #0
 8011672:	d013      	beq.n	801169c <MX_IKS4A1_DataLogTerminal_Process+0x38>
  {
    /* Debouncing */
    HAL_Delay(50);
 8011674:	2032      	movs	r0, #50	@ 0x32
 8011676:	f7fa f91d 	bl	800b8b4 <HAL_Delay>

    /* Wait until the button is released */
    while ((BSP_PB_GetState(BUTTON_KEY) == PushButtonState));
 801167a:	bf00      	nop
 801167c:	2000      	movs	r0, #0
 801167e:	f7f9 ff03 	bl	800b488 <BSP_PB_GetState>
 8011682:	4602      	mov	r2, r0
 8011684:	4b44      	ldr	r3, [pc, #272]	@ (8011798 <MX_IKS4A1_DataLogTerminal_Process+0x134>)
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	429a      	cmp	r2, r3
 801168a:	d0f7      	beq.n	801167c <MX_IKS4A1_DataLogTerminal_Process+0x18>

    /* Debouncing */
    HAL_Delay(50);
 801168c:	2032      	movs	r0, #50	@ 0x32
 801168e:	f7fa f911 	bl	800b8b4 <HAL_Delay>

    /* Reset Interrupt flag */
    PushButtonDetected = 0;
 8011692:	4b40      	ldr	r3, [pc, #256]	@ (8011794 <MX_IKS4A1_DataLogTerminal_Process+0x130>)
 8011694:	2200      	movs	r2, #0
 8011696:	701a      	strb	r2, [r3, #0]

    MX_IKS4A1_DataLogTerminal_Init();
 8011698:	f7ff fddc 	bl	8011254 <MX_IKS4A1_DataLogTerminal_Init>
  }

  snprintf(dataOut, MAX_BUF_SIZE, "\r\n__________________________________________________________________________\r\n");
 801169c:	4a3f      	ldr	r2, [pc, #252]	@ (801179c <MX_IKS4A1_DataLogTerminal_Process+0x138>)
 801169e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80116a2:	483f      	ldr	r0, [pc, #252]	@ (80117a0 <MX_IKS4A1_DataLogTerminal_Process+0x13c>)
 80116a4:	f000 fe0a 	bl	80122bc <sniprintf>
  printf("%s", dataOut);
 80116a8:	493d      	ldr	r1, [pc, #244]	@ (80117a0 <MX_IKS4A1_DataLogTerminal_Process+0x13c>)
 80116aa:	483e      	ldr	r0, [pc, #248]	@ (80117a4 <MX_IKS4A1_DataLogTerminal_Process+0x140>)
 80116ac:	f000 fdf4 	bl	8012298 <iprintf>

  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 80116b0:	2300      	movs	r3, #0
 80116b2:	607b      	str	r3, [r7, #4]
 80116b4:	e02e      	b.n	8011714 <MX_IKS4A1_DataLogTerminal_Process+0xb0>
  {
    if(MotionCapabilities[i].Acc)
 80116b6:	493c      	ldr	r1, [pc, #240]	@ (80117a8 <MX_IKS4A1_DataLogTerminal_Process+0x144>)
 80116b8:	687a      	ldr	r2, [r7, #4]
 80116ba:	4613      	mov	r3, r2
 80116bc:	00db      	lsls	r3, r3, #3
 80116be:	1a9b      	subs	r3, r3, r2
 80116c0:	009b      	lsls	r3, r3, #2
 80116c2:	440b      	add	r3, r1
 80116c4:	781b      	ldrb	r3, [r3, #0]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d003      	beq.n	80116d2 <MX_IKS4A1_DataLogTerminal_Process+0x6e>
    {
      Accelero_Sensor_Handler(i);
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	4618      	mov	r0, r3
 80116ce:	f000 f8f9 	bl	80118c4 <Accelero_Sensor_Handler>
    }
    if(MotionCapabilities[i].Gyro)
 80116d2:	4935      	ldr	r1, [pc, #212]	@ (80117a8 <MX_IKS4A1_DataLogTerminal_Process+0x144>)
 80116d4:	687a      	ldr	r2, [r7, #4]
 80116d6:	4613      	mov	r3, r2
 80116d8:	00db      	lsls	r3, r3, #3
 80116da:	1a9b      	subs	r3, r3, r2
 80116dc:	009b      	lsls	r3, r3, #2
 80116de:	440b      	add	r3, r1
 80116e0:	3301      	adds	r3, #1
 80116e2:	781b      	ldrb	r3, [r3, #0]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d003      	beq.n	80116f0 <MX_IKS4A1_DataLogTerminal_Process+0x8c>
    {
      Gyro_Sensor_Handler(i);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	4618      	mov	r0, r3
 80116ec:	f000 f9aa 	bl	8011a44 <Gyro_Sensor_Handler>
    }
    if(MotionCapabilities[i].Magneto)
 80116f0:	492d      	ldr	r1, [pc, #180]	@ (80117a8 <MX_IKS4A1_DataLogTerminal_Process+0x144>)
 80116f2:	687a      	ldr	r2, [r7, #4]
 80116f4:	4613      	mov	r3, r2
 80116f6:	00db      	lsls	r3, r3, #3
 80116f8:	1a9b      	subs	r3, r3, r2
 80116fa:	009b      	lsls	r3, r3, #2
 80116fc:	440b      	add	r3, r1
 80116fe:	3302      	adds	r3, #2
 8011700:	781b      	ldrb	r3, [r3, #0]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d003      	beq.n	801170e <MX_IKS4A1_DataLogTerminal_Process+0xaa>
    {
      Magneto_Sensor_Handler(i);
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	4618      	mov	r0, r3
 801170a:	f000 fa5b 	bl	8011bc4 <Magneto_Sensor_Handler>
  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	3301      	adds	r3, #1
 8011712:	607b      	str	r3, [r7, #4]
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	2b03      	cmp	r3, #3
 8011718:	d9cd      	bls.n	80116b6 <MX_IKS4A1_DataLogTerminal_Process+0x52>
    }
  }

  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 801171a:	2300      	movs	r3, #0
 801171c:	607b      	str	r3, [r7, #4]
 801171e:	e02e      	b.n	801177e <MX_IKS4A1_DataLogTerminal_Process+0x11a>
  {
    if(EnvCapabilities[i].Humidity)
 8011720:	4922      	ldr	r1, [pc, #136]	@ (80117ac <MX_IKS4A1_DataLogTerminal_Process+0x148>)
 8011722:	687a      	ldr	r2, [r7, #4]
 8011724:	4613      	mov	r3, r2
 8011726:	005b      	lsls	r3, r3, #1
 8011728:	4413      	add	r3, r2
 801172a:	00db      	lsls	r3, r3, #3
 801172c:	440b      	add	r3, r1
 801172e:	3302      	adds	r3, #2
 8011730:	781b      	ldrb	r3, [r3, #0]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d003      	beq.n	801173e <MX_IKS4A1_DataLogTerminal_Process+0xda>
    {
      Hum_Sensor_Handler(i);
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	4618      	mov	r0, r3
 801173a:	f000 fc4b 	bl	8011fd4 <Hum_Sensor_Handler>
    }
    if(EnvCapabilities[i].Temperature)
 801173e:	491b      	ldr	r1, [pc, #108]	@ (80117ac <MX_IKS4A1_DataLogTerminal_Process+0x148>)
 8011740:	687a      	ldr	r2, [r7, #4]
 8011742:	4613      	mov	r3, r2
 8011744:	005b      	lsls	r3, r3, #1
 8011746:	4413      	add	r3, r2
 8011748:	00db      	lsls	r3, r3, #3
 801174a:	440b      	add	r3, r1
 801174c:	781b      	ldrb	r3, [r3, #0]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d003      	beq.n	801175a <MX_IKS4A1_DataLogTerminal_Process+0xf6>
    {
      Temp_Sensor_Handler(i);
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	4618      	mov	r0, r3
 8011756:	f000 faf5 	bl	8011d44 <Temp_Sensor_Handler>
    }
    if(EnvCapabilities[i].Pressure)
 801175a:	4914      	ldr	r1, [pc, #80]	@ (80117ac <MX_IKS4A1_DataLogTerminal_Process+0x148>)
 801175c:	687a      	ldr	r2, [r7, #4]
 801175e:	4613      	mov	r3, r2
 8011760:	005b      	lsls	r3, r3, #1
 8011762:	4413      	add	r3, r2
 8011764:	00db      	lsls	r3, r3, #3
 8011766:	440b      	add	r3, r1
 8011768:	3301      	adds	r3, #1
 801176a:	781b      	ldrb	r3, [r3, #0]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d003      	beq.n	8011778 <MX_IKS4A1_DataLogTerminal_Process+0x114>
    {
      Press_Sensor_Handler(i);
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	4618      	mov	r0, r3
 8011774:	f000 fb8e 	bl	8011e94 <Press_Sensor_Handler>
  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	3301      	adds	r3, #1
 801177c:	607b      	str	r3, [r7, #4]
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	2b02      	cmp	r3, #2
 8011782:	d9cd      	bls.n	8011720 <MX_IKS4A1_DataLogTerminal_Process+0xbc>
    }
  }

  HAL_Delay( 1000 );
 8011784:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011788:	f7fa f894 	bl	800b8b4 <HAL_Delay>
}
 801178c:	bf00      	nop
 801178e:	3708      	adds	r7, #8
 8011790:	46bd      	mov	sp, r7
 8011792:	bd80      	pop	{r7, pc}
 8011794:	20000830 	.word	0x20000830
 8011798:	200009ec 	.word	0x200009ec
 801179c:	08014298 	.word	0x08014298
 80117a0:	200008ec 	.word	0x200008ec
 80117a4:	080142e8 	.word	0x080142e8
 80117a8:	20000834 	.word	0x20000834
 80117ac:	200008a4 	.word	0x200008a4

080117b0 <floatToInt>:
  * @param  out_value the pointer to the output integer structure
  * @param  dec_prec the decimal precision to be used
  * @retval None
  */
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 80117b0:	b5b0      	push	{r4, r5, r7, lr}
 80117b2:	b084      	sub	sp, #16
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	ed87 0a03 	vstr	s0, [r7, #12]
 80117ba:	60b8      	str	r0, [r7, #8]
 80117bc:	6079      	str	r1, [r7, #4]
  if(in >= 0.0f)
 80117be:	edd7 7a03 	vldr	s15, [r7, #12]
 80117c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80117c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117ca:	db03      	blt.n	80117d4 <floatToInt+0x24>
  {
    out_value->sign = 0;
 80117cc:	68bb      	ldr	r3, [r7, #8]
 80117ce:	2200      	movs	r2, #0
 80117d0:	701a      	strb	r2, [r3, #0]
 80117d2:	e008      	b.n	80117e6 <floatToInt+0x36>
  }else
  {
    out_value->sign = 1;
 80117d4:	68bb      	ldr	r3, [r7, #8]
 80117d6:	2201      	movs	r2, #1
 80117d8:	701a      	strb	r2, [r3, #0]
    in = -in;
 80117da:	edd7 7a03 	vldr	s15, [r7, #12]
 80117de:	eef1 7a67 	vneg.f32	s15, s15
 80117e2:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  in = in + (0.5f / pow(10, dec_prec));
 80117e6:	68f8      	ldr	r0, [r7, #12]
 80117e8:	f7ee fea6 	bl	8000538 <__aeabi_f2d>
 80117ec:	4604      	mov	r4, r0
 80117ee:	460d      	mov	r5, r1
 80117f0:	6878      	ldr	r0, [r7, #4]
 80117f2:	f7ee fe8f 	bl	8000514 <__aeabi_i2d>
 80117f6:	4602      	mov	r2, r0
 80117f8:	460b      	mov	r3, r1
 80117fa:	ec43 2b11 	vmov	d1, r2, r3
 80117fe:	ed9f 0b2e 	vldr	d0, [pc, #184]	@ 80118b8 <floatToInt+0x108>
 8011802:	f001 fda1 	bl	8013348 <pow>
 8011806:	ec53 2b10 	vmov	r2, r3, d0
 801180a:	f04f 0000 	mov.w	r0, #0
 801180e:	492c      	ldr	r1, [pc, #176]	@ (80118c0 <floatToInt+0x110>)
 8011810:	f7ef f814 	bl	800083c <__aeabi_ddiv>
 8011814:	4602      	mov	r2, r0
 8011816:	460b      	mov	r3, r1
 8011818:	4620      	mov	r0, r4
 801181a:	4629      	mov	r1, r5
 801181c:	f7ee fd2e 	bl	800027c <__adddf3>
 8011820:	4602      	mov	r2, r0
 8011822:	460b      	mov	r3, r1
 8011824:	4610      	mov	r0, r2
 8011826:	4619      	mov	r1, r3
 8011828:	f7ef f9b6 	bl	8000b98 <__aeabi_d2f>
 801182c:	4603      	mov	r3, r0
 801182e:	60fb      	str	r3, [r7, #12]
  out_value->out_int = (int32_t)in;
 8011830:	edd7 7a03 	vldr	s15, [r7, #12]
 8011834:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011838:	ee17 2a90 	vmov	r2, s15
 801183c:	68bb      	ldr	r3, [r7, #8]
 801183e:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 8011840:	68bb      	ldr	r3, [r7, #8]
 8011842:	685b      	ldr	r3, [r3, #4]
 8011844:	ee07 3a90 	vmov	s15, r3
 8011848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801184c:	ed97 7a03 	vldr	s14, [r7, #12]
 8011850:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011854:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_dec = (int32_t)trunc(in * pow(10, dec_prec));
 8011858:	68f8      	ldr	r0, [r7, #12]
 801185a:	f7ee fe6d 	bl	8000538 <__aeabi_f2d>
 801185e:	4604      	mov	r4, r0
 8011860:	460d      	mov	r5, r1
 8011862:	6878      	ldr	r0, [r7, #4]
 8011864:	f7ee fe56 	bl	8000514 <__aeabi_i2d>
 8011868:	4602      	mov	r2, r0
 801186a:	460b      	mov	r3, r1
 801186c:	ec43 2b11 	vmov	d1, r2, r3
 8011870:	ed9f 0b11 	vldr	d0, [pc, #68]	@ 80118b8 <floatToInt+0x108>
 8011874:	f001 fd68 	bl	8013348 <pow>
 8011878:	ec53 2b10 	vmov	r2, r3, d0
 801187c:	4620      	mov	r0, r4
 801187e:	4629      	mov	r1, r5
 8011880:	f7ee feb2 	bl	80005e8 <__aeabi_dmul>
 8011884:	4602      	mov	r2, r0
 8011886:	460b      	mov	r3, r1
 8011888:	ec43 2b17 	vmov	d7, r2, r3
 801188c:	eeb0 0a47 	vmov.f32	s0, s14
 8011890:	eef0 0a67 	vmov.f32	s1, s15
 8011894:	f001 fdd4 	bl	8013440 <trunc>
 8011898:	ec53 2b10 	vmov	r2, r3, d0
 801189c:	4610      	mov	r0, r2
 801189e:	4619      	mov	r1, r3
 80118a0:	f7ef f952 	bl	8000b48 <__aeabi_d2iz>
 80118a4:	4603      	mov	r3, r0
 80118a6:	461a      	mov	r2, r3
 80118a8:	68bb      	ldr	r3, [r7, #8]
 80118aa:	609a      	str	r2, [r3, #8]
}
 80118ac:	bf00      	nop
 80118ae:	3710      	adds	r7, #16
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bdb0      	pop	{r4, r5, r7, pc}
 80118b4:	f3af 8000 	nop.w
 80118b8:	00000000 	.word	0x00000000
 80118bc:	40240000 	.word	0x40240000
 80118c0:	3fe00000 	.word	0x3fe00000

080118c4 <Accelero_Sensor_Handler>:
  * @brief  Handles the accelerometer axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Accelero_Sensor_Handler(uint32_t Instance)
{
 80118c4:	b5b0      	push	{r4, r5, r7, lr}
 80118c6:	b092      	sub	sp, #72	@ 0x48
 80118c8:	af06      	add	r7, sp, #24
 80118ca:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS4A1_MOTION_SENSOR_Axes_t acceleration;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	4a51      	ldr	r2, [pc, #324]	@ (8011a14 <Accelero_Sensor_Handler+0x150>)
 80118d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80118d4:	4850      	ldr	r0, [pc, #320]	@ (8011a18 <Accelero_Sensor_Handler+0x154>)
 80118d6:	f000 fcf1 	bl	80122bc <sniprintf>
  printf("%s", dataOut);
 80118da:	494f      	ldr	r1, [pc, #316]	@ (8011a18 <Accelero_Sensor_Handler+0x154>)
 80118dc:	484f      	ldr	r0, [pc, #316]	@ (8011a1c <Accelero_Sensor_Handler+0x158>)
 80118de:	f000 fcdb 	bl	8012298 <iprintf>

  if (IKS4A1_MOTION_SENSOR_GetAxes(Instance, MOTION_ACCELERO, &acceleration))
 80118e2:	f107 031c 	add.w	r3, r7, #28
 80118e6:	461a      	mov	r2, r3
 80118e8:	2102      	movs	r1, #2
 80118ea:	6878      	ldr	r0, [r7, #4]
 80118ec:	f7f9 f966 	bl	800abbc <IKS4A1_MOTION_SENSOR_GetAxes>
 80118f0:	4603      	mov	r3, r0
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d007      	beq.n	8011906 <Accelero_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC[%d]: Error\r\n", (int)Instance);
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	4a49      	ldr	r2, [pc, #292]	@ (8011a20 <Accelero_Sensor_Handler+0x15c>)
 80118fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80118fe:	4846      	ldr	r0, [pc, #280]	@ (8011a18 <Accelero_Sensor_Handler+0x154>)
 8011900:	f000 fcdc 	bl	80122bc <sniprintf>
 8011904:	e011      	b.n	801192a <Accelero_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 8011906:	687d      	ldr	r5, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 8011908:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 801190a:	687a      	ldr	r2, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 801190c:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 801190e:	6878      	ldr	r0, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 8011910:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 8011912:	9404      	str	r4, [sp, #16]
 8011914:	9003      	str	r0, [sp, #12]
 8011916:	9102      	str	r1, [sp, #8]
 8011918:	9201      	str	r2, [sp, #4]
 801191a:	9300      	str	r3, [sp, #0]
 801191c:	462b      	mov	r3, r5
 801191e:	4a41      	ldr	r2, [pc, #260]	@ (8011a24 <Accelero_Sensor_Handler+0x160>)
 8011920:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011924:	483c      	ldr	r0, [pc, #240]	@ (8011a18 <Accelero_Sensor_Handler+0x154>)
 8011926:	f000 fcc9 	bl	80122bc <sniprintf>
  }

  printf("%s", dataOut);
 801192a:	493b      	ldr	r1, [pc, #236]	@ (8011a18 <Accelero_Sensor_Handler+0x154>)
 801192c:	483b      	ldr	r0, [pc, #236]	@ (8011a1c <Accelero_Sensor_Handler+0x158>)
 801192e:	f000 fcb3 	bl	8012298 <iprintf>

  if (verbose == 1)
 8011932:	4b3d      	ldr	r3, [pc, #244]	@ (8011a28 <Accelero_Sensor_Handler+0x164>)
 8011934:	781b      	ldrb	r3, [r3, #0]
 8011936:	2b01      	cmp	r3, #1
 8011938:	d168      	bne.n	8011a0c <Accelero_Sensor_Handler+0x148>
  {
    if (IKS4A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 801193a:	f107 030f 	add.w	r3, r7, #15
 801193e:	4619      	mov	r1, r3
 8011940:	6878      	ldr	r0, [r7, #4]
 8011942:	f7f9 f911 	bl	800ab68 <IKS4A1_MOTION_SENSOR_ReadID>
 8011946:	4603      	mov	r3, r0
 8011948:	2b00      	cmp	r3, #0
 801194a:	d007      	beq.n	801195c <Accelero_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	4a37      	ldr	r2, [pc, #220]	@ (8011a2c <Accelero_Sensor_Handler+0x168>)
 8011950:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011954:	4830      	ldr	r0, [pc, #192]	@ (8011a18 <Accelero_Sensor_Handler+0x154>)
 8011956:	f000 fcb1 	bl	80122bc <sniprintf>
 801195a:	e008      	b.n	801196e <Accelero_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	7bfa      	ldrb	r2, [r7, #15]
 8011960:	9200      	str	r2, [sp, #0]
 8011962:	4a33      	ldr	r2, [pc, #204]	@ (8011a30 <Accelero_Sensor_Handler+0x16c>)
 8011964:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011968:	482b      	ldr	r0, [pc, #172]	@ (8011a18 <Accelero_Sensor_Handler+0x154>)
 801196a:	f000 fca7 	bl	80122bc <sniprintf>
    }

    printf("%s", dataOut);
 801196e:	492a      	ldr	r1, [pc, #168]	@ (8011a18 <Accelero_Sensor_Handler+0x154>)
 8011970:	482a      	ldr	r0, [pc, #168]	@ (8011a1c <Accelero_Sensor_Handler+0x158>)
 8011972:	f000 fc91 	bl	8012298 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_ACCELERO, &odr))
 8011976:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801197a:	461a      	mov	r2, r3
 801197c:	2102      	movs	r1, #2
 801197e:	6878      	ldr	r0, [r7, #4]
 8011980:	f7f9 f960 	bl	800ac44 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>
 8011984:	4603      	mov	r3, r0
 8011986:	2b00      	cmp	r3, #0
 8011988:	d007      	beq.n	801199a <Accelero_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	4a29      	ldr	r2, [pc, #164]	@ (8011a34 <Accelero_Sensor_Handler+0x170>)
 801198e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011992:	4821      	ldr	r0, [pc, #132]	@ (8011a18 <Accelero_Sensor_Handler+0x154>)
 8011994:	f000 fc92 	bl	80122bc <sniprintf>
 8011998:	e014      	b.n	80119c4 <Accelero_Sensor_Handler+0x100>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 801199a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 801199e:	f107 0310 	add.w	r3, r7, #16
 80119a2:	2103      	movs	r1, #3
 80119a4:	4618      	mov	r0, r3
 80119a6:	eeb0 0a67 	vmov.f32	s0, s15
 80119aa:	f7ff ff01 	bl	80117b0 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 80119b2:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 80119b4:	9101      	str	r1, [sp, #4]
 80119b6:	9200      	str	r2, [sp, #0]
 80119b8:	4a1f      	ldr	r2, [pc, #124]	@ (8011a38 <Accelero_Sensor_Handler+0x174>)
 80119ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80119be:	4816      	ldr	r0, [pc, #88]	@ (8011a18 <Accelero_Sensor_Handler+0x154>)
 80119c0:	f000 fc7c 	bl	80122bc <sniprintf>
    }

    printf("%s", dataOut);
 80119c4:	4914      	ldr	r1, [pc, #80]	@ (8011a18 <Accelero_Sensor_Handler+0x154>)
 80119c6:	4815      	ldr	r0, [pc, #84]	@ (8011a1c <Accelero_Sensor_Handler+0x158>)
 80119c8:	f000 fc66 	bl	8012298 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_ACCELERO, &fullScale))
 80119cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80119d0:	461a      	mov	r2, r3
 80119d2:	2102      	movs	r1, #2
 80119d4:	6878      	ldr	r0, [r7, #4]
 80119d6:	f7f9 f979 	bl	800accc <IKS4A1_MOTION_SENSOR_GetFullScale>
 80119da:	4603      	mov	r3, r0
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d007      	beq.n	80119f0 <Accelero_Sensor_Handler+0x12c>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	4a16      	ldr	r2, [pc, #88]	@ (8011a3c <Accelero_Sensor_Handler+0x178>)
 80119e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80119e8:	480b      	ldr	r0, [pc, #44]	@ (8011a18 <Accelero_Sensor_Handler+0x154>)
 80119ea:	f000 fc67 	bl	80122bc <sniprintf>
 80119ee:	e009      	b.n	8011a04 <Accelero_Sensor_Handler+0x140>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d g\r\n", (int)Instance, (int)fullScale);
 80119f0:	687a      	ldr	r2, [r7, #4]
 80119f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119f4:	9300      	str	r3, [sp, #0]
 80119f6:	4613      	mov	r3, r2
 80119f8:	4a11      	ldr	r2, [pc, #68]	@ (8011a40 <Accelero_Sensor_Handler+0x17c>)
 80119fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80119fe:	4806      	ldr	r0, [pc, #24]	@ (8011a18 <Accelero_Sensor_Handler+0x154>)
 8011a00:	f000 fc5c 	bl	80122bc <sniprintf>
    }

    printf("%s", dataOut);
 8011a04:	4904      	ldr	r1, [pc, #16]	@ (8011a18 <Accelero_Sensor_Handler+0x154>)
 8011a06:	4805      	ldr	r0, [pc, #20]	@ (8011a1c <Accelero_Sensor_Handler+0x158>)
 8011a08:	f000 fc46 	bl	8012298 <iprintf>
  }
}
 8011a0c:	bf00      	nop
 8011a0e:	3730      	adds	r7, #48	@ 0x30
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bdb0      	pop	{r4, r5, r7, pc}
 8011a14:	080144b4 	.word	0x080144b4
 8011a18:	200008ec 	.word	0x200008ec
 8011a1c:	080142e8 	.word	0x080142e8
 8011a20:	080144d4 	.word	0x080144d4
 8011a24:	080144e8 	.word	0x080144e8
 8011a28:	20000225 	.word	0x20000225
 8011a2c:	08014518 	.word	0x08014518
 8011a30:	0801452c 	.word	0x0801452c
 8011a34:	08014540 	.word	0x08014540
 8011a38:	08014554 	.word	0x08014554
 8011a3c:	0801456c 	.word	0x0801456c
 8011a40:	0801457c 	.word	0x0801457c

08011a44 <Gyro_Sensor_Handler>:
  * @brief  Handles the gyroscope axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Gyro_Sensor_Handler(uint32_t Instance)
{
 8011a44:	b5b0      	push	{r4, r5, r7, lr}
 8011a46:	b092      	sub	sp, #72	@ 0x48
 8011a48:	af06      	add	r7, sp, #24
 8011a4a:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS4A1_MOTION_SENSOR_Axes_t angular_velocity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	4a51      	ldr	r2, [pc, #324]	@ (8011b94 <Gyro_Sensor_Handler+0x150>)
 8011a50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011a54:	4850      	ldr	r0, [pc, #320]	@ (8011b98 <Gyro_Sensor_Handler+0x154>)
 8011a56:	f000 fc31 	bl	80122bc <sniprintf>
  printf("%s", dataOut);
 8011a5a:	494f      	ldr	r1, [pc, #316]	@ (8011b98 <Gyro_Sensor_Handler+0x154>)
 8011a5c:	484f      	ldr	r0, [pc, #316]	@ (8011b9c <Gyro_Sensor_Handler+0x158>)
 8011a5e:	f000 fc1b 	bl	8012298 <iprintf>

  if (IKS4A1_MOTION_SENSOR_GetAxes(Instance, MOTION_GYRO, &angular_velocity))
 8011a62:	f107 031c 	add.w	r3, r7, #28
 8011a66:	461a      	mov	r2, r3
 8011a68:	2101      	movs	r1, #1
 8011a6a:	6878      	ldr	r0, [r7, #4]
 8011a6c:	f7f9 f8a6 	bl	800abbc <IKS4A1_MOTION_SENSOR_GetAxes>
 8011a70:	4603      	mov	r3, r0
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d007      	beq.n	8011a86 <Gyro_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR[%d]: Error\r\n", (int)Instance);
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	4a49      	ldr	r2, [pc, #292]	@ (8011ba0 <Gyro_Sensor_Handler+0x15c>)
 8011a7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011a7e:	4846      	ldr	r0, [pc, #280]	@ (8011b98 <Gyro_Sensor_Handler+0x154>)
 8011a80:	f000 fc1c 	bl	80122bc <sniprintf>
 8011a84:	e011      	b.n	8011aaa <Gyro_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8011a86:	687d      	ldr	r5, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 8011a88:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8011a8a:	687a      	ldr	r2, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 8011a8c:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8011a8e:	6878      	ldr	r0, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 8011a90:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8011a92:	9404      	str	r4, [sp, #16]
 8011a94:	9003      	str	r0, [sp, #12]
 8011a96:	9102      	str	r1, [sp, #8]
 8011a98:	9201      	str	r2, [sp, #4]
 8011a9a:	9300      	str	r3, [sp, #0]
 8011a9c:	462b      	mov	r3, r5
 8011a9e:	4a41      	ldr	r2, [pc, #260]	@ (8011ba4 <Gyro_Sensor_Handler+0x160>)
 8011aa0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011aa4:	483c      	ldr	r0, [pc, #240]	@ (8011b98 <Gyro_Sensor_Handler+0x154>)
 8011aa6:	f000 fc09 	bl	80122bc <sniprintf>
  }

  printf("%s", dataOut);
 8011aaa:	493b      	ldr	r1, [pc, #236]	@ (8011b98 <Gyro_Sensor_Handler+0x154>)
 8011aac:	483b      	ldr	r0, [pc, #236]	@ (8011b9c <Gyro_Sensor_Handler+0x158>)
 8011aae:	f000 fbf3 	bl	8012298 <iprintf>

  if (verbose == 1)
 8011ab2:	4b3d      	ldr	r3, [pc, #244]	@ (8011ba8 <Gyro_Sensor_Handler+0x164>)
 8011ab4:	781b      	ldrb	r3, [r3, #0]
 8011ab6:	2b01      	cmp	r3, #1
 8011ab8:	d168      	bne.n	8011b8c <Gyro_Sensor_Handler+0x148>
  {
    if (IKS4A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 8011aba:	f107 030f 	add.w	r3, r7, #15
 8011abe:	4619      	mov	r1, r3
 8011ac0:	6878      	ldr	r0, [r7, #4]
 8011ac2:	f7f9 f851 	bl	800ab68 <IKS4A1_MOTION_SENSOR_ReadID>
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d007      	beq.n	8011adc <Gyro_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	4a37      	ldr	r2, [pc, #220]	@ (8011bac <Gyro_Sensor_Handler+0x168>)
 8011ad0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011ad4:	4830      	ldr	r0, [pc, #192]	@ (8011b98 <Gyro_Sensor_Handler+0x154>)
 8011ad6:	f000 fbf1 	bl	80122bc <sniprintf>
 8011ada:	e008      	b.n	8011aee <Gyro_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	7bfa      	ldrb	r2, [r7, #15]
 8011ae0:	9200      	str	r2, [sp, #0]
 8011ae2:	4a33      	ldr	r2, [pc, #204]	@ (8011bb0 <Gyro_Sensor_Handler+0x16c>)
 8011ae4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011ae8:	482b      	ldr	r0, [pc, #172]	@ (8011b98 <Gyro_Sensor_Handler+0x154>)
 8011aea:	f000 fbe7 	bl	80122bc <sniprintf>
    }

    printf("%s", dataOut);
 8011aee:	492a      	ldr	r1, [pc, #168]	@ (8011b98 <Gyro_Sensor_Handler+0x154>)
 8011af0:	482a      	ldr	r0, [pc, #168]	@ (8011b9c <Gyro_Sensor_Handler+0x158>)
 8011af2:	f000 fbd1 	bl	8012298 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_GYRO, &odr))
 8011af6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011afa:	461a      	mov	r2, r3
 8011afc:	2101      	movs	r1, #1
 8011afe:	6878      	ldr	r0, [r7, #4]
 8011b00:	f7f9 f8a0 	bl	800ac44 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>
 8011b04:	4603      	mov	r3, r0
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d007      	beq.n	8011b1a <Gyro_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	4a29      	ldr	r2, [pc, #164]	@ (8011bb4 <Gyro_Sensor_Handler+0x170>)
 8011b0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011b12:	4821      	ldr	r0, [pc, #132]	@ (8011b98 <Gyro_Sensor_Handler+0x154>)
 8011b14:	f000 fbd2 	bl	80122bc <sniprintf>
 8011b18:	e014      	b.n	8011b44 <Gyro_Sensor_Handler+0x100>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8011b1a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8011b1e:	f107 0310 	add.w	r3, r7, #16
 8011b22:	2103      	movs	r1, #3
 8011b24:	4618      	mov	r0, r3
 8011b26:	eeb0 0a67 	vmov.f32	s0, s15
 8011b2a:	f7ff fe41 	bl	80117b0 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 8011b32:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011b34:	9101      	str	r1, [sp, #4]
 8011b36:	9200      	str	r2, [sp, #0]
 8011b38:	4a1f      	ldr	r2, [pc, #124]	@ (8011bb8 <Gyro_Sensor_Handler+0x174>)
 8011b3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011b3e:	4816      	ldr	r0, [pc, #88]	@ (8011b98 <Gyro_Sensor_Handler+0x154>)
 8011b40:	f000 fbbc 	bl	80122bc <sniprintf>
    }

    printf("%s", dataOut);
 8011b44:	4914      	ldr	r1, [pc, #80]	@ (8011b98 <Gyro_Sensor_Handler+0x154>)
 8011b46:	4815      	ldr	r0, [pc, #84]	@ (8011b9c <Gyro_Sensor_Handler+0x158>)
 8011b48:	f000 fba6 	bl	8012298 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_GYRO, &fullScale))
 8011b4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011b50:	461a      	mov	r2, r3
 8011b52:	2101      	movs	r1, #1
 8011b54:	6878      	ldr	r0, [r7, #4]
 8011b56:	f7f9 f8b9 	bl	800accc <IKS4A1_MOTION_SENSOR_GetFullScale>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d007      	beq.n	8011b70 <Gyro_Sensor_Handler+0x12c>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	4a16      	ldr	r2, [pc, #88]	@ (8011bbc <Gyro_Sensor_Handler+0x178>)
 8011b64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011b68:	480b      	ldr	r0, [pc, #44]	@ (8011b98 <Gyro_Sensor_Handler+0x154>)
 8011b6a:	f000 fba7 	bl	80122bc <sniprintf>
 8011b6e:	e009      	b.n	8011b84 <Gyro_Sensor_Handler+0x140>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d dps\r\n", (int)Instance, (int)fullScale);
 8011b70:	687a      	ldr	r2, [r7, #4]
 8011b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b74:	9300      	str	r3, [sp, #0]
 8011b76:	4613      	mov	r3, r2
 8011b78:	4a11      	ldr	r2, [pc, #68]	@ (8011bc0 <Gyro_Sensor_Handler+0x17c>)
 8011b7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011b7e:	4806      	ldr	r0, [pc, #24]	@ (8011b98 <Gyro_Sensor_Handler+0x154>)
 8011b80:	f000 fb9c 	bl	80122bc <sniprintf>
    }

    printf("%s", dataOut);
 8011b84:	4904      	ldr	r1, [pc, #16]	@ (8011b98 <Gyro_Sensor_Handler+0x154>)
 8011b86:	4805      	ldr	r0, [pc, #20]	@ (8011b9c <Gyro_Sensor_Handler+0x158>)
 8011b88:	f000 fb86 	bl	8012298 <iprintf>
  }
}
 8011b8c:	bf00      	nop
 8011b8e:	3730      	adds	r7, #48	@ 0x30
 8011b90:	46bd      	mov	sp, r7
 8011b92:	bdb0      	pop	{r4, r5, r7, pc}
 8011b94:	080144b4 	.word	0x080144b4
 8011b98:	200008ec 	.word	0x200008ec
 8011b9c:	080142e8 	.word	0x080142e8
 8011ba0:	0801458c 	.word	0x0801458c
 8011ba4:	080145a0 	.word	0x080145a0
 8011ba8:	20000225 	.word	0x20000225
 8011bac:	08014518 	.word	0x08014518
 8011bb0:	0801452c 	.word	0x0801452c
 8011bb4:	08014540 	.word	0x08014540
 8011bb8:	08014554 	.word	0x08014554
 8011bbc:	0801456c 	.word	0x0801456c
 8011bc0:	080145d0 	.word	0x080145d0

08011bc4 <Magneto_Sensor_Handler>:
  * @brief  Handles the magneto axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Magneto_Sensor_Handler(uint32_t Instance)
{
 8011bc4:	b5b0      	push	{r4, r5, r7, lr}
 8011bc6:	b092      	sub	sp, #72	@ 0x48
 8011bc8:	af06      	add	r7, sp, #24
 8011bca:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS4A1_MOTION_SENSOR_Axes_t magnetic_field;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	4a51      	ldr	r2, [pc, #324]	@ (8011d14 <Magneto_Sensor_Handler+0x150>)
 8011bd0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011bd4:	4850      	ldr	r0, [pc, #320]	@ (8011d18 <Magneto_Sensor_Handler+0x154>)
 8011bd6:	f000 fb71 	bl	80122bc <sniprintf>
  printf("%s", dataOut);
 8011bda:	494f      	ldr	r1, [pc, #316]	@ (8011d18 <Magneto_Sensor_Handler+0x154>)
 8011bdc:	484f      	ldr	r0, [pc, #316]	@ (8011d1c <Magneto_Sensor_Handler+0x158>)
 8011bde:	f000 fb5b 	bl	8012298 <iprintf>

  if (IKS4A1_MOTION_SENSOR_GetAxes(Instance, MOTION_MAGNETO, &magnetic_field))
 8011be2:	f107 031c 	add.w	r3, r7, #28
 8011be6:	461a      	mov	r2, r3
 8011be8:	2104      	movs	r1, #4
 8011bea:	6878      	ldr	r0, [r7, #4]
 8011bec:	f7f8 ffe6 	bl	800abbc <IKS4A1_MOTION_SENSOR_GetAxes>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d007      	beq.n	8011c06 <Magneto_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG[%d]: Error\r\n", (int)Instance);
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	4a49      	ldr	r2, [pc, #292]	@ (8011d20 <Magneto_Sensor_Handler+0x15c>)
 8011bfa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011bfe:	4846      	ldr	r0, [pc, #280]	@ (8011d18 <Magneto_Sensor_Handler+0x154>)
 8011c00:	f000 fb5c 	bl	80122bc <sniprintf>
 8011c04:	e011      	b.n	8011c2a <Magneto_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8011c06:	687d      	ldr	r5, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 8011c08:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8011c0a:	687a      	ldr	r2, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 8011c0c:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8011c0e:	6878      	ldr	r0, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 8011c10:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8011c12:	9404      	str	r4, [sp, #16]
 8011c14:	9003      	str	r0, [sp, #12]
 8011c16:	9102      	str	r1, [sp, #8]
 8011c18:	9201      	str	r2, [sp, #4]
 8011c1a:	9300      	str	r3, [sp, #0]
 8011c1c:	462b      	mov	r3, r5
 8011c1e:	4a41      	ldr	r2, [pc, #260]	@ (8011d24 <Magneto_Sensor_Handler+0x160>)
 8011c20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011c24:	483c      	ldr	r0, [pc, #240]	@ (8011d18 <Magneto_Sensor_Handler+0x154>)
 8011c26:	f000 fb49 	bl	80122bc <sniprintf>
  }

  printf("%s", dataOut);
 8011c2a:	493b      	ldr	r1, [pc, #236]	@ (8011d18 <Magneto_Sensor_Handler+0x154>)
 8011c2c:	483b      	ldr	r0, [pc, #236]	@ (8011d1c <Magneto_Sensor_Handler+0x158>)
 8011c2e:	f000 fb33 	bl	8012298 <iprintf>

  if (verbose == 1)
 8011c32:	4b3d      	ldr	r3, [pc, #244]	@ (8011d28 <Magneto_Sensor_Handler+0x164>)
 8011c34:	781b      	ldrb	r3, [r3, #0]
 8011c36:	2b01      	cmp	r3, #1
 8011c38:	d168      	bne.n	8011d0c <Magneto_Sensor_Handler+0x148>
  {
    if (IKS4A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 8011c3a:	f107 030f 	add.w	r3, r7, #15
 8011c3e:	4619      	mov	r1, r3
 8011c40:	6878      	ldr	r0, [r7, #4]
 8011c42:	f7f8 ff91 	bl	800ab68 <IKS4A1_MOTION_SENSOR_ReadID>
 8011c46:	4603      	mov	r3, r0
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d007      	beq.n	8011c5c <Magneto_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	4a37      	ldr	r2, [pc, #220]	@ (8011d2c <Magneto_Sensor_Handler+0x168>)
 8011c50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011c54:	4830      	ldr	r0, [pc, #192]	@ (8011d18 <Magneto_Sensor_Handler+0x154>)
 8011c56:	f000 fb31 	bl	80122bc <sniprintf>
 8011c5a:	e008      	b.n	8011c6e <Magneto_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	7bfa      	ldrb	r2, [r7, #15]
 8011c60:	9200      	str	r2, [sp, #0]
 8011c62:	4a33      	ldr	r2, [pc, #204]	@ (8011d30 <Magneto_Sensor_Handler+0x16c>)
 8011c64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011c68:	482b      	ldr	r0, [pc, #172]	@ (8011d18 <Magneto_Sensor_Handler+0x154>)
 8011c6a:	f000 fb27 	bl	80122bc <sniprintf>
    }

    printf("%s", dataOut);
 8011c6e:	492a      	ldr	r1, [pc, #168]	@ (8011d18 <Magneto_Sensor_Handler+0x154>)
 8011c70:	482a      	ldr	r0, [pc, #168]	@ (8011d1c <Magneto_Sensor_Handler+0x158>)
 8011c72:	f000 fb11 	bl	8012298 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_MAGNETO, &odr))
 8011c76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011c7a:	461a      	mov	r2, r3
 8011c7c:	2104      	movs	r1, #4
 8011c7e:	6878      	ldr	r0, [r7, #4]
 8011c80:	f7f8 ffe0 	bl	800ac44 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>
 8011c84:	4603      	mov	r3, r0
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d007      	beq.n	8011c9a <Magneto_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	4a29      	ldr	r2, [pc, #164]	@ (8011d34 <Magneto_Sensor_Handler+0x170>)
 8011c8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011c92:	4821      	ldr	r0, [pc, #132]	@ (8011d18 <Magneto_Sensor_Handler+0x154>)
 8011c94:	f000 fb12 	bl	80122bc <sniprintf>
 8011c98:	e014      	b.n	8011cc4 <Magneto_Sensor_Handler+0x100>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8011c9a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8011c9e:	f107 0310 	add.w	r3, r7, #16
 8011ca2:	2103      	movs	r1, #3
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	eeb0 0a67 	vmov.f32	s0, s15
 8011caa:	f7ff fd81 	bl	80117b0 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 8011cb2:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011cb4:	9101      	str	r1, [sp, #4]
 8011cb6:	9200      	str	r2, [sp, #0]
 8011cb8:	4a1f      	ldr	r2, [pc, #124]	@ (8011d38 <Magneto_Sensor_Handler+0x174>)
 8011cba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011cbe:	4816      	ldr	r0, [pc, #88]	@ (8011d18 <Magneto_Sensor_Handler+0x154>)
 8011cc0:	f000 fafc 	bl	80122bc <sniprintf>
    }

    printf("%s", dataOut);
 8011cc4:	4914      	ldr	r1, [pc, #80]	@ (8011d18 <Magneto_Sensor_Handler+0x154>)
 8011cc6:	4815      	ldr	r0, [pc, #84]	@ (8011d1c <Magneto_Sensor_Handler+0x158>)
 8011cc8:	f000 fae6 	bl	8012298 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_MAGNETO, &fullScale))
 8011ccc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011cd0:	461a      	mov	r2, r3
 8011cd2:	2104      	movs	r1, #4
 8011cd4:	6878      	ldr	r0, [r7, #4]
 8011cd6:	f7f8 fff9 	bl	800accc <IKS4A1_MOTION_SENSOR_GetFullScale>
 8011cda:	4603      	mov	r3, r0
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d007      	beq.n	8011cf0 <Magneto_Sensor_Handler+0x12c>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	4a16      	ldr	r2, [pc, #88]	@ (8011d3c <Magneto_Sensor_Handler+0x178>)
 8011ce4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011ce8:	480b      	ldr	r0, [pc, #44]	@ (8011d18 <Magneto_Sensor_Handler+0x154>)
 8011cea:	f000 fae7 	bl	80122bc <sniprintf>
 8011cee:	e009      	b.n	8011d04 <Magneto_Sensor_Handler+0x140>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d gauss\r\n", (int)Instance, (int)fullScale);
 8011cf0:	687a      	ldr	r2, [r7, #4]
 8011cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cf4:	9300      	str	r3, [sp, #0]
 8011cf6:	4613      	mov	r3, r2
 8011cf8:	4a11      	ldr	r2, [pc, #68]	@ (8011d40 <Magneto_Sensor_Handler+0x17c>)
 8011cfa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011cfe:	4806      	ldr	r0, [pc, #24]	@ (8011d18 <Magneto_Sensor_Handler+0x154>)
 8011d00:	f000 fadc 	bl	80122bc <sniprintf>
    }

    printf("%s", dataOut);
 8011d04:	4904      	ldr	r1, [pc, #16]	@ (8011d18 <Magneto_Sensor_Handler+0x154>)
 8011d06:	4805      	ldr	r0, [pc, #20]	@ (8011d1c <Magneto_Sensor_Handler+0x158>)
 8011d08:	f000 fac6 	bl	8012298 <iprintf>
  }
}
 8011d0c:	bf00      	nop
 8011d0e:	3730      	adds	r7, #48	@ 0x30
 8011d10:	46bd      	mov	sp, r7
 8011d12:	bdb0      	pop	{r4, r5, r7, pc}
 8011d14:	080144b4 	.word	0x080144b4
 8011d18:	200008ec 	.word	0x200008ec
 8011d1c:	080142e8 	.word	0x080142e8
 8011d20:	080145e4 	.word	0x080145e4
 8011d24:	080145f8 	.word	0x080145f8
 8011d28:	20000225 	.word	0x20000225
 8011d2c:	08014518 	.word	0x08014518
 8011d30:	0801452c 	.word	0x0801452c
 8011d34:	08014540 	.word	0x08014540
 8011d38:	08014554 	.word	0x08014554
 8011d3c:	0801456c 	.word	0x0801456c
 8011d40:	08014628 	.word	0x08014628

08011d44 <Temp_Sensor_Handler>:
  * @brief  Handles the temperature data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Temp_Sensor_Handler(uint32_t Instance)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b08c      	sub	sp, #48	@ 0x30
 8011d48:	af04      	add	r7, sp, #16
 8011d4a:	6078      	str	r0, [r7, #4]
  float odr;
  float temperature;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nEnvironmental sensor instance %d:", (int)Instance);
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	4a47      	ldr	r2, [pc, #284]	@ (8011e6c <Temp_Sensor_Handler+0x128>)
 8011d50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011d54:	4846      	ldr	r0, [pc, #280]	@ (8011e70 <Temp_Sensor_Handler+0x12c>)
 8011d56:	f000 fab1 	bl	80122bc <sniprintf>
  printf("%s", dataOut);
 8011d5a:	4945      	ldr	r1, [pc, #276]	@ (8011e70 <Temp_Sensor_Handler+0x12c>)
 8011d5c:	4845      	ldr	r0, [pc, #276]	@ (8011e74 <Temp_Sensor_Handler+0x130>)
 8011d5e:	f000 fa9b 	bl	8012298 <iprintf>

  if (IKS4A1_ENV_SENSOR_GetValue(Instance, ENV_TEMPERATURE, &temperature))
 8011d62:	f107 0318 	add.w	r3, r7, #24
 8011d66:	461a      	mov	r2, r3
 8011d68:	2101      	movs	r1, #1
 8011d6a:	6878      	ldr	r0, [r7, #4]
 8011d6c:	f7f8 fb08 	bl	800a380 <IKS4A1_ENV_SENSOR_GetValue>
 8011d70:	4603      	mov	r3, r0
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d007      	beq.n	8011d86 <Temp_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: Error\r\n", (int)Instance);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	4a3f      	ldr	r2, [pc, #252]	@ (8011e78 <Temp_Sensor_Handler+0x134>)
 8011d7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011d7e:	483c      	ldr	r0, [pc, #240]	@ (8011e70 <Temp_Sensor_Handler+0x12c>)
 8011d80:	f000 fa9c 	bl	80122bc <sniprintf>
 8011d84:	e01d      	b.n	8011dc2 <Temp_Sensor_Handler+0x7e>
  }
  else
  {
    floatToInt(temperature, &out_value, 2);
 8011d86:	edd7 7a06 	vldr	s15, [r7, #24]
 8011d8a:	f107 030c 	add.w	r3, r7, #12
 8011d8e:	2102      	movs	r1, #2
 8011d90:	4618      	mov	r0, r3
 8011d92:	eeb0 0a67 	vmov.f32	s0, s15
 8011d96:	f7ff fd0b 	bl	80117b0 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: %c%d.%02d degC\r\n", (int)Instance, ((out_value.sign) ? '-' : '+'), (int)out_value.out_int,
 8011d9a:	687a      	ldr	r2, [r7, #4]
 8011d9c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d001      	beq.n	8011da8 <Temp_Sensor_Handler+0x64>
 8011da4:	232d      	movs	r3, #45	@ 0x2d
 8011da6:	e000      	b.n	8011daa <Temp_Sensor_Handler+0x66>
 8011da8:	232b      	movs	r3, #43	@ 0x2b
 8011daa:	6939      	ldr	r1, [r7, #16]
             (int)out_value.out_dec);
 8011dac:	6978      	ldr	r0, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: %c%d.%02d degC\r\n", (int)Instance, ((out_value.sign) ? '-' : '+'), (int)out_value.out_int,
 8011dae:	9002      	str	r0, [sp, #8]
 8011db0:	9101      	str	r1, [sp, #4]
 8011db2:	9300      	str	r3, [sp, #0]
 8011db4:	4613      	mov	r3, r2
 8011db6:	4a31      	ldr	r2, [pc, #196]	@ (8011e7c <Temp_Sensor_Handler+0x138>)
 8011db8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011dbc:	482c      	ldr	r0, [pc, #176]	@ (8011e70 <Temp_Sensor_Handler+0x12c>)
 8011dbe:	f000 fa7d 	bl	80122bc <sniprintf>
  }

  printf("%s", dataOut);
 8011dc2:	492b      	ldr	r1, [pc, #172]	@ (8011e70 <Temp_Sensor_Handler+0x12c>)
 8011dc4:	482b      	ldr	r0, [pc, #172]	@ (8011e74 <Temp_Sensor_Handler+0x130>)
 8011dc6:	f000 fa67 	bl	8012298 <iprintf>

  if (verbose == 1)
 8011dca:	4b2d      	ldr	r3, [pc, #180]	@ (8011e80 <Temp_Sensor_Handler+0x13c>)
 8011dcc:	781b      	ldrb	r3, [r3, #0]
 8011dce:	2b01      	cmp	r3, #1
 8011dd0:	d148      	bne.n	8011e64 <Temp_Sensor_Handler+0x120>
  {
    if (IKS4A1_ENV_SENSOR_ReadID(Instance, &whoami))
 8011dd2:	f107 030b 	add.w	r3, r7, #11
 8011dd6:	4619      	mov	r1, r3
 8011dd8:	6878      	ldr	r0, [r7, #4]
 8011dda:	f7f8 fa65 	bl	800a2a8 <IKS4A1_ENV_SENSOR_ReadID>
 8011dde:	4603      	mov	r3, r0
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d007      	beq.n	8011df4 <Temp_Sensor_Handler+0xb0>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	4a27      	ldr	r2, [pc, #156]	@ (8011e84 <Temp_Sensor_Handler+0x140>)
 8011de8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011dec:	4820      	ldr	r0, [pc, #128]	@ (8011e70 <Temp_Sensor_Handler+0x12c>)
 8011dee:	f000 fa65 	bl	80122bc <sniprintf>
 8011df2:	e008      	b.n	8011e06 <Temp_Sensor_Handler+0xc2>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	7afa      	ldrb	r2, [r7, #11]
 8011df8:	9200      	str	r2, [sp, #0]
 8011dfa:	4a23      	ldr	r2, [pc, #140]	@ (8011e88 <Temp_Sensor_Handler+0x144>)
 8011dfc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011e00:	481b      	ldr	r0, [pc, #108]	@ (8011e70 <Temp_Sensor_Handler+0x12c>)
 8011e02:	f000 fa5b 	bl	80122bc <sniprintf>
    }

    printf("%s", dataOut);
 8011e06:	491a      	ldr	r1, [pc, #104]	@ (8011e70 <Temp_Sensor_Handler+0x12c>)
 8011e08:	481a      	ldr	r0, [pc, #104]	@ (8011e74 <Temp_Sensor_Handler+0x130>)
 8011e0a:	f000 fa45 	bl	8012298 <iprintf>

    if (IKS4A1_ENV_SENSOR_GetOutputDataRate(Instance, ENV_TEMPERATURE, &odr))
 8011e0e:	f107 031c 	add.w	r3, r7, #28
 8011e12:	461a      	mov	r2, r3
 8011e14:	2101      	movs	r1, #1
 8011e16:	6878      	ldr	r0, [r7, #4]
 8011e18:	f7f8 fa70 	bl	800a2fc <IKS4A1_ENV_SENSOR_GetOutputDataRate>
 8011e1c:	4603      	mov	r3, r0
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d007      	beq.n	8011e32 <Temp_Sensor_Handler+0xee>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	4a19      	ldr	r2, [pc, #100]	@ (8011e8c <Temp_Sensor_Handler+0x148>)
 8011e26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011e2a:	4811      	ldr	r0, [pc, #68]	@ (8011e70 <Temp_Sensor_Handler+0x12c>)
 8011e2c:	f000 fa46 	bl	80122bc <sniprintf>
 8011e30:	e014      	b.n	8011e5c <Temp_Sensor_Handler+0x118>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8011e32:	edd7 7a07 	vldr	s15, [r7, #28]
 8011e36:	f107 030c 	add.w	r3, r7, #12
 8011e3a:	2103      	movs	r1, #3
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8011e42:	f7ff fcb5 	bl	80117b0 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 8011e4a:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011e4c:	9101      	str	r1, [sp, #4]
 8011e4e:	9200      	str	r2, [sp, #0]
 8011e50:	4a0f      	ldr	r2, [pc, #60]	@ (8011e90 <Temp_Sensor_Handler+0x14c>)
 8011e52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011e56:	4806      	ldr	r0, [pc, #24]	@ (8011e70 <Temp_Sensor_Handler+0x12c>)
 8011e58:	f000 fa30 	bl	80122bc <sniprintf>
    }

    printf("%s", dataOut);
 8011e5c:	4904      	ldr	r1, [pc, #16]	@ (8011e70 <Temp_Sensor_Handler+0x12c>)
 8011e5e:	4805      	ldr	r0, [pc, #20]	@ (8011e74 <Temp_Sensor_Handler+0x130>)
 8011e60:	f000 fa1a 	bl	8012298 <iprintf>
  }
}
 8011e64:	bf00      	nop
 8011e66:	3720      	adds	r7, #32
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	bd80      	pop	{r7, pc}
 8011e6c:	0801463c 	.word	0x0801463c
 8011e70:	200008ec 	.word	0x200008ec
 8011e74:	080142e8 	.word	0x080142e8
 8011e78:	08014660 	.word	0x08014660
 8011e7c:	08014674 	.word	0x08014674
 8011e80:	20000225 	.word	0x20000225
 8011e84:	08014518 	.word	0x08014518
 8011e88:	0801452c 	.word	0x0801452c
 8011e8c:	08014694 	.word	0x08014694
 8011e90:	08014554 	.word	0x08014554

08011e94 <Press_Sensor_Handler>:
  * @brief  Handles the pressure sensor data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Press_Sensor_Handler(uint32_t Instance)
{
 8011e94:	b580      	push	{r7, lr}
 8011e96:	b08a      	sub	sp, #40	@ 0x28
 8011e98:	af02      	add	r7, sp, #8
 8011e9a:	6078      	str	r0, [r7, #4]
  float odr;
  float pressure;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nEnvironmental sensor instance %d:", (int)Instance);
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	4a43      	ldr	r2, [pc, #268]	@ (8011fac <Press_Sensor_Handler+0x118>)
 8011ea0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011ea4:	4842      	ldr	r0, [pc, #264]	@ (8011fb0 <Press_Sensor_Handler+0x11c>)
 8011ea6:	f000 fa09 	bl	80122bc <sniprintf>
  printf("%s", dataOut);
 8011eaa:	4941      	ldr	r1, [pc, #260]	@ (8011fb0 <Press_Sensor_Handler+0x11c>)
 8011eac:	4841      	ldr	r0, [pc, #260]	@ (8011fb4 <Press_Sensor_Handler+0x120>)
 8011eae:	f000 f9f3 	bl	8012298 <iprintf>

  if (IKS4A1_ENV_SENSOR_GetValue(Instance, ENV_PRESSURE, &pressure))
 8011eb2:	f107 0318 	add.w	r3, r7, #24
 8011eb6:	461a      	mov	r2, r3
 8011eb8:	2102      	movs	r1, #2
 8011eba:	6878      	ldr	r0, [r7, #4]
 8011ebc:	f7f8 fa60 	bl	800a380 <IKS4A1_ENV_SENSOR_GetValue>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d007      	beq.n	8011ed6 <Press_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: Error\r\n", (int)Instance);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	4a3b      	ldr	r2, [pc, #236]	@ (8011fb8 <Press_Sensor_Handler+0x124>)
 8011eca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011ece:	4838      	ldr	r0, [pc, #224]	@ (8011fb0 <Press_Sensor_Handler+0x11c>)
 8011ed0:	f000 f9f4 	bl	80122bc <sniprintf>
 8011ed4:	e014      	b.n	8011f00 <Press_Sensor_Handler+0x6c>
  }
  else
  {
    floatToInt(pressure, &out_value, 2);
 8011ed6:	edd7 7a06 	vldr	s15, [r7, #24]
 8011eda:	f107 030c 	add.w	r3, r7, #12
 8011ede:	2102      	movs	r1, #2
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	eeb0 0a67 	vmov.f32	s0, s15
 8011ee6:	f7ff fc63 	bl	80117b0 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: %d.%02d hPa\r\n", (int)Instance, (int)out_value.out_int,
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	693a      	ldr	r2, [r7, #16]
             (int)out_value.out_dec);
 8011eee:	6979      	ldr	r1, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: %d.%02d hPa\r\n", (int)Instance, (int)out_value.out_int,
 8011ef0:	9101      	str	r1, [sp, #4]
 8011ef2:	9200      	str	r2, [sp, #0]
 8011ef4:	4a31      	ldr	r2, [pc, #196]	@ (8011fbc <Press_Sensor_Handler+0x128>)
 8011ef6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011efa:	482d      	ldr	r0, [pc, #180]	@ (8011fb0 <Press_Sensor_Handler+0x11c>)
 8011efc:	f000 f9de 	bl	80122bc <sniprintf>
  }

  printf("%s", dataOut);
 8011f00:	492b      	ldr	r1, [pc, #172]	@ (8011fb0 <Press_Sensor_Handler+0x11c>)
 8011f02:	482c      	ldr	r0, [pc, #176]	@ (8011fb4 <Press_Sensor_Handler+0x120>)
 8011f04:	f000 f9c8 	bl	8012298 <iprintf>

  if (verbose == 1)
 8011f08:	4b2d      	ldr	r3, [pc, #180]	@ (8011fc0 <Press_Sensor_Handler+0x12c>)
 8011f0a:	781b      	ldrb	r3, [r3, #0]
 8011f0c:	2b01      	cmp	r3, #1
 8011f0e:	d148      	bne.n	8011fa2 <Press_Sensor_Handler+0x10e>
  {
    if (IKS4A1_ENV_SENSOR_ReadID(Instance, &whoami))
 8011f10:	f107 030b 	add.w	r3, r7, #11
 8011f14:	4619      	mov	r1, r3
 8011f16:	6878      	ldr	r0, [r7, #4]
 8011f18:	f7f8 f9c6 	bl	800a2a8 <IKS4A1_ENV_SENSOR_ReadID>
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d007      	beq.n	8011f32 <Press_Sensor_Handler+0x9e>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	4a27      	ldr	r2, [pc, #156]	@ (8011fc4 <Press_Sensor_Handler+0x130>)
 8011f26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011f2a:	4821      	ldr	r0, [pc, #132]	@ (8011fb0 <Press_Sensor_Handler+0x11c>)
 8011f2c:	f000 f9c6 	bl	80122bc <sniprintf>
 8011f30:	e008      	b.n	8011f44 <Press_Sensor_Handler+0xb0>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	7afa      	ldrb	r2, [r7, #11]
 8011f36:	9200      	str	r2, [sp, #0]
 8011f38:	4a23      	ldr	r2, [pc, #140]	@ (8011fc8 <Press_Sensor_Handler+0x134>)
 8011f3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011f3e:	481c      	ldr	r0, [pc, #112]	@ (8011fb0 <Press_Sensor_Handler+0x11c>)
 8011f40:	f000 f9bc 	bl	80122bc <sniprintf>
    }

    printf("%s", dataOut);
 8011f44:	491a      	ldr	r1, [pc, #104]	@ (8011fb0 <Press_Sensor_Handler+0x11c>)
 8011f46:	481b      	ldr	r0, [pc, #108]	@ (8011fb4 <Press_Sensor_Handler+0x120>)
 8011f48:	f000 f9a6 	bl	8012298 <iprintf>

    if (IKS4A1_ENV_SENSOR_GetOutputDataRate(Instance, ENV_PRESSURE, &odr))
 8011f4c:	f107 031c 	add.w	r3, r7, #28
 8011f50:	461a      	mov	r2, r3
 8011f52:	2102      	movs	r1, #2
 8011f54:	6878      	ldr	r0, [r7, #4]
 8011f56:	f7f8 f9d1 	bl	800a2fc <IKS4A1_ENV_SENSOR_GetOutputDataRate>
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d007      	beq.n	8011f70 <Press_Sensor_Handler+0xdc>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	4a1a      	ldr	r2, [pc, #104]	@ (8011fcc <Press_Sensor_Handler+0x138>)
 8011f64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011f68:	4811      	ldr	r0, [pc, #68]	@ (8011fb0 <Press_Sensor_Handler+0x11c>)
 8011f6a:	f000 f9a7 	bl	80122bc <sniprintf>
 8011f6e:	e014      	b.n	8011f9a <Press_Sensor_Handler+0x106>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8011f70:	edd7 7a07 	vldr	s15, [r7, #28]
 8011f74:	f107 030c 	add.w	r3, r7, #12
 8011f78:	2103      	movs	r1, #3
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8011f80:	f7ff fc16 	bl	80117b0 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 8011f88:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011f8a:	9101      	str	r1, [sp, #4]
 8011f8c:	9200      	str	r2, [sp, #0]
 8011f8e:	4a10      	ldr	r2, [pc, #64]	@ (8011fd0 <Press_Sensor_Handler+0x13c>)
 8011f90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011f94:	4806      	ldr	r0, [pc, #24]	@ (8011fb0 <Press_Sensor_Handler+0x11c>)
 8011f96:	f000 f991 	bl	80122bc <sniprintf>
    }

    printf("%s", dataOut);
 8011f9a:	4905      	ldr	r1, [pc, #20]	@ (8011fb0 <Press_Sensor_Handler+0x11c>)
 8011f9c:	4805      	ldr	r0, [pc, #20]	@ (8011fb4 <Press_Sensor_Handler+0x120>)
 8011f9e:	f000 f97b 	bl	8012298 <iprintf>
  }
}
 8011fa2:	bf00      	nop
 8011fa4:	3720      	adds	r7, #32
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bd80      	pop	{r7, pc}
 8011faa:	bf00      	nop
 8011fac:	0801463c 	.word	0x0801463c
 8011fb0:	200008ec 	.word	0x200008ec
 8011fb4:	080142e8 	.word	0x080142e8
 8011fb8:	080146a8 	.word	0x080146a8
 8011fbc:	080146c0 	.word	0x080146c0
 8011fc0:	20000225 	.word	0x20000225
 8011fc4:	08014518 	.word	0x08014518
 8011fc8:	0801452c 	.word	0x0801452c
 8011fcc:	08014694 	.word	0x08014694
 8011fd0:	08014554 	.word	0x08014554

08011fd4 <Hum_Sensor_Handler>:
  * @brief  Handles the humidity data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Hum_Sensor_Handler(uint32_t Instance)
{
 8011fd4:	b580      	push	{r7, lr}
 8011fd6:	b08a      	sub	sp, #40	@ 0x28
 8011fd8:	af02      	add	r7, sp, #8
 8011fda:	6078      	str	r0, [r7, #4]
  float odr;
  float humidity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nEnvironmental sensor instance %d:", (int)Instance);
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	4a43      	ldr	r2, [pc, #268]	@ (80120ec <Hum_Sensor_Handler+0x118>)
 8011fe0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011fe4:	4842      	ldr	r0, [pc, #264]	@ (80120f0 <Hum_Sensor_Handler+0x11c>)
 8011fe6:	f000 f969 	bl	80122bc <sniprintf>
  printf("%s", dataOut);
 8011fea:	4941      	ldr	r1, [pc, #260]	@ (80120f0 <Hum_Sensor_Handler+0x11c>)
 8011fec:	4841      	ldr	r0, [pc, #260]	@ (80120f4 <Hum_Sensor_Handler+0x120>)
 8011fee:	f000 f953 	bl	8012298 <iprintf>

  if (IKS4A1_ENV_SENSOR_GetValue(Instance, ENV_HUMIDITY, &humidity))
 8011ff2:	f107 0318 	add.w	r3, r7, #24
 8011ff6:	461a      	mov	r2, r3
 8011ff8:	2104      	movs	r1, #4
 8011ffa:	6878      	ldr	r0, [r7, #4]
 8011ffc:	f7f8 f9c0 	bl	800a380 <IKS4A1_ENV_SENSOR_GetValue>
 8012000:	4603      	mov	r3, r0
 8012002:	2b00      	cmp	r3, #0
 8012004:	d007      	beq.n	8012016 <Hum_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: Error\r\n", (int)Instance);
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	4a3b      	ldr	r2, [pc, #236]	@ (80120f8 <Hum_Sensor_Handler+0x124>)
 801200a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801200e:	4838      	ldr	r0, [pc, #224]	@ (80120f0 <Hum_Sensor_Handler+0x11c>)
 8012010:	f000 f954 	bl	80122bc <sniprintf>
 8012014:	e014      	b.n	8012040 <Hum_Sensor_Handler+0x6c>
  }
  else
  {
    floatToInt(humidity, &out_value, 2);
 8012016:	edd7 7a06 	vldr	s15, [r7, #24]
 801201a:	f107 030c 	add.w	r3, r7, #12
 801201e:	2102      	movs	r1, #2
 8012020:	4618      	mov	r0, r3
 8012022:	eeb0 0a67 	vmov.f32	s0, s15
 8012026:	f7ff fbc3 	bl	80117b0 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: %d.%02d %%\r\n", (int)Instance, (int)out_value.out_int,
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	693a      	ldr	r2, [r7, #16]
             (int)out_value.out_dec);
 801202e:	6979      	ldr	r1, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: %d.%02d %%\r\n", (int)Instance, (int)out_value.out_int,
 8012030:	9101      	str	r1, [sp, #4]
 8012032:	9200      	str	r2, [sp, #0]
 8012034:	4a31      	ldr	r2, [pc, #196]	@ (80120fc <Hum_Sensor_Handler+0x128>)
 8012036:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801203a:	482d      	ldr	r0, [pc, #180]	@ (80120f0 <Hum_Sensor_Handler+0x11c>)
 801203c:	f000 f93e 	bl	80122bc <sniprintf>
  }

  printf("%s", dataOut);
 8012040:	492b      	ldr	r1, [pc, #172]	@ (80120f0 <Hum_Sensor_Handler+0x11c>)
 8012042:	482c      	ldr	r0, [pc, #176]	@ (80120f4 <Hum_Sensor_Handler+0x120>)
 8012044:	f000 f928 	bl	8012298 <iprintf>

  if (verbose == 1)
 8012048:	4b2d      	ldr	r3, [pc, #180]	@ (8012100 <Hum_Sensor_Handler+0x12c>)
 801204a:	781b      	ldrb	r3, [r3, #0]
 801204c:	2b01      	cmp	r3, #1
 801204e:	d148      	bne.n	80120e2 <Hum_Sensor_Handler+0x10e>
  {
    if (IKS4A1_ENV_SENSOR_ReadID(Instance, &whoami))
 8012050:	f107 030b 	add.w	r3, r7, #11
 8012054:	4619      	mov	r1, r3
 8012056:	6878      	ldr	r0, [r7, #4]
 8012058:	f7f8 f926 	bl	800a2a8 <IKS4A1_ENV_SENSOR_ReadID>
 801205c:	4603      	mov	r3, r0
 801205e:	2b00      	cmp	r3, #0
 8012060:	d007      	beq.n	8012072 <Hum_Sensor_Handler+0x9e>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	4a27      	ldr	r2, [pc, #156]	@ (8012104 <Hum_Sensor_Handler+0x130>)
 8012066:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801206a:	4821      	ldr	r0, [pc, #132]	@ (80120f0 <Hum_Sensor_Handler+0x11c>)
 801206c:	f000 f926 	bl	80122bc <sniprintf>
 8012070:	e008      	b.n	8012084 <Hum_Sensor_Handler+0xb0>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	7afa      	ldrb	r2, [r7, #11]
 8012076:	9200      	str	r2, [sp, #0]
 8012078:	4a23      	ldr	r2, [pc, #140]	@ (8012108 <Hum_Sensor_Handler+0x134>)
 801207a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801207e:	481c      	ldr	r0, [pc, #112]	@ (80120f0 <Hum_Sensor_Handler+0x11c>)
 8012080:	f000 f91c 	bl	80122bc <sniprintf>
    }

    printf("%s", dataOut);
 8012084:	491a      	ldr	r1, [pc, #104]	@ (80120f0 <Hum_Sensor_Handler+0x11c>)
 8012086:	481b      	ldr	r0, [pc, #108]	@ (80120f4 <Hum_Sensor_Handler+0x120>)
 8012088:	f000 f906 	bl	8012298 <iprintf>

    if (IKS4A1_ENV_SENSOR_GetOutputDataRate(Instance, ENV_HUMIDITY, &odr))
 801208c:	f107 031c 	add.w	r3, r7, #28
 8012090:	461a      	mov	r2, r3
 8012092:	2104      	movs	r1, #4
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f7f8 f931 	bl	800a2fc <IKS4A1_ENV_SENSOR_GetOutputDataRate>
 801209a:	4603      	mov	r3, r0
 801209c:	2b00      	cmp	r3, #0
 801209e:	d007      	beq.n	80120b0 <Hum_Sensor_Handler+0xdc>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	4a1a      	ldr	r2, [pc, #104]	@ (801210c <Hum_Sensor_Handler+0x138>)
 80120a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80120a8:	4811      	ldr	r0, [pc, #68]	@ (80120f0 <Hum_Sensor_Handler+0x11c>)
 80120aa:	f000 f907 	bl	80122bc <sniprintf>
 80120ae:	e014      	b.n	80120da <Hum_Sensor_Handler+0x106>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 80120b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80120b4:	f107 030c 	add.w	r3, r7, #12
 80120b8:	2103      	movs	r1, #3
 80120ba:	4618      	mov	r0, r3
 80120bc:	eeb0 0a67 	vmov.f32	s0, s15
 80120c0:	f7ff fb76 	bl	80117b0 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 80120c8:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 80120ca:	9101      	str	r1, [sp, #4]
 80120cc:	9200      	str	r2, [sp, #0]
 80120ce:	4a10      	ldr	r2, [pc, #64]	@ (8012110 <Hum_Sensor_Handler+0x13c>)
 80120d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80120d4:	4806      	ldr	r0, [pc, #24]	@ (80120f0 <Hum_Sensor_Handler+0x11c>)
 80120d6:	f000 f8f1 	bl	80122bc <sniprintf>
    }

    printf("%s", dataOut);
 80120da:	4905      	ldr	r1, [pc, #20]	@ (80120f0 <Hum_Sensor_Handler+0x11c>)
 80120dc:	4805      	ldr	r0, [pc, #20]	@ (80120f4 <Hum_Sensor_Handler+0x120>)
 80120de:	f000 f8db 	bl	8012298 <iprintf>
  }
}
 80120e2:	bf00      	nop
 80120e4:	3720      	adds	r7, #32
 80120e6:	46bd      	mov	sp, r7
 80120e8:	bd80      	pop	{r7, pc}
 80120ea:	bf00      	nop
 80120ec:	0801463c 	.word	0x0801463c
 80120f0:	200008ec 	.word	0x200008ec
 80120f4:	080142e8 	.word	0x080142e8
 80120f8:	080146dc 	.word	0x080146dc
 80120fc:	080146f0 	.word	0x080146f0
 8012100:	20000225 	.word	0x20000225
 8012104:	08014518 	.word	0x08014518
 8012108:	0801452c 	.word	0x0801452c
 801210c:	08014694 	.word	0x08014694
 8012110:	08014554 	.word	0x08014554

08012114 <std>:
 8012114:	2300      	movs	r3, #0
 8012116:	b510      	push	{r4, lr}
 8012118:	4604      	mov	r4, r0
 801211a:	e9c0 3300 	strd	r3, r3, [r0]
 801211e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012122:	6083      	str	r3, [r0, #8]
 8012124:	8181      	strh	r1, [r0, #12]
 8012126:	6643      	str	r3, [r0, #100]	@ 0x64
 8012128:	81c2      	strh	r2, [r0, #14]
 801212a:	6183      	str	r3, [r0, #24]
 801212c:	4619      	mov	r1, r3
 801212e:	2208      	movs	r2, #8
 8012130:	305c      	adds	r0, #92	@ 0x5c
 8012132:	f000 f93c 	bl	80123ae <memset>
 8012136:	4b0d      	ldr	r3, [pc, #52]	@ (801216c <std+0x58>)
 8012138:	6263      	str	r3, [r4, #36]	@ 0x24
 801213a:	4b0d      	ldr	r3, [pc, #52]	@ (8012170 <std+0x5c>)
 801213c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801213e:	4b0d      	ldr	r3, [pc, #52]	@ (8012174 <std+0x60>)
 8012140:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012142:	4b0d      	ldr	r3, [pc, #52]	@ (8012178 <std+0x64>)
 8012144:	6323      	str	r3, [r4, #48]	@ 0x30
 8012146:	4b0d      	ldr	r3, [pc, #52]	@ (801217c <std+0x68>)
 8012148:	6224      	str	r4, [r4, #32]
 801214a:	429c      	cmp	r4, r3
 801214c:	d006      	beq.n	801215c <std+0x48>
 801214e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012152:	4294      	cmp	r4, r2
 8012154:	d002      	beq.n	801215c <std+0x48>
 8012156:	33d0      	adds	r3, #208	@ 0xd0
 8012158:	429c      	cmp	r4, r3
 801215a:	d105      	bne.n	8012168 <std+0x54>
 801215c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012164:	f000 b99c 	b.w	80124a0 <__retarget_lock_init_recursive>
 8012168:	bd10      	pop	{r4, pc}
 801216a:	bf00      	nop
 801216c:	08012329 	.word	0x08012329
 8012170:	0801234b 	.word	0x0801234b
 8012174:	08012383 	.word	0x08012383
 8012178:	080123a7 	.word	0x080123a7
 801217c:	200009f0 	.word	0x200009f0

08012180 <stdio_exit_handler>:
 8012180:	4a02      	ldr	r2, [pc, #8]	@ (801218c <stdio_exit_handler+0xc>)
 8012182:	4903      	ldr	r1, [pc, #12]	@ (8012190 <stdio_exit_handler+0x10>)
 8012184:	4803      	ldr	r0, [pc, #12]	@ (8012194 <stdio_exit_handler+0x14>)
 8012186:	f000 b869 	b.w	801225c <_fwalk_sglue>
 801218a:	bf00      	nop
 801218c:	20000228 	.word	0x20000228
 8012190:	08012fed 	.word	0x08012fed
 8012194:	20000238 	.word	0x20000238

08012198 <cleanup_stdio>:
 8012198:	6841      	ldr	r1, [r0, #4]
 801219a:	4b0c      	ldr	r3, [pc, #48]	@ (80121cc <cleanup_stdio+0x34>)
 801219c:	4299      	cmp	r1, r3
 801219e:	b510      	push	{r4, lr}
 80121a0:	4604      	mov	r4, r0
 80121a2:	d001      	beq.n	80121a8 <cleanup_stdio+0x10>
 80121a4:	f000 ff22 	bl	8012fec <_fflush_r>
 80121a8:	68a1      	ldr	r1, [r4, #8]
 80121aa:	4b09      	ldr	r3, [pc, #36]	@ (80121d0 <cleanup_stdio+0x38>)
 80121ac:	4299      	cmp	r1, r3
 80121ae:	d002      	beq.n	80121b6 <cleanup_stdio+0x1e>
 80121b0:	4620      	mov	r0, r4
 80121b2:	f000 ff1b 	bl	8012fec <_fflush_r>
 80121b6:	68e1      	ldr	r1, [r4, #12]
 80121b8:	4b06      	ldr	r3, [pc, #24]	@ (80121d4 <cleanup_stdio+0x3c>)
 80121ba:	4299      	cmp	r1, r3
 80121bc:	d004      	beq.n	80121c8 <cleanup_stdio+0x30>
 80121be:	4620      	mov	r0, r4
 80121c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121c4:	f000 bf12 	b.w	8012fec <_fflush_r>
 80121c8:	bd10      	pop	{r4, pc}
 80121ca:	bf00      	nop
 80121cc:	200009f0 	.word	0x200009f0
 80121d0:	20000a58 	.word	0x20000a58
 80121d4:	20000ac0 	.word	0x20000ac0

080121d8 <global_stdio_init.part.0>:
 80121d8:	b510      	push	{r4, lr}
 80121da:	4b0b      	ldr	r3, [pc, #44]	@ (8012208 <global_stdio_init.part.0+0x30>)
 80121dc:	4c0b      	ldr	r4, [pc, #44]	@ (801220c <global_stdio_init.part.0+0x34>)
 80121de:	4a0c      	ldr	r2, [pc, #48]	@ (8012210 <global_stdio_init.part.0+0x38>)
 80121e0:	601a      	str	r2, [r3, #0]
 80121e2:	4620      	mov	r0, r4
 80121e4:	2200      	movs	r2, #0
 80121e6:	2104      	movs	r1, #4
 80121e8:	f7ff ff94 	bl	8012114 <std>
 80121ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80121f0:	2201      	movs	r2, #1
 80121f2:	2109      	movs	r1, #9
 80121f4:	f7ff ff8e 	bl	8012114 <std>
 80121f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80121fc:	2202      	movs	r2, #2
 80121fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012202:	2112      	movs	r1, #18
 8012204:	f7ff bf86 	b.w	8012114 <std>
 8012208:	20000b28 	.word	0x20000b28
 801220c:	200009f0 	.word	0x200009f0
 8012210:	08012181 	.word	0x08012181

08012214 <__sfp_lock_acquire>:
 8012214:	4801      	ldr	r0, [pc, #4]	@ (801221c <__sfp_lock_acquire+0x8>)
 8012216:	f000 b944 	b.w	80124a2 <__retarget_lock_acquire_recursive>
 801221a:	bf00      	nop
 801221c:	20000b31 	.word	0x20000b31

08012220 <__sfp_lock_release>:
 8012220:	4801      	ldr	r0, [pc, #4]	@ (8012228 <__sfp_lock_release+0x8>)
 8012222:	f000 b93f 	b.w	80124a4 <__retarget_lock_release_recursive>
 8012226:	bf00      	nop
 8012228:	20000b31 	.word	0x20000b31

0801222c <__sinit>:
 801222c:	b510      	push	{r4, lr}
 801222e:	4604      	mov	r4, r0
 8012230:	f7ff fff0 	bl	8012214 <__sfp_lock_acquire>
 8012234:	6a23      	ldr	r3, [r4, #32]
 8012236:	b11b      	cbz	r3, 8012240 <__sinit+0x14>
 8012238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801223c:	f7ff bff0 	b.w	8012220 <__sfp_lock_release>
 8012240:	4b04      	ldr	r3, [pc, #16]	@ (8012254 <__sinit+0x28>)
 8012242:	6223      	str	r3, [r4, #32]
 8012244:	4b04      	ldr	r3, [pc, #16]	@ (8012258 <__sinit+0x2c>)
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d1f5      	bne.n	8012238 <__sinit+0xc>
 801224c:	f7ff ffc4 	bl	80121d8 <global_stdio_init.part.0>
 8012250:	e7f2      	b.n	8012238 <__sinit+0xc>
 8012252:	bf00      	nop
 8012254:	08012199 	.word	0x08012199
 8012258:	20000b28 	.word	0x20000b28

0801225c <_fwalk_sglue>:
 801225c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012260:	4607      	mov	r7, r0
 8012262:	4688      	mov	r8, r1
 8012264:	4614      	mov	r4, r2
 8012266:	2600      	movs	r6, #0
 8012268:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801226c:	f1b9 0901 	subs.w	r9, r9, #1
 8012270:	d505      	bpl.n	801227e <_fwalk_sglue+0x22>
 8012272:	6824      	ldr	r4, [r4, #0]
 8012274:	2c00      	cmp	r4, #0
 8012276:	d1f7      	bne.n	8012268 <_fwalk_sglue+0xc>
 8012278:	4630      	mov	r0, r6
 801227a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801227e:	89ab      	ldrh	r3, [r5, #12]
 8012280:	2b01      	cmp	r3, #1
 8012282:	d907      	bls.n	8012294 <_fwalk_sglue+0x38>
 8012284:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012288:	3301      	adds	r3, #1
 801228a:	d003      	beq.n	8012294 <_fwalk_sglue+0x38>
 801228c:	4629      	mov	r1, r5
 801228e:	4638      	mov	r0, r7
 8012290:	47c0      	blx	r8
 8012292:	4306      	orrs	r6, r0
 8012294:	3568      	adds	r5, #104	@ 0x68
 8012296:	e7e9      	b.n	801226c <_fwalk_sglue+0x10>

08012298 <iprintf>:
 8012298:	b40f      	push	{r0, r1, r2, r3}
 801229a:	b507      	push	{r0, r1, r2, lr}
 801229c:	4906      	ldr	r1, [pc, #24]	@ (80122b8 <iprintf+0x20>)
 801229e:	ab04      	add	r3, sp, #16
 80122a0:	6808      	ldr	r0, [r1, #0]
 80122a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80122a6:	6881      	ldr	r1, [r0, #8]
 80122a8:	9301      	str	r3, [sp, #4]
 80122aa:	f000 fb77 	bl	801299c <_vfiprintf_r>
 80122ae:	b003      	add	sp, #12
 80122b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80122b4:	b004      	add	sp, #16
 80122b6:	4770      	bx	lr
 80122b8:	20000234 	.word	0x20000234

080122bc <sniprintf>:
 80122bc:	b40c      	push	{r2, r3}
 80122be:	b530      	push	{r4, r5, lr}
 80122c0:	4b18      	ldr	r3, [pc, #96]	@ (8012324 <sniprintf+0x68>)
 80122c2:	1e0c      	subs	r4, r1, #0
 80122c4:	681d      	ldr	r5, [r3, #0]
 80122c6:	b09d      	sub	sp, #116	@ 0x74
 80122c8:	da08      	bge.n	80122dc <sniprintf+0x20>
 80122ca:	238b      	movs	r3, #139	@ 0x8b
 80122cc:	602b      	str	r3, [r5, #0]
 80122ce:	f04f 30ff 	mov.w	r0, #4294967295
 80122d2:	b01d      	add	sp, #116	@ 0x74
 80122d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80122d8:	b002      	add	sp, #8
 80122da:	4770      	bx	lr
 80122dc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80122e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80122e4:	f04f 0300 	mov.w	r3, #0
 80122e8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80122ea:	bf14      	ite	ne
 80122ec:	f104 33ff 	addne.w	r3, r4, #4294967295
 80122f0:	4623      	moveq	r3, r4
 80122f2:	9304      	str	r3, [sp, #16]
 80122f4:	9307      	str	r3, [sp, #28]
 80122f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80122fa:	9002      	str	r0, [sp, #8]
 80122fc:	9006      	str	r0, [sp, #24]
 80122fe:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012302:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012304:	ab21      	add	r3, sp, #132	@ 0x84
 8012306:	a902      	add	r1, sp, #8
 8012308:	4628      	mov	r0, r5
 801230a:	9301      	str	r3, [sp, #4]
 801230c:	f000 fa20 	bl	8012750 <_svfiprintf_r>
 8012310:	1c43      	adds	r3, r0, #1
 8012312:	bfbc      	itt	lt
 8012314:	238b      	movlt	r3, #139	@ 0x8b
 8012316:	602b      	strlt	r3, [r5, #0]
 8012318:	2c00      	cmp	r4, #0
 801231a:	d0da      	beq.n	80122d2 <sniprintf+0x16>
 801231c:	9b02      	ldr	r3, [sp, #8]
 801231e:	2200      	movs	r2, #0
 8012320:	701a      	strb	r2, [r3, #0]
 8012322:	e7d6      	b.n	80122d2 <sniprintf+0x16>
 8012324:	20000234 	.word	0x20000234

08012328 <__sread>:
 8012328:	b510      	push	{r4, lr}
 801232a:	460c      	mov	r4, r1
 801232c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012330:	f000 f868 	bl	8012404 <_read_r>
 8012334:	2800      	cmp	r0, #0
 8012336:	bfab      	itete	ge
 8012338:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801233a:	89a3      	ldrhlt	r3, [r4, #12]
 801233c:	181b      	addge	r3, r3, r0
 801233e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012342:	bfac      	ite	ge
 8012344:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012346:	81a3      	strhlt	r3, [r4, #12]
 8012348:	bd10      	pop	{r4, pc}

0801234a <__swrite>:
 801234a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801234e:	461f      	mov	r7, r3
 8012350:	898b      	ldrh	r3, [r1, #12]
 8012352:	05db      	lsls	r3, r3, #23
 8012354:	4605      	mov	r5, r0
 8012356:	460c      	mov	r4, r1
 8012358:	4616      	mov	r6, r2
 801235a:	d505      	bpl.n	8012368 <__swrite+0x1e>
 801235c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012360:	2302      	movs	r3, #2
 8012362:	2200      	movs	r2, #0
 8012364:	f000 f83c 	bl	80123e0 <_lseek_r>
 8012368:	89a3      	ldrh	r3, [r4, #12]
 801236a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801236e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012372:	81a3      	strh	r3, [r4, #12]
 8012374:	4632      	mov	r2, r6
 8012376:	463b      	mov	r3, r7
 8012378:	4628      	mov	r0, r5
 801237a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801237e:	f000 b853 	b.w	8012428 <_write_r>

08012382 <__sseek>:
 8012382:	b510      	push	{r4, lr}
 8012384:	460c      	mov	r4, r1
 8012386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801238a:	f000 f829 	bl	80123e0 <_lseek_r>
 801238e:	1c43      	adds	r3, r0, #1
 8012390:	89a3      	ldrh	r3, [r4, #12]
 8012392:	bf15      	itete	ne
 8012394:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012396:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801239a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801239e:	81a3      	strheq	r3, [r4, #12]
 80123a0:	bf18      	it	ne
 80123a2:	81a3      	strhne	r3, [r4, #12]
 80123a4:	bd10      	pop	{r4, pc}

080123a6 <__sclose>:
 80123a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123aa:	f000 b809 	b.w	80123c0 <_close_r>

080123ae <memset>:
 80123ae:	4402      	add	r2, r0
 80123b0:	4603      	mov	r3, r0
 80123b2:	4293      	cmp	r3, r2
 80123b4:	d100      	bne.n	80123b8 <memset+0xa>
 80123b6:	4770      	bx	lr
 80123b8:	f803 1b01 	strb.w	r1, [r3], #1
 80123bc:	e7f9      	b.n	80123b2 <memset+0x4>
	...

080123c0 <_close_r>:
 80123c0:	b538      	push	{r3, r4, r5, lr}
 80123c2:	4d06      	ldr	r5, [pc, #24]	@ (80123dc <_close_r+0x1c>)
 80123c4:	2300      	movs	r3, #0
 80123c6:	4604      	mov	r4, r0
 80123c8:	4608      	mov	r0, r1
 80123ca:	602b      	str	r3, [r5, #0]
 80123cc:	f7ef fc13 	bl	8001bf6 <_close>
 80123d0:	1c43      	adds	r3, r0, #1
 80123d2:	d102      	bne.n	80123da <_close_r+0x1a>
 80123d4:	682b      	ldr	r3, [r5, #0]
 80123d6:	b103      	cbz	r3, 80123da <_close_r+0x1a>
 80123d8:	6023      	str	r3, [r4, #0]
 80123da:	bd38      	pop	{r3, r4, r5, pc}
 80123dc:	20000b2c 	.word	0x20000b2c

080123e0 <_lseek_r>:
 80123e0:	b538      	push	{r3, r4, r5, lr}
 80123e2:	4d07      	ldr	r5, [pc, #28]	@ (8012400 <_lseek_r+0x20>)
 80123e4:	4604      	mov	r4, r0
 80123e6:	4608      	mov	r0, r1
 80123e8:	4611      	mov	r1, r2
 80123ea:	2200      	movs	r2, #0
 80123ec:	602a      	str	r2, [r5, #0]
 80123ee:	461a      	mov	r2, r3
 80123f0:	f7ef fc28 	bl	8001c44 <_lseek>
 80123f4:	1c43      	adds	r3, r0, #1
 80123f6:	d102      	bne.n	80123fe <_lseek_r+0x1e>
 80123f8:	682b      	ldr	r3, [r5, #0]
 80123fa:	b103      	cbz	r3, 80123fe <_lseek_r+0x1e>
 80123fc:	6023      	str	r3, [r4, #0]
 80123fe:	bd38      	pop	{r3, r4, r5, pc}
 8012400:	20000b2c 	.word	0x20000b2c

08012404 <_read_r>:
 8012404:	b538      	push	{r3, r4, r5, lr}
 8012406:	4d07      	ldr	r5, [pc, #28]	@ (8012424 <_read_r+0x20>)
 8012408:	4604      	mov	r4, r0
 801240a:	4608      	mov	r0, r1
 801240c:	4611      	mov	r1, r2
 801240e:	2200      	movs	r2, #0
 8012410:	602a      	str	r2, [r5, #0]
 8012412:	461a      	mov	r2, r3
 8012414:	f7ef fbb6 	bl	8001b84 <_read>
 8012418:	1c43      	adds	r3, r0, #1
 801241a:	d102      	bne.n	8012422 <_read_r+0x1e>
 801241c:	682b      	ldr	r3, [r5, #0]
 801241e:	b103      	cbz	r3, 8012422 <_read_r+0x1e>
 8012420:	6023      	str	r3, [r4, #0]
 8012422:	bd38      	pop	{r3, r4, r5, pc}
 8012424:	20000b2c 	.word	0x20000b2c

08012428 <_write_r>:
 8012428:	b538      	push	{r3, r4, r5, lr}
 801242a:	4d07      	ldr	r5, [pc, #28]	@ (8012448 <_write_r+0x20>)
 801242c:	4604      	mov	r4, r0
 801242e:	4608      	mov	r0, r1
 8012430:	4611      	mov	r1, r2
 8012432:	2200      	movs	r2, #0
 8012434:	602a      	str	r2, [r5, #0]
 8012436:	461a      	mov	r2, r3
 8012438:	f7ef fbc1 	bl	8001bbe <_write>
 801243c:	1c43      	adds	r3, r0, #1
 801243e:	d102      	bne.n	8012446 <_write_r+0x1e>
 8012440:	682b      	ldr	r3, [r5, #0]
 8012442:	b103      	cbz	r3, 8012446 <_write_r+0x1e>
 8012444:	6023      	str	r3, [r4, #0]
 8012446:	bd38      	pop	{r3, r4, r5, pc}
 8012448:	20000b2c 	.word	0x20000b2c

0801244c <__errno>:
 801244c:	4b01      	ldr	r3, [pc, #4]	@ (8012454 <__errno+0x8>)
 801244e:	6818      	ldr	r0, [r3, #0]
 8012450:	4770      	bx	lr
 8012452:	bf00      	nop
 8012454:	20000234 	.word	0x20000234

08012458 <__libc_init_array>:
 8012458:	b570      	push	{r4, r5, r6, lr}
 801245a:	4d0d      	ldr	r5, [pc, #52]	@ (8012490 <__libc_init_array+0x38>)
 801245c:	4c0d      	ldr	r4, [pc, #52]	@ (8012494 <__libc_init_array+0x3c>)
 801245e:	1b64      	subs	r4, r4, r5
 8012460:	10a4      	asrs	r4, r4, #2
 8012462:	2600      	movs	r6, #0
 8012464:	42a6      	cmp	r6, r4
 8012466:	d109      	bne.n	801247c <__libc_init_array+0x24>
 8012468:	4d0b      	ldr	r5, [pc, #44]	@ (8012498 <__libc_init_array+0x40>)
 801246a:	4c0c      	ldr	r4, [pc, #48]	@ (801249c <__libc_init_array+0x44>)
 801246c:	f001 ff06 	bl	801427c <_init>
 8012470:	1b64      	subs	r4, r4, r5
 8012472:	10a4      	asrs	r4, r4, #2
 8012474:	2600      	movs	r6, #0
 8012476:	42a6      	cmp	r6, r4
 8012478:	d105      	bne.n	8012486 <__libc_init_array+0x2e>
 801247a:	bd70      	pop	{r4, r5, r6, pc}
 801247c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012480:	4798      	blx	r3
 8012482:	3601      	adds	r6, #1
 8012484:	e7ee      	b.n	8012464 <__libc_init_array+0xc>
 8012486:	f855 3b04 	ldr.w	r3, [r5], #4
 801248a:	4798      	blx	r3
 801248c:	3601      	adds	r6, #1
 801248e:	e7f2      	b.n	8012476 <__libc_init_array+0x1e>
 8012490:	080147e0 	.word	0x080147e0
 8012494:	080147e0 	.word	0x080147e0
 8012498:	080147e0 	.word	0x080147e0
 801249c:	080147e4 	.word	0x080147e4

080124a0 <__retarget_lock_init_recursive>:
 80124a0:	4770      	bx	lr

080124a2 <__retarget_lock_acquire_recursive>:
 80124a2:	4770      	bx	lr

080124a4 <__retarget_lock_release_recursive>:
 80124a4:	4770      	bx	lr
	...

080124a8 <_free_r>:
 80124a8:	b538      	push	{r3, r4, r5, lr}
 80124aa:	4605      	mov	r5, r0
 80124ac:	2900      	cmp	r1, #0
 80124ae:	d041      	beq.n	8012534 <_free_r+0x8c>
 80124b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80124b4:	1f0c      	subs	r4, r1, #4
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	bfb8      	it	lt
 80124ba:	18e4      	addlt	r4, r4, r3
 80124bc:	f000 f8e0 	bl	8012680 <__malloc_lock>
 80124c0:	4a1d      	ldr	r2, [pc, #116]	@ (8012538 <_free_r+0x90>)
 80124c2:	6813      	ldr	r3, [r2, #0]
 80124c4:	b933      	cbnz	r3, 80124d4 <_free_r+0x2c>
 80124c6:	6063      	str	r3, [r4, #4]
 80124c8:	6014      	str	r4, [r2, #0]
 80124ca:	4628      	mov	r0, r5
 80124cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124d0:	f000 b8dc 	b.w	801268c <__malloc_unlock>
 80124d4:	42a3      	cmp	r3, r4
 80124d6:	d908      	bls.n	80124ea <_free_r+0x42>
 80124d8:	6820      	ldr	r0, [r4, #0]
 80124da:	1821      	adds	r1, r4, r0
 80124dc:	428b      	cmp	r3, r1
 80124de:	bf01      	itttt	eq
 80124e0:	6819      	ldreq	r1, [r3, #0]
 80124e2:	685b      	ldreq	r3, [r3, #4]
 80124e4:	1809      	addeq	r1, r1, r0
 80124e6:	6021      	streq	r1, [r4, #0]
 80124e8:	e7ed      	b.n	80124c6 <_free_r+0x1e>
 80124ea:	461a      	mov	r2, r3
 80124ec:	685b      	ldr	r3, [r3, #4]
 80124ee:	b10b      	cbz	r3, 80124f4 <_free_r+0x4c>
 80124f0:	42a3      	cmp	r3, r4
 80124f2:	d9fa      	bls.n	80124ea <_free_r+0x42>
 80124f4:	6811      	ldr	r1, [r2, #0]
 80124f6:	1850      	adds	r0, r2, r1
 80124f8:	42a0      	cmp	r0, r4
 80124fa:	d10b      	bne.n	8012514 <_free_r+0x6c>
 80124fc:	6820      	ldr	r0, [r4, #0]
 80124fe:	4401      	add	r1, r0
 8012500:	1850      	adds	r0, r2, r1
 8012502:	4283      	cmp	r3, r0
 8012504:	6011      	str	r1, [r2, #0]
 8012506:	d1e0      	bne.n	80124ca <_free_r+0x22>
 8012508:	6818      	ldr	r0, [r3, #0]
 801250a:	685b      	ldr	r3, [r3, #4]
 801250c:	6053      	str	r3, [r2, #4]
 801250e:	4408      	add	r0, r1
 8012510:	6010      	str	r0, [r2, #0]
 8012512:	e7da      	b.n	80124ca <_free_r+0x22>
 8012514:	d902      	bls.n	801251c <_free_r+0x74>
 8012516:	230c      	movs	r3, #12
 8012518:	602b      	str	r3, [r5, #0]
 801251a:	e7d6      	b.n	80124ca <_free_r+0x22>
 801251c:	6820      	ldr	r0, [r4, #0]
 801251e:	1821      	adds	r1, r4, r0
 8012520:	428b      	cmp	r3, r1
 8012522:	bf04      	itt	eq
 8012524:	6819      	ldreq	r1, [r3, #0]
 8012526:	685b      	ldreq	r3, [r3, #4]
 8012528:	6063      	str	r3, [r4, #4]
 801252a:	bf04      	itt	eq
 801252c:	1809      	addeq	r1, r1, r0
 801252e:	6021      	streq	r1, [r4, #0]
 8012530:	6054      	str	r4, [r2, #4]
 8012532:	e7ca      	b.n	80124ca <_free_r+0x22>
 8012534:	bd38      	pop	{r3, r4, r5, pc}
 8012536:	bf00      	nop
 8012538:	20000b38 	.word	0x20000b38

0801253c <sbrk_aligned>:
 801253c:	b570      	push	{r4, r5, r6, lr}
 801253e:	4e0f      	ldr	r6, [pc, #60]	@ (801257c <sbrk_aligned+0x40>)
 8012540:	460c      	mov	r4, r1
 8012542:	6831      	ldr	r1, [r6, #0]
 8012544:	4605      	mov	r5, r0
 8012546:	b911      	cbnz	r1, 801254e <sbrk_aligned+0x12>
 8012548:	f000 fe26 	bl	8013198 <_sbrk_r>
 801254c:	6030      	str	r0, [r6, #0]
 801254e:	4621      	mov	r1, r4
 8012550:	4628      	mov	r0, r5
 8012552:	f000 fe21 	bl	8013198 <_sbrk_r>
 8012556:	1c43      	adds	r3, r0, #1
 8012558:	d103      	bne.n	8012562 <sbrk_aligned+0x26>
 801255a:	f04f 34ff 	mov.w	r4, #4294967295
 801255e:	4620      	mov	r0, r4
 8012560:	bd70      	pop	{r4, r5, r6, pc}
 8012562:	1cc4      	adds	r4, r0, #3
 8012564:	f024 0403 	bic.w	r4, r4, #3
 8012568:	42a0      	cmp	r0, r4
 801256a:	d0f8      	beq.n	801255e <sbrk_aligned+0x22>
 801256c:	1a21      	subs	r1, r4, r0
 801256e:	4628      	mov	r0, r5
 8012570:	f000 fe12 	bl	8013198 <_sbrk_r>
 8012574:	3001      	adds	r0, #1
 8012576:	d1f2      	bne.n	801255e <sbrk_aligned+0x22>
 8012578:	e7ef      	b.n	801255a <sbrk_aligned+0x1e>
 801257a:	bf00      	nop
 801257c:	20000b34 	.word	0x20000b34

08012580 <_malloc_r>:
 8012580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012584:	1ccd      	adds	r5, r1, #3
 8012586:	f025 0503 	bic.w	r5, r5, #3
 801258a:	3508      	adds	r5, #8
 801258c:	2d0c      	cmp	r5, #12
 801258e:	bf38      	it	cc
 8012590:	250c      	movcc	r5, #12
 8012592:	2d00      	cmp	r5, #0
 8012594:	4606      	mov	r6, r0
 8012596:	db01      	blt.n	801259c <_malloc_r+0x1c>
 8012598:	42a9      	cmp	r1, r5
 801259a:	d904      	bls.n	80125a6 <_malloc_r+0x26>
 801259c:	230c      	movs	r3, #12
 801259e:	6033      	str	r3, [r6, #0]
 80125a0:	2000      	movs	r0, #0
 80125a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801267c <_malloc_r+0xfc>
 80125aa:	f000 f869 	bl	8012680 <__malloc_lock>
 80125ae:	f8d8 3000 	ldr.w	r3, [r8]
 80125b2:	461c      	mov	r4, r3
 80125b4:	bb44      	cbnz	r4, 8012608 <_malloc_r+0x88>
 80125b6:	4629      	mov	r1, r5
 80125b8:	4630      	mov	r0, r6
 80125ba:	f7ff ffbf 	bl	801253c <sbrk_aligned>
 80125be:	1c43      	adds	r3, r0, #1
 80125c0:	4604      	mov	r4, r0
 80125c2:	d158      	bne.n	8012676 <_malloc_r+0xf6>
 80125c4:	f8d8 4000 	ldr.w	r4, [r8]
 80125c8:	4627      	mov	r7, r4
 80125ca:	2f00      	cmp	r7, #0
 80125cc:	d143      	bne.n	8012656 <_malloc_r+0xd6>
 80125ce:	2c00      	cmp	r4, #0
 80125d0:	d04b      	beq.n	801266a <_malloc_r+0xea>
 80125d2:	6823      	ldr	r3, [r4, #0]
 80125d4:	4639      	mov	r1, r7
 80125d6:	4630      	mov	r0, r6
 80125d8:	eb04 0903 	add.w	r9, r4, r3
 80125dc:	f000 fddc 	bl	8013198 <_sbrk_r>
 80125e0:	4581      	cmp	r9, r0
 80125e2:	d142      	bne.n	801266a <_malloc_r+0xea>
 80125e4:	6821      	ldr	r1, [r4, #0]
 80125e6:	1a6d      	subs	r5, r5, r1
 80125e8:	4629      	mov	r1, r5
 80125ea:	4630      	mov	r0, r6
 80125ec:	f7ff ffa6 	bl	801253c <sbrk_aligned>
 80125f0:	3001      	adds	r0, #1
 80125f2:	d03a      	beq.n	801266a <_malloc_r+0xea>
 80125f4:	6823      	ldr	r3, [r4, #0]
 80125f6:	442b      	add	r3, r5
 80125f8:	6023      	str	r3, [r4, #0]
 80125fa:	f8d8 3000 	ldr.w	r3, [r8]
 80125fe:	685a      	ldr	r2, [r3, #4]
 8012600:	bb62      	cbnz	r2, 801265c <_malloc_r+0xdc>
 8012602:	f8c8 7000 	str.w	r7, [r8]
 8012606:	e00f      	b.n	8012628 <_malloc_r+0xa8>
 8012608:	6822      	ldr	r2, [r4, #0]
 801260a:	1b52      	subs	r2, r2, r5
 801260c:	d420      	bmi.n	8012650 <_malloc_r+0xd0>
 801260e:	2a0b      	cmp	r2, #11
 8012610:	d917      	bls.n	8012642 <_malloc_r+0xc2>
 8012612:	1961      	adds	r1, r4, r5
 8012614:	42a3      	cmp	r3, r4
 8012616:	6025      	str	r5, [r4, #0]
 8012618:	bf18      	it	ne
 801261a:	6059      	strne	r1, [r3, #4]
 801261c:	6863      	ldr	r3, [r4, #4]
 801261e:	bf08      	it	eq
 8012620:	f8c8 1000 	streq.w	r1, [r8]
 8012624:	5162      	str	r2, [r4, r5]
 8012626:	604b      	str	r3, [r1, #4]
 8012628:	4630      	mov	r0, r6
 801262a:	f000 f82f 	bl	801268c <__malloc_unlock>
 801262e:	f104 000b 	add.w	r0, r4, #11
 8012632:	1d23      	adds	r3, r4, #4
 8012634:	f020 0007 	bic.w	r0, r0, #7
 8012638:	1ac2      	subs	r2, r0, r3
 801263a:	bf1c      	itt	ne
 801263c:	1a1b      	subne	r3, r3, r0
 801263e:	50a3      	strne	r3, [r4, r2]
 8012640:	e7af      	b.n	80125a2 <_malloc_r+0x22>
 8012642:	6862      	ldr	r2, [r4, #4]
 8012644:	42a3      	cmp	r3, r4
 8012646:	bf0c      	ite	eq
 8012648:	f8c8 2000 	streq.w	r2, [r8]
 801264c:	605a      	strne	r2, [r3, #4]
 801264e:	e7eb      	b.n	8012628 <_malloc_r+0xa8>
 8012650:	4623      	mov	r3, r4
 8012652:	6864      	ldr	r4, [r4, #4]
 8012654:	e7ae      	b.n	80125b4 <_malloc_r+0x34>
 8012656:	463c      	mov	r4, r7
 8012658:	687f      	ldr	r7, [r7, #4]
 801265a:	e7b6      	b.n	80125ca <_malloc_r+0x4a>
 801265c:	461a      	mov	r2, r3
 801265e:	685b      	ldr	r3, [r3, #4]
 8012660:	42a3      	cmp	r3, r4
 8012662:	d1fb      	bne.n	801265c <_malloc_r+0xdc>
 8012664:	2300      	movs	r3, #0
 8012666:	6053      	str	r3, [r2, #4]
 8012668:	e7de      	b.n	8012628 <_malloc_r+0xa8>
 801266a:	230c      	movs	r3, #12
 801266c:	6033      	str	r3, [r6, #0]
 801266e:	4630      	mov	r0, r6
 8012670:	f000 f80c 	bl	801268c <__malloc_unlock>
 8012674:	e794      	b.n	80125a0 <_malloc_r+0x20>
 8012676:	6005      	str	r5, [r0, #0]
 8012678:	e7d6      	b.n	8012628 <_malloc_r+0xa8>
 801267a:	bf00      	nop
 801267c:	20000b38 	.word	0x20000b38

08012680 <__malloc_lock>:
 8012680:	4801      	ldr	r0, [pc, #4]	@ (8012688 <__malloc_lock+0x8>)
 8012682:	f7ff bf0e 	b.w	80124a2 <__retarget_lock_acquire_recursive>
 8012686:	bf00      	nop
 8012688:	20000b30 	.word	0x20000b30

0801268c <__malloc_unlock>:
 801268c:	4801      	ldr	r0, [pc, #4]	@ (8012694 <__malloc_unlock+0x8>)
 801268e:	f7ff bf09 	b.w	80124a4 <__retarget_lock_release_recursive>
 8012692:	bf00      	nop
 8012694:	20000b30 	.word	0x20000b30

08012698 <__ssputs_r>:
 8012698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801269c:	688e      	ldr	r6, [r1, #8]
 801269e:	461f      	mov	r7, r3
 80126a0:	42be      	cmp	r6, r7
 80126a2:	680b      	ldr	r3, [r1, #0]
 80126a4:	4682      	mov	sl, r0
 80126a6:	460c      	mov	r4, r1
 80126a8:	4690      	mov	r8, r2
 80126aa:	d82d      	bhi.n	8012708 <__ssputs_r+0x70>
 80126ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80126b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80126b4:	d026      	beq.n	8012704 <__ssputs_r+0x6c>
 80126b6:	6965      	ldr	r5, [r4, #20]
 80126b8:	6909      	ldr	r1, [r1, #16]
 80126ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80126be:	eba3 0901 	sub.w	r9, r3, r1
 80126c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80126c6:	1c7b      	adds	r3, r7, #1
 80126c8:	444b      	add	r3, r9
 80126ca:	106d      	asrs	r5, r5, #1
 80126cc:	429d      	cmp	r5, r3
 80126ce:	bf38      	it	cc
 80126d0:	461d      	movcc	r5, r3
 80126d2:	0553      	lsls	r3, r2, #21
 80126d4:	d527      	bpl.n	8012726 <__ssputs_r+0x8e>
 80126d6:	4629      	mov	r1, r5
 80126d8:	f7ff ff52 	bl	8012580 <_malloc_r>
 80126dc:	4606      	mov	r6, r0
 80126de:	b360      	cbz	r0, 801273a <__ssputs_r+0xa2>
 80126e0:	6921      	ldr	r1, [r4, #16]
 80126e2:	464a      	mov	r2, r9
 80126e4:	f000 fd68 	bl	80131b8 <memcpy>
 80126e8:	89a3      	ldrh	r3, [r4, #12]
 80126ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80126ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80126f2:	81a3      	strh	r3, [r4, #12]
 80126f4:	6126      	str	r6, [r4, #16]
 80126f6:	6165      	str	r5, [r4, #20]
 80126f8:	444e      	add	r6, r9
 80126fa:	eba5 0509 	sub.w	r5, r5, r9
 80126fe:	6026      	str	r6, [r4, #0]
 8012700:	60a5      	str	r5, [r4, #8]
 8012702:	463e      	mov	r6, r7
 8012704:	42be      	cmp	r6, r7
 8012706:	d900      	bls.n	801270a <__ssputs_r+0x72>
 8012708:	463e      	mov	r6, r7
 801270a:	6820      	ldr	r0, [r4, #0]
 801270c:	4632      	mov	r2, r6
 801270e:	4641      	mov	r1, r8
 8012710:	f000 fd28 	bl	8013164 <memmove>
 8012714:	68a3      	ldr	r3, [r4, #8]
 8012716:	1b9b      	subs	r3, r3, r6
 8012718:	60a3      	str	r3, [r4, #8]
 801271a:	6823      	ldr	r3, [r4, #0]
 801271c:	4433      	add	r3, r6
 801271e:	6023      	str	r3, [r4, #0]
 8012720:	2000      	movs	r0, #0
 8012722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012726:	462a      	mov	r2, r5
 8012728:	f000 fd54 	bl	80131d4 <_realloc_r>
 801272c:	4606      	mov	r6, r0
 801272e:	2800      	cmp	r0, #0
 8012730:	d1e0      	bne.n	80126f4 <__ssputs_r+0x5c>
 8012732:	6921      	ldr	r1, [r4, #16]
 8012734:	4650      	mov	r0, sl
 8012736:	f7ff feb7 	bl	80124a8 <_free_r>
 801273a:	230c      	movs	r3, #12
 801273c:	f8ca 3000 	str.w	r3, [sl]
 8012740:	89a3      	ldrh	r3, [r4, #12]
 8012742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012746:	81a3      	strh	r3, [r4, #12]
 8012748:	f04f 30ff 	mov.w	r0, #4294967295
 801274c:	e7e9      	b.n	8012722 <__ssputs_r+0x8a>
	...

08012750 <_svfiprintf_r>:
 8012750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012754:	4698      	mov	r8, r3
 8012756:	898b      	ldrh	r3, [r1, #12]
 8012758:	061b      	lsls	r3, r3, #24
 801275a:	b09d      	sub	sp, #116	@ 0x74
 801275c:	4607      	mov	r7, r0
 801275e:	460d      	mov	r5, r1
 8012760:	4614      	mov	r4, r2
 8012762:	d510      	bpl.n	8012786 <_svfiprintf_r+0x36>
 8012764:	690b      	ldr	r3, [r1, #16]
 8012766:	b973      	cbnz	r3, 8012786 <_svfiprintf_r+0x36>
 8012768:	2140      	movs	r1, #64	@ 0x40
 801276a:	f7ff ff09 	bl	8012580 <_malloc_r>
 801276e:	6028      	str	r0, [r5, #0]
 8012770:	6128      	str	r0, [r5, #16]
 8012772:	b930      	cbnz	r0, 8012782 <_svfiprintf_r+0x32>
 8012774:	230c      	movs	r3, #12
 8012776:	603b      	str	r3, [r7, #0]
 8012778:	f04f 30ff 	mov.w	r0, #4294967295
 801277c:	b01d      	add	sp, #116	@ 0x74
 801277e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012782:	2340      	movs	r3, #64	@ 0x40
 8012784:	616b      	str	r3, [r5, #20]
 8012786:	2300      	movs	r3, #0
 8012788:	9309      	str	r3, [sp, #36]	@ 0x24
 801278a:	2320      	movs	r3, #32
 801278c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012790:	f8cd 800c 	str.w	r8, [sp, #12]
 8012794:	2330      	movs	r3, #48	@ 0x30
 8012796:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012934 <_svfiprintf_r+0x1e4>
 801279a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801279e:	f04f 0901 	mov.w	r9, #1
 80127a2:	4623      	mov	r3, r4
 80127a4:	469a      	mov	sl, r3
 80127a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80127aa:	b10a      	cbz	r2, 80127b0 <_svfiprintf_r+0x60>
 80127ac:	2a25      	cmp	r2, #37	@ 0x25
 80127ae:	d1f9      	bne.n	80127a4 <_svfiprintf_r+0x54>
 80127b0:	ebba 0b04 	subs.w	fp, sl, r4
 80127b4:	d00b      	beq.n	80127ce <_svfiprintf_r+0x7e>
 80127b6:	465b      	mov	r3, fp
 80127b8:	4622      	mov	r2, r4
 80127ba:	4629      	mov	r1, r5
 80127bc:	4638      	mov	r0, r7
 80127be:	f7ff ff6b 	bl	8012698 <__ssputs_r>
 80127c2:	3001      	adds	r0, #1
 80127c4:	f000 80a7 	beq.w	8012916 <_svfiprintf_r+0x1c6>
 80127c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80127ca:	445a      	add	r2, fp
 80127cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80127ce:	f89a 3000 	ldrb.w	r3, [sl]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	f000 809f 	beq.w	8012916 <_svfiprintf_r+0x1c6>
 80127d8:	2300      	movs	r3, #0
 80127da:	f04f 32ff 	mov.w	r2, #4294967295
 80127de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80127e2:	f10a 0a01 	add.w	sl, sl, #1
 80127e6:	9304      	str	r3, [sp, #16]
 80127e8:	9307      	str	r3, [sp, #28]
 80127ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80127ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80127f0:	4654      	mov	r4, sl
 80127f2:	2205      	movs	r2, #5
 80127f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127f8:	484e      	ldr	r0, [pc, #312]	@ (8012934 <_svfiprintf_r+0x1e4>)
 80127fa:	f7ed fce9 	bl	80001d0 <memchr>
 80127fe:	9a04      	ldr	r2, [sp, #16]
 8012800:	b9d8      	cbnz	r0, 801283a <_svfiprintf_r+0xea>
 8012802:	06d0      	lsls	r0, r2, #27
 8012804:	bf44      	itt	mi
 8012806:	2320      	movmi	r3, #32
 8012808:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801280c:	0711      	lsls	r1, r2, #28
 801280e:	bf44      	itt	mi
 8012810:	232b      	movmi	r3, #43	@ 0x2b
 8012812:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012816:	f89a 3000 	ldrb.w	r3, [sl]
 801281a:	2b2a      	cmp	r3, #42	@ 0x2a
 801281c:	d015      	beq.n	801284a <_svfiprintf_r+0xfa>
 801281e:	9a07      	ldr	r2, [sp, #28]
 8012820:	4654      	mov	r4, sl
 8012822:	2000      	movs	r0, #0
 8012824:	f04f 0c0a 	mov.w	ip, #10
 8012828:	4621      	mov	r1, r4
 801282a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801282e:	3b30      	subs	r3, #48	@ 0x30
 8012830:	2b09      	cmp	r3, #9
 8012832:	d94b      	bls.n	80128cc <_svfiprintf_r+0x17c>
 8012834:	b1b0      	cbz	r0, 8012864 <_svfiprintf_r+0x114>
 8012836:	9207      	str	r2, [sp, #28]
 8012838:	e014      	b.n	8012864 <_svfiprintf_r+0x114>
 801283a:	eba0 0308 	sub.w	r3, r0, r8
 801283e:	fa09 f303 	lsl.w	r3, r9, r3
 8012842:	4313      	orrs	r3, r2
 8012844:	9304      	str	r3, [sp, #16]
 8012846:	46a2      	mov	sl, r4
 8012848:	e7d2      	b.n	80127f0 <_svfiprintf_r+0xa0>
 801284a:	9b03      	ldr	r3, [sp, #12]
 801284c:	1d19      	adds	r1, r3, #4
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	9103      	str	r1, [sp, #12]
 8012852:	2b00      	cmp	r3, #0
 8012854:	bfbb      	ittet	lt
 8012856:	425b      	neglt	r3, r3
 8012858:	f042 0202 	orrlt.w	r2, r2, #2
 801285c:	9307      	strge	r3, [sp, #28]
 801285e:	9307      	strlt	r3, [sp, #28]
 8012860:	bfb8      	it	lt
 8012862:	9204      	strlt	r2, [sp, #16]
 8012864:	7823      	ldrb	r3, [r4, #0]
 8012866:	2b2e      	cmp	r3, #46	@ 0x2e
 8012868:	d10a      	bne.n	8012880 <_svfiprintf_r+0x130>
 801286a:	7863      	ldrb	r3, [r4, #1]
 801286c:	2b2a      	cmp	r3, #42	@ 0x2a
 801286e:	d132      	bne.n	80128d6 <_svfiprintf_r+0x186>
 8012870:	9b03      	ldr	r3, [sp, #12]
 8012872:	1d1a      	adds	r2, r3, #4
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	9203      	str	r2, [sp, #12]
 8012878:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801287c:	3402      	adds	r4, #2
 801287e:	9305      	str	r3, [sp, #20]
 8012880:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012944 <_svfiprintf_r+0x1f4>
 8012884:	7821      	ldrb	r1, [r4, #0]
 8012886:	2203      	movs	r2, #3
 8012888:	4650      	mov	r0, sl
 801288a:	f7ed fca1 	bl	80001d0 <memchr>
 801288e:	b138      	cbz	r0, 80128a0 <_svfiprintf_r+0x150>
 8012890:	9b04      	ldr	r3, [sp, #16]
 8012892:	eba0 000a 	sub.w	r0, r0, sl
 8012896:	2240      	movs	r2, #64	@ 0x40
 8012898:	4082      	lsls	r2, r0
 801289a:	4313      	orrs	r3, r2
 801289c:	3401      	adds	r4, #1
 801289e:	9304      	str	r3, [sp, #16]
 80128a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128a4:	4824      	ldr	r0, [pc, #144]	@ (8012938 <_svfiprintf_r+0x1e8>)
 80128a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80128aa:	2206      	movs	r2, #6
 80128ac:	f7ed fc90 	bl	80001d0 <memchr>
 80128b0:	2800      	cmp	r0, #0
 80128b2:	d036      	beq.n	8012922 <_svfiprintf_r+0x1d2>
 80128b4:	4b21      	ldr	r3, [pc, #132]	@ (801293c <_svfiprintf_r+0x1ec>)
 80128b6:	bb1b      	cbnz	r3, 8012900 <_svfiprintf_r+0x1b0>
 80128b8:	9b03      	ldr	r3, [sp, #12]
 80128ba:	3307      	adds	r3, #7
 80128bc:	f023 0307 	bic.w	r3, r3, #7
 80128c0:	3308      	adds	r3, #8
 80128c2:	9303      	str	r3, [sp, #12]
 80128c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128c6:	4433      	add	r3, r6
 80128c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80128ca:	e76a      	b.n	80127a2 <_svfiprintf_r+0x52>
 80128cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80128d0:	460c      	mov	r4, r1
 80128d2:	2001      	movs	r0, #1
 80128d4:	e7a8      	b.n	8012828 <_svfiprintf_r+0xd8>
 80128d6:	2300      	movs	r3, #0
 80128d8:	3401      	adds	r4, #1
 80128da:	9305      	str	r3, [sp, #20]
 80128dc:	4619      	mov	r1, r3
 80128de:	f04f 0c0a 	mov.w	ip, #10
 80128e2:	4620      	mov	r0, r4
 80128e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80128e8:	3a30      	subs	r2, #48	@ 0x30
 80128ea:	2a09      	cmp	r2, #9
 80128ec:	d903      	bls.n	80128f6 <_svfiprintf_r+0x1a6>
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d0c6      	beq.n	8012880 <_svfiprintf_r+0x130>
 80128f2:	9105      	str	r1, [sp, #20]
 80128f4:	e7c4      	b.n	8012880 <_svfiprintf_r+0x130>
 80128f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80128fa:	4604      	mov	r4, r0
 80128fc:	2301      	movs	r3, #1
 80128fe:	e7f0      	b.n	80128e2 <_svfiprintf_r+0x192>
 8012900:	ab03      	add	r3, sp, #12
 8012902:	9300      	str	r3, [sp, #0]
 8012904:	462a      	mov	r2, r5
 8012906:	4b0e      	ldr	r3, [pc, #56]	@ (8012940 <_svfiprintf_r+0x1f0>)
 8012908:	a904      	add	r1, sp, #16
 801290a:	4638      	mov	r0, r7
 801290c:	f3af 8000 	nop.w
 8012910:	1c42      	adds	r2, r0, #1
 8012912:	4606      	mov	r6, r0
 8012914:	d1d6      	bne.n	80128c4 <_svfiprintf_r+0x174>
 8012916:	89ab      	ldrh	r3, [r5, #12]
 8012918:	065b      	lsls	r3, r3, #25
 801291a:	f53f af2d 	bmi.w	8012778 <_svfiprintf_r+0x28>
 801291e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012920:	e72c      	b.n	801277c <_svfiprintf_r+0x2c>
 8012922:	ab03      	add	r3, sp, #12
 8012924:	9300      	str	r3, [sp, #0]
 8012926:	462a      	mov	r2, r5
 8012928:	4b05      	ldr	r3, [pc, #20]	@ (8012940 <_svfiprintf_r+0x1f0>)
 801292a:	a904      	add	r1, sp, #16
 801292c:	4638      	mov	r0, r7
 801292e:	f000 f9bb 	bl	8012ca8 <_printf_i>
 8012932:	e7ed      	b.n	8012910 <_svfiprintf_r+0x1c0>
 8012934:	08014764 	.word	0x08014764
 8012938:	0801476e 	.word	0x0801476e
 801293c:	00000000 	.word	0x00000000
 8012940:	08012699 	.word	0x08012699
 8012944:	0801476a 	.word	0x0801476a

08012948 <__sfputc_r>:
 8012948:	6893      	ldr	r3, [r2, #8]
 801294a:	3b01      	subs	r3, #1
 801294c:	2b00      	cmp	r3, #0
 801294e:	b410      	push	{r4}
 8012950:	6093      	str	r3, [r2, #8]
 8012952:	da08      	bge.n	8012966 <__sfputc_r+0x1e>
 8012954:	6994      	ldr	r4, [r2, #24]
 8012956:	42a3      	cmp	r3, r4
 8012958:	db01      	blt.n	801295e <__sfputc_r+0x16>
 801295a:	290a      	cmp	r1, #10
 801295c:	d103      	bne.n	8012966 <__sfputc_r+0x1e>
 801295e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012962:	f000 bb6b 	b.w	801303c <__swbuf_r>
 8012966:	6813      	ldr	r3, [r2, #0]
 8012968:	1c58      	adds	r0, r3, #1
 801296a:	6010      	str	r0, [r2, #0]
 801296c:	7019      	strb	r1, [r3, #0]
 801296e:	4608      	mov	r0, r1
 8012970:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012974:	4770      	bx	lr

08012976 <__sfputs_r>:
 8012976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012978:	4606      	mov	r6, r0
 801297a:	460f      	mov	r7, r1
 801297c:	4614      	mov	r4, r2
 801297e:	18d5      	adds	r5, r2, r3
 8012980:	42ac      	cmp	r4, r5
 8012982:	d101      	bne.n	8012988 <__sfputs_r+0x12>
 8012984:	2000      	movs	r0, #0
 8012986:	e007      	b.n	8012998 <__sfputs_r+0x22>
 8012988:	f814 1b01 	ldrb.w	r1, [r4], #1
 801298c:	463a      	mov	r2, r7
 801298e:	4630      	mov	r0, r6
 8012990:	f7ff ffda 	bl	8012948 <__sfputc_r>
 8012994:	1c43      	adds	r3, r0, #1
 8012996:	d1f3      	bne.n	8012980 <__sfputs_r+0xa>
 8012998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801299c <_vfiprintf_r>:
 801299c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129a0:	460d      	mov	r5, r1
 80129a2:	b09d      	sub	sp, #116	@ 0x74
 80129a4:	4614      	mov	r4, r2
 80129a6:	4698      	mov	r8, r3
 80129a8:	4606      	mov	r6, r0
 80129aa:	b118      	cbz	r0, 80129b4 <_vfiprintf_r+0x18>
 80129ac:	6a03      	ldr	r3, [r0, #32]
 80129ae:	b90b      	cbnz	r3, 80129b4 <_vfiprintf_r+0x18>
 80129b0:	f7ff fc3c 	bl	801222c <__sinit>
 80129b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80129b6:	07d9      	lsls	r1, r3, #31
 80129b8:	d405      	bmi.n	80129c6 <_vfiprintf_r+0x2a>
 80129ba:	89ab      	ldrh	r3, [r5, #12]
 80129bc:	059a      	lsls	r2, r3, #22
 80129be:	d402      	bmi.n	80129c6 <_vfiprintf_r+0x2a>
 80129c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80129c2:	f7ff fd6e 	bl	80124a2 <__retarget_lock_acquire_recursive>
 80129c6:	89ab      	ldrh	r3, [r5, #12]
 80129c8:	071b      	lsls	r3, r3, #28
 80129ca:	d501      	bpl.n	80129d0 <_vfiprintf_r+0x34>
 80129cc:	692b      	ldr	r3, [r5, #16]
 80129ce:	b99b      	cbnz	r3, 80129f8 <_vfiprintf_r+0x5c>
 80129d0:	4629      	mov	r1, r5
 80129d2:	4630      	mov	r0, r6
 80129d4:	f000 fb70 	bl	80130b8 <__swsetup_r>
 80129d8:	b170      	cbz	r0, 80129f8 <_vfiprintf_r+0x5c>
 80129da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80129dc:	07dc      	lsls	r4, r3, #31
 80129de:	d504      	bpl.n	80129ea <_vfiprintf_r+0x4e>
 80129e0:	f04f 30ff 	mov.w	r0, #4294967295
 80129e4:	b01d      	add	sp, #116	@ 0x74
 80129e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129ea:	89ab      	ldrh	r3, [r5, #12]
 80129ec:	0598      	lsls	r0, r3, #22
 80129ee:	d4f7      	bmi.n	80129e0 <_vfiprintf_r+0x44>
 80129f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80129f2:	f7ff fd57 	bl	80124a4 <__retarget_lock_release_recursive>
 80129f6:	e7f3      	b.n	80129e0 <_vfiprintf_r+0x44>
 80129f8:	2300      	movs	r3, #0
 80129fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80129fc:	2320      	movs	r3, #32
 80129fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012a02:	f8cd 800c 	str.w	r8, [sp, #12]
 8012a06:	2330      	movs	r3, #48	@ 0x30
 8012a08:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012bb8 <_vfiprintf_r+0x21c>
 8012a0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012a10:	f04f 0901 	mov.w	r9, #1
 8012a14:	4623      	mov	r3, r4
 8012a16:	469a      	mov	sl, r3
 8012a18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a1c:	b10a      	cbz	r2, 8012a22 <_vfiprintf_r+0x86>
 8012a1e:	2a25      	cmp	r2, #37	@ 0x25
 8012a20:	d1f9      	bne.n	8012a16 <_vfiprintf_r+0x7a>
 8012a22:	ebba 0b04 	subs.w	fp, sl, r4
 8012a26:	d00b      	beq.n	8012a40 <_vfiprintf_r+0xa4>
 8012a28:	465b      	mov	r3, fp
 8012a2a:	4622      	mov	r2, r4
 8012a2c:	4629      	mov	r1, r5
 8012a2e:	4630      	mov	r0, r6
 8012a30:	f7ff ffa1 	bl	8012976 <__sfputs_r>
 8012a34:	3001      	adds	r0, #1
 8012a36:	f000 80a7 	beq.w	8012b88 <_vfiprintf_r+0x1ec>
 8012a3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012a3c:	445a      	add	r2, fp
 8012a3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8012a40:	f89a 3000 	ldrb.w	r3, [sl]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	f000 809f 	beq.w	8012b88 <_vfiprintf_r+0x1ec>
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8012a50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012a54:	f10a 0a01 	add.w	sl, sl, #1
 8012a58:	9304      	str	r3, [sp, #16]
 8012a5a:	9307      	str	r3, [sp, #28]
 8012a5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012a60:	931a      	str	r3, [sp, #104]	@ 0x68
 8012a62:	4654      	mov	r4, sl
 8012a64:	2205      	movs	r2, #5
 8012a66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a6a:	4853      	ldr	r0, [pc, #332]	@ (8012bb8 <_vfiprintf_r+0x21c>)
 8012a6c:	f7ed fbb0 	bl	80001d0 <memchr>
 8012a70:	9a04      	ldr	r2, [sp, #16]
 8012a72:	b9d8      	cbnz	r0, 8012aac <_vfiprintf_r+0x110>
 8012a74:	06d1      	lsls	r1, r2, #27
 8012a76:	bf44      	itt	mi
 8012a78:	2320      	movmi	r3, #32
 8012a7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a7e:	0713      	lsls	r3, r2, #28
 8012a80:	bf44      	itt	mi
 8012a82:	232b      	movmi	r3, #43	@ 0x2b
 8012a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012a88:	f89a 3000 	ldrb.w	r3, [sl]
 8012a8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8012a8e:	d015      	beq.n	8012abc <_vfiprintf_r+0x120>
 8012a90:	9a07      	ldr	r2, [sp, #28]
 8012a92:	4654      	mov	r4, sl
 8012a94:	2000      	movs	r0, #0
 8012a96:	f04f 0c0a 	mov.w	ip, #10
 8012a9a:	4621      	mov	r1, r4
 8012a9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012aa0:	3b30      	subs	r3, #48	@ 0x30
 8012aa2:	2b09      	cmp	r3, #9
 8012aa4:	d94b      	bls.n	8012b3e <_vfiprintf_r+0x1a2>
 8012aa6:	b1b0      	cbz	r0, 8012ad6 <_vfiprintf_r+0x13a>
 8012aa8:	9207      	str	r2, [sp, #28]
 8012aaa:	e014      	b.n	8012ad6 <_vfiprintf_r+0x13a>
 8012aac:	eba0 0308 	sub.w	r3, r0, r8
 8012ab0:	fa09 f303 	lsl.w	r3, r9, r3
 8012ab4:	4313      	orrs	r3, r2
 8012ab6:	9304      	str	r3, [sp, #16]
 8012ab8:	46a2      	mov	sl, r4
 8012aba:	e7d2      	b.n	8012a62 <_vfiprintf_r+0xc6>
 8012abc:	9b03      	ldr	r3, [sp, #12]
 8012abe:	1d19      	adds	r1, r3, #4
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	9103      	str	r1, [sp, #12]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	bfbb      	ittet	lt
 8012ac8:	425b      	neglt	r3, r3
 8012aca:	f042 0202 	orrlt.w	r2, r2, #2
 8012ace:	9307      	strge	r3, [sp, #28]
 8012ad0:	9307      	strlt	r3, [sp, #28]
 8012ad2:	bfb8      	it	lt
 8012ad4:	9204      	strlt	r2, [sp, #16]
 8012ad6:	7823      	ldrb	r3, [r4, #0]
 8012ad8:	2b2e      	cmp	r3, #46	@ 0x2e
 8012ada:	d10a      	bne.n	8012af2 <_vfiprintf_r+0x156>
 8012adc:	7863      	ldrb	r3, [r4, #1]
 8012ade:	2b2a      	cmp	r3, #42	@ 0x2a
 8012ae0:	d132      	bne.n	8012b48 <_vfiprintf_r+0x1ac>
 8012ae2:	9b03      	ldr	r3, [sp, #12]
 8012ae4:	1d1a      	adds	r2, r3, #4
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	9203      	str	r2, [sp, #12]
 8012aea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012aee:	3402      	adds	r4, #2
 8012af0:	9305      	str	r3, [sp, #20]
 8012af2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012bc8 <_vfiprintf_r+0x22c>
 8012af6:	7821      	ldrb	r1, [r4, #0]
 8012af8:	2203      	movs	r2, #3
 8012afa:	4650      	mov	r0, sl
 8012afc:	f7ed fb68 	bl	80001d0 <memchr>
 8012b00:	b138      	cbz	r0, 8012b12 <_vfiprintf_r+0x176>
 8012b02:	9b04      	ldr	r3, [sp, #16]
 8012b04:	eba0 000a 	sub.w	r0, r0, sl
 8012b08:	2240      	movs	r2, #64	@ 0x40
 8012b0a:	4082      	lsls	r2, r0
 8012b0c:	4313      	orrs	r3, r2
 8012b0e:	3401      	adds	r4, #1
 8012b10:	9304      	str	r3, [sp, #16]
 8012b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b16:	4829      	ldr	r0, [pc, #164]	@ (8012bbc <_vfiprintf_r+0x220>)
 8012b18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012b1c:	2206      	movs	r2, #6
 8012b1e:	f7ed fb57 	bl	80001d0 <memchr>
 8012b22:	2800      	cmp	r0, #0
 8012b24:	d03f      	beq.n	8012ba6 <_vfiprintf_r+0x20a>
 8012b26:	4b26      	ldr	r3, [pc, #152]	@ (8012bc0 <_vfiprintf_r+0x224>)
 8012b28:	bb1b      	cbnz	r3, 8012b72 <_vfiprintf_r+0x1d6>
 8012b2a:	9b03      	ldr	r3, [sp, #12]
 8012b2c:	3307      	adds	r3, #7
 8012b2e:	f023 0307 	bic.w	r3, r3, #7
 8012b32:	3308      	adds	r3, #8
 8012b34:	9303      	str	r3, [sp, #12]
 8012b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b38:	443b      	add	r3, r7
 8012b3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8012b3c:	e76a      	b.n	8012a14 <_vfiprintf_r+0x78>
 8012b3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012b42:	460c      	mov	r4, r1
 8012b44:	2001      	movs	r0, #1
 8012b46:	e7a8      	b.n	8012a9a <_vfiprintf_r+0xfe>
 8012b48:	2300      	movs	r3, #0
 8012b4a:	3401      	adds	r4, #1
 8012b4c:	9305      	str	r3, [sp, #20]
 8012b4e:	4619      	mov	r1, r3
 8012b50:	f04f 0c0a 	mov.w	ip, #10
 8012b54:	4620      	mov	r0, r4
 8012b56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b5a:	3a30      	subs	r2, #48	@ 0x30
 8012b5c:	2a09      	cmp	r2, #9
 8012b5e:	d903      	bls.n	8012b68 <_vfiprintf_r+0x1cc>
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d0c6      	beq.n	8012af2 <_vfiprintf_r+0x156>
 8012b64:	9105      	str	r1, [sp, #20]
 8012b66:	e7c4      	b.n	8012af2 <_vfiprintf_r+0x156>
 8012b68:	fb0c 2101 	mla	r1, ip, r1, r2
 8012b6c:	4604      	mov	r4, r0
 8012b6e:	2301      	movs	r3, #1
 8012b70:	e7f0      	b.n	8012b54 <_vfiprintf_r+0x1b8>
 8012b72:	ab03      	add	r3, sp, #12
 8012b74:	9300      	str	r3, [sp, #0]
 8012b76:	462a      	mov	r2, r5
 8012b78:	4b12      	ldr	r3, [pc, #72]	@ (8012bc4 <_vfiprintf_r+0x228>)
 8012b7a:	a904      	add	r1, sp, #16
 8012b7c:	4630      	mov	r0, r6
 8012b7e:	f3af 8000 	nop.w
 8012b82:	4607      	mov	r7, r0
 8012b84:	1c78      	adds	r0, r7, #1
 8012b86:	d1d6      	bne.n	8012b36 <_vfiprintf_r+0x19a>
 8012b88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012b8a:	07d9      	lsls	r1, r3, #31
 8012b8c:	d405      	bmi.n	8012b9a <_vfiprintf_r+0x1fe>
 8012b8e:	89ab      	ldrh	r3, [r5, #12]
 8012b90:	059a      	lsls	r2, r3, #22
 8012b92:	d402      	bmi.n	8012b9a <_vfiprintf_r+0x1fe>
 8012b94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012b96:	f7ff fc85 	bl	80124a4 <__retarget_lock_release_recursive>
 8012b9a:	89ab      	ldrh	r3, [r5, #12]
 8012b9c:	065b      	lsls	r3, r3, #25
 8012b9e:	f53f af1f 	bmi.w	80129e0 <_vfiprintf_r+0x44>
 8012ba2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012ba4:	e71e      	b.n	80129e4 <_vfiprintf_r+0x48>
 8012ba6:	ab03      	add	r3, sp, #12
 8012ba8:	9300      	str	r3, [sp, #0]
 8012baa:	462a      	mov	r2, r5
 8012bac:	4b05      	ldr	r3, [pc, #20]	@ (8012bc4 <_vfiprintf_r+0x228>)
 8012bae:	a904      	add	r1, sp, #16
 8012bb0:	4630      	mov	r0, r6
 8012bb2:	f000 f879 	bl	8012ca8 <_printf_i>
 8012bb6:	e7e4      	b.n	8012b82 <_vfiprintf_r+0x1e6>
 8012bb8:	08014764 	.word	0x08014764
 8012bbc:	0801476e 	.word	0x0801476e
 8012bc0:	00000000 	.word	0x00000000
 8012bc4:	08012977 	.word	0x08012977
 8012bc8:	0801476a 	.word	0x0801476a

08012bcc <_printf_common>:
 8012bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bd0:	4616      	mov	r6, r2
 8012bd2:	4698      	mov	r8, r3
 8012bd4:	688a      	ldr	r2, [r1, #8]
 8012bd6:	690b      	ldr	r3, [r1, #16]
 8012bd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012bdc:	4293      	cmp	r3, r2
 8012bde:	bfb8      	it	lt
 8012be0:	4613      	movlt	r3, r2
 8012be2:	6033      	str	r3, [r6, #0]
 8012be4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012be8:	4607      	mov	r7, r0
 8012bea:	460c      	mov	r4, r1
 8012bec:	b10a      	cbz	r2, 8012bf2 <_printf_common+0x26>
 8012bee:	3301      	adds	r3, #1
 8012bf0:	6033      	str	r3, [r6, #0]
 8012bf2:	6823      	ldr	r3, [r4, #0]
 8012bf4:	0699      	lsls	r1, r3, #26
 8012bf6:	bf42      	ittt	mi
 8012bf8:	6833      	ldrmi	r3, [r6, #0]
 8012bfa:	3302      	addmi	r3, #2
 8012bfc:	6033      	strmi	r3, [r6, #0]
 8012bfe:	6825      	ldr	r5, [r4, #0]
 8012c00:	f015 0506 	ands.w	r5, r5, #6
 8012c04:	d106      	bne.n	8012c14 <_printf_common+0x48>
 8012c06:	f104 0a19 	add.w	sl, r4, #25
 8012c0a:	68e3      	ldr	r3, [r4, #12]
 8012c0c:	6832      	ldr	r2, [r6, #0]
 8012c0e:	1a9b      	subs	r3, r3, r2
 8012c10:	42ab      	cmp	r3, r5
 8012c12:	dc26      	bgt.n	8012c62 <_printf_common+0x96>
 8012c14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012c18:	6822      	ldr	r2, [r4, #0]
 8012c1a:	3b00      	subs	r3, #0
 8012c1c:	bf18      	it	ne
 8012c1e:	2301      	movne	r3, #1
 8012c20:	0692      	lsls	r2, r2, #26
 8012c22:	d42b      	bmi.n	8012c7c <_printf_common+0xb0>
 8012c24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012c28:	4641      	mov	r1, r8
 8012c2a:	4638      	mov	r0, r7
 8012c2c:	47c8      	blx	r9
 8012c2e:	3001      	adds	r0, #1
 8012c30:	d01e      	beq.n	8012c70 <_printf_common+0xa4>
 8012c32:	6823      	ldr	r3, [r4, #0]
 8012c34:	6922      	ldr	r2, [r4, #16]
 8012c36:	f003 0306 	and.w	r3, r3, #6
 8012c3a:	2b04      	cmp	r3, #4
 8012c3c:	bf02      	ittt	eq
 8012c3e:	68e5      	ldreq	r5, [r4, #12]
 8012c40:	6833      	ldreq	r3, [r6, #0]
 8012c42:	1aed      	subeq	r5, r5, r3
 8012c44:	68a3      	ldr	r3, [r4, #8]
 8012c46:	bf0c      	ite	eq
 8012c48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012c4c:	2500      	movne	r5, #0
 8012c4e:	4293      	cmp	r3, r2
 8012c50:	bfc4      	itt	gt
 8012c52:	1a9b      	subgt	r3, r3, r2
 8012c54:	18ed      	addgt	r5, r5, r3
 8012c56:	2600      	movs	r6, #0
 8012c58:	341a      	adds	r4, #26
 8012c5a:	42b5      	cmp	r5, r6
 8012c5c:	d11a      	bne.n	8012c94 <_printf_common+0xc8>
 8012c5e:	2000      	movs	r0, #0
 8012c60:	e008      	b.n	8012c74 <_printf_common+0xa8>
 8012c62:	2301      	movs	r3, #1
 8012c64:	4652      	mov	r2, sl
 8012c66:	4641      	mov	r1, r8
 8012c68:	4638      	mov	r0, r7
 8012c6a:	47c8      	blx	r9
 8012c6c:	3001      	adds	r0, #1
 8012c6e:	d103      	bne.n	8012c78 <_printf_common+0xac>
 8012c70:	f04f 30ff 	mov.w	r0, #4294967295
 8012c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c78:	3501      	adds	r5, #1
 8012c7a:	e7c6      	b.n	8012c0a <_printf_common+0x3e>
 8012c7c:	18e1      	adds	r1, r4, r3
 8012c7e:	1c5a      	adds	r2, r3, #1
 8012c80:	2030      	movs	r0, #48	@ 0x30
 8012c82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012c86:	4422      	add	r2, r4
 8012c88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012c8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012c90:	3302      	adds	r3, #2
 8012c92:	e7c7      	b.n	8012c24 <_printf_common+0x58>
 8012c94:	2301      	movs	r3, #1
 8012c96:	4622      	mov	r2, r4
 8012c98:	4641      	mov	r1, r8
 8012c9a:	4638      	mov	r0, r7
 8012c9c:	47c8      	blx	r9
 8012c9e:	3001      	adds	r0, #1
 8012ca0:	d0e6      	beq.n	8012c70 <_printf_common+0xa4>
 8012ca2:	3601      	adds	r6, #1
 8012ca4:	e7d9      	b.n	8012c5a <_printf_common+0x8e>
	...

08012ca8 <_printf_i>:
 8012ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012cac:	7e0f      	ldrb	r7, [r1, #24]
 8012cae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012cb0:	2f78      	cmp	r7, #120	@ 0x78
 8012cb2:	4691      	mov	r9, r2
 8012cb4:	4680      	mov	r8, r0
 8012cb6:	460c      	mov	r4, r1
 8012cb8:	469a      	mov	sl, r3
 8012cba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012cbe:	d807      	bhi.n	8012cd0 <_printf_i+0x28>
 8012cc0:	2f62      	cmp	r7, #98	@ 0x62
 8012cc2:	d80a      	bhi.n	8012cda <_printf_i+0x32>
 8012cc4:	2f00      	cmp	r7, #0
 8012cc6:	f000 80d1 	beq.w	8012e6c <_printf_i+0x1c4>
 8012cca:	2f58      	cmp	r7, #88	@ 0x58
 8012ccc:	f000 80b8 	beq.w	8012e40 <_printf_i+0x198>
 8012cd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012cd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012cd8:	e03a      	b.n	8012d50 <_printf_i+0xa8>
 8012cda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012cde:	2b15      	cmp	r3, #21
 8012ce0:	d8f6      	bhi.n	8012cd0 <_printf_i+0x28>
 8012ce2:	a101      	add	r1, pc, #4	@ (adr r1, 8012ce8 <_printf_i+0x40>)
 8012ce4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012ce8:	08012d41 	.word	0x08012d41
 8012cec:	08012d55 	.word	0x08012d55
 8012cf0:	08012cd1 	.word	0x08012cd1
 8012cf4:	08012cd1 	.word	0x08012cd1
 8012cf8:	08012cd1 	.word	0x08012cd1
 8012cfc:	08012cd1 	.word	0x08012cd1
 8012d00:	08012d55 	.word	0x08012d55
 8012d04:	08012cd1 	.word	0x08012cd1
 8012d08:	08012cd1 	.word	0x08012cd1
 8012d0c:	08012cd1 	.word	0x08012cd1
 8012d10:	08012cd1 	.word	0x08012cd1
 8012d14:	08012e53 	.word	0x08012e53
 8012d18:	08012d7f 	.word	0x08012d7f
 8012d1c:	08012e0d 	.word	0x08012e0d
 8012d20:	08012cd1 	.word	0x08012cd1
 8012d24:	08012cd1 	.word	0x08012cd1
 8012d28:	08012e75 	.word	0x08012e75
 8012d2c:	08012cd1 	.word	0x08012cd1
 8012d30:	08012d7f 	.word	0x08012d7f
 8012d34:	08012cd1 	.word	0x08012cd1
 8012d38:	08012cd1 	.word	0x08012cd1
 8012d3c:	08012e15 	.word	0x08012e15
 8012d40:	6833      	ldr	r3, [r6, #0]
 8012d42:	1d1a      	adds	r2, r3, #4
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	6032      	str	r2, [r6, #0]
 8012d48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012d4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012d50:	2301      	movs	r3, #1
 8012d52:	e09c      	b.n	8012e8e <_printf_i+0x1e6>
 8012d54:	6833      	ldr	r3, [r6, #0]
 8012d56:	6820      	ldr	r0, [r4, #0]
 8012d58:	1d19      	adds	r1, r3, #4
 8012d5a:	6031      	str	r1, [r6, #0]
 8012d5c:	0606      	lsls	r6, r0, #24
 8012d5e:	d501      	bpl.n	8012d64 <_printf_i+0xbc>
 8012d60:	681d      	ldr	r5, [r3, #0]
 8012d62:	e003      	b.n	8012d6c <_printf_i+0xc4>
 8012d64:	0645      	lsls	r5, r0, #25
 8012d66:	d5fb      	bpl.n	8012d60 <_printf_i+0xb8>
 8012d68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012d6c:	2d00      	cmp	r5, #0
 8012d6e:	da03      	bge.n	8012d78 <_printf_i+0xd0>
 8012d70:	232d      	movs	r3, #45	@ 0x2d
 8012d72:	426d      	negs	r5, r5
 8012d74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012d78:	4858      	ldr	r0, [pc, #352]	@ (8012edc <_printf_i+0x234>)
 8012d7a:	230a      	movs	r3, #10
 8012d7c:	e011      	b.n	8012da2 <_printf_i+0xfa>
 8012d7e:	6821      	ldr	r1, [r4, #0]
 8012d80:	6833      	ldr	r3, [r6, #0]
 8012d82:	0608      	lsls	r0, r1, #24
 8012d84:	f853 5b04 	ldr.w	r5, [r3], #4
 8012d88:	d402      	bmi.n	8012d90 <_printf_i+0xe8>
 8012d8a:	0649      	lsls	r1, r1, #25
 8012d8c:	bf48      	it	mi
 8012d8e:	b2ad      	uxthmi	r5, r5
 8012d90:	2f6f      	cmp	r7, #111	@ 0x6f
 8012d92:	4852      	ldr	r0, [pc, #328]	@ (8012edc <_printf_i+0x234>)
 8012d94:	6033      	str	r3, [r6, #0]
 8012d96:	bf14      	ite	ne
 8012d98:	230a      	movne	r3, #10
 8012d9a:	2308      	moveq	r3, #8
 8012d9c:	2100      	movs	r1, #0
 8012d9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012da2:	6866      	ldr	r6, [r4, #4]
 8012da4:	60a6      	str	r6, [r4, #8]
 8012da6:	2e00      	cmp	r6, #0
 8012da8:	db05      	blt.n	8012db6 <_printf_i+0x10e>
 8012daa:	6821      	ldr	r1, [r4, #0]
 8012dac:	432e      	orrs	r6, r5
 8012dae:	f021 0104 	bic.w	r1, r1, #4
 8012db2:	6021      	str	r1, [r4, #0]
 8012db4:	d04b      	beq.n	8012e4e <_printf_i+0x1a6>
 8012db6:	4616      	mov	r6, r2
 8012db8:	fbb5 f1f3 	udiv	r1, r5, r3
 8012dbc:	fb03 5711 	mls	r7, r3, r1, r5
 8012dc0:	5dc7      	ldrb	r7, [r0, r7]
 8012dc2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012dc6:	462f      	mov	r7, r5
 8012dc8:	42bb      	cmp	r3, r7
 8012dca:	460d      	mov	r5, r1
 8012dcc:	d9f4      	bls.n	8012db8 <_printf_i+0x110>
 8012dce:	2b08      	cmp	r3, #8
 8012dd0:	d10b      	bne.n	8012dea <_printf_i+0x142>
 8012dd2:	6823      	ldr	r3, [r4, #0]
 8012dd4:	07df      	lsls	r7, r3, #31
 8012dd6:	d508      	bpl.n	8012dea <_printf_i+0x142>
 8012dd8:	6923      	ldr	r3, [r4, #16]
 8012dda:	6861      	ldr	r1, [r4, #4]
 8012ddc:	4299      	cmp	r1, r3
 8012dde:	bfde      	ittt	le
 8012de0:	2330      	movle	r3, #48	@ 0x30
 8012de2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012de6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012dea:	1b92      	subs	r2, r2, r6
 8012dec:	6122      	str	r2, [r4, #16]
 8012dee:	f8cd a000 	str.w	sl, [sp]
 8012df2:	464b      	mov	r3, r9
 8012df4:	aa03      	add	r2, sp, #12
 8012df6:	4621      	mov	r1, r4
 8012df8:	4640      	mov	r0, r8
 8012dfa:	f7ff fee7 	bl	8012bcc <_printf_common>
 8012dfe:	3001      	adds	r0, #1
 8012e00:	d14a      	bne.n	8012e98 <_printf_i+0x1f0>
 8012e02:	f04f 30ff 	mov.w	r0, #4294967295
 8012e06:	b004      	add	sp, #16
 8012e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e0c:	6823      	ldr	r3, [r4, #0]
 8012e0e:	f043 0320 	orr.w	r3, r3, #32
 8012e12:	6023      	str	r3, [r4, #0]
 8012e14:	4832      	ldr	r0, [pc, #200]	@ (8012ee0 <_printf_i+0x238>)
 8012e16:	2778      	movs	r7, #120	@ 0x78
 8012e18:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012e1c:	6823      	ldr	r3, [r4, #0]
 8012e1e:	6831      	ldr	r1, [r6, #0]
 8012e20:	061f      	lsls	r7, r3, #24
 8012e22:	f851 5b04 	ldr.w	r5, [r1], #4
 8012e26:	d402      	bmi.n	8012e2e <_printf_i+0x186>
 8012e28:	065f      	lsls	r7, r3, #25
 8012e2a:	bf48      	it	mi
 8012e2c:	b2ad      	uxthmi	r5, r5
 8012e2e:	6031      	str	r1, [r6, #0]
 8012e30:	07d9      	lsls	r1, r3, #31
 8012e32:	bf44      	itt	mi
 8012e34:	f043 0320 	orrmi.w	r3, r3, #32
 8012e38:	6023      	strmi	r3, [r4, #0]
 8012e3a:	b11d      	cbz	r5, 8012e44 <_printf_i+0x19c>
 8012e3c:	2310      	movs	r3, #16
 8012e3e:	e7ad      	b.n	8012d9c <_printf_i+0xf4>
 8012e40:	4826      	ldr	r0, [pc, #152]	@ (8012edc <_printf_i+0x234>)
 8012e42:	e7e9      	b.n	8012e18 <_printf_i+0x170>
 8012e44:	6823      	ldr	r3, [r4, #0]
 8012e46:	f023 0320 	bic.w	r3, r3, #32
 8012e4a:	6023      	str	r3, [r4, #0]
 8012e4c:	e7f6      	b.n	8012e3c <_printf_i+0x194>
 8012e4e:	4616      	mov	r6, r2
 8012e50:	e7bd      	b.n	8012dce <_printf_i+0x126>
 8012e52:	6833      	ldr	r3, [r6, #0]
 8012e54:	6825      	ldr	r5, [r4, #0]
 8012e56:	6961      	ldr	r1, [r4, #20]
 8012e58:	1d18      	adds	r0, r3, #4
 8012e5a:	6030      	str	r0, [r6, #0]
 8012e5c:	062e      	lsls	r6, r5, #24
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	d501      	bpl.n	8012e66 <_printf_i+0x1be>
 8012e62:	6019      	str	r1, [r3, #0]
 8012e64:	e002      	b.n	8012e6c <_printf_i+0x1c4>
 8012e66:	0668      	lsls	r0, r5, #25
 8012e68:	d5fb      	bpl.n	8012e62 <_printf_i+0x1ba>
 8012e6a:	8019      	strh	r1, [r3, #0]
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	6123      	str	r3, [r4, #16]
 8012e70:	4616      	mov	r6, r2
 8012e72:	e7bc      	b.n	8012dee <_printf_i+0x146>
 8012e74:	6833      	ldr	r3, [r6, #0]
 8012e76:	1d1a      	adds	r2, r3, #4
 8012e78:	6032      	str	r2, [r6, #0]
 8012e7a:	681e      	ldr	r6, [r3, #0]
 8012e7c:	6862      	ldr	r2, [r4, #4]
 8012e7e:	2100      	movs	r1, #0
 8012e80:	4630      	mov	r0, r6
 8012e82:	f7ed f9a5 	bl	80001d0 <memchr>
 8012e86:	b108      	cbz	r0, 8012e8c <_printf_i+0x1e4>
 8012e88:	1b80      	subs	r0, r0, r6
 8012e8a:	6060      	str	r0, [r4, #4]
 8012e8c:	6863      	ldr	r3, [r4, #4]
 8012e8e:	6123      	str	r3, [r4, #16]
 8012e90:	2300      	movs	r3, #0
 8012e92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012e96:	e7aa      	b.n	8012dee <_printf_i+0x146>
 8012e98:	6923      	ldr	r3, [r4, #16]
 8012e9a:	4632      	mov	r2, r6
 8012e9c:	4649      	mov	r1, r9
 8012e9e:	4640      	mov	r0, r8
 8012ea0:	47d0      	blx	sl
 8012ea2:	3001      	adds	r0, #1
 8012ea4:	d0ad      	beq.n	8012e02 <_printf_i+0x15a>
 8012ea6:	6823      	ldr	r3, [r4, #0]
 8012ea8:	079b      	lsls	r3, r3, #30
 8012eaa:	d413      	bmi.n	8012ed4 <_printf_i+0x22c>
 8012eac:	68e0      	ldr	r0, [r4, #12]
 8012eae:	9b03      	ldr	r3, [sp, #12]
 8012eb0:	4298      	cmp	r0, r3
 8012eb2:	bfb8      	it	lt
 8012eb4:	4618      	movlt	r0, r3
 8012eb6:	e7a6      	b.n	8012e06 <_printf_i+0x15e>
 8012eb8:	2301      	movs	r3, #1
 8012eba:	4632      	mov	r2, r6
 8012ebc:	4649      	mov	r1, r9
 8012ebe:	4640      	mov	r0, r8
 8012ec0:	47d0      	blx	sl
 8012ec2:	3001      	adds	r0, #1
 8012ec4:	d09d      	beq.n	8012e02 <_printf_i+0x15a>
 8012ec6:	3501      	adds	r5, #1
 8012ec8:	68e3      	ldr	r3, [r4, #12]
 8012eca:	9903      	ldr	r1, [sp, #12]
 8012ecc:	1a5b      	subs	r3, r3, r1
 8012ece:	42ab      	cmp	r3, r5
 8012ed0:	dcf2      	bgt.n	8012eb8 <_printf_i+0x210>
 8012ed2:	e7eb      	b.n	8012eac <_printf_i+0x204>
 8012ed4:	2500      	movs	r5, #0
 8012ed6:	f104 0619 	add.w	r6, r4, #25
 8012eda:	e7f5      	b.n	8012ec8 <_printf_i+0x220>
 8012edc:	08014775 	.word	0x08014775
 8012ee0:	08014786 	.word	0x08014786

08012ee4 <__sflush_r>:
 8012ee4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012eec:	0716      	lsls	r6, r2, #28
 8012eee:	4605      	mov	r5, r0
 8012ef0:	460c      	mov	r4, r1
 8012ef2:	d454      	bmi.n	8012f9e <__sflush_r+0xba>
 8012ef4:	684b      	ldr	r3, [r1, #4]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	dc02      	bgt.n	8012f00 <__sflush_r+0x1c>
 8012efa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	dd48      	ble.n	8012f92 <__sflush_r+0xae>
 8012f00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012f02:	2e00      	cmp	r6, #0
 8012f04:	d045      	beq.n	8012f92 <__sflush_r+0xae>
 8012f06:	2300      	movs	r3, #0
 8012f08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012f0c:	682f      	ldr	r7, [r5, #0]
 8012f0e:	6a21      	ldr	r1, [r4, #32]
 8012f10:	602b      	str	r3, [r5, #0]
 8012f12:	d030      	beq.n	8012f76 <__sflush_r+0x92>
 8012f14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012f16:	89a3      	ldrh	r3, [r4, #12]
 8012f18:	0759      	lsls	r1, r3, #29
 8012f1a:	d505      	bpl.n	8012f28 <__sflush_r+0x44>
 8012f1c:	6863      	ldr	r3, [r4, #4]
 8012f1e:	1ad2      	subs	r2, r2, r3
 8012f20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012f22:	b10b      	cbz	r3, 8012f28 <__sflush_r+0x44>
 8012f24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012f26:	1ad2      	subs	r2, r2, r3
 8012f28:	2300      	movs	r3, #0
 8012f2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012f2c:	6a21      	ldr	r1, [r4, #32]
 8012f2e:	4628      	mov	r0, r5
 8012f30:	47b0      	blx	r6
 8012f32:	1c43      	adds	r3, r0, #1
 8012f34:	89a3      	ldrh	r3, [r4, #12]
 8012f36:	d106      	bne.n	8012f46 <__sflush_r+0x62>
 8012f38:	6829      	ldr	r1, [r5, #0]
 8012f3a:	291d      	cmp	r1, #29
 8012f3c:	d82b      	bhi.n	8012f96 <__sflush_r+0xb2>
 8012f3e:	4a2a      	ldr	r2, [pc, #168]	@ (8012fe8 <__sflush_r+0x104>)
 8012f40:	40ca      	lsrs	r2, r1
 8012f42:	07d6      	lsls	r6, r2, #31
 8012f44:	d527      	bpl.n	8012f96 <__sflush_r+0xb2>
 8012f46:	2200      	movs	r2, #0
 8012f48:	6062      	str	r2, [r4, #4]
 8012f4a:	04d9      	lsls	r1, r3, #19
 8012f4c:	6922      	ldr	r2, [r4, #16]
 8012f4e:	6022      	str	r2, [r4, #0]
 8012f50:	d504      	bpl.n	8012f5c <__sflush_r+0x78>
 8012f52:	1c42      	adds	r2, r0, #1
 8012f54:	d101      	bne.n	8012f5a <__sflush_r+0x76>
 8012f56:	682b      	ldr	r3, [r5, #0]
 8012f58:	b903      	cbnz	r3, 8012f5c <__sflush_r+0x78>
 8012f5a:	6560      	str	r0, [r4, #84]	@ 0x54
 8012f5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012f5e:	602f      	str	r7, [r5, #0]
 8012f60:	b1b9      	cbz	r1, 8012f92 <__sflush_r+0xae>
 8012f62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012f66:	4299      	cmp	r1, r3
 8012f68:	d002      	beq.n	8012f70 <__sflush_r+0x8c>
 8012f6a:	4628      	mov	r0, r5
 8012f6c:	f7ff fa9c 	bl	80124a8 <_free_r>
 8012f70:	2300      	movs	r3, #0
 8012f72:	6363      	str	r3, [r4, #52]	@ 0x34
 8012f74:	e00d      	b.n	8012f92 <__sflush_r+0xae>
 8012f76:	2301      	movs	r3, #1
 8012f78:	4628      	mov	r0, r5
 8012f7a:	47b0      	blx	r6
 8012f7c:	4602      	mov	r2, r0
 8012f7e:	1c50      	adds	r0, r2, #1
 8012f80:	d1c9      	bne.n	8012f16 <__sflush_r+0x32>
 8012f82:	682b      	ldr	r3, [r5, #0]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d0c6      	beq.n	8012f16 <__sflush_r+0x32>
 8012f88:	2b1d      	cmp	r3, #29
 8012f8a:	d001      	beq.n	8012f90 <__sflush_r+0xac>
 8012f8c:	2b16      	cmp	r3, #22
 8012f8e:	d11e      	bne.n	8012fce <__sflush_r+0xea>
 8012f90:	602f      	str	r7, [r5, #0]
 8012f92:	2000      	movs	r0, #0
 8012f94:	e022      	b.n	8012fdc <__sflush_r+0xf8>
 8012f96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012f9a:	b21b      	sxth	r3, r3
 8012f9c:	e01b      	b.n	8012fd6 <__sflush_r+0xf2>
 8012f9e:	690f      	ldr	r7, [r1, #16]
 8012fa0:	2f00      	cmp	r7, #0
 8012fa2:	d0f6      	beq.n	8012f92 <__sflush_r+0xae>
 8012fa4:	0793      	lsls	r3, r2, #30
 8012fa6:	680e      	ldr	r6, [r1, #0]
 8012fa8:	bf08      	it	eq
 8012faa:	694b      	ldreq	r3, [r1, #20]
 8012fac:	600f      	str	r7, [r1, #0]
 8012fae:	bf18      	it	ne
 8012fb0:	2300      	movne	r3, #0
 8012fb2:	eba6 0807 	sub.w	r8, r6, r7
 8012fb6:	608b      	str	r3, [r1, #8]
 8012fb8:	f1b8 0f00 	cmp.w	r8, #0
 8012fbc:	dde9      	ble.n	8012f92 <__sflush_r+0xae>
 8012fbe:	6a21      	ldr	r1, [r4, #32]
 8012fc0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012fc2:	4643      	mov	r3, r8
 8012fc4:	463a      	mov	r2, r7
 8012fc6:	4628      	mov	r0, r5
 8012fc8:	47b0      	blx	r6
 8012fca:	2800      	cmp	r0, #0
 8012fcc:	dc08      	bgt.n	8012fe0 <__sflush_r+0xfc>
 8012fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012fd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012fd6:	81a3      	strh	r3, [r4, #12]
 8012fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8012fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fe0:	4407      	add	r7, r0
 8012fe2:	eba8 0800 	sub.w	r8, r8, r0
 8012fe6:	e7e7      	b.n	8012fb8 <__sflush_r+0xd4>
 8012fe8:	20400001 	.word	0x20400001

08012fec <_fflush_r>:
 8012fec:	b538      	push	{r3, r4, r5, lr}
 8012fee:	690b      	ldr	r3, [r1, #16]
 8012ff0:	4605      	mov	r5, r0
 8012ff2:	460c      	mov	r4, r1
 8012ff4:	b913      	cbnz	r3, 8012ffc <_fflush_r+0x10>
 8012ff6:	2500      	movs	r5, #0
 8012ff8:	4628      	mov	r0, r5
 8012ffa:	bd38      	pop	{r3, r4, r5, pc}
 8012ffc:	b118      	cbz	r0, 8013006 <_fflush_r+0x1a>
 8012ffe:	6a03      	ldr	r3, [r0, #32]
 8013000:	b90b      	cbnz	r3, 8013006 <_fflush_r+0x1a>
 8013002:	f7ff f913 	bl	801222c <__sinit>
 8013006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d0f3      	beq.n	8012ff6 <_fflush_r+0xa>
 801300e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013010:	07d0      	lsls	r0, r2, #31
 8013012:	d404      	bmi.n	801301e <_fflush_r+0x32>
 8013014:	0599      	lsls	r1, r3, #22
 8013016:	d402      	bmi.n	801301e <_fflush_r+0x32>
 8013018:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801301a:	f7ff fa42 	bl	80124a2 <__retarget_lock_acquire_recursive>
 801301e:	4628      	mov	r0, r5
 8013020:	4621      	mov	r1, r4
 8013022:	f7ff ff5f 	bl	8012ee4 <__sflush_r>
 8013026:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013028:	07da      	lsls	r2, r3, #31
 801302a:	4605      	mov	r5, r0
 801302c:	d4e4      	bmi.n	8012ff8 <_fflush_r+0xc>
 801302e:	89a3      	ldrh	r3, [r4, #12]
 8013030:	059b      	lsls	r3, r3, #22
 8013032:	d4e1      	bmi.n	8012ff8 <_fflush_r+0xc>
 8013034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013036:	f7ff fa35 	bl	80124a4 <__retarget_lock_release_recursive>
 801303a:	e7dd      	b.n	8012ff8 <_fflush_r+0xc>

0801303c <__swbuf_r>:
 801303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801303e:	460e      	mov	r6, r1
 8013040:	4614      	mov	r4, r2
 8013042:	4605      	mov	r5, r0
 8013044:	b118      	cbz	r0, 801304e <__swbuf_r+0x12>
 8013046:	6a03      	ldr	r3, [r0, #32]
 8013048:	b90b      	cbnz	r3, 801304e <__swbuf_r+0x12>
 801304a:	f7ff f8ef 	bl	801222c <__sinit>
 801304e:	69a3      	ldr	r3, [r4, #24]
 8013050:	60a3      	str	r3, [r4, #8]
 8013052:	89a3      	ldrh	r3, [r4, #12]
 8013054:	071a      	lsls	r2, r3, #28
 8013056:	d501      	bpl.n	801305c <__swbuf_r+0x20>
 8013058:	6923      	ldr	r3, [r4, #16]
 801305a:	b943      	cbnz	r3, 801306e <__swbuf_r+0x32>
 801305c:	4621      	mov	r1, r4
 801305e:	4628      	mov	r0, r5
 8013060:	f000 f82a 	bl	80130b8 <__swsetup_r>
 8013064:	b118      	cbz	r0, 801306e <__swbuf_r+0x32>
 8013066:	f04f 37ff 	mov.w	r7, #4294967295
 801306a:	4638      	mov	r0, r7
 801306c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801306e:	6823      	ldr	r3, [r4, #0]
 8013070:	6922      	ldr	r2, [r4, #16]
 8013072:	1a98      	subs	r0, r3, r2
 8013074:	6963      	ldr	r3, [r4, #20]
 8013076:	b2f6      	uxtb	r6, r6
 8013078:	4283      	cmp	r3, r0
 801307a:	4637      	mov	r7, r6
 801307c:	dc05      	bgt.n	801308a <__swbuf_r+0x4e>
 801307e:	4621      	mov	r1, r4
 8013080:	4628      	mov	r0, r5
 8013082:	f7ff ffb3 	bl	8012fec <_fflush_r>
 8013086:	2800      	cmp	r0, #0
 8013088:	d1ed      	bne.n	8013066 <__swbuf_r+0x2a>
 801308a:	68a3      	ldr	r3, [r4, #8]
 801308c:	3b01      	subs	r3, #1
 801308e:	60a3      	str	r3, [r4, #8]
 8013090:	6823      	ldr	r3, [r4, #0]
 8013092:	1c5a      	adds	r2, r3, #1
 8013094:	6022      	str	r2, [r4, #0]
 8013096:	701e      	strb	r6, [r3, #0]
 8013098:	6962      	ldr	r2, [r4, #20]
 801309a:	1c43      	adds	r3, r0, #1
 801309c:	429a      	cmp	r2, r3
 801309e:	d004      	beq.n	80130aa <__swbuf_r+0x6e>
 80130a0:	89a3      	ldrh	r3, [r4, #12]
 80130a2:	07db      	lsls	r3, r3, #31
 80130a4:	d5e1      	bpl.n	801306a <__swbuf_r+0x2e>
 80130a6:	2e0a      	cmp	r6, #10
 80130a8:	d1df      	bne.n	801306a <__swbuf_r+0x2e>
 80130aa:	4621      	mov	r1, r4
 80130ac:	4628      	mov	r0, r5
 80130ae:	f7ff ff9d 	bl	8012fec <_fflush_r>
 80130b2:	2800      	cmp	r0, #0
 80130b4:	d0d9      	beq.n	801306a <__swbuf_r+0x2e>
 80130b6:	e7d6      	b.n	8013066 <__swbuf_r+0x2a>

080130b8 <__swsetup_r>:
 80130b8:	b538      	push	{r3, r4, r5, lr}
 80130ba:	4b29      	ldr	r3, [pc, #164]	@ (8013160 <__swsetup_r+0xa8>)
 80130bc:	4605      	mov	r5, r0
 80130be:	6818      	ldr	r0, [r3, #0]
 80130c0:	460c      	mov	r4, r1
 80130c2:	b118      	cbz	r0, 80130cc <__swsetup_r+0x14>
 80130c4:	6a03      	ldr	r3, [r0, #32]
 80130c6:	b90b      	cbnz	r3, 80130cc <__swsetup_r+0x14>
 80130c8:	f7ff f8b0 	bl	801222c <__sinit>
 80130cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130d0:	0719      	lsls	r1, r3, #28
 80130d2:	d422      	bmi.n	801311a <__swsetup_r+0x62>
 80130d4:	06da      	lsls	r2, r3, #27
 80130d6:	d407      	bmi.n	80130e8 <__swsetup_r+0x30>
 80130d8:	2209      	movs	r2, #9
 80130da:	602a      	str	r2, [r5, #0]
 80130dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80130e0:	81a3      	strh	r3, [r4, #12]
 80130e2:	f04f 30ff 	mov.w	r0, #4294967295
 80130e6:	e033      	b.n	8013150 <__swsetup_r+0x98>
 80130e8:	0758      	lsls	r0, r3, #29
 80130ea:	d512      	bpl.n	8013112 <__swsetup_r+0x5a>
 80130ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80130ee:	b141      	cbz	r1, 8013102 <__swsetup_r+0x4a>
 80130f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80130f4:	4299      	cmp	r1, r3
 80130f6:	d002      	beq.n	80130fe <__swsetup_r+0x46>
 80130f8:	4628      	mov	r0, r5
 80130fa:	f7ff f9d5 	bl	80124a8 <_free_r>
 80130fe:	2300      	movs	r3, #0
 8013100:	6363      	str	r3, [r4, #52]	@ 0x34
 8013102:	89a3      	ldrh	r3, [r4, #12]
 8013104:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013108:	81a3      	strh	r3, [r4, #12]
 801310a:	2300      	movs	r3, #0
 801310c:	6063      	str	r3, [r4, #4]
 801310e:	6923      	ldr	r3, [r4, #16]
 8013110:	6023      	str	r3, [r4, #0]
 8013112:	89a3      	ldrh	r3, [r4, #12]
 8013114:	f043 0308 	orr.w	r3, r3, #8
 8013118:	81a3      	strh	r3, [r4, #12]
 801311a:	6923      	ldr	r3, [r4, #16]
 801311c:	b94b      	cbnz	r3, 8013132 <__swsetup_r+0x7a>
 801311e:	89a3      	ldrh	r3, [r4, #12]
 8013120:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013124:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013128:	d003      	beq.n	8013132 <__swsetup_r+0x7a>
 801312a:	4621      	mov	r1, r4
 801312c:	4628      	mov	r0, r5
 801312e:	f000 f8a5 	bl	801327c <__smakebuf_r>
 8013132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013136:	f013 0201 	ands.w	r2, r3, #1
 801313a:	d00a      	beq.n	8013152 <__swsetup_r+0x9a>
 801313c:	2200      	movs	r2, #0
 801313e:	60a2      	str	r2, [r4, #8]
 8013140:	6962      	ldr	r2, [r4, #20]
 8013142:	4252      	negs	r2, r2
 8013144:	61a2      	str	r2, [r4, #24]
 8013146:	6922      	ldr	r2, [r4, #16]
 8013148:	b942      	cbnz	r2, 801315c <__swsetup_r+0xa4>
 801314a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801314e:	d1c5      	bne.n	80130dc <__swsetup_r+0x24>
 8013150:	bd38      	pop	{r3, r4, r5, pc}
 8013152:	0799      	lsls	r1, r3, #30
 8013154:	bf58      	it	pl
 8013156:	6962      	ldrpl	r2, [r4, #20]
 8013158:	60a2      	str	r2, [r4, #8]
 801315a:	e7f4      	b.n	8013146 <__swsetup_r+0x8e>
 801315c:	2000      	movs	r0, #0
 801315e:	e7f7      	b.n	8013150 <__swsetup_r+0x98>
 8013160:	20000234 	.word	0x20000234

08013164 <memmove>:
 8013164:	4288      	cmp	r0, r1
 8013166:	b510      	push	{r4, lr}
 8013168:	eb01 0402 	add.w	r4, r1, r2
 801316c:	d902      	bls.n	8013174 <memmove+0x10>
 801316e:	4284      	cmp	r4, r0
 8013170:	4623      	mov	r3, r4
 8013172:	d807      	bhi.n	8013184 <memmove+0x20>
 8013174:	1e43      	subs	r3, r0, #1
 8013176:	42a1      	cmp	r1, r4
 8013178:	d008      	beq.n	801318c <memmove+0x28>
 801317a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801317e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013182:	e7f8      	b.n	8013176 <memmove+0x12>
 8013184:	4402      	add	r2, r0
 8013186:	4601      	mov	r1, r0
 8013188:	428a      	cmp	r2, r1
 801318a:	d100      	bne.n	801318e <memmove+0x2a>
 801318c:	bd10      	pop	{r4, pc}
 801318e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013192:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013196:	e7f7      	b.n	8013188 <memmove+0x24>

08013198 <_sbrk_r>:
 8013198:	b538      	push	{r3, r4, r5, lr}
 801319a:	4d06      	ldr	r5, [pc, #24]	@ (80131b4 <_sbrk_r+0x1c>)
 801319c:	2300      	movs	r3, #0
 801319e:	4604      	mov	r4, r0
 80131a0:	4608      	mov	r0, r1
 80131a2:	602b      	str	r3, [r5, #0]
 80131a4:	f7ee fd5c 	bl	8001c60 <_sbrk>
 80131a8:	1c43      	adds	r3, r0, #1
 80131aa:	d102      	bne.n	80131b2 <_sbrk_r+0x1a>
 80131ac:	682b      	ldr	r3, [r5, #0]
 80131ae:	b103      	cbz	r3, 80131b2 <_sbrk_r+0x1a>
 80131b0:	6023      	str	r3, [r4, #0]
 80131b2:	bd38      	pop	{r3, r4, r5, pc}
 80131b4:	20000b2c 	.word	0x20000b2c

080131b8 <memcpy>:
 80131b8:	440a      	add	r2, r1
 80131ba:	4291      	cmp	r1, r2
 80131bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80131c0:	d100      	bne.n	80131c4 <memcpy+0xc>
 80131c2:	4770      	bx	lr
 80131c4:	b510      	push	{r4, lr}
 80131c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80131ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80131ce:	4291      	cmp	r1, r2
 80131d0:	d1f9      	bne.n	80131c6 <memcpy+0xe>
 80131d2:	bd10      	pop	{r4, pc}

080131d4 <_realloc_r>:
 80131d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131d8:	4607      	mov	r7, r0
 80131da:	4614      	mov	r4, r2
 80131dc:	460d      	mov	r5, r1
 80131de:	b921      	cbnz	r1, 80131ea <_realloc_r+0x16>
 80131e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80131e4:	4611      	mov	r1, r2
 80131e6:	f7ff b9cb 	b.w	8012580 <_malloc_r>
 80131ea:	b92a      	cbnz	r2, 80131f8 <_realloc_r+0x24>
 80131ec:	f7ff f95c 	bl	80124a8 <_free_r>
 80131f0:	4625      	mov	r5, r4
 80131f2:	4628      	mov	r0, r5
 80131f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131f8:	f000 f89e 	bl	8013338 <_malloc_usable_size_r>
 80131fc:	4284      	cmp	r4, r0
 80131fe:	4606      	mov	r6, r0
 8013200:	d802      	bhi.n	8013208 <_realloc_r+0x34>
 8013202:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013206:	d8f4      	bhi.n	80131f2 <_realloc_r+0x1e>
 8013208:	4621      	mov	r1, r4
 801320a:	4638      	mov	r0, r7
 801320c:	f7ff f9b8 	bl	8012580 <_malloc_r>
 8013210:	4680      	mov	r8, r0
 8013212:	b908      	cbnz	r0, 8013218 <_realloc_r+0x44>
 8013214:	4645      	mov	r5, r8
 8013216:	e7ec      	b.n	80131f2 <_realloc_r+0x1e>
 8013218:	42b4      	cmp	r4, r6
 801321a:	4622      	mov	r2, r4
 801321c:	4629      	mov	r1, r5
 801321e:	bf28      	it	cs
 8013220:	4632      	movcs	r2, r6
 8013222:	f7ff ffc9 	bl	80131b8 <memcpy>
 8013226:	4629      	mov	r1, r5
 8013228:	4638      	mov	r0, r7
 801322a:	f7ff f93d 	bl	80124a8 <_free_r>
 801322e:	e7f1      	b.n	8013214 <_realloc_r+0x40>

08013230 <__swhatbuf_r>:
 8013230:	b570      	push	{r4, r5, r6, lr}
 8013232:	460c      	mov	r4, r1
 8013234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013238:	2900      	cmp	r1, #0
 801323a:	b096      	sub	sp, #88	@ 0x58
 801323c:	4615      	mov	r5, r2
 801323e:	461e      	mov	r6, r3
 8013240:	da0d      	bge.n	801325e <__swhatbuf_r+0x2e>
 8013242:	89a3      	ldrh	r3, [r4, #12]
 8013244:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013248:	f04f 0100 	mov.w	r1, #0
 801324c:	bf14      	ite	ne
 801324e:	2340      	movne	r3, #64	@ 0x40
 8013250:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013254:	2000      	movs	r0, #0
 8013256:	6031      	str	r1, [r6, #0]
 8013258:	602b      	str	r3, [r5, #0]
 801325a:	b016      	add	sp, #88	@ 0x58
 801325c:	bd70      	pop	{r4, r5, r6, pc}
 801325e:	466a      	mov	r2, sp
 8013260:	f000 f848 	bl	80132f4 <_fstat_r>
 8013264:	2800      	cmp	r0, #0
 8013266:	dbec      	blt.n	8013242 <__swhatbuf_r+0x12>
 8013268:	9901      	ldr	r1, [sp, #4]
 801326a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801326e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013272:	4259      	negs	r1, r3
 8013274:	4159      	adcs	r1, r3
 8013276:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801327a:	e7eb      	b.n	8013254 <__swhatbuf_r+0x24>

0801327c <__smakebuf_r>:
 801327c:	898b      	ldrh	r3, [r1, #12]
 801327e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013280:	079d      	lsls	r5, r3, #30
 8013282:	4606      	mov	r6, r0
 8013284:	460c      	mov	r4, r1
 8013286:	d507      	bpl.n	8013298 <__smakebuf_r+0x1c>
 8013288:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801328c:	6023      	str	r3, [r4, #0]
 801328e:	6123      	str	r3, [r4, #16]
 8013290:	2301      	movs	r3, #1
 8013292:	6163      	str	r3, [r4, #20]
 8013294:	b003      	add	sp, #12
 8013296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013298:	ab01      	add	r3, sp, #4
 801329a:	466a      	mov	r2, sp
 801329c:	f7ff ffc8 	bl	8013230 <__swhatbuf_r>
 80132a0:	9f00      	ldr	r7, [sp, #0]
 80132a2:	4605      	mov	r5, r0
 80132a4:	4639      	mov	r1, r7
 80132a6:	4630      	mov	r0, r6
 80132a8:	f7ff f96a 	bl	8012580 <_malloc_r>
 80132ac:	b948      	cbnz	r0, 80132c2 <__smakebuf_r+0x46>
 80132ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80132b2:	059a      	lsls	r2, r3, #22
 80132b4:	d4ee      	bmi.n	8013294 <__smakebuf_r+0x18>
 80132b6:	f023 0303 	bic.w	r3, r3, #3
 80132ba:	f043 0302 	orr.w	r3, r3, #2
 80132be:	81a3      	strh	r3, [r4, #12]
 80132c0:	e7e2      	b.n	8013288 <__smakebuf_r+0xc>
 80132c2:	89a3      	ldrh	r3, [r4, #12]
 80132c4:	6020      	str	r0, [r4, #0]
 80132c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80132ca:	81a3      	strh	r3, [r4, #12]
 80132cc:	9b01      	ldr	r3, [sp, #4]
 80132ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80132d2:	b15b      	cbz	r3, 80132ec <__smakebuf_r+0x70>
 80132d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80132d8:	4630      	mov	r0, r6
 80132da:	f000 f81d 	bl	8013318 <_isatty_r>
 80132de:	b128      	cbz	r0, 80132ec <__smakebuf_r+0x70>
 80132e0:	89a3      	ldrh	r3, [r4, #12]
 80132e2:	f023 0303 	bic.w	r3, r3, #3
 80132e6:	f043 0301 	orr.w	r3, r3, #1
 80132ea:	81a3      	strh	r3, [r4, #12]
 80132ec:	89a3      	ldrh	r3, [r4, #12]
 80132ee:	431d      	orrs	r5, r3
 80132f0:	81a5      	strh	r5, [r4, #12]
 80132f2:	e7cf      	b.n	8013294 <__smakebuf_r+0x18>

080132f4 <_fstat_r>:
 80132f4:	b538      	push	{r3, r4, r5, lr}
 80132f6:	4d07      	ldr	r5, [pc, #28]	@ (8013314 <_fstat_r+0x20>)
 80132f8:	2300      	movs	r3, #0
 80132fa:	4604      	mov	r4, r0
 80132fc:	4608      	mov	r0, r1
 80132fe:	4611      	mov	r1, r2
 8013300:	602b      	str	r3, [r5, #0]
 8013302:	f7ee fc84 	bl	8001c0e <_fstat>
 8013306:	1c43      	adds	r3, r0, #1
 8013308:	d102      	bne.n	8013310 <_fstat_r+0x1c>
 801330a:	682b      	ldr	r3, [r5, #0]
 801330c:	b103      	cbz	r3, 8013310 <_fstat_r+0x1c>
 801330e:	6023      	str	r3, [r4, #0]
 8013310:	bd38      	pop	{r3, r4, r5, pc}
 8013312:	bf00      	nop
 8013314:	20000b2c 	.word	0x20000b2c

08013318 <_isatty_r>:
 8013318:	b538      	push	{r3, r4, r5, lr}
 801331a:	4d06      	ldr	r5, [pc, #24]	@ (8013334 <_isatty_r+0x1c>)
 801331c:	2300      	movs	r3, #0
 801331e:	4604      	mov	r4, r0
 8013320:	4608      	mov	r0, r1
 8013322:	602b      	str	r3, [r5, #0]
 8013324:	f7ee fc83 	bl	8001c2e <_isatty>
 8013328:	1c43      	adds	r3, r0, #1
 801332a:	d102      	bne.n	8013332 <_isatty_r+0x1a>
 801332c:	682b      	ldr	r3, [r5, #0]
 801332e:	b103      	cbz	r3, 8013332 <_isatty_r+0x1a>
 8013330:	6023      	str	r3, [r4, #0]
 8013332:	bd38      	pop	{r3, r4, r5, pc}
 8013334:	20000b2c 	.word	0x20000b2c

08013338 <_malloc_usable_size_r>:
 8013338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801333c:	1f18      	subs	r0, r3, #4
 801333e:	2b00      	cmp	r3, #0
 8013340:	bfbc      	itt	lt
 8013342:	580b      	ldrlt	r3, [r1, r0]
 8013344:	18c0      	addlt	r0, r0, r3
 8013346:	4770      	bx	lr

08013348 <pow>:
 8013348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801334a:	ed2d 8b02 	vpush	{d8}
 801334e:	eeb0 8a40 	vmov.f32	s16, s0
 8013352:	eef0 8a60 	vmov.f32	s17, s1
 8013356:	ec55 4b11 	vmov	r4, r5, d1
 801335a:	f000 f8ad 	bl	80134b8 <__ieee754_pow>
 801335e:	4622      	mov	r2, r4
 8013360:	462b      	mov	r3, r5
 8013362:	4620      	mov	r0, r4
 8013364:	4629      	mov	r1, r5
 8013366:	ec57 6b10 	vmov	r6, r7, d0
 801336a:	f7ed fbd7 	bl	8000b1c <__aeabi_dcmpun>
 801336e:	2800      	cmp	r0, #0
 8013370:	d13b      	bne.n	80133ea <pow+0xa2>
 8013372:	ec51 0b18 	vmov	r0, r1, d8
 8013376:	2200      	movs	r2, #0
 8013378:	2300      	movs	r3, #0
 801337a:	f7ed fb9d 	bl	8000ab8 <__aeabi_dcmpeq>
 801337e:	b1b8      	cbz	r0, 80133b0 <pow+0x68>
 8013380:	2200      	movs	r2, #0
 8013382:	2300      	movs	r3, #0
 8013384:	4620      	mov	r0, r4
 8013386:	4629      	mov	r1, r5
 8013388:	f7ed fb96 	bl	8000ab8 <__aeabi_dcmpeq>
 801338c:	2800      	cmp	r0, #0
 801338e:	d146      	bne.n	801341e <pow+0xd6>
 8013390:	ec45 4b10 	vmov	d0, r4, r5
 8013394:	f000 f848 	bl	8013428 <finite>
 8013398:	b338      	cbz	r0, 80133ea <pow+0xa2>
 801339a:	2200      	movs	r2, #0
 801339c:	2300      	movs	r3, #0
 801339e:	4620      	mov	r0, r4
 80133a0:	4629      	mov	r1, r5
 80133a2:	f7ed fb93 	bl	8000acc <__aeabi_dcmplt>
 80133a6:	b300      	cbz	r0, 80133ea <pow+0xa2>
 80133a8:	f7ff f850 	bl	801244c <__errno>
 80133ac:	2322      	movs	r3, #34	@ 0x22
 80133ae:	e01b      	b.n	80133e8 <pow+0xa0>
 80133b0:	ec47 6b10 	vmov	d0, r6, r7
 80133b4:	f000 f838 	bl	8013428 <finite>
 80133b8:	b9e0      	cbnz	r0, 80133f4 <pow+0xac>
 80133ba:	eeb0 0a48 	vmov.f32	s0, s16
 80133be:	eef0 0a68 	vmov.f32	s1, s17
 80133c2:	f000 f831 	bl	8013428 <finite>
 80133c6:	b1a8      	cbz	r0, 80133f4 <pow+0xac>
 80133c8:	ec45 4b10 	vmov	d0, r4, r5
 80133cc:	f000 f82c 	bl	8013428 <finite>
 80133d0:	b180      	cbz	r0, 80133f4 <pow+0xac>
 80133d2:	4632      	mov	r2, r6
 80133d4:	463b      	mov	r3, r7
 80133d6:	4630      	mov	r0, r6
 80133d8:	4639      	mov	r1, r7
 80133da:	f7ed fb9f 	bl	8000b1c <__aeabi_dcmpun>
 80133de:	2800      	cmp	r0, #0
 80133e0:	d0e2      	beq.n	80133a8 <pow+0x60>
 80133e2:	f7ff f833 	bl	801244c <__errno>
 80133e6:	2321      	movs	r3, #33	@ 0x21
 80133e8:	6003      	str	r3, [r0, #0]
 80133ea:	ecbd 8b02 	vpop	{d8}
 80133ee:	ec47 6b10 	vmov	d0, r6, r7
 80133f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133f4:	2200      	movs	r2, #0
 80133f6:	2300      	movs	r3, #0
 80133f8:	4630      	mov	r0, r6
 80133fa:	4639      	mov	r1, r7
 80133fc:	f7ed fb5c 	bl	8000ab8 <__aeabi_dcmpeq>
 8013400:	2800      	cmp	r0, #0
 8013402:	d0f2      	beq.n	80133ea <pow+0xa2>
 8013404:	eeb0 0a48 	vmov.f32	s0, s16
 8013408:	eef0 0a68 	vmov.f32	s1, s17
 801340c:	f000 f80c 	bl	8013428 <finite>
 8013410:	2800      	cmp	r0, #0
 8013412:	d0ea      	beq.n	80133ea <pow+0xa2>
 8013414:	ec45 4b10 	vmov	d0, r4, r5
 8013418:	f000 f806 	bl	8013428 <finite>
 801341c:	e7c3      	b.n	80133a6 <pow+0x5e>
 801341e:	4f01      	ldr	r7, [pc, #4]	@ (8013424 <pow+0xdc>)
 8013420:	2600      	movs	r6, #0
 8013422:	e7e2      	b.n	80133ea <pow+0xa2>
 8013424:	3ff00000 	.word	0x3ff00000

08013428 <finite>:
 8013428:	b082      	sub	sp, #8
 801342a:	ed8d 0b00 	vstr	d0, [sp]
 801342e:	9801      	ldr	r0, [sp, #4]
 8013430:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8013434:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8013438:	0fc0      	lsrs	r0, r0, #31
 801343a:	b002      	add	sp, #8
 801343c:	4770      	bx	lr
	...

08013440 <trunc>:
 8013440:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8013444:	ec5c bb10 	vmov	fp, ip, d0
 8013448:	f3cc 500a 	ubfx	r0, ip, #20, #11
 801344c:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8013450:	2913      	cmp	r1, #19
 8013452:	4664      	mov	r4, ip
 8013454:	dc14      	bgt.n	8013480 <trunc+0x40>
 8013456:	2900      	cmp	r1, #0
 8013458:	bfa4      	itt	ge
 801345a:	4b15      	ldrge	r3, [pc, #84]	@ (80134b0 <trunc+0x70>)
 801345c:	fa43 f101 	asrge.w	r1, r3, r1
 8013460:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8013464:	bfad      	iteet	ge
 8013466:	4021      	andge	r1, r4
 8013468:	2200      	movlt	r2, #0
 801346a:	4603      	movlt	r3, r0
 801346c:	2200      	movge	r2, #0
 801346e:	bfa8      	it	ge
 8013470:	ea41 0300 	orrge.w	r3, r1, r0
 8013474:	4693      	mov	fp, r2
 8013476:	469c      	mov	ip, r3
 8013478:	ec4c bb10 	vmov	d0, fp, ip
 801347c:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8013480:	2933      	cmp	r1, #51	@ 0x33
 8013482:	dd0b      	ble.n	801349c <trunc+0x5c>
 8013484:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8013488:	d1f6      	bne.n	8013478 <trunc+0x38>
 801348a:	465a      	mov	r2, fp
 801348c:	4663      	mov	r3, ip
 801348e:	4658      	mov	r0, fp
 8013490:	4621      	mov	r1, r4
 8013492:	f7ec fef3 	bl	800027c <__adddf3>
 8013496:	4683      	mov	fp, r0
 8013498:	468c      	mov	ip, r1
 801349a:	e7ed      	b.n	8013478 <trunc+0x38>
 801349c:	f2a0 4013 	subw	r0, r0, #1043	@ 0x413
 80134a0:	f04f 33ff 	mov.w	r3, #4294967295
 80134a4:	40c3      	lsrs	r3, r0
 80134a6:	ea2b 0603 	bic.w	r6, fp, r3
 80134aa:	46b3      	mov	fp, r6
 80134ac:	46a4      	mov	ip, r4
 80134ae:	e7e3      	b.n	8013478 <trunc+0x38>
 80134b0:	fff00000 	.word	0xfff00000
 80134b4:	00000000 	.word	0x00000000

080134b8 <__ieee754_pow>:
 80134b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134bc:	b091      	sub	sp, #68	@ 0x44
 80134be:	ed8d 1b00 	vstr	d1, [sp]
 80134c2:	e9dd 1900 	ldrd	r1, r9, [sp]
 80134c6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80134ca:	ea5a 0001 	orrs.w	r0, sl, r1
 80134ce:	ec57 6b10 	vmov	r6, r7, d0
 80134d2:	d113      	bne.n	80134fc <__ieee754_pow+0x44>
 80134d4:	19b3      	adds	r3, r6, r6
 80134d6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80134da:	4152      	adcs	r2, r2
 80134dc:	4298      	cmp	r0, r3
 80134de:	4b9a      	ldr	r3, [pc, #616]	@ (8013748 <__ieee754_pow+0x290>)
 80134e0:	4193      	sbcs	r3, r2
 80134e2:	f080 84ee 	bcs.w	8013ec2 <__ieee754_pow+0xa0a>
 80134e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80134ea:	4630      	mov	r0, r6
 80134ec:	4639      	mov	r1, r7
 80134ee:	f7ec fec5 	bl	800027c <__adddf3>
 80134f2:	ec41 0b10 	vmov	d0, r0, r1
 80134f6:	b011      	add	sp, #68	@ 0x44
 80134f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134fc:	4a93      	ldr	r2, [pc, #588]	@ (801374c <__ieee754_pow+0x294>)
 80134fe:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8013502:	4295      	cmp	r5, r2
 8013504:	46b8      	mov	r8, r7
 8013506:	4633      	mov	r3, r6
 8013508:	d80a      	bhi.n	8013520 <__ieee754_pow+0x68>
 801350a:	d104      	bne.n	8013516 <__ieee754_pow+0x5e>
 801350c:	2e00      	cmp	r6, #0
 801350e:	d1ea      	bne.n	80134e6 <__ieee754_pow+0x2e>
 8013510:	45aa      	cmp	sl, r5
 8013512:	d8e8      	bhi.n	80134e6 <__ieee754_pow+0x2e>
 8013514:	e001      	b.n	801351a <__ieee754_pow+0x62>
 8013516:	4592      	cmp	sl, r2
 8013518:	d802      	bhi.n	8013520 <__ieee754_pow+0x68>
 801351a:	4592      	cmp	sl, r2
 801351c:	d10f      	bne.n	801353e <__ieee754_pow+0x86>
 801351e:	b171      	cbz	r1, 801353e <__ieee754_pow+0x86>
 8013520:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8013524:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8013528:	ea58 0803 	orrs.w	r8, r8, r3
 801352c:	d1db      	bne.n	80134e6 <__ieee754_pow+0x2e>
 801352e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013532:	18db      	adds	r3, r3, r3
 8013534:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8013538:	4152      	adcs	r2, r2
 801353a:	4598      	cmp	r8, r3
 801353c:	e7cf      	b.n	80134de <__ieee754_pow+0x26>
 801353e:	f1b8 0f00 	cmp.w	r8, #0
 8013542:	46ab      	mov	fp, r5
 8013544:	da43      	bge.n	80135ce <__ieee754_pow+0x116>
 8013546:	4a82      	ldr	r2, [pc, #520]	@ (8013750 <__ieee754_pow+0x298>)
 8013548:	4592      	cmp	sl, r2
 801354a:	d856      	bhi.n	80135fa <__ieee754_pow+0x142>
 801354c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8013550:	4592      	cmp	sl, r2
 8013552:	f240 84c5 	bls.w	8013ee0 <__ieee754_pow+0xa28>
 8013556:	ea4f 522a 	mov.w	r2, sl, asr #20
 801355a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801355e:	2a14      	cmp	r2, #20
 8013560:	dd18      	ble.n	8013594 <__ieee754_pow+0xdc>
 8013562:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8013566:	fa21 f402 	lsr.w	r4, r1, r2
 801356a:	fa04 f202 	lsl.w	r2, r4, r2
 801356e:	428a      	cmp	r2, r1
 8013570:	f040 84b6 	bne.w	8013ee0 <__ieee754_pow+0xa28>
 8013574:	f004 0401 	and.w	r4, r4, #1
 8013578:	f1c4 0402 	rsb	r4, r4, #2
 801357c:	2900      	cmp	r1, #0
 801357e:	d159      	bne.n	8013634 <__ieee754_pow+0x17c>
 8013580:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8013584:	d148      	bne.n	8013618 <__ieee754_pow+0x160>
 8013586:	4632      	mov	r2, r6
 8013588:	463b      	mov	r3, r7
 801358a:	4630      	mov	r0, r6
 801358c:	4639      	mov	r1, r7
 801358e:	f7ed f82b 	bl	80005e8 <__aeabi_dmul>
 8013592:	e7ae      	b.n	80134f2 <__ieee754_pow+0x3a>
 8013594:	2900      	cmp	r1, #0
 8013596:	d14c      	bne.n	8013632 <__ieee754_pow+0x17a>
 8013598:	f1c2 0214 	rsb	r2, r2, #20
 801359c:	fa4a f402 	asr.w	r4, sl, r2
 80135a0:	fa04 f202 	lsl.w	r2, r4, r2
 80135a4:	4552      	cmp	r2, sl
 80135a6:	f040 8498 	bne.w	8013eda <__ieee754_pow+0xa22>
 80135aa:	f004 0401 	and.w	r4, r4, #1
 80135ae:	f1c4 0402 	rsb	r4, r4, #2
 80135b2:	4a68      	ldr	r2, [pc, #416]	@ (8013754 <__ieee754_pow+0x29c>)
 80135b4:	4592      	cmp	sl, r2
 80135b6:	d1e3      	bne.n	8013580 <__ieee754_pow+0xc8>
 80135b8:	f1b9 0f00 	cmp.w	r9, #0
 80135bc:	f280 8489 	bge.w	8013ed2 <__ieee754_pow+0xa1a>
 80135c0:	4964      	ldr	r1, [pc, #400]	@ (8013754 <__ieee754_pow+0x29c>)
 80135c2:	4632      	mov	r2, r6
 80135c4:	463b      	mov	r3, r7
 80135c6:	2000      	movs	r0, #0
 80135c8:	f7ed f938 	bl	800083c <__aeabi_ddiv>
 80135cc:	e791      	b.n	80134f2 <__ieee754_pow+0x3a>
 80135ce:	2400      	movs	r4, #0
 80135d0:	bb81      	cbnz	r1, 8013634 <__ieee754_pow+0x17c>
 80135d2:	4a5e      	ldr	r2, [pc, #376]	@ (801374c <__ieee754_pow+0x294>)
 80135d4:	4592      	cmp	sl, r2
 80135d6:	d1ec      	bne.n	80135b2 <__ieee754_pow+0xfa>
 80135d8:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 80135dc:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80135e0:	431a      	orrs	r2, r3
 80135e2:	f000 846e 	beq.w	8013ec2 <__ieee754_pow+0xa0a>
 80135e6:	4b5c      	ldr	r3, [pc, #368]	@ (8013758 <__ieee754_pow+0x2a0>)
 80135e8:	429d      	cmp	r5, r3
 80135ea:	d908      	bls.n	80135fe <__ieee754_pow+0x146>
 80135ec:	f1b9 0f00 	cmp.w	r9, #0
 80135f0:	f280 846b 	bge.w	8013eca <__ieee754_pow+0xa12>
 80135f4:	2000      	movs	r0, #0
 80135f6:	2100      	movs	r1, #0
 80135f8:	e77b      	b.n	80134f2 <__ieee754_pow+0x3a>
 80135fa:	2402      	movs	r4, #2
 80135fc:	e7e8      	b.n	80135d0 <__ieee754_pow+0x118>
 80135fe:	f1b9 0f00 	cmp.w	r9, #0
 8013602:	f04f 0000 	mov.w	r0, #0
 8013606:	f04f 0100 	mov.w	r1, #0
 801360a:	f6bf af72 	bge.w	80134f2 <__ieee754_pow+0x3a>
 801360e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8013612:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8013616:	e76c      	b.n	80134f2 <__ieee754_pow+0x3a>
 8013618:	4a50      	ldr	r2, [pc, #320]	@ (801375c <__ieee754_pow+0x2a4>)
 801361a:	4591      	cmp	r9, r2
 801361c:	d10a      	bne.n	8013634 <__ieee754_pow+0x17c>
 801361e:	f1b8 0f00 	cmp.w	r8, #0
 8013622:	db07      	blt.n	8013634 <__ieee754_pow+0x17c>
 8013624:	ec47 6b10 	vmov	d0, r6, r7
 8013628:	b011      	add	sp, #68	@ 0x44
 801362a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801362e:	f000 bd4f 	b.w	80140d0 <__ieee754_sqrt>
 8013632:	2400      	movs	r4, #0
 8013634:	ec47 6b10 	vmov	d0, r6, r7
 8013638:	9302      	str	r3, [sp, #8]
 801363a:	f000 fc87 	bl	8013f4c <fabs>
 801363e:	9b02      	ldr	r3, [sp, #8]
 8013640:	ec51 0b10 	vmov	r0, r1, d0
 8013644:	bb43      	cbnz	r3, 8013698 <__ieee754_pow+0x1e0>
 8013646:	4b43      	ldr	r3, [pc, #268]	@ (8013754 <__ieee754_pow+0x29c>)
 8013648:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 801364c:	429a      	cmp	r2, r3
 801364e:	d000      	beq.n	8013652 <__ieee754_pow+0x19a>
 8013650:	bb15      	cbnz	r5, 8013698 <__ieee754_pow+0x1e0>
 8013652:	f1b9 0f00 	cmp.w	r9, #0
 8013656:	da05      	bge.n	8013664 <__ieee754_pow+0x1ac>
 8013658:	4602      	mov	r2, r0
 801365a:	460b      	mov	r3, r1
 801365c:	2000      	movs	r0, #0
 801365e:	493d      	ldr	r1, [pc, #244]	@ (8013754 <__ieee754_pow+0x29c>)
 8013660:	f7ed f8ec 	bl	800083c <__aeabi_ddiv>
 8013664:	f1b8 0f00 	cmp.w	r8, #0
 8013668:	f6bf af43 	bge.w	80134f2 <__ieee754_pow+0x3a>
 801366c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8013670:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8013674:	4325      	orrs	r5, r4
 8013676:	d108      	bne.n	801368a <__ieee754_pow+0x1d2>
 8013678:	4602      	mov	r2, r0
 801367a:	460b      	mov	r3, r1
 801367c:	4610      	mov	r0, r2
 801367e:	4619      	mov	r1, r3
 8013680:	f7ec fdfa 	bl	8000278 <__aeabi_dsub>
 8013684:	4602      	mov	r2, r0
 8013686:	460b      	mov	r3, r1
 8013688:	e79e      	b.n	80135c8 <__ieee754_pow+0x110>
 801368a:	2c01      	cmp	r4, #1
 801368c:	f47f af31 	bne.w	80134f2 <__ieee754_pow+0x3a>
 8013690:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013694:	4619      	mov	r1, r3
 8013696:	e72c      	b.n	80134f2 <__ieee754_pow+0x3a>
 8013698:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 801369c:	3b01      	subs	r3, #1
 801369e:	ea53 0204 	orrs.w	r2, r3, r4
 80136a2:	d102      	bne.n	80136aa <__ieee754_pow+0x1f2>
 80136a4:	4632      	mov	r2, r6
 80136a6:	463b      	mov	r3, r7
 80136a8:	e7e8      	b.n	801367c <__ieee754_pow+0x1c4>
 80136aa:	3c01      	subs	r4, #1
 80136ac:	431c      	orrs	r4, r3
 80136ae:	d016      	beq.n	80136de <__ieee754_pow+0x226>
 80136b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8013738 <__ieee754_pow+0x280>
 80136b4:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80136b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80136bc:	f240 8110 	bls.w	80138e0 <__ieee754_pow+0x428>
 80136c0:	4b27      	ldr	r3, [pc, #156]	@ (8013760 <__ieee754_pow+0x2a8>)
 80136c2:	459a      	cmp	sl, r3
 80136c4:	4b24      	ldr	r3, [pc, #144]	@ (8013758 <__ieee754_pow+0x2a0>)
 80136c6:	d916      	bls.n	80136f6 <__ieee754_pow+0x23e>
 80136c8:	429d      	cmp	r5, r3
 80136ca:	d80b      	bhi.n	80136e4 <__ieee754_pow+0x22c>
 80136cc:	f1b9 0f00 	cmp.w	r9, #0
 80136d0:	da0b      	bge.n	80136ea <__ieee754_pow+0x232>
 80136d2:	2000      	movs	r0, #0
 80136d4:	b011      	add	sp, #68	@ 0x44
 80136d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136da:	f000 bcf1 	b.w	80140c0 <__math_oflow>
 80136de:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8013740 <__ieee754_pow+0x288>
 80136e2:	e7e7      	b.n	80136b4 <__ieee754_pow+0x1fc>
 80136e4:	f1b9 0f00 	cmp.w	r9, #0
 80136e8:	dcf3      	bgt.n	80136d2 <__ieee754_pow+0x21a>
 80136ea:	2000      	movs	r0, #0
 80136ec:	b011      	add	sp, #68	@ 0x44
 80136ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136f2:	f000 bcdd 	b.w	80140b0 <__math_uflow>
 80136f6:	429d      	cmp	r5, r3
 80136f8:	d20c      	bcs.n	8013714 <__ieee754_pow+0x25c>
 80136fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80136fe:	2200      	movs	r2, #0
 8013700:	2300      	movs	r3, #0
 8013702:	f7ed f9e3 	bl	8000acc <__aeabi_dcmplt>
 8013706:	3800      	subs	r0, #0
 8013708:	bf18      	it	ne
 801370a:	2001      	movne	r0, #1
 801370c:	f1b9 0f00 	cmp.w	r9, #0
 8013710:	daec      	bge.n	80136ec <__ieee754_pow+0x234>
 8013712:	e7df      	b.n	80136d4 <__ieee754_pow+0x21c>
 8013714:	4b0f      	ldr	r3, [pc, #60]	@ (8013754 <__ieee754_pow+0x29c>)
 8013716:	429d      	cmp	r5, r3
 8013718:	f04f 0200 	mov.w	r2, #0
 801371c:	d922      	bls.n	8013764 <__ieee754_pow+0x2ac>
 801371e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013722:	2300      	movs	r3, #0
 8013724:	f7ed f9d2 	bl	8000acc <__aeabi_dcmplt>
 8013728:	3800      	subs	r0, #0
 801372a:	bf18      	it	ne
 801372c:	2001      	movne	r0, #1
 801372e:	f1b9 0f00 	cmp.w	r9, #0
 8013732:	dccf      	bgt.n	80136d4 <__ieee754_pow+0x21c>
 8013734:	e7da      	b.n	80136ec <__ieee754_pow+0x234>
 8013736:	bf00      	nop
 8013738:	00000000 	.word	0x00000000
 801373c:	3ff00000 	.word	0x3ff00000
 8013740:	00000000 	.word	0x00000000
 8013744:	bff00000 	.word	0xbff00000
 8013748:	fff00000 	.word	0xfff00000
 801374c:	7ff00000 	.word	0x7ff00000
 8013750:	433fffff 	.word	0x433fffff
 8013754:	3ff00000 	.word	0x3ff00000
 8013758:	3fefffff 	.word	0x3fefffff
 801375c:	3fe00000 	.word	0x3fe00000
 8013760:	43f00000 	.word	0x43f00000
 8013764:	4b5a      	ldr	r3, [pc, #360]	@ (80138d0 <__ieee754_pow+0x418>)
 8013766:	f7ec fd87 	bl	8000278 <__aeabi_dsub>
 801376a:	a351      	add	r3, pc, #324	@ (adr r3, 80138b0 <__ieee754_pow+0x3f8>)
 801376c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013770:	4604      	mov	r4, r0
 8013772:	460d      	mov	r5, r1
 8013774:	f7ec ff38 	bl	80005e8 <__aeabi_dmul>
 8013778:	a34f      	add	r3, pc, #316	@ (adr r3, 80138b8 <__ieee754_pow+0x400>)
 801377a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801377e:	4606      	mov	r6, r0
 8013780:	460f      	mov	r7, r1
 8013782:	4620      	mov	r0, r4
 8013784:	4629      	mov	r1, r5
 8013786:	f7ec ff2f 	bl	80005e8 <__aeabi_dmul>
 801378a:	4b52      	ldr	r3, [pc, #328]	@ (80138d4 <__ieee754_pow+0x41c>)
 801378c:	4682      	mov	sl, r0
 801378e:	468b      	mov	fp, r1
 8013790:	2200      	movs	r2, #0
 8013792:	4620      	mov	r0, r4
 8013794:	4629      	mov	r1, r5
 8013796:	f7ec ff27 	bl	80005e8 <__aeabi_dmul>
 801379a:	4602      	mov	r2, r0
 801379c:	460b      	mov	r3, r1
 801379e:	a148      	add	r1, pc, #288	@ (adr r1, 80138c0 <__ieee754_pow+0x408>)
 80137a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80137a4:	f7ec fd68 	bl	8000278 <__aeabi_dsub>
 80137a8:	4622      	mov	r2, r4
 80137aa:	462b      	mov	r3, r5
 80137ac:	f7ec ff1c 	bl	80005e8 <__aeabi_dmul>
 80137b0:	4602      	mov	r2, r0
 80137b2:	460b      	mov	r3, r1
 80137b4:	2000      	movs	r0, #0
 80137b6:	4948      	ldr	r1, [pc, #288]	@ (80138d8 <__ieee754_pow+0x420>)
 80137b8:	f7ec fd5e 	bl	8000278 <__aeabi_dsub>
 80137bc:	4622      	mov	r2, r4
 80137be:	4680      	mov	r8, r0
 80137c0:	4689      	mov	r9, r1
 80137c2:	462b      	mov	r3, r5
 80137c4:	4620      	mov	r0, r4
 80137c6:	4629      	mov	r1, r5
 80137c8:	f7ec ff0e 	bl	80005e8 <__aeabi_dmul>
 80137cc:	4602      	mov	r2, r0
 80137ce:	460b      	mov	r3, r1
 80137d0:	4640      	mov	r0, r8
 80137d2:	4649      	mov	r1, r9
 80137d4:	f7ec ff08 	bl	80005e8 <__aeabi_dmul>
 80137d8:	a33b      	add	r3, pc, #236	@ (adr r3, 80138c8 <__ieee754_pow+0x410>)
 80137da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137de:	f7ec ff03 	bl	80005e8 <__aeabi_dmul>
 80137e2:	4602      	mov	r2, r0
 80137e4:	460b      	mov	r3, r1
 80137e6:	4650      	mov	r0, sl
 80137e8:	4659      	mov	r1, fp
 80137ea:	f7ec fd45 	bl	8000278 <__aeabi_dsub>
 80137ee:	4602      	mov	r2, r0
 80137f0:	460b      	mov	r3, r1
 80137f2:	4680      	mov	r8, r0
 80137f4:	4689      	mov	r9, r1
 80137f6:	4630      	mov	r0, r6
 80137f8:	4639      	mov	r1, r7
 80137fa:	f7ec fd3f 	bl	800027c <__adddf3>
 80137fe:	2400      	movs	r4, #0
 8013800:	4632      	mov	r2, r6
 8013802:	463b      	mov	r3, r7
 8013804:	4620      	mov	r0, r4
 8013806:	460d      	mov	r5, r1
 8013808:	f7ec fd36 	bl	8000278 <__aeabi_dsub>
 801380c:	4602      	mov	r2, r0
 801380e:	460b      	mov	r3, r1
 8013810:	4640      	mov	r0, r8
 8013812:	4649      	mov	r1, r9
 8013814:	f7ec fd30 	bl	8000278 <__aeabi_dsub>
 8013818:	e9dd 2300 	ldrd	r2, r3, [sp]
 801381c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013820:	2300      	movs	r3, #0
 8013822:	9304      	str	r3, [sp, #16]
 8013824:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013828:	4606      	mov	r6, r0
 801382a:	460f      	mov	r7, r1
 801382c:	465b      	mov	r3, fp
 801382e:	4652      	mov	r2, sl
 8013830:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013834:	f7ec fd20 	bl	8000278 <__aeabi_dsub>
 8013838:	4622      	mov	r2, r4
 801383a:	462b      	mov	r3, r5
 801383c:	f7ec fed4 	bl	80005e8 <__aeabi_dmul>
 8013840:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013844:	4680      	mov	r8, r0
 8013846:	4689      	mov	r9, r1
 8013848:	4630      	mov	r0, r6
 801384a:	4639      	mov	r1, r7
 801384c:	f7ec fecc 	bl	80005e8 <__aeabi_dmul>
 8013850:	4602      	mov	r2, r0
 8013852:	460b      	mov	r3, r1
 8013854:	4640      	mov	r0, r8
 8013856:	4649      	mov	r1, r9
 8013858:	f7ec fd10 	bl	800027c <__adddf3>
 801385c:	465b      	mov	r3, fp
 801385e:	4606      	mov	r6, r0
 8013860:	460f      	mov	r7, r1
 8013862:	4652      	mov	r2, sl
 8013864:	4620      	mov	r0, r4
 8013866:	4629      	mov	r1, r5
 8013868:	f7ec febe 	bl	80005e8 <__aeabi_dmul>
 801386c:	460b      	mov	r3, r1
 801386e:	4602      	mov	r2, r0
 8013870:	4680      	mov	r8, r0
 8013872:	4689      	mov	r9, r1
 8013874:	4630      	mov	r0, r6
 8013876:	4639      	mov	r1, r7
 8013878:	f7ec fd00 	bl	800027c <__adddf3>
 801387c:	4b17      	ldr	r3, [pc, #92]	@ (80138dc <__ieee754_pow+0x424>)
 801387e:	4299      	cmp	r1, r3
 8013880:	4604      	mov	r4, r0
 8013882:	460d      	mov	r5, r1
 8013884:	468b      	mov	fp, r1
 8013886:	f340 820b 	ble.w	8013ca0 <__ieee754_pow+0x7e8>
 801388a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 801388e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8013892:	4303      	orrs	r3, r0
 8013894:	f000 81ea 	beq.w	8013c6c <__ieee754_pow+0x7b4>
 8013898:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801389c:	2200      	movs	r2, #0
 801389e:	2300      	movs	r3, #0
 80138a0:	f7ed f914 	bl	8000acc <__aeabi_dcmplt>
 80138a4:	3800      	subs	r0, #0
 80138a6:	bf18      	it	ne
 80138a8:	2001      	movne	r0, #1
 80138aa:	e713      	b.n	80136d4 <__ieee754_pow+0x21c>
 80138ac:	f3af 8000 	nop.w
 80138b0:	60000000 	.word	0x60000000
 80138b4:	3ff71547 	.word	0x3ff71547
 80138b8:	f85ddf44 	.word	0xf85ddf44
 80138bc:	3e54ae0b 	.word	0x3e54ae0b
 80138c0:	55555555 	.word	0x55555555
 80138c4:	3fd55555 	.word	0x3fd55555
 80138c8:	652b82fe 	.word	0x652b82fe
 80138cc:	3ff71547 	.word	0x3ff71547
 80138d0:	3ff00000 	.word	0x3ff00000
 80138d4:	3fd00000 	.word	0x3fd00000
 80138d8:	3fe00000 	.word	0x3fe00000
 80138dc:	408fffff 	.word	0x408fffff
 80138e0:	4bd5      	ldr	r3, [pc, #852]	@ (8013c38 <__ieee754_pow+0x780>)
 80138e2:	ea08 0303 	and.w	r3, r8, r3
 80138e6:	2200      	movs	r2, #0
 80138e8:	b92b      	cbnz	r3, 80138f6 <__ieee754_pow+0x43e>
 80138ea:	4bd4      	ldr	r3, [pc, #848]	@ (8013c3c <__ieee754_pow+0x784>)
 80138ec:	f7ec fe7c 	bl	80005e8 <__aeabi_dmul>
 80138f0:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80138f4:	468b      	mov	fp, r1
 80138f6:	ea4f 532b 	mov.w	r3, fp, asr #20
 80138fa:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80138fe:	4413      	add	r3, r2
 8013900:	930a      	str	r3, [sp, #40]	@ 0x28
 8013902:	4bcf      	ldr	r3, [pc, #828]	@ (8013c40 <__ieee754_pow+0x788>)
 8013904:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8013908:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801390c:	459b      	cmp	fp, r3
 801390e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8013912:	dd08      	ble.n	8013926 <__ieee754_pow+0x46e>
 8013914:	4bcb      	ldr	r3, [pc, #812]	@ (8013c44 <__ieee754_pow+0x78c>)
 8013916:	459b      	cmp	fp, r3
 8013918:	f340 81a5 	ble.w	8013c66 <__ieee754_pow+0x7ae>
 801391c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801391e:	3301      	adds	r3, #1
 8013920:	930a      	str	r3, [sp, #40]	@ 0x28
 8013922:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8013926:	f04f 0a00 	mov.w	sl, #0
 801392a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801392e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013930:	4bc5      	ldr	r3, [pc, #788]	@ (8013c48 <__ieee754_pow+0x790>)
 8013932:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013936:	ed93 7b00 	vldr	d7, [r3]
 801393a:	4629      	mov	r1, r5
 801393c:	ec53 2b17 	vmov	r2, r3, d7
 8013940:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013944:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013948:	f7ec fc96 	bl	8000278 <__aeabi_dsub>
 801394c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013950:	4606      	mov	r6, r0
 8013952:	460f      	mov	r7, r1
 8013954:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013958:	f7ec fc90 	bl	800027c <__adddf3>
 801395c:	4602      	mov	r2, r0
 801395e:	460b      	mov	r3, r1
 8013960:	2000      	movs	r0, #0
 8013962:	49ba      	ldr	r1, [pc, #744]	@ (8013c4c <__ieee754_pow+0x794>)
 8013964:	f7ec ff6a 	bl	800083c <__aeabi_ddiv>
 8013968:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801396c:	4602      	mov	r2, r0
 801396e:	460b      	mov	r3, r1
 8013970:	4630      	mov	r0, r6
 8013972:	4639      	mov	r1, r7
 8013974:	f7ec fe38 	bl	80005e8 <__aeabi_dmul>
 8013978:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801397c:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8013980:	106d      	asrs	r5, r5, #1
 8013982:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8013986:	f04f 0b00 	mov.w	fp, #0
 801398a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801398e:	4661      	mov	r1, ip
 8013990:	2200      	movs	r2, #0
 8013992:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8013996:	4658      	mov	r0, fp
 8013998:	46e1      	mov	r9, ip
 801399a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801399e:	4614      	mov	r4, r2
 80139a0:	461d      	mov	r5, r3
 80139a2:	f7ec fe21 	bl	80005e8 <__aeabi_dmul>
 80139a6:	4602      	mov	r2, r0
 80139a8:	460b      	mov	r3, r1
 80139aa:	4630      	mov	r0, r6
 80139ac:	4639      	mov	r1, r7
 80139ae:	f7ec fc63 	bl	8000278 <__aeabi_dsub>
 80139b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80139b6:	4606      	mov	r6, r0
 80139b8:	460f      	mov	r7, r1
 80139ba:	4620      	mov	r0, r4
 80139bc:	4629      	mov	r1, r5
 80139be:	f7ec fc5b 	bl	8000278 <__aeabi_dsub>
 80139c2:	4602      	mov	r2, r0
 80139c4:	460b      	mov	r3, r1
 80139c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80139ca:	f7ec fc55 	bl	8000278 <__aeabi_dsub>
 80139ce:	465a      	mov	r2, fp
 80139d0:	464b      	mov	r3, r9
 80139d2:	f7ec fe09 	bl	80005e8 <__aeabi_dmul>
 80139d6:	4602      	mov	r2, r0
 80139d8:	460b      	mov	r3, r1
 80139da:	4630      	mov	r0, r6
 80139dc:	4639      	mov	r1, r7
 80139de:	f7ec fc4b 	bl	8000278 <__aeabi_dsub>
 80139e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80139e6:	f7ec fdff 	bl	80005e8 <__aeabi_dmul>
 80139ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80139ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80139f2:	4610      	mov	r0, r2
 80139f4:	4619      	mov	r1, r3
 80139f6:	f7ec fdf7 	bl	80005e8 <__aeabi_dmul>
 80139fa:	a37d      	add	r3, pc, #500	@ (adr r3, 8013bf0 <__ieee754_pow+0x738>)
 80139fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a00:	4604      	mov	r4, r0
 8013a02:	460d      	mov	r5, r1
 8013a04:	f7ec fdf0 	bl	80005e8 <__aeabi_dmul>
 8013a08:	a37b      	add	r3, pc, #492	@ (adr r3, 8013bf8 <__ieee754_pow+0x740>)
 8013a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a0e:	f7ec fc35 	bl	800027c <__adddf3>
 8013a12:	4622      	mov	r2, r4
 8013a14:	462b      	mov	r3, r5
 8013a16:	f7ec fde7 	bl	80005e8 <__aeabi_dmul>
 8013a1a:	a379      	add	r3, pc, #484	@ (adr r3, 8013c00 <__ieee754_pow+0x748>)
 8013a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a20:	f7ec fc2c 	bl	800027c <__adddf3>
 8013a24:	4622      	mov	r2, r4
 8013a26:	462b      	mov	r3, r5
 8013a28:	f7ec fdde 	bl	80005e8 <__aeabi_dmul>
 8013a2c:	a376      	add	r3, pc, #472	@ (adr r3, 8013c08 <__ieee754_pow+0x750>)
 8013a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a32:	f7ec fc23 	bl	800027c <__adddf3>
 8013a36:	4622      	mov	r2, r4
 8013a38:	462b      	mov	r3, r5
 8013a3a:	f7ec fdd5 	bl	80005e8 <__aeabi_dmul>
 8013a3e:	a374      	add	r3, pc, #464	@ (adr r3, 8013c10 <__ieee754_pow+0x758>)
 8013a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a44:	f7ec fc1a 	bl	800027c <__adddf3>
 8013a48:	4622      	mov	r2, r4
 8013a4a:	462b      	mov	r3, r5
 8013a4c:	f7ec fdcc 	bl	80005e8 <__aeabi_dmul>
 8013a50:	a371      	add	r3, pc, #452	@ (adr r3, 8013c18 <__ieee754_pow+0x760>)
 8013a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a56:	f7ec fc11 	bl	800027c <__adddf3>
 8013a5a:	4622      	mov	r2, r4
 8013a5c:	4606      	mov	r6, r0
 8013a5e:	460f      	mov	r7, r1
 8013a60:	462b      	mov	r3, r5
 8013a62:	4620      	mov	r0, r4
 8013a64:	4629      	mov	r1, r5
 8013a66:	f7ec fdbf 	bl	80005e8 <__aeabi_dmul>
 8013a6a:	4602      	mov	r2, r0
 8013a6c:	460b      	mov	r3, r1
 8013a6e:	4630      	mov	r0, r6
 8013a70:	4639      	mov	r1, r7
 8013a72:	f7ec fdb9 	bl	80005e8 <__aeabi_dmul>
 8013a76:	465a      	mov	r2, fp
 8013a78:	4604      	mov	r4, r0
 8013a7a:	460d      	mov	r5, r1
 8013a7c:	464b      	mov	r3, r9
 8013a7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a82:	f7ec fbfb 	bl	800027c <__adddf3>
 8013a86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013a8a:	f7ec fdad 	bl	80005e8 <__aeabi_dmul>
 8013a8e:	4622      	mov	r2, r4
 8013a90:	462b      	mov	r3, r5
 8013a92:	f7ec fbf3 	bl	800027c <__adddf3>
 8013a96:	465a      	mov	r2, fp
 8013a98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013a9c:	464b      	mov	r3, r9
 8013a9e:	4658      	mov	r0, fp
 8013aa0:	4649      	mov	r1, r9
 8013aa2:	f7ec fda1 	bl	80005e8 <__aeabi_dmul>
 8013aa6:	4b6a      	ldr	r3, [pc, #424]	@ (8013c50 <__ieee754_pow+0x798>)
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	4606      	mov	r6, r0
 8013aac:	460f      	mov	r7, r1
 8013aae:	f7ec fbe5 	bl	800027c <__adddf3>
 8013ab2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013ab6:	f7ec fbe1 	bl	800027c <__adddf3>
 8013aba:	46d8      	mov	r8, fp
 8013abc:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8013ac0:	460d      	mov	r5, r1
 8013ac2:	465a      	mov	r2, fp
 8013ac4:	460b      	mov	r3, r1
 8013ac6:	4640      	mov	r0, r8
 8013ac8:	4649      	mov	r1, r9
 8013aca:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8013ace:	f7ec fd8b 	bl	80005e8 <__aeabi_dmul>
 8013ad2:	465c      	mov	r4, fp
 8013ad4:	4680      	mov	r8, r0
 8013ad6:	4689      	mov	r9, r1
 8013ad8:	4b5d      	ldr	r3, [pc, #372]	@ (8013c50 <__ieee754_pow+0x798>)
 8013ada:	2200      	movs	r2, #0
 8013adc:	4620      	mov	r0, r4
 8013ade:	4629      	mov	r1, r5
 8013ae0:	f7ec fbca 	bl	8000278 <__aeabi_dsub>
 8013ae4:	4632      	mov	r2, r6
 8013ae6:	463b      	mov	r3, r7
 8013ae8:	f7ec fbc6 	bl	8000278 <__aeabi_dsub>
 8013aec:	4602      	mov	r2, r0
 8013aee:	460b      	mov	r3, r1
 8013af0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013af4:	f7ec fbc0 	bl	8000278 <__aeabi_dsub>
 8013af8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013afc:	f7ec fd74 	bl	80005e8 <__aeabi_dmul>
 8013b00:	4622      	mov	r2, r4
 8013b02:	4606      	mov	r6, r0
 8013b04:	460f      	mov	r7, r1
 8013b06:	462b      	mov	r3, r5
 8013b08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013b0c:	f7ec fd6c 	bl	80005e8 <__aeabi_dmul>
 8013b10:	4602      	mov	r2, r0
 8013b12:	460b      	mov	r3, r1
 8013b14:	4630      	mov	r0, r6
 8013b16:	4639      	mov	r1, r7
 8013b18:	f7ec fbb0 	bl	800027c <__adddf3>
 8013b1c:	4606      	mov	r6, r0
 8013b1e:	460f      	mov	r7, r1
 8013b20:	4602      	mov	r2, r0
 8013b22:	460b      	mov	r3, r1
 8013b24:	4640      	mov	r0, r8
 8013b26:	4649      	mov	r1, r9
 8013b28:	f7ec fba8 	bl	800027c <__adddf3>
 8013b2c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8013b30:	a33b      	add	r3, pc, #236	@ (adr r3, 8013c20 <__ieee754_pow+0x768>)
 8013b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b36:	4658      	mov	r0, fp
 8013b38:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8013b3c:	460d      	mov	r5, r1
 8013b3e:	f7ec fd53 	bl	80005e8 <__aeabi_dmul>
 8013b42:	465c      	mov	r4, fp
 8013b44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013b48:	4642      	mov	r2, r8
 8013b4a:	464b      	mov	r3, r9
 8013b4c:	4620      	mov	r0, r4
 8013b4e:	4629      	mov	r1, r5
 8013b50:	f7ec fb92 	bl	8000278 <__aeabi_dsub>
 8013b54:	4602      	mov	r2, r0
 8013b56:	460b      	mov	r3, r1
 8013b58:	4630      	mov	r0, r6
 8013b5a:	4639      	mov	r1, r7
 8013b5c:	f7ec fb8c 	bl	8000278 <__aeabi_dsub>
 8013b60:	a331      	add	r3, pc, #196	@ (adr r3, 8013c28 <__ieee754_pow+0x770>)
 8013b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b66:	f7ec fd3f 	bl	80005e8 <__aeabi_dmul>
 8013b6a:	a331      	add	r3, pc, #196	@ (adr r3, 8013c30 <__ieee754_pow+0x778>)
 8013b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b70:	4606      	mov	r6, r0
 8013b72:	460f      	mov	r7, r1
 8013b74:	4620      	mov	r0, r4
 8013b76:	4629      	mov	r1, r5
 8013b78:	f7ec fd36 	bl	80005e8 <__aeabi_dmul>
 8013b7c:	4602      	mov	r2, r0
 8013b7e:	460b      	mov	r3, r1
 8013b80:	4630      	mov	r0, r6
 8013b82:	4639      	mov	r1, r7
 8013b84:	f7ec fb7a 	bl	800027c <__adddf3>
 8013b88:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013b8a:	4b32      	ldr	r3, [pc, #200]	@ (8013c54 <__ieee754_pow+0x79c>)
 8013b8c:	4413      	add	r3, r2
 8013b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b92:	f7ec fb73 	bl	800027c <__adddf3>
 8013b96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013b9a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013b9c:	f7ec fcba 	bl	8000514 <__aeabi_i2d>
 8013ba0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8013c58 <__ieee754_pow+0x7a0>)
 8013ba4:	4413      	add	r3, r2
 8013ba6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013baa:	4606      	mov	r6, r0
 8013bac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013bb0:	460f      	mov	r7, r1
 8013bb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013bb6:	f7ec fb61 	bl	800027c <__adddf3>
 8013bba:	4642      	mov	r2, r8
 8013bbc:	464b      	mov	r3, r9
 8013bbe:	f7ec fb5d 	bl	800027c <__adddf3>
 8013bc2:	4632      	mov	r2, r6
 8013bc4:	463b      	mov	r3, r7
 8013bc6:	f7ec fb59 	bl	800027c <__adddf3>
 8013bca:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8013bce:	4632      	mov	r2, r6
 8013bd0:	463b      	mov	r3, r7
 8013bd2:	4658      	mov	r0, fp
 8013bd4:	460d      	mov	r5, r1
 8013bd6:	f7ec fb4f 	bl	8000278 <__aeabi_dsub>
 8013bda:	4642      	mov	r2, r8
 8013bdc:	464b      	mov	r3, r9
 8013bde:	f7ec fb4b 	bl	8000278 <__aeabi_dsub>
 8013be2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013be6:	f7ec fb47 	bl	8000278 <__aeabi_dsub>
 8013bea:	465c      	mov	r4, fp
 8013bec:	e036      	b.n	8013c5c <__ieee754_pow+0x7a4>
 8013bee:	bf00      	nop
 8013bf0:	4a454eef 	.word	0x4a454eef
 8013bf4:	3fca7e28 	.word	0x3fca7e28
 8013bf8:	93c9db65 	.word	0x93c9db65
 8013bfc:	3fcd864a 	.word	0x3fcd864a
 8013c00:	a91d4101 	.word	0xa91d4101
 8013c04:	3fd17460 	.word	0x3fd17460
 8013c08:	518f264d 	.word	0x518f264d
 8013c0c:	3fd55555 	.word	0x3fd55555
 8013c10:	db6fabff 	.word	0xdb6fabff
 8013c14:	3fdb6db6 	.word	0x3fdb6db6
 8013c18:	33333303 	.word	0x33333303
 8013c1c:	3fe33333 	.word	0x3fe33333
 8013c20:	e0000000 	.word	0xe0000000
 8013c24:	3feec709 	.word	0x3feec709
 8013c28:	dc3a03fd 	.word	0xdc3a03fd
 8013c2c:	3feec709 	.word	0x3feec709
 8013c30:	145b01f5 	.word	0x145b01f5
 8013c34:	be3e2fe0 	.word	0xbe3e2fe0
 8013c38:	7ff00000 	.word	0x7ff00000
 8013c3c:	43400000 	.word	0x43400000
 8013c40:	0003988e 	.word	0x0003988e
 8013c44:	000bb679 	.word	0x000bb679
 8013c48:	080147b8 	.word	0x080147b8
 8013c4c:	3ff00000 	.word	0x3ff00000
 8013c50:	40080000 	.word	0x40080000
 8013c54:	08014798 	.word	0x08014798
 8013c58:	080147a8 	.word	0x080147a8
 8013c5c:	4602      	mov	r2, r0
 8013c5e:	460b      	mov	r3, r1
 8013c60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013c64:	e5d6      	b.n	8013814 <__ieee754_pow+0x35c>
 8013c66:	f04f 0a01 	mov.w	sl, #1
 8013c6a:	e65e      	b.n	801392a <__ieee754_pow+0x472>
 8013c6c:	a3b5      	add	r3, pc, #724	@ (adr r3, 8013f44 <__ieee754_pow+0xa8c>)
 8013c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c72:	4630      	mov	r0, r6
 8013c74:	4639      	mov	r1, r7
 8013c76:	f7ec fb01 	bl	800027c <__adddf3>
 8013c7a:	4642      	mov	r2, r8
 8013c7c:	e9cd 0100 	strd	r0, r1, [sp]
 8013c80:	464b      	mov	r3, r9
 8013c82:	4620      	mov	r0, r4
 8013c84:	4629      	mov	r1, r5
 8013c86:	f7ec faf7 	bl	8000278 <__aeabi_dsub>
 8013c8a:	4602      	mov	r2, r0
 8013c8c:	460b      	mov	r3, r1
 8013c8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013c92:	f7ec ff39 	bl	8000b08 <__aeabi_dcmpgt>
 8013c96:	2800      	cmp	r0, #0
 8013c98:	f47f adfe 	bne.w	8013898 <__ieee754_pow+0x3e0>
 8013c9c:	4ba2      	ldr	r3, [pc, #648]	@ (8013f28 <__ieee754_pow+0xa70>)
 8013c9e:	e022      	b.n	8013ce6 <__ieee754_pow+0x82e>
 8013ca0:	4ca2      	ldr	r4, [pc, #648]	@ (8013f2c <__ieee754_pow+0xa74>)
 8013ca2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013ca6:	42a3      	cmp	r3, r4
 8013ca8:	d919      	bls.n	8013cde <__ieee754_pow+0x826>
 8013caa:	4ba1      	ldr	r3, [pc, #644]	@ (8013f30 <__ieee754_pow+0xa78>)
 8013cac:	440b      	add	r3, r1
 8013cae:	4303      	orrs	r3, r0
 8013cb0:	d009      	beq.n	8013cc6 <__ieee754_pow+0x80e>
 8013cb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	2300      	movs	r3, #0
 8013cba:	f7ec ff07 	bl	8000acc <__aeabi_dcmplt>
 8013cbe:	3800      	subs	r0, #0
 8013cc0:	bf18      	it	ne
 8013cc2:	2001      	movne	r0, #1
 8013cc4:	e512      	b.n	80136ec <__ieee754_pow+0x234>
 8013cc6:	4642      	mov	r2, r8
 8013cc8:	464b      	mov	r3, r9
 8013cca:	f7ec fad5 	bl	8000278 <__aeabi_dsub>
 8013cce:	4632      	mov	r2, r6
 8013cd0:	463b      	mov	r3, r7
 8013cd2:	f7ec ff0f 	bl	8000af4 <__aeabi_dcmpge>
 8013cd6:	2800      	cmp	r0, #0
 8013cd8:	d1eb      	bne.n	8013cb2 <__ieee754_pow+0x7fa>
 8013cda:	4b96      	ldr	r3, [pc, #600]	@ (8013f34 <__ieee754_pow+0xa7c>)
 8013cdc:	e003      	b.n	8013ce6 <__ieee754_pow+0x82e>
 8013cde:	4a96      	ldr	r2, [pc, #600]	@ (8013f38 <__ieee754_pow+0xa80>)
 8013ce0:	4293      	cmp	r3, r2
 8013ce2:	f240 80e7 	bls.w	8013eb4 <__ieee754_pow+0x9fc>
 8013ce6:	151b      	asrs	r3, r3, #20
 8013ce8:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8013cec:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8013cf0:	fa4a fa03 	asr.w	sl, sl, r3
 8013cf4:	44da      	add	sl, fp
 8013cf6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8013cfa:	4890      	ldr	r0, [pc, #576]	@ (8013f3c <__ieee754_pow+0xa84>)
 8013cfc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8013d00:	4108      	asrs	r0, r1
 8013d02:	ea00 030a 	and.w	r3, r0, sl
 8013d06:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8013d0a:	f1c1 0114 	rsb	r1, r1, #20
 8013d0e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8013d12:	fa4a fa01 	asr.w	sl, sl, r1
 8013d16:	f1bb 0f00 	cmp.w	fp, #0
 8013d1a:	4640      	mov	r0, r8
 8013d1c:	4649      	mov	r1, r9
 8013d1e:	f04f 0200 	mov.w	r2, #0
 8013d22:	bfb8      	it	lt
 8013d24:	f1ca 0a00 	rsblt	sl, sl, #0
 8013d28:	f7ec faa6 	bl	8000278 <__aeabi_dsub>
 8013d2c:	4680      	mov	r8, r0
 8013d2e:	4689      	mov	r9, r1
 8013d30:	4632      	mov	r2, r6
 8013d32:	463b      	mov	r3, r7
 8013d34:	4640      	mov	r0, r8
 8013d36:	4649      	mov	r1, r9
 8013d38:	f7ec faa0 	bl	800027c <__adddf3>
 8013d3c:	2400      	movs	r4, #0
 8013d3e:	a36a      	add	r3, pc, #424	@ (adr r3, 8013ee8 <__ieee754_pow+0xa30>)
 8013d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d44:	4620      	mov	r0, r4
 8013d46:	460d      	mov	r5, r1
 8013d48:	f7ec fc4e 	bl	80005e8 <__aeabi_dmul>
 8013d4c:	4642      	mov	r2, r8
 8013d4e:	e9cd 0100 	strd	r0, r1, [sp]
 8013d52:	464b      	mov	r3, r9
 8013d54:	4620      	mov	r0, r4
 8013d56:	4629      	mov	r1, r5
 8013d58:	f7ec fa8e 	bl	8000278 <__aeabi_dsub>
 8013d5c:	4602      	mov	r2, r0
 8013d5e:	460b      	mov	r3, r1
 8013d60:	4630      	mov	r0, r6
 8013d62:	4639      	mov	r1, r7
 8013d64:	f7ec fa88 	bl	8000278 <__aeabi_dsub>
 8013d68:	a361      	add	r3, pc, #388	@ (adr r3, 8013ef0 <__ieee754_pow+0xa38>)
 8013d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d6e:	f7ec fc3b 	bl	80005e8 <__aeabi_dmul>
 8013d72:	a361      	add	r3, pc, #388	@ (adr r3, 8013ef8 <__ieee754_pow+0xa40>)
 8013d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d78:	4680      	mov	r8, r0
 8013d7a:	4689      	mov	r9, r1
 8013d7c:	4620      	mov	r0, r4
 8013d7e:	4629      	mov	r1, r5
 8013d80:	f7ec fc32 	bl	80005e8 <__aeabi_dmul>
 8013d84:	4602      	mov	r2, r0
 8013d86:	460b      	mov	r3, r1
 8013d88:	4640      	mov	r0, r8
 8013d8a:	4649      	mov	r1, r9
 8013d8c:	f7ec fa76 	bl	800027c <__adddf3>
 8013d90:	4604      	mov	r4, r0
 8013d92:	460d      	mov	r5, r1
 8013d94:	4602      	mov	r2, r0
 8013d96:	460b      	mov	r3, r1
 8013d98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013d9c:	f7ec fa6e 	bl	800027c <__adddf3>
 8013da0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013da4:	4680      	mov	r8, r0
 8013da6:	4689      	mov	r9, r1
 8013da8:	f7ec fa66 	bl	8000278 <__aeabi_dsub>
 8013dac:	4602      	mov	r2, r0
 8013dae:	460b      	mov	r3, r1
 8013db0:	4620      	mov	r0, r4
 8013db2:	4629      	mov	r1, r5
 8013db4:	f7ec fa60 	bl	8000278 <__aeabi_dsub>
 8013db8:	4642      	mov	r2, r8
 8013dba:	4606      	mov	r6, r0
 8013dbc:	460f      	mov	r7, r1
 8013dbe:	464b      	mov	r3, r9
 8013dc0:	4640      	mov	r0, r8
 8013dc2:	4649      	mov	r1, r9
 8013dc4:	f7ec fc10 	bl	80005e8 <__aeabi_dmul>
 8013dc8:	a34d      	add	r3, pc, #308	@ (adr r3, 8013f00 <__ieee754_pow+0xa48>)
 8013dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dce:	4604      	mov	r4, r0
 8013dd0:	460d      	mov	r5, r1
 8013dd2:	f7ec fc09 	bl	80005e8 <__aeabi_dmul>
 8013dd6:	a34c      	add	r3, pc, #304	@ (adr r3, 8013f08 <__ieee754_pow+0xa50>)
 8013dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ddc:	f7ec fa4c 	bl	8000278 <__aeabi_dsub>
 8013de0:	4622      	mov	r2, r4
 8013de2:	462b      	mov	r3, r5
 8013de4:	f7ec fc00 	bl	80005e8 <__aeabi_dmul>
 8013de8:	a349      	add	r3, pc, #292	@ (adr r3, 8013f10 <__ieee754_pow+0xa58>)
 8013dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dee:	f7ec fa45 	bl	800027c <__adddf3>
 8013df2:	4622      	mov	r2, r4
 8013df4:	462b      	mov	r3, r5
 8013df6:	f7ec fbf7 	bl	80005e8 <__aeabi_dmul>
 8013dfa:	a347      	add	r3, pc, #284	@ (adr r3, 8013f18 <__ieee754_pow+0xa60>)
 8013dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e00:	f7ec fa3a 	bl	8000278 <__aeabi_dsub>
 8013e04:	4622      	mov	r2, r4
 8013e06:	462b      	mov	r3, r5
 8013e08:	f7ec fbee 	bl	80005e8 <__aeabi_dmul>
 8013e0c:	a344      	add	r3, pc, #272	@ (adr r3, 8013f20 <__ieee754_pow+0xa68>)
 8013e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e12:	f7ec fa33 	bl	800027c <__adddf3>
 8013e16:	4622      	mov	r2, r4
 8013e18:	462b      	mov	r3, r5
 8013e1a:	f7ec fbe5 	bl	80005e8 <__aeabi_dmul>
 8013e1e:	4602      	mov	r2, r0
 8013e20:	460b      	mov	r3, r1
 8013e22:	4640      	mov	r0, r8
 8013e24:	4649      	mov	r1, r9
 8013e26:	f7ec fa27 	bl	8000278 <__aeabi_dsub>
 8013e2a:	4604      	mov	r4, r0
 8013e2c:	460d      	mov	r5, r1
 8013e2e:	4602      	mov	r2, r0
 8013e30:	460b      	mov	r3, r1
 8013e32:	4640      	mov	r0, r8
 8013e34:	4649      	mov	r1, r9
 8013e36:	f7ec fbd7 	bl	80005e8 <__aeabi_dmul>
 8013e3a:	2200      	movs	r2, #0
 8013e3c:	e9cd 0100 	strd	r0, r1, [sp]
 8013e40:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013e44:	4620      	mov	r0, r4
 8013e46:	4629      	mov	r1, r5
 8013e48:	f7ec fa16 	bl	8000278 <__aeabi_dsub>
 8013e4c:	4602      	mov	r2, r0
 8013e4e:	460b      	mov	r3, r1
 8013e50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e54:	f7ec fcf2 	bl	800083c <__aeabi_ddiv>
 8013e58:	4632      	mov	r2, r6
 8013e5a:	4604      	mov	r4, r0
 8013e5c:	460d      	mov	r5, r1
 8013e5e:	463b      	mov	r3, r7
 8013e60:	4640      	mov	r0, r8
 8013e62:	4649      	mov	r1, r9
 8013e64:	f7ec fbc0 	bl	80005e8 <__aeabi_dmul>
 8013e68:	4632      	mov	r2, r6
 8013e6a:	463b      	mov	r3, r7
 8013e6c:	f7ec fa06 	bl	800027c <__adddf3>
 8013e70:	4602      	mov	r2, r0
 8013e72:	460b      	mov	r3, r1
 8013e74:	4620      	mov	r0, r4
 8013e76:	4629      	mov	r1, r5
 8013e78:	f7ec f9fe 	bl	8000278 <__aeabi_dsub>
 8013e7c:	4642      	mov	r2, r8
 8013e7e:	464b      	mov	r3, r9
 8013e80:	f7ec f9fa 	bl	8000278 <__aeabi_dsub>
 8013e84:	460b      	mov	r3, r1
 8013e86:	4602      	mov	r2, r0
 8013e88:	492d      	ldr	r1, [pc, #180]	@ (8013f40 <__ieee754_pow+0xa88>)
 8013e8a:	2000      	movs	r0, #0
 8013e8c:	f7ec f9f4 	bl	8000278 <__aeabi_dsub>
 8013e90:	ec41 0b10 	vmov	d0, r0, r1
 8013e94:	ee10 3a90 	vmov	r3, s1
 8013e98:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013e9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013ea0:	da0b      	bge.n	8013eba <__ieee754_pow+0xa02>
 8013ea2:	4650      	mov	r0, sl
 8013ea4:	f000 f85c 	bl	8013f60 <scalbn>
 8013ea8:	ec51 0b10 	vmov	r0, r1, d0
 8013eac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013eb0:	f7ff bb6d 	b.w	801358e <__ieee754_pow+0xd6>
 8013eb4:	f8dd a010 	ldr.w	sl, [sp, #16]
 8013eb8:	e73a      	b.n	8013d30 <__ieee754_pow+0x878>
 8013eba:	ec51 0b10 	vmov	r0, r1, d0
 8013ebe:	4619      	mov	r1, r3
 8013ec0:	e7f4      	b.n	8013eac <__ieee754_pow+0x9f4>
 8013ec2:	491f      	ldr	r1, [pc, #124]	@ (8013f40 <__ieee754_pow+0xa88>)
 8013ec4:	2000      	movs	r0, #0
 8013ec6:	f7ff bb14 	b.w	80134f2 <__ieee754_pow+0x3a>
 8013eca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ece:	f7ff bb10 	b.w	80134f2 <__ieee754_pow+0x3a>
 8013ed2:	4630      	mov	r0, r6
 8013ed4:	4639      	mov	r1, r7
 8013ed6:	f7ff bb0c 	b.w	80134f2 <__ieee754_pow+0x3a>
 8013eda:	460c      	mov	r4, r1
 8013edc:	f7ff bb69 	b.w	80135b2 <__ieee754_pow+0xfa>
 8013ee0:	2400      	movs	r4, #0
 8013ee2:	f7ff bb4b 	b.w	801357c <__ieee754_pow+0xc4>
 8013ee6:	bf00      	nop
 8013ee8:	00000000 	.word	0x00000000
 8013eec:	3fe62e43 	.word	0x3fe62e43
 8013ef0:	fefa39ef 	.word	0xfefa39ef
 8013ef4:	3fe62e42 	.word	0x3fe62e42
 8013ef8:	0ca86c39 	.word	0x0ca86c39
 8013efc:	be205c61 	.word	0xbe205c61
 8013f00:	72bea4d0 	.word	0x72bea4d0
 8013f04:	3e663769 	.word	0x3e663769
 8013f08:	c5d26bf1 	.word	0xc5d26bf1
 8013f0c:	3ebbbd41 	.word	0x3ebbbd41
 8013f10:	af25de2c 	.word	0xaf25de2c
 8013f14:	3f11566a 	.word	0x3f11566a
 8013f18:	16bebd93 	.word	0x16bebd93
 8013f1c:	3f66c16c 	.word	0x3f66c16c
 8013f20:	5555553e 	.word	0x5555553e
 8013f24:	3fc55555 	.word	0x3fc55555
 8013f28:	40900000 	.word	0x40900000
 8013f2c:	4090cbff 	.word	0x4090cbff
 8013f30:	3f6f3400 	.word	0x3f6f3400
 8013f34:	4090cc00 	.word	0x4090cc00
 8013f38:	3fe00000 	.word	0x3fe00000
 8013f3c:	fff00000 	.word	0xfff00000
 8013f40:	3ff00000 	.word	0x3ff00000
 8013f44:	652b82fe 	.word	0x652b82fe
 8013f48:	3c971547 	.word	0x3c971547

08013f4c <fabs>:
 8013f4c:	ec51 0b10 	vmov	r0, r1, d0
 8013f50:	4602      	mov	r2, r0
 8013f52:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013f56:	ec43 2b10 	vmov	d0, r2, r3
 8013f5a:	4770      	bx	lr
 8013f5c:	0000      	movs	r0, r0
	...

08013f60 <scalbn>:
 8013f60:	b570      	push	{r4, r5, r6, lr}
 8013f62:	ec55 4b10 	vmov	r4, r5, d0
 8013f66:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8013f6a:	4606      	mov	r6, r0
 8013f6c:	462b      	mov	r3, r5
 8013f6e:	b991      	cbnz	r1, 8013f96 <scalbn+0x36>
 8013f70:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8013f74:	4323      	orrs	r3, r4
 8013f76:	d03b      	beq.n	8013ff0 <scalbn+0x90>
 8013f78:	4b33      	ldr	r3, [pc, #204]	@ (8014048 <scalbn+0xe8>)
 8013f7a:	4620      	mov	r0, r4
 8013f7c:	4629      	mov	r1, r5
 8013f7e:	2200      	movs	r2, #0
 8013f80:	f7ec fb32 	bl	80005e8 <__aeabi_dmul>
 8013f84:	4b31      	ldr	r3, [pc, #196]	@ (801404c <scalbn+0xec>)
 8013f86:	429e      	cmp	r6, r3
 8013f88:	4604      	mov	r4, r0
 8013f8a:	460d      	mov	r5, r1
 8013f8c:	da0f      	bge.n	8013fae <scalbn+0x4e>
 8013f8e:	a326      	add	r3, pc, #152	@ (adr r3, 8014028 <scalbn+0xc8>)
 8013f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f94:	e01e      	b.n	8013fd4 <scalbn+0x74>
 8013f96:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8013f9a:	4291      	cmp	r1, r2
 8013f9c:	d10b      	bne.n	8013fb6 <scalbn+0x56>
 8013f9e:	4622      	mov	r2, r4
 8013fa0:	4620      	mov	r0, r4
 8013fa2:	4629      	mov	r1, r5
 8013fa4:	f7ec f96a 	bl	800027c <__adddf3>
 8013fa8:	4604      	mov	r4, r0
 8013faa:	460d      	mov	r5, r1
 8013fac:	e020      	b.n	8013ff0 <scalbn+0x90>
 8013fae:	460b      	mov	r3, r1
 8013fb0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013fb4:	3936      	subs	r1, #54	@ 0x36
 8013fb6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8013fba:	4296      	cmp	r6, r2
 8013fbc:	dd0d      	ble.n	8013fda <scalbn+0x7a>
 8013fbe:	2d00      	cmp	r5, #0
 8013fc0:	a11b      	add	r1, pc, #108	@ (adr r1, 8014030 <scalbn+0xd0>)
 8013fc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fc6:	da02      	bge.n	8013fce <scalbn+0x6e>
 8013fc8:	a11b      	add	r1, pc, #108	@ (adr r1, 8014038 <scalbn+0xd8>)
 8013fca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fce:	a318      	add	r3, pc, #96	@ (adr r3, 8014030 <scalbn+0xd0>)
 8013fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fd4:	f7ec fb08 	bl	80005e8 <__aeabi_dmul>
 8013fd8:	e7e6      	b.n	8013fa8 <scalbn+0x48>
 8013fda:	1872      	adds	r2, r6, r1
 8013fdc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8013fe0:	428a      	cmp	r2, r1
 8013fe2:	dcec      	bgt.n	8013fbe <scalbn+0x5e>
 8013fe4:	2a00      	cmp	r2, #0
 8013fe6:	dd06      	ble.n	8013ff6 <scalbn+0x96>
 8013fe8:	f36f 531e 	bfc	r3, #20, #11
 8013fec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013ff0:	ec45 4b10 	vmov	d0, r4, r5
 8013ff4:	bd70      	pop	{r4, r5, r6, pc}
 8013ff6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8013ffa:	da08      	bge.n	801400e <scalbn+0xae>
 8013ffc:	2d00      	cmp	r5, #0
 8013ffe:	a10a      	add	r1, pc, #40	@ (adr r1, 8014028 <scalbn+0xc8>)
 8014000:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014004:	dac3      	bge.n	8013f8e <scalbn+0x2e>
 8014006:	a10e      	add	r1, pc, #56	@ (adr r1, 8014040 <scalbn+0xe0>)
 8014008:	e9d1 0100 	ldrd	r0, r1, [r1]
 801400c:	e7bf      	b.n	8013f8e <scalbn+0x2e>
 801400e:	3236      	adds	r2, #54	@ 0x36
 8014010:	f36f 531e 	bfc	r3, #20, #11
 8014014:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014018:	4620      	mov	r0, r4
 801401a:	4b0d      	ldr	r3, [pc, #52]	@ (8014050 <scalbn+0xf0>)
 801401c:	4629      	mov	r1, r5
 801401e:	2200      	movs	r2, #0
 8014020:	e7d8      	b.n	8013fd4 <scalbn+0x74>
 8014022:	bf00      	nop
 8014024:	f3af 8000 	nop.w
 8014028:	c2f8f359 	.word	0xc2f8f359
 801402c:	01a56e1f 	.word	0x01a56e1f
 8014030:	8800759c 	.word	0x8800759c
 8014034:	7e37e43c 	.word	0x7e37e43c
 8014038:	8800759c 	.word	0x8800759c
 801403c:	fe37e43c 	.word	0xfe37e43c
 8014040:	c2f8f359 	.word	0xc2f8f359
 8014044:	81a56e1f 	.word	0x81a56e1f
 8014048:	43500000 	.word	0x43500000
 801404c:	ffff3cb0 	.word	0xffff3cb0
 8014050:	3c900000 	.word	0x3c900000

08014054 <with_errno>:
 8014054:	b510      	push	{r4, lr}
 8014056:	ed2d 8b02 	vpush	{d8}
 801405a:	eeb0 8a40 	vmov.f32	s16, s0
 801405e:	eef0 8a60 	vmov.f32	s17, s1
 8014062:	4604      	mov	r4, r0
 8014064:	f7fe f9f2 	bl	801244c <__errno>
 8014068:	eeb0 0a48 	vmov.f32	s0, s16
 801406c:	eef0 0a68 	vmov.f32	s1, s17
 8014070:	ecbd 8b02 	vpop	{d8}
 8014074:	6004      	str	r4, [r0, #0]
 8014076:	bd10      	pop	{r4, pc}

08014078 <xflow>:
 8014078:	4603      	mov	r3, r0
 801407a:	b507      	push	{r0, r1, r2, lr}
 801407c:	ec51 0b10 	vmov	r0, r1, d0
 8014080:	b183      	cbz	r3, 80140a4 <xflow+0x2c>
 8014082:	4602      	mov	r2, r0
 8014084:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014088:	e9cd 2300 	strd	r2, r3, [sp]
 801408c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014090:	f7ec faaa 	bl	80005e8 <__aeabi_dmul>
 8014094:	ec41 0b10 	vmov	d0, r0, r1
 8014098:	2022      	movs	r0, #34	@ 0x22
 801409a:	b003      	add	sp, #12
 801409c:	f85d eb04 	ldr.w	lr, [sp], #4
 80140a0:	f7ff bfd8 	b.w	8014054 <with_errno>
 80140a4:	4602      	mov	r2, r0
 80140a6:	460b      	mov	r3, r1
 80140a8:	e7ee      	b.n	8014088 <xflow+0x10>
 80140aa:	0000      	movs	r0, r0
 80140ac:	0000      	movs	r0, r0
	...

080140b0 <__math_uflow>:
 80140b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80140b8 <__math_uflow+0x8>
 80140b4:	f7ff bfe0 	b.w	8014078 <xflow>
 80140b8:	00000000 	.word	0x00000000
 80140bc:	10000000 	.word	0x10000000

080140c0 <__math_oflow>:
 80140c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80140c8 <__math_oflow+0x8>
 80140c4:	f7ff bfd8 	b.w	8014078 <xflow>
 80140c8:	00000000 	.word	0x00000000
 80140cc:	70000000 	.word	0x70000000

080140d0 <__ieee754_sqrt>:
 80140d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140d4:	4a66      	ldr	r2, [pc, #408]	@ (8014270 <__ieee754_sqrt+0x1a0>)
 80140d6:	ec55 4b10 	vmov	r4, r5, d0
 80140da:	43aa      	bics	r2, r5
 80140dc:	462b      	mov	r3, r5
 80140de:	4621      	mov	r1, r4
 80140e0:	d110      	bne.n	8014104 <__ieee754_sqrt+0x34>
 80140e2:	4622      	mov	r2, r4
 80140e4:	4620      	mov	r0, r4
 80140e6:	4629      	mov	r1, r5
 80140e8:	f7ec fa7e 	bl	80005e8 <__aeabi_dmul>
 80140ec:	4602      	mov	r2, r0
 80140ee:	460b      	mov	r3, r1
 80140f0:	4620      	mov	r0, r4
 80140f2:	4629      	mov	r1, r5
 80140f4:	f7ec f8c2 	bl	800027c <__adddf3>
 80140f8:	4604      	mov	r4, r0
 80140fa:	460d      	mov	r5, r1
 80140fc:	ec45 4b10 	vmov	d0, r4, r5
 8014100:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014104:	2d00      	cmp	r5, #0
 8014106:	dc0e      	bgt.n	8014126 <__ieee754_sqrt+0x56>
 8014108:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801410c:	4322      	orrs	r2, r4
 801410e:	d0f5      	beq.n	80140fc <__ieee754_sqrt+0x2c>
 8014110:	b19d      	cbz	r5, 801413a <__ieee754_sqrt+0x6a>
 8014112:	4622      	mov	r2, r4
 8014114:	4620      	mov	r0, r4
 8014116:	4629      	mov	r1, r5
 8014118:	f7ec f8ae 	bl	8000278 <__aeabi_dsub>
 801411c:	4602      	mov	r2, r0
 801411e:	460b      	mov	r3, r1
 8014120:	f7ec fb8c 	bl	800083c <__aeabi_ddiv>
 8014124:	e7e8      	b.n	80140f8 <__ieee754_sqrt+0x28>
 8014126:	152a      	asrs	r2, r5, #20
 8014128:	d115      	bne.n	8014156 <__ieee754_sqrt+0x86>
 801412a:	2000      	movs	r0, #0
 801412c:	e009      	b.n	8014142 <__ieee754_sqrt+0x72>
 801412e:	0acb      	lsrs	r3, r1, #11
 8014130:	3a15      	subs	r2, #21
 8014132:	0549      	lsls	r1, r1, #21
 8014134:	2b00      	cmp	r3, #0
 8014136:	d0fa      	beq.n	801412e <__ieee754_sqrt+0x5e>
 8014138:	e7f7      	b.n	801412a <__ieee754_sqrt+0x5a>
 801413a:	462a      	mov	r2, r5
 801413c:	e7fa      	b.n	8014134 <__ieee754_sqrt+0x64>
 801413e:	005b      	lsls	r3, r3, #1
 8014140:	3001      	adds	r0, #1
 8014142:	02dc      	lsls	r4, r3, #11
 8014144:	d5fb      	bpl.n	801413e <__ieee754_sqrt+0x6e>
 8014146:	1e44      	subs	r4, r0, #1
 8014148:	1b12      	subs	r2, r2, r4
 801414a:	f1c0 0420 	rsb	r4, r0, #32
 801414e:	fa21 f404 	lsr.w	r4, r1, r4
 8014152:	4323      	orrs	r3, r4
 8014154:	4081      	lsls	r1, r0
 8014156:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801415a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 801415e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014162:	07d2      	lsls	r2, r2, #31
 8014164:	bf5c      	itt	pl
 8014166:	005b      	lslpl	r3, r3, #1
 8014168:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801416c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014170:	bf58      	it	pl
 8014172:	0049      	lslpl	r1, r1, #1
 8014174:	2600      	movs	r6, #0
 8014176:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801417a:	107f      	asrs	r7, r7, #1
 801417c:	0049      	lsls	r1, r1, #1
 801417e:	2016      	movs	r0, #22
 8014180:	4632      	mov	r2, r6
 8014182:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8014186:	1915      	adds	r5, r2, r4
 8014188:	429d      	cmp	r5, r3
 801418a:	bfde      	ittt	le
 801418c:	192a      	addle	r2, r5, r4
 801418e:	1b5b      	suble	r3, r3, r5
 8014190:	1936      	addle	r6, r6, r4
 8014192:	0fcd      	lsrs	r5, r1, #31
 8014194:	3801      	subs	r0, #1
 8014196:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801419a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801419e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80141a2:	d1f0      	bne.n	8014186 <__ieee754_sqrt+0xb6>
 80141a4:	4605      	mov	r5, r0
 80141a6:	2420      	movs	r4, #32
 80141a8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80141ac:	4293      	cmp	r3, r2
 80141ae:	eb0c 0e00 	add.w	lr, ip, r0
 80141b2:	dc02      	bgt.n	80141ba <__ieee754_sqrt+0xea>
 80141b4:	d113      	bne.n	80141de <__ieee754_sqrt+0x10e>
 80141b6:	458e      	cmp	lr, r1
 80141b8:	d811      	bhi.n	80141de <__ieee754_sqrt+0x10e>
 80141ba:	f1be 0f00 	cmp.w	lr, #0
 80141be:	eb0e 000c 	add.w	r0, lr, ip
 80141c2:	da3f      	bge.n	8014244 <__ieee754_sqrt+0x174>
 80141c4:	2800      	cmp	r0, #0
 80141c6:	db3d      	blt.n	8014244 <__ieee754_sqrt+0x174>
 80141c8:	f102 0801 	add.w	r8, r2, #1
 80141cc:	1a9b      	subs	r3, r3, r2
 80141ce:	458e      	cmp	lr, r1
 80141d0:	bf88      	it	hi
 80141d2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80141d6:	eba1 010e 	sub.w	r1, r1, lr
 80141da:	4465      	add	r5, ip
 80141dc:	4642      	mov	r2, r8
 80141de:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80141e2:	3c01      	subs	r4, #1
 80141e4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80141e8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80141ec:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80141f0:	d1dc      	bne.n	80141ac <__ieee754_sqrt+0xdc>
 80141f2:	4319      	orrs	r1, r3
 80141f4:	d01b      	beq.n	801422e <__ieee754_sqrt+0x15e>
 80141f6:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8014274 <__ieee754_sqrt+0x1a4>
 80141fa:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8014278 <__ieee754_sqrt+0x1a8>
 80141fe:	e9da 0100 	ldrd	r0, r1, [sl]
 8014202:	e9db 2300 	ldrd	r2, r3, [fp]
 8014206:	f7ec f837 	bl	8000278 <__aeabi_dsub>
 801420a:	e9da 8900 	ldrd	r8, r9, [sl]
 801420e:	4602      	mov	r2, r0
 8014210:	460b      	mov	r3, r1
 8014212:	4640      	mov	r0, r8
 8014214:	4649      	mov	r1, r9
 8014216:	f7ec fc63 	bl	8000ae0 <__aeabi_dcmple>
 801421a:	b140      	cbz	r0, 801422e <__ieee754_sqrt+0x15e>
 801421c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8014220:	e9da 0100 	ldrd	r0, r1, [sl]
 8014224:	e9db 2300 	ldrd	r2, r3, [fp]
 8014228:	d10e      	bne.n	8014248 <__ieee754_sqrt+0x178>
 801422a:	3601      	adds	r6, #1
 801422c:	4625      	mov	r5, r4
 801422e:	1073      	asrs	r3, r6, #1
 8014230:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8014234:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8014238:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 801423c:	086b      	lsrs	r3, r5, #1
 801423e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8014242:	e759      	b.n	80140f8 <__ieee754_sqrt+0x28>
 8014244:	4690      	mov	r8, r2
 8014246:	e7c1      	b.n	80141cc <__ieee754_sqrt+0xfc>
 8014248:	f7ec f818 	bl	800027c <__adddf3>
 801424c:	e9da 8900 	ldrd	r8, r9, [sl]
 8014250:	4602      	mov	r2, r0
 8014252:	460b      	mov	r3, r1
 8014254:	4640      	mov	r0, r8
 8014256:	4649      	mov	r1, r9
 8014258:	f7ec fc38 	bl	8000acc <__aeabi_dcmplt>
 801425c:	b120      	cbz	r0, 8014268 <__ieee754_sqrt+0x198>
 801425e:	1cab      	adds	r3, r5, #2
 8014260:	bf08      	it	eq
 8014262:	3601      	addeq	r6, #1
 8014264:	3502      	adds	r5, #2
 8014266:	e7e2      	b.n	801422e <__ieee754_sqrt+0x15e>
 8014268:	1c6b      	adds	r3, r5, #1
 801426a:	f023 0501 	bic.w	r5, r3, #1
 801426e:	e7de      	b.n	801422e <__ieee754_sqrt+0x15e>
 8014270:	7ff00000 	.word	0x7ff00000
 8014274:	080147d0 	.word	0x080147d0
 8014278:	080147c8 	.word	0x080147c8

0801427c <_init>:
 801427c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801427e:	bf00      	nop
 8014280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014282:	bc08      	pop	{r3}
 8014284:	469e      	mov	lr, r3
 8014286:	4770      	bx	lr

08014288 <_fini>:
 8014288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801428a:	bf00      	nop
 801428c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801428e:	bc08      	pop	{r3}
 8014290:	469e      	mov	lr, r3
 8014292:	4770      	bx	lr
